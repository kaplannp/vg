!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	statistics.hpp	/^    T A() const {$/;"	f	class:vg::truncated_normal_distribution
ABSENT_SCORE	recombinator.cpp	/^constexpr double Recombinator::ABSENT_SCORE;$/;"	m	class:vg::Recombinator	file:
ABSENT_SCORE	recombinator.hpp	/^    constexpr static double ABSENT_SCORE = 0.8;$/;"	m	class:vg::Recombinator
ALGORITHM_DEFAULT	subcommand/convert_main.cpp	/^const algorithm_type ALGORITHM_DEFAULT = algorithm_auto;$/;"	v
ALIGNMENT_EMITTER_FLAG_HTS_PRUNE_SUSPICIOUS_ANCHORS	hts_alignment_emitter.hpp	/^    ALIGNMENT_EMITTER_FLAG_HTS_PRUNE_SUSPICIOUS_ANCHORS = 4,$/;"	e	enum:vg::alignment_emitter_flags_t
ALIGNMENT_EMITTER_FLAG_HTS_RAW	hts_alignment_emitter.hpp	/^    ALIGNMENT_EMITTER_FLAG_HTS_RAW = 1,$/;"	e	enum:vg::alignment_emitter_flags_t
ALIGNMENT_EMITTER_FLAG_HTS_SPLICED	hts_alignment_emitter.hpp	/^    ALIGNMENT_EMITTER_FLAG_HTS_SPLICED = 2,$/;"	e	enum:vg::alignment_emitter_flags_t
ALIGNMENT_EMITTER_FLAG_NONE	hts_alignment_emitter.hpp	/^    ALIGNMENT_EMITTER_FLAG_NONE = 0,$/;"	e	enum:vg::alignment_emitter_flags_t
ALIGNMENT_EMITTER_FLAG_VG_USE_SEGMENT_NAMES	hts_alignment_emitter.hpp	/^    ALIGNMENT_EMITTER_FLAG_VG_USE_SEGMENT_NAMES = 8$/;"	e	enum:vg::alignment_emitter_flags_t
APPROXIMATE_JOBS	recombinator.cpp	/^constexpr size_t HaplotypePartitioner::APPROXIMATE_JOBS;$/;"	m	class:vg::HaplotypePartitioner	file:
APPROXIMATE_JOBS	recombinator.hpp	/^    constexpr static size_t APPROXIMATE_JOBS = 32;$/;"	m	class:vg::HaplotypePartitioner
AT_LEAST_ONE_PRECISION	statistics.hpp	/^constexpr static size_t AT_LEAST_ONE_PRECISION = 8; $/;"	m	namespace:vg
AbstractReadSampler	sampler.hpp	/^    inline AbstractReadSampler(PathPositionHandleGraph& graph) :$/;"	f	class:vg::AbstractReadSampler
AbstractReadSampler	sampler.hpp	/^class AbstractReadSampler {$/;"	c	namespace:vg
Adaptive	genotyper.hpp	/^    enum TraversalAlg { Reads, Exhaustive, Representative, Adaptive };$/;"	e	enum:vg::Genotyper::TraversalAlg
Adaptive	mapper.hpp	/^enum MappingQualityMethod { Approx, Exact, Adaptive, None };$/;"	e	enum:vg::MappingQualityMethod
Affinity	genotyper.hpp	/^        Affinity(double affinity, bool is_reverse) : consistent(affinity == 1), $/;"	f	struct:vg::Genotyper::Affinity
Affinity	genotyper.hpp	/^    struct Affinity {$/;"	s	class:vg::Genotyper
AliasGraph	index_registry.hpp	/^class AliasGraph {$/;"	c	namespace:vg
Aligner	aligner.cpp	/^Aligner::Aligner(const int8_t* _score_matrix,$/;"	f	class:vg::Aligner
Aligner	aligner.hpp	/^    class Aligner : public GSSWAligner {$/;"	c	namespace:vg
AlignerClient	aligner.cpp	/^AlignerClient::AlignerClient(double gc_content_estimate) : gc_content_estimate(gc_content_estimate) {$/;"	f	class:vg::AlignerClient
AlignerClient	aligner.hpp	/^    class AlignerClient {$/;"	c	namespace:vg
AlignmentChainModel	mapper.cpp	/^AlignmentChainModel::AlignmentChainModel($/;"	f	class:vg::AlignmentChainModel
AlignmentChainModel	mapper.hpp	/^class AlignmentChainModel {$/;"	c	namespace:vg
AlignmentChainModelVertex	mapper.hpp	/^class AlignmentChainModelVertex {$/;"	c	namespace:vg
AlignmentValidity	alignment.hpp	/^struct AlignmentValidity {$/;"	s	namespace:vg
AltTracebackStack	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::AltTracebackStack::AltTracebackStack(const HandleGraph& graph,$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
AltTracebackStack	banded_global_aligner.hpp	/^    class BandedGlobalAligner<IntType>::AltTracebackStack {$/;"	c	class:vg::BandedGlobalAligner
Anchor	algorithms/chain_items.hpp	/^    inline Anchor(size_t read_start, const pos_t& graph_start, size_t length, int score) : start(read_start), size(length), pos(graph_start), points(score) {$/;"	f	class:vg::algorithms::Anchor
Anchor	algorithms/chain_items.hpp	/^class Anchor {$/;"	c	namespace:vg::algorithms
Annotation	annotation.hpp	/^struct Annotation {$/;"	s	namespace:vg
AppendHaplotypeCommand	genome_state.hpp	/^struct AppendHaplotypeCommand : public GenomeStateCommand {$/;"	s	namespace:vg
Approx	mapper.hpp	/^enum MappingQualityMethod { Approx, Exact, Adaptive, None };$/;"	e	enum:vg::MappingQualityMethod
Arg	unittest/catch.hpp	/^    class Arg : public ParserRefImpl<Arg> {$/;"	c	namespace:Catch
ArgSpec	subcommand/options.hpp	/^    ArgSpec(const std::string& option, T Receiver::*dest, const T& default_value, const std::string& help, const ValidatorFunction<T>& validator) : ArgSpec(option, '\\0', dest, default_value, help, validator) {$/;"	f	struct:vg::subcommand::ArgSpec
ArgSpec	subcommand/options.hpp	/^    ArgSpec(const std::string& option, char short_option, T Receiver::*dest, const T& default_value, const std::string& help,  const ValidatorFunction<T>& validator) : BaseArgSpec<Receiver>(option, short_option, help), dest(dest), default_value(default_value), validator(validator) {$/;"	f	struct:vg::subcommand::ArgSpec
ArgSpec	subcommand/options.hpp	/^struct ArgSpec : public BaseArgSpec<Receiver> {$/;"	s	namespace:vg::subcommand
AssertionInfo	unittest/catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AugmentedGraph	genotypekit.hpp	/^struct AugmentedGraph {$/;"	s	namespace:vg
AutoReg	unittest/catch.hpp	/^struct AutoReg : NonCopyable {$/;"	s	namespace:Catch
BABuilder	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::BABuilder::BABuilder(Alignment& alignment) :$/;"	f	class:vg::BandedGlobalAligner::BABuilder
BABuilder	banded_global_aligner.hpp	/^    class BandedGlobalAligner<IntType>::BABuilder {$/;"	c	class:vg::BandedGlobalAligner
BACKWARD_HAS_DW	crash.cpp	48;"	d	file:
BAM	multipath_alignment_emitter.hpp	/^    enum output_format_t {GAMP, GAM, GAF, BAM, SAM, CRAM};$/;"	e	enum:vg::MultipathAlignmentEmitter::output_format_t
BAM_DNA_LOOKUP	alignment.hpp	/^const char* const BAM_DNA_LOOKUP = "=ACMGRSVTWYHKDBN";$/;"	m	namespace:vg
BAMatrix	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::BAMatrix::BAMatrix(Alignment& alignment, handle_t node, int64_t top_diag, int64_t bottom_diag,$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
BAMatrix	banded_global_aligner.hpp	/^    class BandedGlobalAligner<IntType>::BAMatrix {$/;"	c	class:vg::BandedGlobalAligner
BBEdgeHash	clip.cpp	/^struct BBEdgeHash {$/;"	s	namespace:vg	file:
BGZF_FOOTER_LENGTH	hts_alignment_emitter.cpp	/^const size_t HTSWriter::BGZF_FOOTER_LENGTH = 28;$/;"	m	class:vg::HTSWriter	file:
BGZF_FOOTER_LENGTH	hts_alignment_emitter.hpp	/^    static const size_t BGZF_FOOTER_LENGTH;$/;"	m	class:vg::HTSWriter
BREAKPOINT	filter.hpp	/^struct BREAKPOINT{$/;"	s	namespace:vg
BUILD_HOST	version.cpp	/^const string Version::BUILD_HOST = VG_BUILD_HOST;$/;"	m	class:vg::Version	file:
BUILD_HOST	version.hpp	/^    const static string BUILD_HOST;$/;"	m	class:vg::Version
BUILD_USER	version.cpp	/^const string Version::BUILD_USER = VG_BUILD_USER;$/;"	m	class:vg::Version	file:
BUILD_USER	version.hpp	/^    const static string BUILD_USER;$/;"	m	class:vg::Version
BackTranslatingAlignmentEmitter	back_translating_alignment_emitter.cpp	/^BackTranslatingAlignmentEmitter::BackTranslatingAlignmentEmitter(const NamedNodeBackTranslation* translation,$/;"	f	class:vg::BackTranslatingAlignmentEmitter
BackTranslatingAlignmentEmitter	back_translating_alignment_emitter.hpp	/^class BackTranslatingAlignmentEmitter : public vg::io::AlignmentEmitter {$/;"	c	namespace:vg
BandedGlobalAligner	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::BandedGlobalAligner(Alignment& alignment, const HandleGraph& g,$/;"	f	class:vg::BandedGlobalAligner
BandedGlobalAligner	banded_global_aligner.hpp	/^    class BandedGlobalAligner {$/;"	c	namespace:vg
BaseAligner	aligner.hpp	/^    class BaseAligner {$/;"	c	namespace:vg
BaseArgSpec	subcommand/options.hpp	/^    BaseArgSpec(const std::string& option, char short_option, const std::string& help) : option(option), help(help), short_option(short_option), option_id(short_option != '\\0' ? short_option : get_option_id()) {$/;"	f	struct:vg::subcommand::BaseArgSpec
BaseArgSpec	subcommand/options.hpp	/^    BaseArgSpec(const std::string& option, const std::string& help) : BaseArgSpec(option, '\\0', help) {$/;"	f	struct:vg::subcommand::BaseArgSpec
BaseArgSpec	subcommand/options.hpp	/^struct BaseArgSpec : public TickChainLink {$/;"	s	namespace:vg::subcommand
BaseMapper	mapper.cpp	/^BaseMapper::BaseMapper(PathPositionHandleGraph* xidex,$/;"	f	class:vg::BaseMapper
BaseMapper	mapper.cpp	/^BaseMapper::BaseMapper(void) : BaseMapper(nullptr, nullptr, nullptr) {$/;"	f	class:vg::BaseMapper
BaseMapper	mapper.hpp	/^class BaseMapper : public AlignerClient, public PairedEndMapper {$/;"	c	namespace:vg
BaseOption	option.hpp	/^    BaseOption(Configurable* owner, const string& long_opt, const string& short_opts, const Value& default_value,$/;"	f	class:vg::BaseOption
BaseOption	option.hpp	/^class BaseOption : public OptionInterface {$/;"	c	namespace:vg
BaseOptionGroup	subcommand/options.hpp	/^struct BaseOptionGroup : public TickChainLink {$/;"	s	namespace:vg::subcommand
BaseValuation	subcommand/options.cpp	/^BaseValuation::BaseValuation(const std::string& option) : option(option) {$/;"	f	class:vg::subcommand::BaseValuation
BaseValuation	subcommand/options.hpp	/^struct BaseValuation {$/;"	s	namespace:vg::subcommand
Basic	index_registry.hpp	/^    enum Verbosity {None = 0, Basic = 1, Debug = 2};$/;"	e	enum:vg::IndexingParameters::Verbosity
BenchmarkResult	benchmark.hpp	/^struct BenchmarkResult {$/;"	s	namespace:vg
BitString	stream_index.cpp	/^BitString::BitString() : BitString(0, 0) {$/;"	f	class:vg::BitString
BitString	stream_index.cpp	/^BitString::BitString(uint64_t bits, size_t length) : bits(bits), bit_length(length) {$/;"	f	class:vg::BitString
BitString	stream_index.hpp	/^class BitString {$/;"	c	namespace:vg
BitStringTree	stream_index.hpp	/^class BitStringTree {$/;"	c	namespace:vg
Bool	multipath_alignment.hpp	/^        enum anno_type_t {Null = 0, Double = 2, Bool = 3, String = 4};$/;"	e	enum:vg::multipath_alignment_t::anno_type_t
CATCH_ARC_ENABLED	unittest/catch.hpp	1506;"	d
CATCH_ARC_STRONG	unittest/catch.hpp	1524;"	d
CATCH_ARC_STRONG	unittest/catch.hpp	1540;"	d
CATCH_BREAK_INTO_DEBUGGER	unittest/catch.hpp	7988;"	d
CATCH_CATCH_ALL	unittest/catch.hpp	455;"	d
CATCH_CATCH_ANON	unittest/catch.hpp	456;"	d
CATCH_CLARA_CONFIG_CONSOLE_WIDTH	unittest/catch.hpp	8437;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	unittest/catch.hpp	8414;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	unittest/catch.hpp	8416;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	unittest/catch.hpp	8441;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	unittest/catch.hpp	8471;"	d
CATCH_CONFIG_ALL_PARTS	unittest/catch.hpp	51;"	d
CATCH_CONFIG_ANDROID_LOGWRITE	unittest/catch.hpp	409;"	d
CATCH_CONFIG_COLOUR_NONE	unittest/catch.hpp	200;"	d
CATCH_CONFIG_COLOUR_NONE	unittest/catch.hpp	246;"	d
CATCH_CONFIG_COLOUR_NONE	unittest/catch.hpp	309;"	d
CATCH_CONFIG_CONSOLE_WIDTH	unittest/catch.hpp	5266;"	d
CATCH_CONFIG_COUNTER	unittest/catch.hpp	354;"	d
CATCH_CONFIG_CPP11_TO_STRING	unittest/catch.hpp	369;"	d
CATCH_CONFIG_CPP17_BYTE	unittest/catch.hpp	385;"	d
CATCH_CONFIG_CPP17_OPTIONAL	unittest/catch.hpp	373;"	d
CATCH_CONFIG_CPP17_STRING_VIEW	unittest/catch.hpp	377;"	d
CATCH_CONFIG_CPP17_VARIANT	unittest/catch.hpp	381;"	d
CATCH_CONFIG_DEFAULT_REPORTER	unittest/catch.hpp	5308;"	d
CATCH_CONFIG_DEFAULT_REPORTER	unittest/catch.hpp	5311;"	d
CATCH_CONFIG_DISABLE_EXCEPTIONS	unittest/catch.hpp	397;"	d
CATCH_CONFIG_DISABLE_MATCHERS	unittest/catch.hpp	59;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	unittest/catch.hpp	1876;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	unittest/catch.hpp	62;"	d
CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER	unittest/catch.hpp	1877;"	d
CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER	unittest/catch.hpp	1873;"	d
CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER	unittest/catch.hpp	1874;"	d
CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER	unittest/catch.hpp	1875;"	d
CATCH_CONFIG_EXTERNAL_INTERFACES	unittest/catch.hpp	57;"	d
CATCH_CONFIG_GLOBAL_NEXTAFTER	unittest/catch.hpp	413;"	d
CATCH_CONFIG_NEW_CAPTURE	unittest/catch.hpp	393;"	d
CATCH_CONFIG_NO_CPP17_VARIANT	unittest/catch.hpp	343;"	d
CATCH_CONFIG_POLYFILL_ISNAN	unittest/catch.hpp	401;"	d
CATCH_CONFIG_POSIX_SIGNALS	unittest/catch.hpp	361;"	d
CATCH_CONFIG_RUNNER	subcommand/test_main.cpp	15;"	d	file:
CATCH_CONFIG_RUNNER	unittest/support/driver.cpp	1;"	d	file:
CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	unittest/catch.hpp	464;"	d
CATCH_CONFIG_USE_ASYNC	unittest/catch.hpp	405;"	d
CATCH_CONFIG_WCHAR	unittest/catch.hpp	365;"	d
CATCH_CONFIG_WINDOWS_SEH	unittest/catch.hpp	357;"	d
CATCH_CPP14_OR_GREATER	unittest/catch.hpp	129;"	d
CATCH_CPP17_OR_GREATER	unittest/catch.hpp	133;"	d
CATCH_DEFER	unittest/catch.hpp	713;"	d
CATCH_EMPTY	unittest/catch.hpp	712;"	d
CATCH_ENFORCE	unittest/catch.hpp	3906;"	d
CATCH_ERROR	unittest/catch.hpp	3900;"	d
CATCH_IMPL	unittest/catch.hpp	50;"	d
CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE	unittest/catch.hpp	207;"	d
CATCH_INTERNAL_CONFIG_COUNTER	unittest/catch.hpp	298;"	d
CATCH_INTERNAL_CONFIG_CPP17_BYTE	unittest/catch.hpp	332;"	d
CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL	unittest/catch.hpp	325;"	d
CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW	unittest/catch.hpp	320;"	d
CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED	unittest/catch.hpp	275;"	d
CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER	unittest/catch.hpp	313;"	d
CATCH_INTERNAL_CONFIG_NEW_CAPTURE	unittest/catch.hpp	389;"	d
CATCH_INTERNAL_CONFIG_NO_ASYNC	unittest/catch.hpp	308;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	unittest/catch.hpp	206;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	unittest/catch.hpp	234;"	d
CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE	unittest/catch.hpp	219;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	unittest/catch.hpp	195;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	unittest/catch.hpp	199;"	d
CATCH_INTERNAL_CONFIG_NO_WCHAR	unittest/catch.hpp	281;"	d
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH	unittest/catch.hpp	213;"	d
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH	unittest/catch.hpp	307;"	d
CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN	unittest/catch.hpp	287;"	d
CATCH_INTERNAL_CONFIG_POSIX_SIGNALS	unittest/catch.hpp	189;"	d
CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	unittest/catch.hpp	257;"	d
CATCH_INTERNAL_CONFIG_USE_ASYNC	unittest/catch.hpp	269;"	d
CATCH_INTERNAL_ERROR	unittest/catch.hpp	3897;"	d
CATCH_INTERNAL_IGNORE_BUT_WARN	unittest/catch.hpp	144;"	d
CATCH_INTERNAL_IGNORE_BUT_WARN	unittest/catch.hpp	165;"	d
CATCH_INTERNAL_IGNORE_BUT_WARN	unittest/catch.hpp	440;"	d
CATCH_INTERNAL_LINEINFO	unittest/catch.hpp	543;"	d
CATCH_INTERNAL_START_WARNINGS_SUPPRESSION	unittest/catch.hpp	141;"	d
CATCH_INTERNAL_START_WARNINGS_SUPPRESSION	unittest/catch.hpp	150;"	d
CATCH_INTERNAL_START_WARNINGS_SUPPRESSION	unittest/catch.hpp	261;"	d
CATCH_INTERNAL_START_WARNINGS_SUPPRESSION	unittest/catch.hpp	419;"	d
CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION	unittest/catch.hpp	142;"	d
CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION	unittest/catch.hpp	151;"	d
CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION	unittest/catch.hpp	262;"	d
CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION	unittest/catch.hpp	422;"	d
CATCH_INTERNAL_STRINGIFY	unittest/catch.hpp	2680;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	unittest/catch.hpp	168;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	unittest/catch.hpp	428;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	unittest/catch.hpp	172;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	unittest/catch.hpp	425;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	unittest/catch.hpp	181;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	unittest/catch.hpp	444;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	unittest/catch.hpp	450;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	unittest/catch.hpp	175;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	unittest/catch.hpp	431;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	unittest/catch.hpp	178;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	unittest/catch.hpp	434;"	d
CATCH_MAKE_MSG	unittest/catch.hpp	3894;"	d
CATCH_PLATFORM_IPHONE	unittest/catch.hpp	77;"	d
CATCH_PLATFORM_LINUX	unittest/catch.hpp	81;"	d
CATCH_PLATFORM_MAC	unittest/catch.hpp	75;"	d
CATCH_PLATFORM_WINDOWS	unittest/catch.hpp	84;"	d
CATCH_PLATFORM_WINDOWS	unittest/catch.hpp	8801;"	d
CATCH_RECURSE	unittest/catch.hpp	704;"	d
CATCH_RECURSE	unittest/catch.hpp	706;"	d
CATCH_RECURSION_LEVEL0	unittest/catch.hpp	693;"	d
CATCH_RECURSION_LEVEL1	unittest/catch.hpp	694;"	d
CATCH_RECURSION_LEVEL2	unittest/catch.hpp	695;"	d
CATCH_RECURSION_LEVEL3	unittest/catch.hpp	696;"	d
CATCH_RECURSION_LEVEL4	unittest/catch.hpp	697;"	d
CATCH_RECURSION_LEVEL5	unittest/catch.hpp	698;"	d
CATCH_RECURSION_LEVEL6	unittest/catch.hpp	703;"	d
CATCH_REC_END	unittest/catch.hpp	709;"	d
CATCH_REC_GET_END	unittest/catch.hpp	717;"	d
CATCH_REC_GET_END1	unittest/catch.hpp	716;"	d
CATCH_REC_GET_END2	unittest/catch.hpp	715;"	d
CATCH_REC_LIST	unittest/catch.hpp	735;"	d
CATCH_REC_LIST0	unittest/catch.hpp	722;"	d
CATCH_REC_LIST0_UD	unittest/catch.hpp	726;"	d
CATCH_REC_LIST1	unittest/catch.hpp	723;"	d
CATCH_REC_LIST1_UD	unittest/catch.hpp	727;"	d
CATCH_REC_LIST2	unittest/catch.hpp	724;"	d
CATCH_REC_LIST2_UD	unittest/catch.hpp	728;"	d
CATCH_REC_LIST_UD	unittest/catch.hpp	733;"	d
CATCH_REC_NEXT	unittest/catch.hpp	720;"	d
CATCH_REC_NEXT0	unittest/catch.hpp	718;"	d
CATCH_REC_NEXT1	unittest/catch.hpp	719;"	d
CATCH_REC_OUT	unittest/catch.hpp	710;"	d
CATCH_REGISTER_ENUM	unittest/catch.hpp	2182;"	d
CATCH_REGISTER_LISTENER	unittest/catch.hpp	6100;"	d
CATCH_REGISTER_REPORTER	unittest/catch.hpp	6094;"	d
CATCH_REGISTER_TAG_ALIAS	unittest/catch.hpp	555;"	d
CATCH_RUNTIME_ERROR	unittest/catch.hpp	3903;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	unittest/catch.hpp	8413;"	d
CATCH_TRAP	unittest/catch.hpp	7950;"	d
CATCH_TRY	unittest/catch.hpp	454;"	d
CATCH_UNSAFE_UNRETAINED	unittest/catch.hpp	1523;"	d
CATCH_UNSAFE_UNRETAINED	unittest/catch.hpp	1539;"	d
CATCH_VERSION_MAJOR	unittest/catch.hpp	16;"	d
CATCH_VERSION_MINOR	unittest/catch.hpp	17;"	d
CATCH_VERSION_PATCH	unittest/catch.hpp	18;"	d
CHAIN_COMPONENT_MASK	snarl_distance_index.hpp	/^    const static code_type CHAIN_COMPONENT_MASK = (static_cast<code_type>(1) << CHAIN_COMPONENT_WIDTH) - 1;$/;"	m	struct:vg::MIPayload
CHAIN_COMPONENT_OFFSET	snarl_distance_index.hpp	/^    const static size_t CHAIN_COMPONENT_OFFSET = 0;$/;"	m	struct:vg::MIPayload
CHAIN_COMPONENT_WIDTH	snarl_distance_index.hpp	/^    const static size_t CHAIN_COMPONENT_WIDTH = 8;$/;"	m	struct:vg::MIPayload
CLARA_CONFIG_MAIN	unittest/catch.hpp	92;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	unittest/catch.hpp	91;"	d
CLARA_CONFIG_OPTIONAL_TYPE	unittest/catch.hpp	8448;"	d
COMPILER	version.cpp	/^const string Version::COMPILER = VG_COMPILER_VERSION;$/;"	m	class:vg::Version	file:
COMPILER	version.hpp	/^    const static string COMPILER;$/;"	m	class:vg::Version
COMPLEMENTARY_NUCLEOTIDES	flow_sort.hpp	/^static const map<char, char> COMPLEMENTARY_NUCLEOTIDES = {$/;"	m	namespace:vg
CONTRACTINGGRAPH_HPP	contracting_graph.hpp	2;"	d
CORRECT	funnel.hpp	/^        CORRECT = 2$/;"	m	class:vg::Funnel::State
COVERAGE	recombinator.cpp	/^constexpr size_t Recombinator::COVERAGE;$/;"	m	class:vg::Recombinator	file:
COVERAGE	recombinator.hpp	/^    constexpr static size_t COVERAGE = 0;$/;"	m	class:vg::Recombinator
CRAM	multipath_alignment_emitter.hpp	/^    enum output_format_t {GAMP, GAM, GAF, BAM, SAM, CRAM};$/;"	e	enum:vg::MultipathAlignmentEmitter::output_format_t
CacheEntry	indexed_vg.cpp	/^IndexedVG::CacheEntry::CacheEntry(cursor_t& cursor) {$/;"	f	class:vg::IndexedVG::CacheEntry
CacheEntry	indexed_vg.hpp	/^    struct CacheEntry {$/;"	s	class:vg::IndexedVG
CachedPackedTraversalSupportFinder	traversal_support.cpp	/^CachedPackedTraversalSupportFinder::CachedPackedTraversalSupportFinder(const Packer& packer, SnarlManager& snarl_manager, size_t cache_size) :$/;"	f	class:vg::CachedPackedTraversalSupportFinder
CachedPackedTraversalSupportFinder	traversal_support.hpp	/^class CachedPackedTraversalSupportFinder : public PackedTraversalSupportFinder {$/;"	c	namespace:vg
CactusSide	cactus.hpp	/^struct CactusSide {$/;"	s	namespace:vg
CactusSnarlFinder	cactus_snarl_finder.cpp	/^CactusSnarlFinder::CactusSnarlFinder(const PathHandleGraph& graph, const string& hint_path) :$/;"	f	class:vg::CactusSnarlFinder
CactusSnarlFinder	cactus_snarl_finder.hpp	/^class CactusSnarlFinder : public SnarlFinder {$/;"	c	namespace:vg
CallInfo	snarl_caller.hpp	/^    struct CallInfo {$/;"	s	class:vg::SnarlCaller
CallRecord	graph_caller.hpp	/^    struct CallRecord {$/;"	s	class:vg::NestedFlowCaller
CallTable	graph_caller.hpp	/^    typedef map<Snarl, CallRecord, NestedCachedPackedTraversalSupportFinder::snarl_less> CallTable;$/;"	t	class:vg::NestedFlowCaller
CaseSensitive	unittest/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
Catch	unittest/catch.hpp	/^namespace Catch {$/;"	n
Catch	unittest/genotypekit.cpp	/^namespace Catch {$/;"	n	file:
Catch_global_namespace_dummy	unittest/catch.hpp	/^struct Catch_global_namespace_dummy {};$/;"	s
ChainIterator	snarls.hpp	/^struct ChainIterator {$/;"	s	namespace:vg
Choice	unittest/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
Cluster	minimizer_mapper.hpp	/^    typedef SnarlDistanceIndexClusterer::Cluster Cluster;$/;"	t	class:vg::MinimizerMapper
Cluster	snarl_seed_clusterer.hpp	/^        struct Cluster {$/;"	s	class:vg::SnarlDistanceIndexClusterer
ClusterHead	snarl_seed_clusterer.hpp	/^            inline ClusterHead() {}$/;"	f	struct:vg::SnarlDistanceIndexClusterer::ClusterHead
ClusterHead	snarl_seed_clusterer.hpp	/^            inline ClusterHead(const size_t& read_num, const size_t& cluster_num, $/;"	f	struct:vg::SnarlDistanceIndexClusterer::ClusterHead
ClusterHead	snarl_seed_clusterer.hpp	/^        struct ClusterHead {$/;"	s	class:vg::SnarlDistanceIndexClusterer
ClusteringProblem	snarl_seed_clusterer.hpp	/^            ClusteringProblem (vector<vector<SeedCache>*>* all_seeds, $/;"	f	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
ClusteringProblem	snarl_seed_clusterer.hpp	/^        struct ClusteringProblem {$/;"	s	class:vg::SnarlDistanceIndexClusterer
Colors	colors.hpp	/^    Colors(int seed_val) {$/;"	f	class:vg::Colors
Colors	colors.hpp	/^    Colors(void) { };$/;"	f	class:vg::Colors
Colors	colors.hpp	/^class Colors {$/;"	c	namespace:vg
CommandCategory	subcommand/subcommand.hpp	/^enum CommandCategory {$/;"	g	namespace:vg::subcommand
CompletedTranscriptPath	transcriptome.cpp	/^CompletedTranscriptPath::CompletedTranscriptPath(const EditedTranscriptPath & edited_transcript_path_in) {$/;"	f	class:vg::CompletedTranscriptPath
CompletedTranscriptPath	transcriptome.cpp	/^CompletedTranscriptPath::CompletedTranscriptPath(const EditedTranscriptPath & edited_transcript_path_in, const HandleGraph & graph) {$/;"	f	class:vg::CompletedTranscriptPath
CompletedTranscriptPath	transcriptome.hpp	/^struct CompletedTranscriptPath : public TranscriptPath {$/;"	s	namespace:vg
ComponentMinDistanceClusterer	cluster.cpp	/^ComponentMinDistanceClusterer::ComponentMinDistanceClusterer(SnarlDistanceIndex* distance_index) : MinDistanceClusterer(distance_index) {$/;"	f	class:vg::ComponentMinDistanceClusterer
ComponentMinDistanceClusterer	cluster.hpp	/^class ComponentMinDistanceClusterer : public MinDistanceClusterer {$/;"	c	namespace:vg
ComposableParserImpl	unittest/catch.hpp	/^    class ComposableParserImpl : public ParserBase {$/;"	c	namespace:Catch
CompressString	zstdutil.cpp	/^int CompressString(const std::string& src, std::string& dst, int compressionlevel) {$/;"	f	namespace:zstdutil
Configurable	option.hpp	/^class Configurable {$/;"	c	namespace:vg
ConfigurableParser	option.cpp	/^ConfigurableParser::ConfigurableParser(const char* base_short_options, const struct option* base_long_options,$/;"	f	class:vg::ConfigurableParser
ConfigurableParser	option.hpp	/^class ConfigurableParser {$/;"	c	namespace:vg
ConsistencyCalculator	genotypekit.hpp	/^class ConsistencyCalculator {$/;"	c	namespace:vg
ConstructedChunk	constructor.hpp	/^struct ConstructedChunk {$/;"	s	namespace:vg
Constructor	constructor.hpp	/^class Constructor : public Progressive, public NameMapper {$/;"	c	namespace:vg
ContinueOnFailure	unittest/catch.hpp	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
ContractingGraph	contracting_graph.cpp	/^    ContractingGraph::ContractingGraph(Graph graph)$/;"	f	class:vg::ContractingGraph
ContractingGraph	contracting_graph.hpp	/^class ContractingGraph{$/;"	c	namespace:vg
ConvertedHashGraph	io/converted_hash_graph.hpp	/^class ConvertedHashGraph : public bdsg::HashGraph {$/;"	c	namespace:vg::io
Counts	readfilter.hpp	/^    Counts () : counts(FilterName::last, 0) {}$/;"	f	struct:vg::Counts
Counts	readfilter.hpp	/^struct Counts {$/;"	s	namespace:vg
DEFAULTCOMPRESSLEVEL	zstdutil.hpp	/^const int DEFAULTCOMPRESSLEVEL = 5;$/;"	m	namespace:zstdutil
DEFAULT_ITERATIONS	subcommand/minimizer_main.cpp	/^constexpr size_t DEFAULT_ITERATIONS = 3;$/;"	v
DEFAULT_K	recombinator.cpp	/^constexpr std::uint64_t Haplotypes::Header::DEFAULT_K;$/;"	m	class:vg::Haplotypes::Header	file:
DEFAULT_K	recombinator.hpp	/^        constexpr static std::uint64_t DEFAULT_K = 29;$/;"	m	struct:vg::Haplotypes::Header
DEFAULT_MAX_THREADS	subcommand/minimizer_main.cpp	/^constexpr int DEFAULT_MAX_THREADS = 16;$/;"	v
DEFAULT_PATH_WEIGHT	flow_sort.hpp	/^    static const size_t DEFAULT_PATH_WEIGHT = 5;$/;"	m	class:vg::FlowSort
DEFAULT_THRESHOLD	subcommand/minimizer_main.cpp	/^constexpr size_t DEFAULT_THRESHOLD = 500; \/\/ This should be Giraffe hard hit cap.$/;"	v
DEL	dozeu_interface.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon21	file:
DEL	qual_adj_xdrop_aligner.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon19	file:
DEL	xdrop_aligner.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon18	file:
DELETIONS	gbwt_extender.cpp	/^    constexpr static size_t DELETIONS = 2;  \/\/ characters in the graph but not in the sequence$/;"	m	struct:vg::WFANode	file:
DEPRECATED	subcommand/subcommand.hpp	/^    DEPRECATED$/;"	e	enum:vg::subcommand::CommandCategory
DEVELOPMENT	subcommand/subcommand.hpp	/^    DEVELOPMENT,$/;"	e	enum:vg::subcommand::CommandCategory
DPScoreComparator	cluster.hpp	/^    DPScoreComparator(const vector<HitNode>& nodes) : nodes(nodes) {}$/;"	f	struct:vg::MEMClusterer::DPScoreComparator
DPScoreComparator	cluster.hpp	/^struct MEMClusterer::DPScoreComparator {$/;"	s	class:vg::MEMClusterer
DP_column	haplotypes.hpp	/^  haplo_DP_column DP_column;$/;"	m	struct:haplo::haplo_DP
DZ_CIGAR_OP	dozeu_interface.cpp	25;"	d	file:
DZ_CIGAR_OP	qual_adj_xdrop_aligner.cpp	19;"	d	file:
DZ_CIGAR_OP	xdrop_aligner.cpp	20;"	d	file:
DZ_FULL_LENGTH_BONUS	dozeu_interface.cpp	15;"	d	file:
DZ_FULL_LENGTH_BONUS	qual_adj_xdrop_aligner.cpp	9;"	d	file:
DZ_FULL_LENGTH_BONUS	xdrop_aligner.cpp	10;"	d	file:
DZ_QUAL_ADJ	dozeu_interface.cpp	19;"	d	file:
DZ_QUAL_ADJ	qual_adj_xdrop_aligner.cpp	13;"	d	file:
DZ_QUAL_ADJ	xdrop_aligner.cpp	14;"	d	file:
DagifiedGraph	dagified_graph.cpp	/^    DagifiedGraph::DagifiedGraph(const HandleGraph* graph, size_t min_preserved_path_length,$/;"	f	class:vg::DagifiedGraph
DagifiedGraph	dagified_graph.hpp	/^    class DagifiedGraph : public ExpandingOverlayGraph {$/;"	c	namespace:vg
Debug	index_registry.hpp	/^    enum Verbosity {None = 0, Basic = 1, Debug = 2};$/;"	e	enum:vg::IndexingParameters::Verbosity
DecompressString	zstdutil.cpp	/^int DecompressString(const std::string& src, std::string& dst) {$/;"	f	namespace:zstdutil
Deconstructor	deconstructor.cpp	/^Deconstructor::Deconstructor() : VCFOutputCaller(""),$/;"	f	class:vg::Deconstructor
Deconstructor	deconstructor.hpp	/^class Deconstructor : public VCFOutputCaller {$/;"	c	namespace:vg
Deflection	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::AltTracebackStack::Deflection::Deflection(const int64_t from_node_id,$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack::Deflection
Deflection	banded_global_aligner.hpp	/^    class BandedGlobalAligner<IntType>::AltTracebackStack::Deflection {$/;"	c	class:vg::BandedGlobalAligner::AltTracebackStack
DeleteHaplotypeCommand	genome_state.hpp	/^struct DeleteHaplotypeCommand : public GenomeStateCommand {$/;"	s	namespace:vg
Deletion	unittest/gbwt_extender.cpp	/^    Deletion,$/;"	m	class:vg::unittest::__anon3::GraphBaseFate	file:
DeletionAligner	deletion_aligner.cpp	/^DeletionAligner::DeletionAligner(int8_t gap_open, int8_t gap_extension)$/;"	f	class:vg::DeletionAligner
DeletionAligner	deletion_aligner.hpp	/^class DeletionAligner {$/;"	c	namespace:vg
Detail	unittest/catch.hpp	/^    namespace Detail {$/;"	n	namespace:Catch
DiagramExplainer	explainer.cpp	/^DiagramExplainer::DiagramExplainer() : Explainer() {$/;"	f	class:vg::DiagramExplainer
DiagramExplainer	explainer.hpp	/^class DiagramExplainer : public Explainer {$/;"	c	namespace:vg
DidntThrowException	unittest/catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
DinucleotideMachine	dinucleotide_machine.cpp	/^DinucleotideMachine::DinucleotideMachine() {$/;"	f	class:vg::DinucleotideMachine
DinucleotideMachine	dinucleotide_machine.hpp	/^class DinucleotideMachine {$/;"	c	namespace:vg
DistanceHeuristic	cluster.hpp	/^class DistanceHeuristic {$/;"	c	namespace:vg
DotDumpExplainer	explainer.hpp	/^DotDumpExplainer<T>::DotDumpExplainer(const T& to_dump) : Explainer() {$/;"	f	class:vg::DotDumpExplainer
DotDumpExplainer	explainer.hpp	/^class DotDumpExplainer : public Explainer {$/;"	c	namespace:vg
Double	multipath_alignment.hpp	/^        enum anno_type_t {Null = 0, Double = 2, Bool = 3, String = 4};$/;"	e	enum:vg::multipath_alignment_t::anno_type_t
DozeuInterface	dozeu_interface.hpp	/^class DozeuInterface {$/;"	c	namespace:vg
DozeuPinningOverlay	dozeu_pinning_overlay.cpp	/^DozeuPinningOverlay::DozeuPinningOverlay(const HandleGraph* graph, bool preserve_sinks) : graph(graph), preserve_sinks(preserve_sinks) {$/;"	f	class:vg::DozeuPinningOverlay
DozeuPinningOverlay	dozeu_pinning_overlay.hpp	/^class DozeuPinningOverlay : public ExpandingOverlayGraph {$/;"	c	namespace:vg
Edge	algorithms/min_cut_graph.hpp	/^        struct Edge{$/;"	s	namespace:vg::algorithms
EdgeMapping	flow_sort.hpp	/^typedef std::map<id_t, std::vector<Edge*>> EdgeMapping;$/;"	t	namespace:vg
Edit	gbwt_extender.hpp	/^    enum Edit { match, mismatch, insertion, deletion };$/;"	g	struct:vg::WFAAlignment
EditedTranscriptPath	transcriptome.hpp	/^    EditedTranscriptPath(const string & transcript_name, const gbwt::size_type & haplotype_gbwt_id, const bool is_reference_in, const bool is_haplotype_in) : TranscriptPath(transcript_name, haplotype_gbwt_id, is_reference_in, is_haplotype_in) {}$/;"	f	struct:vg::EditedTranscriptPath
EditedTranscriptPath	transcriptome.hpp	/^    EditedTranscriptPath(const string & transcript_name, const string & embedded_path_name, const bool is_reference_in, const bool is_haplotype_in) : TranscriptPath(transcript_name, embedded_path_name, is_reference_in, is_haplotype_in) {}$/;"	f	struct:vg::EditedTranscriptPath
EditedTranscriptPath	transcriptome.hpp	/^struct EditedTranscriptPath : public TranscriptPath {$/;"	s	namespace:vg
EnumInfo	unittest/catch.hpp	/^        struct EnumInfo {$/;"	s	namespace:Catch::Detail
ErrorModel	gbwt_extender.hpp	/^    struct ErrorModel {$/;"	s	class:vg::WFAExtender
Event	gbwt_extender.hpp	/^        struct Event {$/;"	s	struct:vg::WFAExtender::ErrorModel
Exact	mapper.hpp	/^enum MappingQualityMethod { Approx, Exact, Adaptive, None };$/;"	e	enum:vg::MappingQualityMethod
Exception	unittest/catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
ExeName	unittest/catch.hpp	/^        ExeName() : m_name( std::make_shared<std::string>( "<executable>" ) ) {}$/;"	f	class:Catch::ExeName
ExeName	unittest/catch.hpp	/^        explicit ExeName( LambdaT const& lambda ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	unittest/catch.hpp	/^        explicit ExeName( std::string &ref ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	unittest/catch.hpp	/^    class ExeName : public ComposableParserImpl<ExeName> {$/;"	c	namespace:Catch
Exhaustive	genotyper.hpp	/^    enum TraversalAlg { Reads, Exhaustive, Representative, Adaptive };$/;"	e	enum:vg::Genotyper::TraversalAlg
ExhaustiveTraversalFinder	traversal_finder.cpp	/^ExhaustiveTraversalFinder::ExhaustiveTraversalFinder(const HandleGraph& graph, SnarlManager& snarl_manager,$/;"	f	class:vg::ExhaustiveTraversalFinder
ExhaustiveTraversalFinder	traversal_finder.hpp	/^class ExhaustiveTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
Exon	transcriptome.hpp	/^struct Exon {$/;"	s	namespace:vg
Explainer	explainer.cpp	/^Explainer::Explainer() : explanation_number(Explainer::next_explanation_number++) {$/;"	f	class:vg::Explainer
Explainer	explainer.hpp	/^class Explainer {$/;"	c	namespace:vg
ExplicitFailure	unittest/catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	unittest/catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
ExtraNodeGraph	extra_node_graph.cpp	/^ExtraNodeGraph::ExtraNodeGraph($/;"	f	class:vg::ExtraNodeGraph
ExtraNodeGraph	extra_node_graph.hpp	/^class ExtraNodeGraph : public HandleGraph {$/;"	c	namespace:vg
FCmp	incremental_subgraph.hpp	/^    struct FCmp {$/;"	s	class:vg::IncrementalSubgraph
FailureBit	unittest/catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FalseTest	unittest/catch.hpp	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FatalErrorCondition	unittest/catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
Feature	feature_set.hpp	/^    struct Feature {$/;"	s	class:vg::FeatureSet
FeatureSet	feature_set.hpp	/^class FeatureSet {$/;"	c	namespace:vg
Filter	filter.cpp	/^    Filter::Filter(){$/;"	f	class:vg::Filter
Filter	filter.hpp	/^class Filter{$/;"	c	namespace:vg
FilterName	readfilter.hpp	/^    enum FilterName { read = 0, wrong_name, wrong_refpos, excluded_feature, min_score, min_sec_score, max_overhang,$/;"	g	struct:vg::Counts
FilterPerformance	funnel.hpp	/^    struct FilterPerformance {$/;"	s	class:vg::Funnel::State
FixedGenotypePriorCalculator	genotypekit.hpp	/^class FixedGenotypePriorCalculator : public GenotypePriorCalculator {$/;"	c	namespace:vg
FlagArgSpec	subcommand/options.hpp	/^struct FlagArgSpec : public ValueArgSpec<bool, Receiver> {$/;"	s	namespace:vg::subcommand
Flags	unittest/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
FlatFileBackTranslation	flat_file_back_translation.cpp	/^FlatFileBackTranslation::FlatFileBackTranslation(std::istream& stream) {$/;"	f	class:vg::FlatFileBackTranslation
FlatFileBackTranslation	flat_file_back_translation.hpp	/^class FlatFileBackTranslation : public NamedNodeBackTranslation {$/;"	c	namespace:vg
FlowCaller	graph_caller.cpp	/^FlowCaller::FlowCaller(const PathPositionHandleGraph& graph,$/;"	f	class:vg::FlowCaller
FlowCaller	graph_caller.hpp	/^class FlowCaller : public GraphCaller, public VCFOutputCaller, public GAFOutputCaller {$/;"	c	namespace:vg
FlowSort	flow_sort.cpp	/^FlowSort::FlowSort(VG& vg):vg(vg) {$/;"	f	class:vg::FlowSort
FlowSort	flow_sort.hpp	/^class FlowSort {$/;"	c	namespace:vg
FlowTraversalFinder	traversal_finder.cpp	/^FlowTraversalFinder::FlowTraversalFinder(const HandleGraph& graph, SnarlManager& snarl_manager,$/;"	f	class:vg::FlowTraversalFinder
FlowTraversalFinder	traversal_finder.hpp	/^class FlowTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
Forward	multipath_mapper.hpp	/^        enum SpliceStrand {Undetermined, Forward, Reverse};$/;"	e	enum:vg::MultipathMapper::SpliceStrand
FragmentLengthDistribution	mapper.cpp	/^FragmentLengthDistribution::FragmentLengthDistribution() : FragmentLengthDistribution(0, 1, 0.5)$/;"	f	class:vg::FragmentLengthDistribution
FragmentLengthDistribution	mapper.cpp	/^FragmentLengthDistribution::FragmentLengthDistribution(size_t maximum_sample_size,$/;"	f	class:vg::FragmentLengthDistribution
FragmentLengthDistribution	mapper.hpp	/^class FragmentLengthDistribution {$/;"	c	namespace:vg
FragmentLengthStatistics	mapper.hpp	/^class FragmentLengthStatistics {$/;"	c	namespace:vg
Funnel	funnel.hpp	/^class Funnel {$/;"	c	namespace:vg
GAF	multipath_alignment_emitter.hpp	/^    enum output_format_t {GAMP, GAM, GAF, BAM, SAM, CRAM};$/;"	e	enum:vg::MultipathAlignmentEmitter::output_format_t
GAFOutputCaller	graph_caller.cpp	/^GAFOutputCaller::GAFOutputCaller(AlignmentEmitter* emitter, const string& sample_name, const vector<string>& ref_paths,$/;"	f	class:vg::GAFOutputCaller
GAFOutputCaller	graph_caller.hpp	/^class GAFOutputCaller {$/;"	c	namespace:vg
GAM	multipath_alignment_emitter.hpp	/^    enum output_format_t {GAMP, GAM, GAF, BAM, SAM, CRAM};$/;"	e	enum:vg::MultipathAlignmentEmitter::output_format_t
GAMP	multipath_alignment_emitter.hpp	/^    enum output_format_t {GAMP, GAM, GAF, BAM, SAM, CRAM};$/;"	e	enum:vg::MultipathAlignmentEmitter::output_format_t
GBWTConfig	subcommand/gbwt_main.cpp	/^    GBWTConfig() {$/;"	f	struct:GBWTConfig
GBWTConfig	subcommand/gbwt_main.cpp	/^struct GBWTConfig {$/;"	s	file:
GBWTHandler	gbwt_helper.hpp	/^struct GBWTHandler {$/;"	s	namespace:vg
GBWTScoreProvider	haplotypes.hpp	/^GBWTScoreProvider<GBWTType>::GBWTScoreProvider(GBWTType& index) : index(index) {$/;"	f	class:haplo::GBWTScoreProvider
GBWTScoreProvider	haplotypes.hpp	/^class GBWTScoreProvider : public ScoreProvider {$/;"	c	namespace:haplo
GBWTTraversalFinder	traversal_finder.cpp	/^GBWTTraversalFinder::GBWTTraversalFinder(const HandleGraph& graph, const gbwt::GBWT& gbwt) : $/;"	f	class:vg::GBWTTraversalFinder
GBWTTraversalFinder	traversal_finder.hpp	/^class GBWTTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
GBZGraph	gbzgraph.hpp	/^class GBZGraph : public bdsg::PathHandleGraphProxy<gbwtgraph::GBWTGraph> {$/;"	c	namespace:vg
GENERATE	unittest/catch.hpp	4100;"	d
GENERATE_COPY	unittest/catch.hpp	4104;"	d
GENERATE_REF	unittest/catch.hpp	4108;"	d
GFADuplicatePathError	algorithms/gfa_to_handle.cpp	/^GFADuplicatePathError::GFADuplicatePathError(const std::string& path_name) : GFAFormatError("Duplicate path " + path_name + " exists in graph") {$/;"	f	class:vg::algorithms::GFADuplicatePathError
GFADuplicatePathError	algorithms/gfa_to_handle.cpp	/^GFADuplicatePathError::GFADuplicatePathError(const std::string& path_name, const GFAParser::cursor_t& position, const char* parsing_state) : GFAFormatError("Duplicate path " + path_name + " exists in graph", position, parsing_state) {$/;"	f	class:vg::algorithms::GFADuplicatePathError
GFADuplicatePathError	algorithms/gfa_to_handle.hpp	/^struct GFADuplicatePathError : public GFAFormatError {$/;"	s	namespace:vg::algorithms
GFAFormatError	algorithms/gfa_to_handle.cpp	/^GFAFormatError::GFAFormatError(const string& message) : std::runtime_error(message) {$/;"	f	class:vg::algorithms::GFAFormatError
GFAFormatError	algorithms/gfa_to_handle.cpp	/^GFAFormatError::GFAFormatError(const string& message, const GFAParser::cursor_t& position, const char* parsing_state) : std::runtime_error(message + (parsing_state ? (" while " + std::string(parsing_state)) : "")), has_position(true), position(position) {$/;"	f	class:vg::algorithms::GFAFormatError
GFAFormatError	algorithms/gfa_to_handle.hpp	/^struct GFAFormatError : public std::runtime_error {$/;"	s	namespace:vg::algorithms
GFAHandleGraph	io/save_handle_graph.hpp	/^   GFAHandleGraph() : bdsg::PackedGraph() {}$/;"	f	class:vg::GFAHandleGraph
GFAHandleGraph	io/save_handle_graph.hpp	/^class GFAHandleGraph : public bdsg::PackedGraph {$/;"	c	namespace:vg
GFAIDMapInfo	algorithms/gfa_to_handle.hpp	/^struct GFAIDMapInfo : public NamedNodeBackTranslation {$/;"	s	namespace:vg::algorithms
GFAParser	algorithms/gfa_to_handle.hpp	/^class GFAParser {$/;"	c	namespace:vg::algorithms
GFFReader	gff_reader.cpp	/^    GFFReader::GFFReader(istream& in) : in(in) {$/;"	f	class:vg::GFFReader
GFFReader	gff_reader.hpp	/^    class GFFReader {$/;"	c	namespace:vg
GFFRecord	gff_reader.hpp	/^    struct GFFRecord {$/;"	s	namespace:vg
GSSWAligner	aligner.cpp	/^GSSWAligner::GSSWAligner(const int8_t* _score_matrix,$/;"	f	class:vg::GSSWAligner
GSSWAligner	aligner.hpp	/^    class GSSWAligner : public BaseAligner {$/;"	c	namespace:vg
GafFile	subcommand/gamsort_main.cpp	/^struct GafFile {$/;"	s	file:
GaplessExtender	gbwt_extender.cpp	/^GaplessExtender::GaplessExtender() :$/;"	f	class:vg::GaplessExtender
GaplessExtender	gbwt_extender.cpp	/^GaplessExtender::GaplessExtender(const gbwtgraph::GBWTGraph& graph, const Aligner& aligner) :$/;"	f	class:vg::GaplessExtender
GaplessExtender	gbwt_extender.hpp	/^class GaplessExtender {$/;"	c	namespace:vg
GaplessExtension	gbwt_extender.hpp	/^struct GaplessExtension$/;"	s	namespace:vg
GenomeState	genome_state.cpp	/^GenomeState::GenomeState(const SnarlManager& manager, const HandleGraph* graph,$/;"	f	class:vg::GenomeState
GenomeState	genome_state.hpp	/^class GenomeState {$/;"	c	namespace:vg
GenomeStateCommand	genome_state.hpp	/^struct GenomeStateCommand {$/;"	s	namespace:vg
GenotypeLikelihoodCalculator	genotypekit.hpp	/^class GenotypeLikelihoodCalculator {$/;"	c	namespace:vg
GenotypePriorCalculator	genotypekit.hpp	/^class GenotypePriorCalculator {$/;"	c	namespace:vg
Genotyper	genotyper.hpp	/^class Genotyper {$/;"	c	namespace:vg
GiraffeMainOptions	subcommand/giraffe_main.cpp	/^struct GiraffeMainOptions {$/;"	s	file:
Graph	algorithms/min_cut_graph.hpp	/^        struct Graph {$/;"	s	namespace:vg::algorithms
GraphBaseFate	unittest/gbwt_extender.cpp	/^enum class GraphBaseFate {$/;"	c	namespace:vg::unittest::__anon3	file:
GraphCaller	graph_caller.cpp	/^GraphCaller::GraphCaller(SnarlCaller& snarl_caller,$/;"	f	class:vg::GraphCaller
GraphCaller	graph_caller.hpp	/^class GraphCaller {$/;"	c	namespace:vg
GraphHandler	subcommand/gbwt_main.cpp	/^struct GraphHandler {$/;"	s	file:
GraphSynchronizer	graph_synchronizer.cpp	/^GraphSynchronizer::GraphSynchronizer(VG& graph) : graph(graph) {$/;"	f	class:vg::GraphSynchronizer
GraphSynchronizer	graph_synchronizer.hpp	/^class GraphSynchronizer {$/;"	c	namespace:vg
GreedyMinDistanceClusterer	cluster.cpp	/^GreedyMinDistanceClusterer::GreedyMinDistanceClusterer(SnarlDistanceIndex* distance_index) : MinDistanceClusterer(distance_index) {$/;"	f	class:vg::GreedyMinDistanceClusterer
GreedyMinDistanceClusterer	cluster.hpp	/^class GreedyMinDistanceClusterer : public MinDistanceClusterer {$/;"	c	namespace:vg
GroupedOptionGroup	subcommand/options.hpp	/^struct GroupedOptionGroup : public BaseOptionGroup {$/;"	s	namespace:vg::subcommand
Growth	flow_sort.hpp	/^        Growth(){}$/;"	f	struct:vg::FlowSort::Growth
Growth	flow_sort.hpp	/^    struct Growth {$/;"	s	class:vg::FlowSort
HAPLOTYPE_FWD_ALG_H	haplotypes.hpp	2;"	d
HASH_TABLE_MAX_WIDTH	subcommand/minimizer_main.cpp	/^constexpr size_t HASH_TABLE_MAX_WIDTH = 36;$/;"	v
HASH_TABLE_MIN_WIDTH	subcommand/minimizer_main.cpp	/^constexpr size_t HASH_TABLE_MIN_WIDTH = 10;$/;"	v
HEDLEY_ALWAYS_INLINE	simde/hedley.h	1494;"	d
HEDLEY_ALWAYS_INLINE	simde/hedley.h	1514;"	d
HEDLEY_ARM_VERSION	simde/hedley.h	200;"	d
HEDLEY_ARM_VERSION	simde/hedley.h	203;"	d
HEDLEY_ARM_VERSION	simde/hedley.h	205;"	d
HEDLEY_ARM_VERSION_CHECK	simde/hedley.h	209;"	d
HEDLEY_ARM_VERSION_CHECK	simde/hedley.h	212;"	d
HEDLEY_ARM_VERSION_CHECK	simde/hedley.h	214;"	d
HEDLEY_ARRAY_PARAM	simde/hedley.h	1660;"	d
HEDLEY_ARRAY_PARAM	simde/hedley.h	1668;"	d
HEDLEY_ASSUME	simde/hedley.h	1157;"	d
HEDLEY_ASSUME	simde/hedley.h	1163;"	d
HEDLEY_ASSUME	simde/hedley.h	1165;"	d
HEDLEY_ASSUME	simde/hedley.h	1170;"	d
HEDLEY_ASSUME	simde/hedley.h	1172;"	d
HEDLEY_ASSUME	simde/hedley.h	1187;"	d
HEDLEY_ASSUME	simde/hedley.h	1189;"	d
HEDLEY_BEGIN_C_DECLS	simde/hedley.h	1763;"	d
HEDLEY_BEGIN_C_DECLS	simde/hedley.h	1772;"	d
HEDLEY_CLANG_HAS_ATTRIBUTE	simde/hedley.h	1937;"	d
HEDLEY_CLANG_HAS_ATTRIBUTE	simde/hedley.h	1939;"	d
HEDLEY_CLANG_HAS_BUILTIN	simde/hedley.h	1947;"	d
HEDLEY_CLANG_HAS_BUILTIN	simde/hedley.h	1949;"	d
HEDLEY_CLANG_HAS_CPP_ATTRIBUTE	simde/hedley.h	1942;"	d
HEDLEY_CLANG_HAS_CPP_ATTRIBUTE	simde/hedley.h	1944;"	d
HEDLEY_CLANG_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	1964;"	d
HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE	simde/hedley.h	1962;"	d
HEDLEY_CLANG_HAS_EXTENSION	simde/hedley.h	1957;"	d
HEDLEY_CLANG_HAS_EXTENSION	simde/hedley.h	1959;"	d
HEDLEY_CLANG_HAS_FEATURE	simde/hedley.h	1952;"	d
HEDLEY_CLANG_HAS_FEATURE	simde/hedley.h	1954;"	d
HEDLEY_CLANG_HAS_WARNING	simde/hedley.h	1967;"	d
HEDLEY_CLANG_HAS_WARNING	simde/hedley.h	1969;"	d
HEDLEY_COMPCERT_VERSION	simde/hedley.h	430;"	d
HEDLEY_COMPCERT_VERSION	simde/hedley.h	433;"	d
HEDLEY_COMPCERT_VERSION_CHECK	simde/hedley.h	437;"	d
HEDLEY_COMPCERT_VERSION_CHECK	simde/hedley.h	440;"	d
HEDLEY_COMPCERT_VERSION_CHECK	simde/hedley.h	442;"	d
HEDLEY_CONCAT	simde/hedley.h	35;"	d
HEDLEY_CONCAT	simde/hedley.h	37;"	d
HEDLEY_CONCAT3	simde/hedley.h	45;"	d
HEDLEY_CONCAT3	simde/hedley.h	47;"	d
HEDLEY_CONCAT3_EX	simde/hedley.h	40;"	d
HEDLEY_CONCAT3_EX	simde/hedley.h	42;"	d
HEDLEY_CONCAT_EX	simde/hedley.h	30;"	d
HEDLEY_CONCAT_EX	simde/hedley.h	32;"	d
HEDLEY_CONST	simde/hedley.h	1411;"	d
HEDLEY_CONST	simde/hedley.h	1432;"	d
HEDLEY_CONSTEXPR	simde/hedley.h	1267;"	d
HEDLEY_CONSTEXPR	simde/hedley.h	1271;"	d
HEDLEY_CONSTEXPR	simde/hedley.h	1275;"	d
HEDLEY_CONST_CAST	simde/hedley.h	801;"	d
HEDLEY_CONST_CAST	simde/hedley.h	804;"	d
HEDLEY_CONST_CAST	simde/hedley.h	809;"	d
HEDLEY_CONST_CAST	simde/hedley.h	816;"	d
HEDLEY_CPP_CAST	simde/hedley.h	838;"	d
HEDLEY_CPP_CAST	simde/hedley.h	842;"	d
HEDLEY_CPP_CAST	simde/hedley.h	848;"	d
HEDLEY_CPP_CAST	simde/hedley.h	853;"	d
HEDLEY_CPP_CAST	simde/hedley.h	856;"	d
HEDLEY_CRAY_VERSION	simde/hedley.h	358;"	d
HEDLEY_CRAY_VERSION	simde/hedley.h	362;"	d
HEDLEY_CRAY_VERSION	simde/hedley.h	364;"	d
HEDLEY_CRAY_VERSION_CHECK	simde/hedley.h	369;"	d
HEDLEY_CRAY_VERSION_CHECK	simde/hedley.h	372;"	d
HEDLEY_CRAY_VERSION_CHECK	simde/hedley.h	374;"	d
HEDLEY_C_DECL	simde/hedley.h	1769;"	d
HEDLEY_C_DECL	simde/hedley.h	1774;"	d
HEDLEY_DEPRECATED	simde/hedley.h	1016;"	d
HEDLEY_DEPRECATED	simde/hedley.h	1022;"	d
HEDLEY_DEPRECATED	simde/hedley.h	1025;"	d
HEDLEY_DEPRECATED	simde/hedley.h	1028;"	d
HEDLEY_DEPRECATED	simde/hedley.h	974;"	d
HEDLEY_DEPRECATED	simde/hedley.h	982;"	d
HEDLEY_DEPRECATED	simde/hedley.h	996;"	d
HEDLEY_DEPRECATED	simde/hedley.h	999;"	d
HEDLEY_DEPRECATED_FOR	simde/hedley.h	1000;"	d
HEDLEY_DEPRECATED_FOR	simde/hedley.h	1017;"	d
HEDLEY_DEPRECATED_FOR	simde/hedley.h	1023;"	d
HEDLEY_DEPRECATED_FOR	simde/hedley.h	1026;"	d
HEDLEY_DEPRECATED_FOR	simde/hedley.h	1029;"	d
HEDLEY_DEPRECATED_FOR	simde/hedley.h	977;"	d
HEDLEY_DEPRECATED_FOR	simde/hedley.h	983;"	d
HEDLEY_DEPRECATED_FOR	simde/hedley.h	997;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL	simde/hedley.h	961;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL	simde/hedley.h	964;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL	simde/hedley.h	966;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL	simde/hedley.h	968;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL	simde/hedley.h	970;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_	simde/hedley.h	766;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_	simde/hedley.h	772;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_	simde/hedley.h	780;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_	simde/hedley.h	788;"	d
HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_	simde/hedley.h	797;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	860;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	863;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	865;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	867;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	869;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	871;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	873;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	875;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	888;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	890;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	892;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	894;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	896;"	d
HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED	simde/hedley.h	898;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	931;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	934;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	936;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	938;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	940;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	942;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	944;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	946;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	948;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	953;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	955;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES	simde/hedley.h	957;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	902;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	905;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	907;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	909;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	911;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	913;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	915;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	921;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	923;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	925;"	d
HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS	simde/hedley.h	927;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	727;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	731;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	734;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	737;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	742;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	745;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	754;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	757;"	d
HEDLEY_DIAGNOSTIC_POP	simde/hedley.h	760;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	724;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	730;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	733;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	736;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	741;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	744;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	753;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	756;"	d
HEDLEY_DIAGNOSTIC_PUSH	simde/hedley.h	759;"	d
HEDLEY_DMC_VERSION	simde/hedley.h	414;"	d
HEDLEY_DMC_VERSION	simde/hedley.h	417;"	d
HEDLEY_DMC_VERSION_CHECK	simde/hedley.h	421;"	d
HEDLEY_DMC_VERSION_CHECK	simde/hedley.h	424;"	d
HEDLEY_DMC_VERSION_CHECK	simde/hedley.h	426;"	d
HEDLEY_EMPTY_BASES	simde/hedley.h	1915;"	d
HEDLEY_EMPTY_BASES	simde/hedley.h	1920;"	d
HEDLEY_EMSCRIPTEN_VERSION	simde/hedley.h	184;"	d
HEDLEY_EMSCRIPTEN_VERSION	simde/hedley.h	187;"	d
HEDLEY_EMSCRIPTEN_VERSION_CHECK	simde/hedley.h	191;"	d
HEDLEY_EMSCRIPTEN_VERSION_CHECK	simde/hedley.h	194;"	d
HEDLEY_EMSCRIPTEN_VERSION_CHECK	simde/hedley.h	196;"	d
HEDLEY_END_C_DECLS	simde/hedley.h	1766;"	d
HEDLEY_END_C_DECLS	simde/hedley.h	1773;"	d
HEDLEY_FALL_THROUGH	simde/hedley.h	1630;"	d
HEDLEY_FALL_THROUGH	simde/hedley.h	1635;"	d
HEDLEY_FLAGS	simde/hedley.h	1892;"	d
HEDLEY_FLAGS	simde/hedley.h	1895;"	d
HEDLEY_FLAGS_CAST	simde/hedley.h	1901;"	d
HEDLEY_FLAGS_CAST	simde/hedley.h	1904;"	d
HEDLEY_GCC_HAS_ATTRIBUTE	simde/hedley.h	509;"	d
HEDLEY_GCC_HAS_ATTRIBUTE	simde/hedley.h	512;"	d
HEDLEY_GCC_HAS_ATTRIBUTE	simde/hedley.h	514;"	d
HEDLEY_GCC_HAS_BUILTIN	simde/hedley.h	581;"	d
HEDLEY_GCC_HAS_BUILTIN	simde/hedley.h	584;"	d
HEDLEY_GCC_HAS_BUILTIN	simde/hedley.h	586;"	d
HEDLEY_GCC_HAS_CPP_ATTRIBUTE	simde/hedley.h	554;"	d
HEDLEY_GCC_HAS_CPP_ATTRIBUTE	simde/hedley.h	557;"	d
HEDLEY_GCC_HAS_CPP_ATTRIBUTE	simde/hedley.h	559;"	d
HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	662;"	d
HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	665;"	d
HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	667;"	d
HEDLEY_GCC_HAS_EXTENSION	simde/hedley.h	635;"	d
HEDLEY_GCC_HAS_EXTENSION	simde/hedley.h	638;"	d
HEDLEY_GCC_HAS_EXTENSION	simde/hedley.h	640;"	d
HEDLEY_GCC_HAS_FEATURE	simde/hedley.h	608;"	d
HEDLEY_GCC_HAS_FEATURE	simde/hedley.h	611;"	d
HEDLEY_GCC_HAS_FEATURE	simde/hedley.h	613;"	d
HEDLEY_GCC_HAS_WARNING	simde/hedley.h	689;"	d
HEDLEY_GCC_HAS_WARNING	simde/hedley.h	692;"	d
HEDLEY_GCC_HAS_WARNING	simde/hedley.h	694;"	d
HEDLEY_GCC_NOT_CLANG_VERSION_CHECK	simde/hedley.h	1928;"	d
HEDLEY_GCC_NOT_CLANG_VERSION_CHECK	simde/hedley.h	1931;"	d
HEDLEY_GCC_VERSION	simde/hedley.h	462;"	d
HEDLEY_GCC_VERSION	simde/hedley.h	478;"	d
HEDLEY_GCC_VERSION_CHECK	simde/hedley.h	482;"	d
HEDLEY_GCC_VERSION_CHECK	simde/hedley.h	485;"	d
HEDLEY_GCC_VERSION_CHECK	simde/hedley.h	487;"	d
HEDLEY_GNUC_HAS_ATTRIBUTE	simde/hedley.h	500;"	d
HEDLEY_GNUC_HAS_ATTRIBUTE	simde/hedley.h	503;"	d
HEDLEY_GNUC_HAS_ATTRIBUTE	simde/hedley.h	505;"	d
HEDLEY_GNUC_HAS_BUILTIN	simde/hedley.h	572;"	d
HEDLEY_GNUC_HAS_BUILTIN	simde/hedley.h	575;"	d
HEDLEY_GNUC_HAS_BUILTIN	simde/hedley.h	577;"	d
HEDLEY_GNUC_HAS_CPP_ATTRIBUTE	simde/hedley.h	545;"	d
HEDLEY_GNUC_HAS_CPP_ATTRIBUTE	simde/hedley.h	548;"	d
HEDLEY_GNUC_HAS_CPP_ATTRIBUTE	simde/hedley.h	550;"	d
HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	653;"	d
HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	656;"	d
HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	658;"	d
HEDLEY_GNUC_HAS_EXTENSION	simde/hedley.h	626;"	d
HEDLEY_GNUC_HAS_EXTENSION	simde/hedley.h	629;"	d
HEDLEY_GNUC_HAS_EXTENSION	simde/hedley.h	631;"	d
HEDLEY_GNUC_HAS_FEATURE	simde/hedley.h	599;"	d
HEDLEY_GNUC_HAS_FEATURE	simde/hedley.h	602;"	d
HEDLEY_GNUC_HAS_FEATURE	simde/hedley.h	604;"	d
HEDLEY_GNUC_HAS_WARNING	simde/hedley.h	680;"	d
HEDLEY_GNUC_HAS_WARNING	simde/hedley.h	683;"	d
HEDLEY_GNUC_HAS_WARNING	simde/hedley.h	685;"	d
HEDLEY_GNUC_VERSION	simde/hedley.h	70;"	d
HEDLEY_GNUC_VERSION	simde/hedley.h	73;"	d
HEDLEY_GNUC_VERSION	simde/hedley.h	75;"	d
HEDLEY_GNUC_VERSION_CHECK	simde/hedley.h	79;"	d
HEDLEY_GNUC_VERSION_CHECK	simde/hedley.h	82;"	d
HEDLEY_GNUC_VERSION_CHECK	simde/hedley.h	84;"	d
HEDLEY_HAS_ATTRIBUTE	simde/hedley.h	491;"	d
HEDLEY_HAS_ATTRIBUTE	simde/hedley.h	494;"	d
HEDLEY_HAS_ATTRIBUTE	simde/hedley.h	496;"	d
HEDLEY_HAS_BUILTIN	simde/hedley.h	563;"	d
HEDLEY_HAS_BUILTIN	simde/hedley.h	566;"	d
HEDLEY_HAS_BUILTIN	simde/hedley.h	568;"	d
HEDLEY_HAS_CPP_ATTRIBUTE	simde/hedley.h	518;"	d
HEDLEY_HAS_CPP_ATTRIBUTE	simde/hedley.h	524;"	d
HEDLEY_HAS_CPP_ATTRIBUTE	simde/hedley.h	526;"	d
HEDLEY_HAS_CPP_ATTRIBUTE_NS	simde/hedley.h	530;"	d
HEDLEY_HAS_CPP_ATTRIBUTE_NS	simde/hedley.h	533;"	d
HEDLEY_HAS_CPP_ATTRIBUTE_NS	simde/hedley.h	539;"	d
HEDLEY_HAS_CPP_ATTRIBUTE_NS	simde/hedley.h	541;"	d
HEDLEY_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	644;"	d
HEDLEY_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	647;"	d
HEDLEY_HAS_DECLSPEC_ATTRIBUTE	simde/hedley.h	649;"	d
HEDLEY_HAS_EXTENSION	simde/hedley.h	617;"	d
HEDLEY_HAS_EXTENSION	simde/hedley.h	620;"	d
HEDLEY_HAS_EXTENSION	simde/hedley.h	622;"	d
HEDLEY_HAS_FEATURE	simde/hedley.h	590;"	d
HEDLEY_HAS_FEATURE	simde/hedley.h	593;"	d
HEDLEY_HAS_FEATURE	simde/hedley.h	595;"	d
HEDLEY_HAS_WARNING	simde/hedley.h	671;"	d
HEDLEY_HAS_WARNING	simde/hedley.h	674;"	d
HEDLEY_HAS_WARNING	simde/hedley.h	676;"	d
HEDLEY_IAR_VERSION	simde/hedley.h	378;"	d
HEDLEY_IAR_VERSION	simde/hedley.h	382;"	d
HEDLEY_IAR_VERSION	simde/hedley.h	384;"	d
HEDLEY_IAR_VERSION_CHECK	simde/hedley.h	389;"	d
HEDLEY_IAR_VERSION_CHECK	simde/hedley.h	392;"	d
HEDLEY_IAR_VERSION_CHECK	simde/hedley.h	394;"	d
HEDLEY_IBM_VERSION	simde/hedley.h	218;"	d
HEDLEY_IBM_VERSION	simde/hedley.h	221;"	d
HEDLEY_IBM_VERSION	simde/hedley.h	223;"	d
HEDLEY_IBM_VERSION	simde/hedley.h	225;"	d
HEDLEY_IBM_VERSION_CHECK	simde/hedley.h	229;"	d
HEDLEY_IBM_VERSION_CHECK	simde/hedley.h	232;"	d
HEDLEY_IBM_VERSION_CHECK	simde/hedley.h	234;"	d
HEDLEY_IMPORT	simde/hedley.h	1582;"	d
HEDLEY_IMPORT	simde/hedley.h	1587;"	d
HEDLEY_INLINE	simde/hedley.h	1468;"	d
HEDLEY_INLINE	simde/hedley.h	1473;"	d
HEDLEY_INTEL_CL_VERSION	simde/hedley.h	130;"	d
HEDLEY_INTEL_CL_VERSION	simde/hedley.h	133;"	d
HEDLEY_INTEL_CL_VERSION_CHECK	simde/hedley.h	137;"	d
HEDLEY_INTEL_CL_VERSION_CHECK	simde/hedley.h	140;"	d
HEDLEY_INTEL_CL_VERSION_CHECK	simde/hedley.h	142;"	d
HEDLEY_INTEL_VERSION	simde/hedley.h	112;"	d
HEDLEY_INTEL_VERSION	simde/hedley.h	115;"	d
HEDLEY_INTEL_VERSION	simde/hedley.h	117;"	d
HEDLEY_INTEL_VERSION_CHECK	simde/hedley.h	121;"	d
HEDLEY_INTEL_VERSION_CHECK	simde/hedley.h	124;"	d
HEDLEY_INTEL_VERSION_CHECK	simde/hedley.h	126;"	d
HEDLEY_IS_CONSTANT	simde/hedley.h	1674;"	d
HEDLEY_IS_CONSTANT	simde/hedley.h	1694;"	d
HEDLEY_IS_CONSTANT	simde/hedley.h	1752;"	d
HEDLEY_IS_CONSTEXPR_	simde/hedley.h	1682;"	d
HEDLEY_IS_CONSTEXPR_	simde/hedley.h	1706;"	d
HEDLEY_LIKELY	simde/hedley.h	1282;"	d
HEDLEY_LIKELY	simde/hedley.h	1299;"	d
HEDLEY_MALLOC	simde/hedley.h	1343;"	d
HEDLEY_MALLOC	simde/hedley.h	1363;"	d
HEDLEY_MESSAGE	simde/hedley.h	1820;"	d
HEDLEY_MESSAGE	simde/hedley.h	1823;"	d
HEDLEY_MSVC_VERSION	simde/hedley.h	88;"	d
HEDLEY_MSVC_VERSION	simde/hedley.h	91;"	d
HEDLEY_MSVC_VERSION	simde/hedley.h	93;"	d
HEDLEY_MSVC_VERSION	simde/hedley.h	95;"	d
HEDLEY_MSVC_VERSION_CHECK	simde/hedley.h	102;"	d
HEDLEY_MSVC_VERSION_CHECK	simde/hedley.h	104;"	d
HEDLEY_MSVC_VERSION_CHECK	simde/hedley.h	106;"	d
HEDLEY_MSVC_VERSION_CHECK	simde/hedley.h	108;"	d
HEDLEY_MSVC_VERSION_CHECK	simde/hedley.h	99;"	d
HEDLEY_NEVER_INLINE	simde/hedley.h	1536;"	d
HEDLEY_NEVER_INLINE	simde/hedley.h	1556;"	d
HEDLEY_NON_NULL	simde/hedley.h	1222;"	d
HEDLEY_NON_NULL	simde/hedley.h	1229;"	d
HEDLEY_NO_ESCAPE	simde/hedley.h	1142;"	d
HEDLEY_NO_ESCAPE	simde/hedley.h	1145;"	d
HEDLEY_NO_ESCAPE	simde/hedley.h	1147;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1097;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1100;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1102;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1104;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1106;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1124;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1126;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1130;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1132;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1134;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1136;"	d
HEDLEY_NO_RETURN	simde/hedley.h	1138;"	d
HEDLEY_NO_THROW	simde/hedley.h	1613;"	d
HEDLEY_NO_THROW	simde/hedley.h	1619;"	d
HEDLEY_NULL	simde/hedley.h	1803;"	d
HEDLEY_NULL	simde/hedley.h	1807;"	d
HEDLEY_PELLES_VERSION	simde/hedley.h	446;"	d
HEDLEY_PELLES_VERSION	simde/hedley.h	449;"	d
HEDLEY_PELLES_VERSION_CHECK	simde/hedley.h	453;"	d
HEDLEY_PELLES_VERSION_CHECK	simde/hedley.h	456;"	d
HEDLEY_PELLES_VERSION_CHECK	simde/hedley.h	458;"	d
HEDLEY_PGI_VERSION	simde/hedley.h	146;"	d
HEDLEY_PGI_VERSION	simde/hedley.h	149;"	d
HEDLEY_PGI_VERSION_CHECK	simde/hedley.h	153;"	d
HEDLEY_PGI_VERSION_CHECK	simde/hedley.h	156;"	d
HEDLEY_PGI_VERSION_CHECK	simde/hedley.h	158;"	d
HEDLEY_PRAGMA	simde/hedley.h	716;"	d
HEDLEY_PRAGMA	simde/hedley.h	718;"	d
HEDLEY_PRAGMA	simde/hedley.h	720;"	d
HEDLEY_PREDICT	simde/hedley.h	1279;"	d
HEDLEY_PREDICT	simde/hedley.h	1296;"	d
HEDLEY_PREDICT_FALSE	simde/hedley.h	1298;"	d
HEDLEY_PREDICT_TRUE	simde/hedley.h	1297;"	d
HEDLEY_PRINTF_FORMAT	simde/hedley.h	1236;"	d
HEDLEY_PRINTF_FORMAT	simde/hedley.h	1239;"	d
HEDLEY_PRIVATE	simde/hedley.h	1576;"	d
HEDLEY_PRIVATE	simde/hedley.h	1585;"	d
HEDLEY_PUBLIC	simde/hedley.h	1579;"	d
HEDLEY_PUBLIC	simde/hedley.h	1586;"	d
HEDLEY_PURE	simde/hedley.h	1375;"	d
HEDLEY_PURE	simde/hedley.h	1396;"	d
HEDLEY_REINTERPRET_CAST	simde/hedley.h	820;"	d
HEDLEY_REINTERPRET_CAST	simde/hedley.h	823;"	d
HEDLEY_REINTERPRET_CAST	simde/hedley.h	825;"	d
HEDLEY_REQUIRE	simde/hedley.h	1865;"	d
HEDLEY_REQUIRE	simde/hedley.h	1872;"	d
HEDLEY_REQUIRE_CONSTEXPR	simde/hedley.h	1677;"	d
HEDLEY_REQUIRE_CONSTEXPR	simde/hedley.h	1754;"	d
HEDLEY_REQUIRE_MSG	simde/hedley.h	1868;"	d
HEDLEY_REQUIRE_MSG	simde/hedley.h	1877;"	d
HEDLEY_REQUIRE_MSG	simde/x86/avx2.h	/^    HEDLEY_REQUIRE_MSG((scale && scale <= 8 && !(scale & (scale - 1))), "`scale' must be a power of two less than or equal to 8") {$/;"	f
HEDLEY_RESTRICT	simde/hedley.h	1441;"	d
HEDLEY_RESTRICT	simde/hedley.h	1444;"	d
HEDLEY_RETURNS_NON_NULL	simde/hedley.h	1647;"	d
HEDLEY_RETURNS_NON_NULL	simde/hedley.h	1652;"	d
HEDLEY_SENTINEL	simde/hedley.h	1084;"	d
HEDLEY_SENTINEL	simde/hedley.h	1091;"	d
HEDLEY_SENTINEL	simde/hedley.h	1093;"	d
HEDLEY_STATIC_ASSERT	simde/hedley.h	1782;"	d
HEDLEY_STATIC_ASSERT	simde/hedley.h	1792;"	d
HEDLEY_STATIC_CAST	simde/hedley.h	829;"	d
HEDLEY_STATIC_CAST	simde/hedley.h	832;"	d
HEDLEY_STATIC_CAST	simde/hedley.h	834;"	d
HEDLEY_STRINGIFY	simde/hedley.h	25;"	d
HEDLEY_STRINGIFY	simde/hedley.h	27;"	d
HEDLEY_STRINGIFY_EX	simde/hedley.h	20;"	d
HEDLEY_STRINGIFY_EX	simde/hedley.h	22;"	d
HEDLEY_SUNPRO_VERSION	simde/hedley.h	162;"	d
HEDLEY_SUNPRO_VERSION	simde/hedley.h	165;"	d
HEDLEY_SUNPRO_VERSION	simde/hedley.h	167;"	d
HEDLEY_SUNPRO_VERSION	simde/hedley.h	169;"	d
HEDLEY_SUNPRO_VERSION	simde/hedley.h	171;"	d
HEDLEY_SUNPRO_VERSION_CHECK	simde/hedley.h	175;"	d
HEDLEY_SUNPRO_VERSION_CHECK	simde/hedley.h	178;"	d
HEDLEY_SUNPRO_VERSION_CHECK	simde/hedley.h	180;"	d
HEDLEY_TINYC_VERSION	simde/hedley.h	398;"	d
HEDLEY_TINYC_VERSION	simde/hedley.h	401;"	d
HEDLEY_TINYC_VERSION_CHECK	simde/hedley.h	405;"	d
HEDLEY_TINYC_VERSION_CHECK	simde/hedley.h	408;"	d
HEDLEY_TINYC_VERSION_CHECK	simde/hedley.h	410;"	d
HEDLEY_TI_ARMCL_VERSION	simde/hedley.h	294;"	d
HEDLEY_TI_ARMCL_VERSION	simde/hedley.h	297;"	d
HEDLEY_TI_ARMCL_VERSION_CHECK	simde/hedley.h	301;"	d
HEDLEY_TI_ARMCL_VERSION_CHECK	simde/hedley.h	304;"	d
HEDLEY_TI_ARMCL_VERSION_CHECK	simde/hedley.h	306;"	d
HEDLEY_TI_CL2000_VERSION	simde/hedley.h	262;"	d
HEDLEY_TI_CL2000_VERSION	simde/hedley.h	265;"	d
HEDLEY_TI_CL2000_VERSION_CHECK	simde/hedley.h	269;"	d
HEDLEY_TI_CL2000_VERSION_CHECK	simde/hedley.h	272;"	d
HEDLEY_TI_CL2000_VERSION_CHECK	simde/hedley.h	274;"	d
HEDLEY_TI_CL430_VERSION	simde/hedley.h	278;"	d
HEDLEY_TI_CL430_VERSION	simde/hedley.h	281;"	d
HEDLEY_TI_CL430_VERSION_CHECK	simde/hedley.h	285;"	d
HEDLEY_TI_CL430_VERSION_CHECK	simde/hedley.h	288;"	d
HEDLEY_TI_CL430_VERSION_CHECK	simde/hedley.h	290;"	d
HEDLEY_TI_CL6X_VERSION	simde/hedley.h	310;"	d
HEDLEY_TI_CL6X_VERSION	simde/hedley.h	313;"	d
HEDLEY_TI_CL6X_VERSION_CHECK	simde/hedley.h	317;"	d
HEDLEY_TI_CL6X_VERSION_CHECK	simde/hedley.h	320;"	d
HEDLEY_TI_CL6X_VERSION_CHECK	simde/hedley.h	322;"	d
HEDLEY_TI_CL7X_VERSION	simde/hedley.h	326;"	d
HEDLEY_TI_CL7X_VERSION	simde/hedley.h	329;"	d
HEDLEY_TI_CL7X_VERSION_CHECK	simde/hedley.h	333;"	d
HEDLEY_TI_CL7X_VERSION_CHECK	simde/hedley.h	336;"	d
HEDLEY_TI_CL7X_VERSION_CHECK	simde/hedley.h	338;"	d
HEDLEY_TI_CLPRU_VERSION	simde/hedley.h	342;"	d
HEDLEY_TI_CLPRU_VERSION	simde/hedley.h	345;"	d
HEDLEY_TI_CLPRU_VERSION_CHECK	simde/hedley.h	349;"	d
HEDLEY_TI_CLPRU_VERSION_CHECK	simde/hedley.h	352;"	d
HEDLEY_TI_CLPRU_VERSION_CHECK	simde/hedley.h	354;"	d
HEDLEY_TI_VERSION	simde/hedley.h	238;"	d
HEDLEY_TI_VERSION	simde/hedley.h	248;"	d
HEDLEY_TI_VERSION_CHECK	simde/hedley.h	253;"	d
HEDLEY_TI_VERSION_CHECK	simde/hedley.h	256;"	d
HEDLEY_TI_VERSION_CHECK	simde/hedley.h	258;"	d
HEDLEY_UNAVAILABLE	simde/hedley.h	1033;"	d
HEDLEY_UNAVAILABLE	simde/hedley.h	1039;"	d
HEDLEY_UNAVAILABLE	simde/hedley.h	1041;"	d
HEDLEY_UNLIKELY	simde/hedley.h	1285;"	d
HEDLEY_UNLIKELY	simde/hedley.h	1300;"	d
HEDLEY_UNPREDICTABLE	simde/hedley.h	1288;"	d
HEDLEY_UNPREDICTABLE	simde/hedley.h	1291;"	d
HEDLEY_UNPREDICTABLE	simde/hedley.h	1339;"	d
HEDLEY_UNREACHABLE	simde/hedley.h	1151;"	d
HEDLEY_UNREACHABLE	simde/hedley.h	1181;"	d
HEDLEY_UNREACHABLE	simde/hedley.h	1183;"	d
HEDLEY_UNREACHABLE	simde/hedley.h	1204;"	d
HEDLEY_UNREACHABLE_RETURN	simde/hedley.h	1154;"	d
HEDLEY_UNREACHABLE_RETURN	simde/hedley.h	1196;"	d
HEDLEY_UNREACHABLE_RETURN	simde/hedley.h	1198;"	d
HEDLEY_UNREACHABLE_RETURN	simde/hedley.h	1201;"	d
HEDLEY_VERSION	simde/hedley.h	15;"	d
HEDLEY_VERSION	simde/hedley.h	17;"	d
HEDLEY_VERSION_DECODE_MAJOR	simde/hedley.h	55;"	d
HEDLEY_VERSION_DECODE_MAJOR	simde/hedley.h	57;"	d
HEDLEY_VERSION_DECODE_MINOR	simde/hedley.h	60;"	d
HEDLEY_VERSION_DECODE_MINOR	simde/hedley.h	62;"	d
HEDLEY_VERSION_DECODE_REVISION	simde/hedley.h	65;"	d
HEDLEY_VERSION_DECODE_REVISION	simde/hedley.h	67;"	d
HEDLEY_VERSION_ENCODE	simde/hedley.h	50;"	d
HEDLEY_VERSION_ENCODE	simde/hedley.h	52;"	d
HEDLEY_WARNING	simde/hedley.h	1843;"	d
HEDLEY_WARNING	simde/hedley.h	1846;"	d
HEDLEY_WARN_UNUSED_RESULT	simde/hedley.h	1045;"	d
HEDLEY_WARN_UNUSED_RESULT	simde/hedley.h	1067;"	d
HEDLEY_WARN_UNUSED_RESULT	simde/hedley.h	1070;"	d
HEDLEY_WARN_UNUSED_RESULT	simde/hedley.h	1073;"	d
HEDLEY_WARN_UNUSED_RESULT	simde/hedley.h	1076;"	d
HEDLEY_WARN_UNUSED_RESULT	simde/hedley.h	1079;"	d
HEDLEY_WARN_UNUSED_RESULT_MSG	simde/hedley.h	1048;"	d
HEDLEY_WARN_UNUSED_RESULT_MSG	simde/hedley.h	1068;"	d
HEDLEY_WARN_UNUSED_RESULT_MSG	simde/hedley.h	1071;"	d
HEDLEY_WARN_UNUSED_RESULT_MSG	simde/hedley.h	1074;"	d
HEDLEY_WARN_UNUSED_RESULT_MSG	simde/hedley.h	1077;"	d
HEDLEY_WARN_UNUSED_RESULT_MSG	simde/hedley.h	1080;"	d
HET_ADJUSTMENT	recombinator.cpp	/^constexpr double Recombinator::HET_ADJUSTMENT;$/;"	m	class:vg::Recombinator	file:
HET_ADJUSTMENT	recombinator.hpp	/^    constexpr static double HET_ADJUSTMENT = 0.05;$/;"	m	class:vg::Recombinator
HTSAlignmentEmitter	hts_alignment_emitter.cpp	/^HTSAlignmentEmitter::HTSAlignmentEmitter(const string& filename, const string& format,$/;"	f	class:vg::HTSAlignmentEmitter
HTSAlignmentEmitter	hts_alignment_emitter.hpp	/^class HTSAlignmentEmitter : public AlignmentEmitter, public HTSWriter {$/;"	c	namespace:vg
HTSWriter	hts_alignment_emitter.cpp	/^HTSWriter::HTSWriter(const string& filename, const string& format,$/;"	f	class:vg::HTSWriter
HTSWriter	hts_alignment_emitter.hpp	/^class HTSWriter {$/;"	c	namespace:vg
Handle2Component	cactus.cpp	/^typedef unordered_map<handle_t, int> Handle2Component;$/;"	t	namespace:vg	file:
HandleGraphNodeSet	integrated_snarl_finder.cpp	/^    inline HandleGraphNodeSet(const HandleGraph* graph): graph(graph) {$/;"	f	class:vg::HandleGraphNodeSet
HandleGraphNodeSet	integrated_snarl_finder.cpp	/^class HandleGraphNodeSet {$/;"	c	namespace:vg	file:
HandleGraphSnarlFinder	snarls.cpp	/^HandleGraphSnarlFinder::HandleGraphSnarlFinder(const HandleGraph* graph) : graph(graph) {$/;"	f	class:vg::HandleGraphSnarlFinder
HandleGraphSnarlFinder	snarls.hpp	/^class HandleGraphSnarlFinder : public SnarlFinder {$/;"	c	namespace:vg
HandleSet	cactus.cpp	/^typedef unordered_set<handle_t> HandleSet;$/;"	t	namespace:vg	file:
Handler	utility.cpp	/^struct Handler {$/;"	s	namespace:vg::temp_file	file:
Haplotype	phased_genome.cpp	/^    PhasedGenome::Haplotype::Haplotype(NodeTraversal node_traversal) {$/;"	f	class:vg::PhasedGenome::Haplotype
Haplotype	phased_genome.hpp	/^    PhasedGenome::Haplotype::Haplotype(NodeTraversalIterator first, NodeTraversalIterator last) {$/;"	f	class:vg::PhasedGenome::Haplotype
Haplotype	phased_genome.hpp	/^    class PhasedGenome::Haplotype {$/;"	c	class:vg::PhasedGenome
HaplotypeIndexer	haplotype_indexer.cpp	/^HaplotypeIndexer::HaplotypeIndexer() {$/;"	f	class:vg::HaplotypeIndexer
HaplotypeIndexer	haplotype_indexer.hpp	/^class HaplotypeIndexer : public Progressive {$/;"	c	namespace:vg
HaplotypeNode	phased_genome.cpp	/^    PhasedGenome::HaplotypeNode::HaplotypeNode(NodeTraversal node_traversal, HaplotypeNode* next, HaplotypeNode* prev) :$/;"	f	class:vg::PhasedGenome::HaplotypeNode
HaplotypeNode	phased_genome.hpp	/^    struct PhasedGenome::HaplotypeNode {$/;"	s	class:vg::PhasedGenome
HaplotypePartitioner	recombinator.cpp	/^HaplotypePartitioner::HaplotypePartitioner(const gbwtgraph::GBZ& gbz,$/;"	f	class:vg::HaplotypePartitioner
HaplotypePartitioner	recombinator.hpp	/^class HaplotypePartitioner {$/;"	c	namespace:vg
Haplotypes	recombinator.hpp	/^class Haplotypes {$/;"	c	namespace:vg
HaplotypesConfig	subcommand/haplotypes_main.cpp	/^HaplotypesConfig::HaplotypesConfig(int argc, char** argv, size_t max_threads) {$/;"	f	class:HaplotypesConfig
HaplotypesConfig	subcommand/haplotypes_main.cpp	/^struct HaplotypesConfig {$/;"	s	file:
HashGraph	index_registry.hpp	/^    enum MutableGraphImplementation {HashGraph, PackedGraph, VG};$/;"	e	enum:vg::IndexingParameters::MutableGraphImplementation
HashValueImpl	hash_map.hpp	/^    struct HashValueImpl$/;"	s	namespace:std::__anon1
HashValueImpl	hash_map.hpp	/^    struct HashValueImpl<Tuple,0>$/;"	s	namespace:std::__anon1
Header	recombinator.hpp	/^    struct Header {$/;"	s	class:vg::Haplotypes
Help	unittest/catch.hpp	/^        Help( bool &showHelpFlag )$/;"	f	struct:Catch::Help
Help	unittest/catch.hpp	/^    struct Help : Opt {$/;"	s	namespace:Catch
HitEdge	cluster.hpp	/^    HitEdge(size_t to_idx, int32_t weight, int64_t distance) : to_idx(to_idx), weight(weight), distance(distance) {}$/;"	f	class:vg::MEMClusterer::HitEdge
HitEdge	cluster.hpp	/^class MEMClusterer::HitEdge {$/;"	c	class:vg::MEMClusterer
HitGraph	cluster.cpp	/^MEMClusterer::HitGraph::HitGraph(const vector<MaximalExactMatch>& mems, const Alignment& alignment,$/;"	f	class:vg::MEMClusterer::HitGraph
HitGraph	cluster.hpp	/^class MEMClusterer::HitGraph {$/;"	c	class:vg::MEMClusterer
HitNode	cluster.hpp	/^    HitNode(const MaximalExactMatch& mem, pos_t start_pos, int32_t score) : mem(&mem), start_pos(start_pos), score(score) { }$/;"	f	class:vg::MEMClusterer::HitNode
HitNode	cluster.hpp	/^class MEMClusterer::HitNode {$/;"	c	class:vg::MEMClusterer
I	haplotypes.cpp	/^int64_t haplo_DP_rectangle::I() const {$/;"	f	class:haplo::haplo_DP_rectangle
IDScanner	scanner.hpp	/^struct IDScanner {$/;"	s	namespace:vg
IMutableEnumValuesRegistry	unittest/catch.hpp	/^    struct IMutableEnumValuesRegistry {$/;"	s	namespace:Catch
INPUT_DEFAULT	subcommand/convert_main.cpp	/^const input_type INPUT_DEFAULT = input_handlegraph;$/;"	v
INS	dozeu_interface.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon21	file:
INS	qual_adj_xdrop_aligner.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon19	file:
INS	xdrop_aligner.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon18	file:
INSERTIONS	gbwt_extender.cpp	/^    constexpr static size_t INSERTIONS = 1; \/\/ characters in the sequence but not in the graph$/;"	m	struct:vg::WFANode	file:
INTERNAL_CATCH_BENCHMARK	unittest/catch.hpp	7376;"	d
INTERNAL_CATCH_BENCHMARK_ADVANCED	unittest/catch.hpp	7380;"	d
INTERNAL_CATCH_CAPTURE	unittest/catch.hpp	2786;"	d
INTERNAL_CATCH_CATCH	unittest/catch.hpp	2691;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST	unittest/catch.hpp	903;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST	unittest/catch.hpp	913;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST0	unittest/catch.hpp	830;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST1	unittest/catch.hpp	831;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD	unittest/catch.hpp	899;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD	unittest/catch.hpp	909;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0	unittest/catch.hpp	874;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1	unittest/catch.hpp	875;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X	unittest/catch.hpp	881;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_X	unittest/catch.hpp	834;"	d
INTERNAL_CATCH_DEF	unittest/catch.hpp	739;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST	unittest/catch.hpp	902;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST	unittest/catch.hpp	912;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST0	unittest/catch.hpp	838;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST1	unittest/catch.hpp	839;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD	unittest/catch.hpp	898;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD	unittest/catch.hpp	908;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0	unittest/catch.hpp	887;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1	unittest/catch.hpp	888;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X	unittest/catch.hpp	891;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_X	unittest/catch.hpp	842;"	d
INTERNAL_CATCH_DYNAMIC_SECTION	unittest/catch.hpp	2936;"	d
INTERNAL_CATCH_ELSE	unittest/catch.hpp	2722;"	d
INTERNAL_CATCH_EXPAND1	unittest/catch.hpp	737;"	d
INTERNAL_CATCH_EXPAND2	unittest/catch.hpp	738;"	d
INTERNAL_CATCH_EXPAND_VARGS	unittest/catch.hpp	701;"	d
INTERNAL_CATCH_GET_1_ARG	unittest/catch.hpp	7373;"	d
INTERNAL_CATCH_GET_2_ARG	unittest/catch.hpp	7374;"	d
INTERNAL_CATCH_IF	unittest/catch.hpp	2717;"	d
INTERNAL_CATCH_INFO	unittest/catch.hpp	2791;"	d
INTERNAL_CATCH_MAKE_NAMESPACE	unittest/catch.hpp	753;"	d
INTERNAL_CATCH_MAKE_NAMESPACE2	unittest/catch.hpp	752;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST	unittest/catch.hpp	759;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST	unittest/catch.hpp	762;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST2	unittest/catch.hpp	758;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST2	unittest/catch.hpp	761;"	d
INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES	unittest/catch.hpp	765;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	unittest/catch.hpp	1058;"	d
INTERNAL_CATCH_MSG	unittest/catch.hpp	2778;"	d
INTERNAL_CATCH_NOINTERNAL_CATCH_DEF	unittest/catch.hpp	740;"	d
INTERNAL_CATCH_NO_THROW	unittest/catch.hpp	2727;"	d
INTERNAL_CATCH_NTTP_0	unittest/catch.hpp	896;"	d
INTERNAL_CATCH_NTTP_0	unittest/catch.hpp	906;"	d
INTERNAL_CATCH_NTTP_1	unittest/catch.hpp	815;"	d
INTERNAL_CATCH_NTTP_GEN	unittest/catch.hpp	897;"	d
INTERNAL_CATCH_NTTP_GEN	unittest/catch.hpp	907;"	d
INTERNAL_CATCH_NTTP_REGISTER	unittest/catch.hpp	853;"	d
INTERNAL_CATCH_NTTP_REGISTER0	unittest/catch.hpp	846;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD	unittest/catch.hpp	867;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD0	unittest/catch.hpp	860;"	d
INTERNAL_CATCH_NTTP_REG_GEN	unittest/catch.hpp	901;"	d
INTERNAL_CATCH_NTTP_REG_GEN	unittest/catch.hpp	911;"	d
INTERNAL_CATCH_NTTP_REG_METHOD_GEN	unittest/catch.hpp	900;"	d
INTERNAL_CATCH_NTTP_REG_METHOD_GEN	unittest/catch.hpp	910;"	d
INTERNAL_CATCH_REACT	unittest/catch.hpp	2700;"	d
INTERNAL_CATCH_REGISTER_ENUM	unittest/catch.hpp	2172;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	unittest/catch.hpp	1080;"	d
INTERNAL_CATCH_REMOVE_PARENS	unittest/catch.hpp	755;"	d
INTERNAL_CATCH_REMOVE_PARENS_10_ARG	unittest/catch.hpp	777;"	d
INTERNAL_CATCH_REMOVE_PARENS_11_ARG	unittest/catch.hpp	778;"	d
INTERNAL_CATCH_REMOVE_PARENS_1_ARG	unittest/catch.hpp	768;"	d
INTERNAL_CATCH_REMOVE_PARENS_2_ARG	unittest/catch.hpp	769;"	d
INTERNAL_CATCH_REMOVE_PARENS_3_ARG	unittest/catch.hpp	770;"	d
INTERNAL_CATCH_REMOVE_PARENS_4_ARG	unittest/catch.hpp	771;"	d
INTERNAL_CATCH_REMOVE_PARENS_5_ARG	unittest/catch.hpp	772;"	d
INTERNAL_CATCH_REMOVE_PARENS_6_ARG	unittest/catch.hpp	773;"	d
INTERNAL_CATCH_REMOVE_PARENS_7_ARG	unittest/catch.hpp	774;"	d
INTERNAL_CATCH_REMOVE_PARENS_8_ARG	unittest/catch.hpp	775;"	d
INTERNAL_CATCH_REMOVE_PARENS_9_ARG	unittest/catch.hpp	776;"	d
INTERNAL_CATCH_REMOVE_PARENS_GEN	unittest/catch.hpp	904;"	d
INTERNAL_CATCH_REMOVE_PARENS_GEN	unittest/catch.hpp	914;"	d
INTERNAL_CATCH_SECTION	unittest/catch.hpp	2930;"	d
INTERNAL_CATCH_STRINGIZE	unittest/catch.hpp	741;"	d
INTERNAL_CATCH_STRINGIZE2	unittest/catch.hpp	743;"	d
INTERNAL_CATCH_STRINGIZE2	unittest/catch.hpp	747;"	d
INTERNAL_CATCH_STRINGIZE3	unittest/catch.hpp	748;"	d
INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS	unittest/catch.hpp	744;"	d
INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS	unittest/catch.hpp	749;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE	unittest/catch.hpp	1208;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2	unittest/catch.hpp	1181;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD	unittest/catch.hpp	1338;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2	unittest/catch.hpp	1308;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE	unittest/catch.hpp	1166;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2	unittest/catch.hpp	1132;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD	unittest/catch.hpp	1293;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2	unittest/catch.hpp	1256;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG	unittest/catch.hpp	1301;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG	unittest/catch.hpp	1174;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE	unittest/catch.hpp	1117;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_2	unittest/catch.hpp	1087;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD	unittest/catch.hpp	1241;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2	unittest/catch.hpp	1211;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION	unittest/catch.hpp	1030;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2	unittest/catch.hpp	1005;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG	unittest/catch.hpp	1249;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION	unittest/catch.hpp	1038;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION	unittest/catch.hpp	1014;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2	unittest/catch.hpp	1003;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG	unittest/catch.hpp	1125;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION	unittest/catch.hpp	1022;"	d
INTERNAL_CATCH_TEST	unittest/catch.hpp	2703;"	d
INTERNAL_CATCH_TESTCASE	unittest/catch.hpp	1054;"	d
INTERNAL_CATCH_TESTCASE2	unittest/catch.hpp	1047;"	d
INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION	unittest/catch.hpp	996;"	d
INTERNAL_CATCH_TESTCASE_NO_REGISTRATION	unittest/catch.hpp	994;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	unittest/catch.hpp	1076;"	d
INTERNAL_CATCH_TEST_CASE_METHOD2	unittest/catch.hpp	1065;"	d
INTERNAL_CATCH_THROWS	unittest/catch.hpp	2741;"	d
INTERNAL_CATCH_THROWS_AS	unittest/catch.hpp	2758;"	d
INTERNAL_CATCH_THROWS_MATCHES	unittest/catch.hpp	3814;"	d
INTERNAL_CATCH_THROWS_STR_MATCHES	unittest/catch.hpp	2800;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	unittest/catch.hpp	3068;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION2	unittest/catch.hpp	3060;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG	unittest/catch.hpp	2996;"	d
INTERNAL_CATCH_TRY	unittest/catch.hpp	2690;"	d
INTERNAL_CATCH_TYPE_GEN	unittest/catch.hpp	782;"	d
INTERNAL_CATCH_UNIQUE_NAME	unittest/catch.hpp	471;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	unittest/catch.hpp	469;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	unittest/catch.hpp	468;"	d
INTERNAL_CATCH_UNSCOPED_INFO	unittest/catch.hpp	2795;"	d
INTERNAL_CATCH_VA_NARGS_IMPL	unittest/catch.hpp	780;"	d
INTERNAL_CHECK_THAT	unittest/catch.hpp	3804;"	d
ISSUE_URL	crash.cpp	/^const char* ISSUE_URL = "https:\/\/github.com\/vgteam\/vg\/issues\/new\/choose";$/;"	m	namespace:vg	file:
IS_REVERSED_OFFSET	snarl_distance_index.hpp	/^    const static size_t IS_REVERSED_OFFSET = 43;$/;"	m	struct:vg::MIPayload
IS_TRIVIAL_CHAIN_OFFSET	snarl_distance_index.hpp	/^    const static size_t IS_TRIVIAL_CHAIN_OFFSET = 42;$/;"	m	struct:vg::MIPayload
IStream	unittest/catch.hpp	/^    struct IStream {$/;"	s	namespace:Catch
ITestCaseRegistry	unittest/catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestInvoker	unittest/catch.hpp	/^    struct ITestInvoker {$/;"	s	namespace:Catch
IdentityOverlay	identity_overlay.cpp	/^    IdentityOverlay::IdentityOverlay(const HandleGraph* graph) : graph(graph) {$/;"	f	class:vg::IdentityOverlay
IdentityOverlay	identity_overlay.hpp	/^    class IdentityOverlay : public ExpandingOverlayGraph {$/;"	c	namespace:vg
IncrementIter	utility.hpp	/^    IncrementIter(size_t number) : current(number) {$/;"	f	struct:vg::IncrementIter
IncrementIter	utility.hpp	/^struct IncrementIter {$/;"	s	namespace:vg
IncrementalSubgraph	incremental_subgraph.cpp	/^IncrementalSubgraph::IncrementalSubgraph(const HandleGraph& graph,$/;"	f	class:vg::IncrementalSubgraph
IncrementalSubgraph	incremental_subgraph.hpp	/^class IncrementalSubgraph : public ExpandingOverlayGraph {$/;"	c	namespace:vg
IndexFile	index_registry.cpp	/^IndexFile::IndexFile(const IndexName& identifier, const string& suffix) : identifier(identifier), suffix(suffix) {$/;"	f	class:vg::IndexFile
IndexFile	index_registry.hpp	/^class IndexFile {$/;"	c	namespace:vg
IndexRecipe	index_registry.cpp	/^IndexRecipe::IndexRecipe(const vector<const IndexFile*>& inputs,$/;"	f	class:vg::IndexRecipe
IndexRecipe	index_registry.hpp	/^struct IndexRecipe {$/;"	s	namespace:vg
IndexRegistry	index_registry.cpp	/^IndexRegistry::IndexRegistry(IndexRegistry&& other) :$/;"	f	class:vg::IndexRegistry
IndexRegistry	index_registry.hpp	/^class IndexRegistry {$/;"	c	namespace:vg
IndexedVG	indexed_vg.cpp	/^IndexedVG::IndexedVG(string graph_filename) : vg_filename(graph_filename), index(),$/;"	f	class:vg::IndexedVG
IndexedVG	indexed_vg.hpp	/^class IndexedVG : public HandleGraph {$/;"	c	namespace:vg
IndexingParameters	index_registry.hpp	/^struct IndexingParameters {$/;"	s	namespace:vg
IndexingPlan	index_registry.hpp	/^class IndexingPlan {$/;"	c	namespace:vg
Info	unittest/catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
InsertCol	banded_global_aligner.hpp	/^        enum matrix_t {Match, InsertCol, InsertRow};$/;"	e	enum:vg::BandedGlobalAligner::matrix_t
InsertHaplotypeCommand	genome_state.hpp	/^struct InsertHaplotypeCommand : public GenomeStateCommand {$/;"	s	namespace:vg
InsertRow	banded_global_aligner.hpp	/^        enum matrix_t {Match, InsertCol, InsertRow};$/;"	e	enum:vg::BandedGlobalAligner::matrix_t
InsertionMatch	unittest/gbwt_extender.cpp	/^    InsertionMatch, \/\/ Insertion before the base, then the base is a match (etc.)$/;"	m	class:vg::unittest::__anon3::GraphBaseFate	file:
InsertionMismatch	unittest/gbwt_extender.cpp	/^    InsertionMismatch,$/;"	m	class:vg::unittest::__anon3::GraphBaseFate	file:
InsufficientInputException	index_registry.hpp	/^class InsufficientInputException : public runtime_error {$/;"	c	namespace:vg
IntegratedSnarlFinder	integrated_snarl_finder.cpp	/^IntegratedSnarlFinder::IntegratedSnarlFinder(const HandleGraph& graph) : HandleGraphSnarlFinder(&graph) {$/;"	f	class:vg::IntegratedSnarlFinder
IntegratedSnarlFinder	integrated_snarl_finder.hpp	/^class IntegratedSnarlFinder : public HandleGraphSnarlFinder {$/;"	c	namespace:vg
InternalParseResult	unittest/catch.hpp	/^        virtual auto parse( std::string const& exeName, TokenStream const &tokens) const -> InternalParseResult  = 0;$/;"	m	namespace:Catch::Detail
IsStreamInsertable	unittest/catch.hpp	/^        class IsStreamInsertable {$/;"	c	namespace:Catch::Detail
Item	funnel.hpp	/^    struct Item {$/;"	s	class:vg::Funnel::State
IterFCmp	incremental_subgraph.hpp	/^    struct IterFCmp {$/;"	s	class:vg::IncrementalSubgraph
JSONStreamHelper	io/json_stream_helper.hpp	/^class JSONStreamHelper$/;"	c	namespace:vg::io
JSONStreamHelper	io/json_stream_helper.hpp	/^inline JSONStreamHelper<T>::JSONStreamHelper(const std::string& file_name) {$/;"	f	class:vg::io::JSONStreamHelper
JobSchedule	job_schedule.cpp	/^JobSchedule::JobSchedule(const vector<pair<int64_t, int64_t>>& job_requirements,$/;"	f	class:vg::JobSchedule
JobSchedule	job_schedule.hpp	/^class JobSchedule {$/;"	c	namespace:vg
JoinedSpliceGraph	splicing.cpp	/^JoinedSpliceGraph::JoinedSpliceGraph(const HandleGraph& parent_graph,$/;"	f	class:vg::JoinedSpliceGraph
JoinedSpliceGraph	splicing.hpp	/^class JoinedSpliceGraph : public HandleGraph {$/;"	c	namespace:vg
K	traversal_finder.hpp	/^    size_t K;$/;"	m	class:vg::FlowTraversalFinder
KFF_BLOCK_SIZE	recombinator.cpp	/^constexpr size_t Recombinator::KFF_BLOCK_SIZE;$/;"	m	class:vg::Recombinator	file:
KFF_BLOCK_SIZE	recombinator.hpp	/^    constexpr static size_t KFF_BLOCK_SIZE = 1000000;$/;"	m	class:vg::Recombinator
KmerPosition	vg.hpp	/^struct KmerPosition {$/;"	s	namespace:vg
LONG_LIMIT	minimizer_mapper.hpp	/^    const static size_t LONG_LIMIT = 256;$/;"	m	class:vg::MinimizerMapper
LazyRNG	utility.cpp	/^LazyRNG::LazyRNG(const std::function<string(void)>& get_seed) : get_seed(get_seed) {$/;"	f	class:vg::LazyRNG
LazyRNG	utility.hpp	/^class LazyRNG {$/;"	c	namespace:vg
LegacyCaller	graph_caller.cpp	/^LegacyCaller::LegacyCaller(const PathPositionHandleGraph& graph,$/;"	f	class:vg::LegacyCaller
LegacyCaller	graph_caller.hpp	/^class LegacyCaller : public GraphCaller, public VCFOutputCaller {$/;"	c	namespace:vg
LinearScoreProvider	haplotypes.cpp	/^LinearScoreProvider::LinearScoreProvider(const linear_haplo_structure& index) : index(index) {$/;"	f	class:haplo::LinearScoreProvider
LinearScoreProvider	haplotypes.hpp	/^class LinearScoreProvider : public ScoreProvider {$/;"	c	namespace:haplo
LocalHaplotype	recombinator.hpp	/^    struct LocalHaplotype {$/;"	s	class:vg::Recombinator
Lock	graph_synchronizer.cpp	/^GraphSynchronizer::Lock::Lock(GraphSynchronizer& synchronizer, const string& path_name, size_t start, size_t past_end) :$/;"	f	class:vg::GraphSynchronizer::Lock
Lock	graph_synchronizer.cpp	/^GraphSynchronizer::Lock::Lock(GraphSynchronizer& synchronizer,$/;"	f	class:vg::GraphSynchronizer::Lock
Lock	graph_synchronizer.hpp	/^    class Lock {$/;"	c	class:vg::GraphSynchronizer
MAGIC_BYTES	stream_index.cpp	/^const string StreamIndexBase::MAGIC_BYTES = "GAI!";$/;"	m	class:vg::StreamIndexBase	file:
MAGIC_BYTES	stream_index.hpp	/^    const static string MAGIC_BYTES;$/;"	m	class:vg::StreamIndexBase
MAGIC_NUMBER	recombinator.cpp	/^constexpr std::uint32_t Haplotypes::Header::MAGIC_NUMBER;$/;"	m	class:vg::Haplotypes::Header	file:
MAGIC_NUMBER	recombinator.hpp	/^        constexpr static std::uint32_t MAGIC_NUMBER = 0x4C504148; \/\/ "HAPL"$/;"	m	struct:vg::Haplotypes::Header
MANY_LIMIT	minimizer_mapper.hpp	/^    const static size_t MANY_LIMIT = 20;$/;"	m	class:vg::MinimizerMapper
MATCH	dozeu_interface.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon21	file:
MATCH	qual_adj_xdrop_aligner.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon19	file:
MATCH	xdrop_aligner.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon18	file:
MATCHES	gbwt_extender.cpp	/^    constexpr static size_t MATCHES = 0;$/;"	m	struct:vg::WFANode	file:
MAX_AT_LEAST_ONE_EVENTS	statistics.hpp	/^constexpr static size_t MAX_AT_LEAST_ONE_EVENTS = 32;$/;"	m	namespace:vg
MAX_DISPLAYED_SUGGESTIONS_PER_CATEGORY	explainer.hpp	/^    static const size_t MAX_DISPLAYED_SUGGESTIONS_PER_CATEGORY;$/;"	m	class:vg::DiagramExplainer
MAX_DP_LENGTH	minimizer_mapper.hpp	/^    static constexpr int MAX_DP_LENGTH = 30000;$/;"	m	class:vg::MinimizerMapper
MAX_INPUT_VERSION	stream_index.hpp	/^    const static uint32_t MAX_INPUT_VERSION = 1;$/;"	m	class:vg::StreamIndexBase
MAX_ITERATIONS	subcommand/minimizer_main.cpp	/^constexpr size_t MAX_ITERATIONS = gbwtgraph::MinimizerHeader::FLAG_WEIGHT_MASK >> gbwtgraph::MinimizerHeader::FLAG_WEIGHT_OFFSET;$/;"	v
MAX_MISMATCHES	gbwt_extender.cpp	/^constexpr size_t GaplessExtender::MAX_MISMATCHES;$/;"	m	class:vg::GaplessExtender	file:
MAX_MISMATCHES	gbwt_extender.hpp	/^    constexpr static size_t MAX_MISMATCHES = 4;$/;"	m	class:vg::GaplessExtender
MCMCCaller	mcmc_caller.cpp	/^    MCMCCaller::MCMCCaller(const PathPositionHandleGraph* path_position_handle_graph,$/;"	f	class:vg::MCMCCaller
MCMCCaller	mcmc_caller.hpp	/^    class MCMCCaller : public VCFOutputCaller {$/;"	c	namespace:vg
MCMCGenotyper	mcmc_genotyper.cpp	/^    MCMCGenotyper::MCMCGenotyper(SnarlManager& snarls, VG& graph, const int n_iterations, const int seed, const int burn_in, const int frequency):snarls(snarls), graph(graph), n_iterations(n_iterations), $/;"	f	class:vg::MCMCGenotyper
MCMCGenotyper	mcmc_genotyper.hpp	/^class MCMCGenotyper{$/;"	c	namespace:vg
MEMAccelerator	mem_accelerator.cpp	/^MEMAccelerator::MEMAccelerator(const gcsa::GCSA& gcsa_index, size_t k) : k(k)$/;"	f	class:vg::MEMAccelerator
MEMAccelerator	mem_accelerator.hpp	/^class MEMAccelerator {$/;"	c	namespace:vg
MEMChainModel	cluster.cpp	/^MEMChainModel::MEMChainModel($/;"	f	class:vg::MEMChainModel
MEMChainModel	cluster.hpp	/^class MEMChainModel {$/;"	c	namespace:vg
MEMChainModelVertex	cluster.hpp	/^class MEMChainModelVertex {$/;"	c	namespace:vg
MEMClusterer	cluster.hpp	/^class MEMClusterer {$/;"	c	namespace:vg
MEM_STATS_FILE	subcommand/mpmap_main.cpp	38;"	d	file:
MIN_VERSION	recombinator.cpp	/^constexpr std::uint32_t Haplotypes::Header::MIN_VERSION;$/;"	m	class:vg::Haplotypes::Header	file:
MIN_VERSION	recombinator.hpp	/^        constexpr static std::uint32_t MIN_VERSION = 1;$/;"	m	struct:vg::Haplotypes::Header
MIPayload	snarl_distance_index.hpp	/^struct MIPayload {$/;"	s	namespace:vg
MIPayloadValues	snarl_distance_index.hpp	/^struct MIPayloadValues{$/;"	s	namespace:vg
MISMATCH	dozeu_interface.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon21	file:
MISMATCH	qual_adj_xdrop_aligner.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon19	file:
MISMATCH	xdrop_aligner.cpp	/^enum { MISMATCH = 1, MATCH = 2, INS = 3, DEL = 4 };$/;"	e	enum:__anon18	file:
MSAConverter	msa_converter.cpp	/^    MSAConverter::MSAConverter() {$/;"	f	class:vg::MSAConverter
MSAConverter	msa_converter.hpp	/^    class MSAConverter : public Progressive  {$/;"	c	namespace:vg
Mapper	mapper.cpp	/^Mapper::Mapper(PathPositionHandleGraph* xidex,$/;"	f	class:vg::Mapper
Mapper	mapper.cpp	/^Mapper::Mapper(void) : BaseMapper() {$/;"	f	class:vg::Mapper
Mapper	mapper.hpp	/^class Mapper : public BaseMapper {$/;"	c	namespace:vg
MappingHash	transcriptome.hpp	/^struct MappingHash$/;"	s	namespace:vg
MappingQualityMethod	mapper.hpp	/^enum MappingQualityMethod { Approx, Exact, Adaptive, None };$/;"	g	namespace:vg
MappingRun	subcommand/gamcompare_main.cpp	/^struct MappingRun {$/;"	s	file:
MarkovDistribution	sampler.hpp	/^    class MarkovDistribution {$/;"	c	class:vg::NGSSimulator
MarkovDistribution	sampler.hpp	/^NGSSimulator::MarkovDistribution<From, To>::MarkovDistribution(uint64_t seed) : prng(seed) {$/;"	f	class:vg::NGSSimulator::MarkovDistribution
Match	banded_global_aligner.hpp	/^        enum matrix_t {Match, InsertCol, InsertRow};$/;"	e	enum:vg::BandedGlobalAligner::matrix_t
Match	unittest/gbwt_extender.cpp	/^    Match = 0,$/;"	m	class:vg::unittest::__anon3::GraphBaseFate	file:
MatchInsertion	unittest/gbwt_extender.cpp	/^    MatchInsertion,$/;"	m	class:vg::unittest::__anon3::GraphBaseFate	file:
MatchPos	gbwt_extender.cpp	/^    MatchPos() : seq_offset(0), node_offset(0) {}$/;"	f	struct:vg::MatchPos
MatchPos	gbwt_extender.cpp	/^    MatchPos(uint32_t seq_offset, uint32_t node_offset, const PathList& path) : seq_offset(seq_offset), node_offset(node_offset), path(path) {}$/;"	f	struct:vg::MatchPos
MatchPos	gbwt_extender.cpp	/^struct MatchPos {$/;"	s	namespace:vg	file:
MaximalExactMatch	mem.hpp	/^    MaximalExactMatch(string::const_iterator b,$/;"	f	class:vg::MaximalExactMatch
MaximalExactMatch	mem.hpp	/^class MaximalExactMatch {$/;"	c	namespace:vg
MemoizingGraph	memoizing_graph.cpp	/^    MemoizingGraph::MemoizingGraph(const PathPositionHandleGraph* graph) : graph(graph) {$/;"	f	class:vg::MemoizingGraph
MemoizingGraph	memoizing_graph.hpp	/^    class MemoizingGraph : public PathPositionHandleGraph {$/;"	c	namespace:vg
MergedAdjacencyGraph	integrated_snarl_finder.cpp	/^IntegratedSnarlFinder::MergedAdjacencyGraph::MergedAdjacencyGraph(const MergedAdjacencyGraph& other) : MergedAdjacencyGraph(other.graph) {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
MergedAdjacencyGraph	integrated_snarl_finder.cpp	/^IntegratedSnarlFinder::MergedAdjacencyGraph::MergedAdjacencyGraph(const RankedHandleGraph* graph) : graph(graph),$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
MergedAdjacencyGraph	integrated_snarl_finder.cpp	/^class IntegratedSnarlFinder::MergedAdjacencyGraph {$/;"	c	class:vg::IntegratedSnarlFinder	file:
MinDistanceClusterer	cluster.cpp	/^MinDistanceClusterer::MinDistanceClusterer(SnarlDistanceIndex* distance_index) : distance_index(distance_index) {$/;"	f	class:vg::MinDistanceClusterer
MinDistanceClusterer	cluster.hpp	/^class MinDistanceClusterer : public MEMClusterer {$/;"	c	namespace:vg
Minimizer	minimizer_mapper.hpp	/^    struct Minimizer {$/;"	s	class:vg::MinimizerMapper
MinimizerMapper	minimizer_mapper.cpp	/^MinimizerMapper::MinimizerMapper(const gbwtgraph::GBWTGraph& graph,$/;"	f	class:vg::MinimizerMapper
MinimizerMapper	minimizer_mapper.hpp	/^class MinimizerMapper : public AlignerClient {$/;"	c	namespace:vg
Mismatch	unittest/gbwt_extender.cpp	/^    Mismatch,$/;"	m	class:vg::unittest::__anon3::GraphBaseFate	file:
MismatchInsertion	unittest/gbwt_extender.cpp	/^    MismatchInsertion,$/;"	m	class:vg::unittest::__anon3::GraphBaseFate	file:
MockBackTranslation	unittest/back_translate.cpp	/^class MockBackTranslation : public NamedNodeBackTranslation {$/;"	c	namespace:vg::unittest	file:
MultipathAlignmentEmitter	multipath_alignment_emitter.cpp	/^MultipathAlignmentEmitter::MultipathAlignmentEmitter(const string& filename, size_t num_threads, const string out_format,$/;"	f	class:vg::MultipathAlignmentEmitter
MultipathAlignmentEmitter	multipath_alignment_emitter.hpp	/^class MultipathAlignmentEmitter : public HTSWriter {$/;"	c	namespace:vg
MultipathAlignmentGraph	multipath_alignment_graph.cpp	/^    MultipathAlignmentGraph::MultipathAlignmentGraph(const HandleGraph& graph, MultipathMapper::memcluster_t& hits,$/;"	f	class:vg::MultipathAlignmentGraph
MultipathAlignmentGraph	multipath_alignment_graph.cpp	/^    MultipathAlignmentGraph::MultipathAlignmentGraph(const HandleGraph& graph, const Alignment& alignment, SnarlManager* snarl_manager,$/;"	f	class:vg::MultipathAlignmentGraph
MultipathAlignmentGraph	multipath_alignment_graph.cpp	/^    MultipathAlignmentGraph::MultipathAlignmentGraph(const HandleGraph& graph,$/;"	f	class:vg::MultipathAlignmentGraph
MultipathAlignmentGraph	multipath_alignment_graph.hpp	/^    class MultipathAlignmentGraph {$/;"	c	namespace:vg
MultipathMapper	multipath_mapper.cpp	/^    MultipathMapper::MultipathMapper(PathPositionHandleGraph* graph, gcsa::GCSA* gcsa_index, gcsa::LCPArray* lcp_array,$/;"	f	class:vg::MultipathMapper
MultipathMapper	multipath_mapper.hpp	/^    class MultipathMapper : public BaseMapper  {$/;"	c	namespace:vg
MultipathMapperSpliceTest	unittest/splicing.cpp	/^    MultipathMapperSpliceTest(PathPositionHandleGraph* graph, gcsa::GCSA* gcsa_index,$/;"	f	class:vg::unittest::MultipathMapperSpliceTest
MultipathMapperSpliceTest	unittest/splicing.cpp	/^class MultipathMapperSpliceTest : public MultipathMapper {$/;"	c	namespace:vg::unittest	file:
MultipathProblem	multipath_alignment.cpp	/^        MultipathProblem(const multipath_alignment_t& multipath_aln, bool subpath_global, bool forward)$/;"	f	struct:vg::MultipathProblem
MultipathProblem	multipath_alignment.cpp	/^    struct MultipathProblem {$/;"	s	namespace:vg	file:
MutableGraphImplementation	index_registry.hpp	/^    enum MutableGraphImplementation {HashGraph, PackedGraph, VG};$/;"	g	struct:vg::IndexingParameters
NGSSimulator	sampler.cpp	/^NGSSimulator::NGSSimulator(PathPositionHandleGraph& graph,$/;"	f	class:vg::NGSSimulator
NGSSimulator	sampler.hpp	/^class NGSSimulator : public AbstractReadSampler {$/;"	c	namespace:vg
NODE_LENGTH_MASK	snarl_distance_index.hpp	/^    const static code_type NODE_LENGTH_MASK = (static_cast<code_type>(1) << NODE_LENGTH_WIDTH) - 1;$/;"	m	struct:vg::MIPayload
NODE_LENGTH_OFFSET	snarl_distance_index.hpp	/^    const static size_t NODE_LENGTH_OFFSET = 44;$/;"	m	struct:vg::MIPayload
NODE_LENGTH_WIDTH	snarl_distance_index.hpp	/^    const static size_t NODE_LENGTH_WIDTH = 12;$/;"	m	struct:vg::MIPayload
NODE_MISSING	alignment.hpp	/^        NODE_MISSING,$/;"	e	enum:vg::AlignmentValidity::Problem
NODE_RECORD_MASK	snarl_distance_index.hpp	/^    const static code_type NODE_RECORD_MASK = (static_cast<code_type>(1) << NODE_RECORD_WIDTH) - 1;$/;"	m	struct:vg::MIPayload
NODE_RECORD_OFFSET	snarl_distance_index.hpp	/^    const static size_t NODE_RECORD_OFFSET = 32;$/;"	m	struct:vg::MIPayload
NODE_RECORD_OFFSET_MASK	snarl_distance_index.hpp	/^    const static code_type NODE_RECORD_OFFSET_MASK = (static_cast<code_type>(1) << NODE_RECORD_OFFSET_WIDTH) - 1;$/;"	m	struct:vg::MIPayload
NODE_RECORD_OFFSET_OFFSET	snarl_distance_index.hpp	/^    const static size_t NODE_RECORD_OFFSET_OFFSET = 56;$/;"	m	struct:vg::MIPayload
NODE_RECORD_OFFSET_WIDTH	snarl_distance_index.hpp	/^    const static size_t NODE_RECORD_OFFSET_WIDTH = 8;$/;"	m	struct:vg::MIPayload
NODE_RECORD_WIDTH	snarl_distance_index.hpp	/^    const static size_t NODE_RECORD_WIDTH = 32;$/;"	m	struct:vg::MIPayload
NODE_TOO_SHORT	alignment.hpp	/^        NODE_TOO_SHORT$/;"	e	enum:vg::AlignmentValidity::Problem
NONE	funnel.hpp	/^        NONE = 0,$/;"	m	class:vg::Funnel::State
NO_CODE	snarl_distance_index.cpp	/^constexpr gbwtgraph::Payload MIPayload::NO_CODE; $/;"	m	class:vg::MIPayload	file:
NO_CODE	snarl_distance_index.hpp	/^    constexpr static gbwtgraph::Payload NO_CODE = gbwtgraph::Payload::default_payload();$/;"	m	struct:vg::MIPayload
NO_READ_INDEX	minimizer_mapper.cpp	/^const read_alignment_index_t NO_READ_INDEX = {std::numeric_limits<size_t>::infinity(), std::numeric_limits<size_t>::infinity()};$/;"	m	namespace:vg	file:
NO_VALUE	snarl_distance_index.cpp	/^constexpr size_t MIPayload::NO_VALUE;$/;"	m	class:vg::MIPayload	file:
NO_VALUE	snarl_distance_index.hpp	/^    constexpr static std::size_t NO_VALUE = std::numeric_limits<size_t>::max(); $/;"	m	struct:vg::MIPayload
NUM_CANDIDATES	recombinator.cpp	/^constexpr size_t Recombinator::NUM_CANDIDATES;$/;"	m	class:vg::Recombinator	file:
NUM_CANDIDATES	recombinator.hpp	/^    constexpr static size_t NUM_CANDIDATES = 32;$/;"	m	class:vg::Recombinator
NUM_HAPLOTYPES	recombinator.cpp	/^constexpr size_t Recombinator::NUM_HAPLOTYPES;$/;"	m	class:vg::Recombinator	file:
NUM_HAPLOTYPES	recombinator.hpp	/^    constexpr static size_t NUM_HAPLOTYPES = 4;$/;"	m	class:vg::Recombinator
NUM_INLINE	gbwt_extender.cpp	/^        const static size_t NUM_INLINE = 4;$/;"	m	struct:vg::MatchPos::PathList	file:
NameAndTags	unittest/catch.hpp	/^struct NameAndTags {$/;"	s	namespace:Catch
NameMapper	name_mapper.hpp	/^class NameMapper {$/;"	c	namespace:vg
NestedCachedPackedTraversalSupportFinder	traversal_support.cpp	/^NestedCachedPackedTraversalSupportFinder::NestedCachedPackedTraversalSupportFinder(const Packer& packer, SnarlManager& snarl_manager, size_t cache_size) :$/;"	f	class:vg::NestedCachedPackedTraversalSupportFinder
NestedCachedPackedTraversalSupportFinder	traversal_support.hpp	/^class NestedCachedPackedTraversalSupportFinder : public CachedPackedTraversalSupportFinder {$/;"	c	namespace:vg
NestedFlowCaller	graph_caller.cpp	/^NestedFlowCaller::NestedFlowCaller(const PathPositionHandleGraph& graph,$/;"	f	class:vg::NestedFlowCaller
NestedFlowCaller	graph_caller.hpp	/^class NestedFlowCaller : public GraphCaller, public VCFOutputCaller, public GAFOutputCaller {$/;"	c	namespace:vg
NestedTraversalFinder	nested_traversal_finder.cpp	/^NestedTraversalFinder::NestedTraversalFinder(SupportAugmentedGraph& augmented,$/;"	f	class:vg::NestedTraversalFinder
NestedTraversalFinder	nested_traversal_finder.hpp	/^class NestedTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
NetGraph	snarls.cpp	/^NetGraph::NetGraph(const Visit& start, const Visit& end, const HandleGraph* graph, bool use_internal_connectivity) :$/;"	f	class:vg::NetGraph
NetGraph	snarls.cpp	/^NetGraph::NetGraph(const Visit& start, const Visit& end,$/;"	f	class:vg::NetGraph
NetGraph	snarls.hpp	/^    NetGraph(const Visit& start, const Visit& end,$/;"	f	class:vg::NetGraph
NetGraph	snarls.hpp	/^class NetGraph : public HandleGraph {$/;"	c	namespace:vg
No	unittest/catch.hpp	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
NoAlignmentInBandException	banded_global_aligner.hpp	/^    class NoAlignmentInBandException : public exception {$/;"	c	namespace:vg
Node	algorithms/min_cut_graph.hpp	/^        struct Node{$/;"	s	namespace:vg::algorithms
Node	utility.hpp	/^    typedef TreeNode<T> Node;$/;"	t	struct:vg::Tree
NodeSide	nodeside.hpp	/^    inline NodeSide(): NodeSide(0, false) {$/;"	f	class:vg::NodeSide
NodeSide	nodeside.hpp	/^    inline NodeSide(id_t node, bool is_end = false): node(node), is_end(is_end) {$/;"	f	class:vg::NodeSide
NodeSide	nodeside.hpp	/^class NodeSide {$/;"	c	namespace:vg
NodeTraversal	nodetraversal.hpp	/^    explicit inline NodeTraversal(Node* node, bool backward = false): node(node), backward(backward) {$/;"	f	class:vg::NodeTraversal
NodeTraversal	nodetraversal.hpp	/^    inline NodeTraversal(): NodeTraversal(nullptr) {$/;"	f	class:vg::NodeTraversal
NodeTraversal	nodetraversal.hpp	/^class NodeTraversal {$/;"	c	namespace:vg
NonCopyable	unittest/catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
None	index_registry.hpp	/^    enum Verbosity {None = 0, Basic = 1, Debug = 2};$/;"	e	enum:vg::IndexingParameters::Verbosity
None	mapper.hpp	/^enum MappingQualityMethod { Approx, Exact, Adaptive, None };$/;"	e	enum:vg::MappingQualityMethod
Normal	unittest/catch.hpp	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
Null	multipath_alignment.hpp	/^        enum anno_type_t {Null = 0, Double = 2, Bool = 3, String = 4};$/;"	e	enum:vg::multipath_alignment_t::anno_type_t
NullClusterer	cluster.hpp	/^class NullClusterer : public MEMClusterer {$/;"	c	namespace:vg
NullMaskingGraph	null_masking_graph.cpp	/^NullMaskingGraph::NullMaskingGraph(const HandleGraph* graph) : graph(graph) {$/;"	f	class:vg::NullMaskingGraph
NullMaskingGraph	null_masking_graph.hpp	/^class NullMaskingGraph : public ExpandingOverlayGraph {$/;"	c	namespace:vg
OC_MAKE_UNIQUE_NAME	unittest/catch.hpp	5035;"	d
OC_TEST_CASE	unittest/catch.hpp	5047;"	d
OC_TEST_CASE2	unittest/catch.hpp	5036;"	d
OK	alignment.hpp	/^        OK,$/;"	e	enum:vg::AlignmentValidity::Problem
OPT_ALT_PATHS	subcommand/mpmap_main.cpp	210;"	d	file:
OPT_ALWAYS_CHECK_POPULATION	subcommand/mpmap_main.cpp	183;"	d	file:
OPT_APPROX_EXP	subcommand/mpmap_main.cpp	188;"	d	file:
OPT_BAND_PADDING_MULTIPLIER	subcommand/mpmap_main.cpp	192;"	d	file:
OPT_BUILD_VGI_INDEX	subcommand/index_main.cpp	99;"	d	file:
OPT_COMPONENT_MIN_DIST	subcommand/mpmap_main.cpp	191;"	d	file:
OPT_DISTANCE_SNARL_LIMIT	subcommand/index_main.cpp	101;"	d	file:
OPT_EXCLUDE_UNALIGNED	subcommand/map_main.cpp	112;"	d	file:
OPT_FAN_OUT_DIFF	subcommand/mpmap_main.cpp	207;"	d	file:
OPT_FAN_OUT_QUAL	subcommand/mpmap_main.cpp	205;"	d	file:
OPT_FORCE_HAPLOTYPE_COUNT	subcommand/mpmap_main.cpp	184;"	d	file:
OPT_FORCE_PHASED	subcommand/autoindex_main.cpp	140;"	d	file:
OPT_FORCE_UNPHASED	subcommand/autoindex_main.cpp	139;"	d	file:
OPT_FRAGMENT_MEAN	subcommand/giraffe_main.cpp	459;"	d	file:
OPT_FRAGMENT_STDEV	subcommand/giraffe_main.cpp	460;"	d	file:
OPT_GBWT_BUFFER_SIZE	subcommand/autoindex_main.cpp	141;"	d	file:
OPT_GCSA_SIZE_LIMIT	subcommand/autoindex_main.cpp	142;"	d	file:
OPT_GREEDY_MEM_RESTART_MAX_LCP	subcommand/mpmap_main.cpp	201;"	d	file:
OPT_GREEDY_MIN_DIST	subcommand/mpmap_main.cpp	190;"	d	file:
OPT_HARD_HIT_MAX_MULTIPLIER	subcommand/mpmap_main.cpp	193;"	d	file:
OPT_KEEP_INTERMEDIATE	subcommand/autoindex_main.cpp	138;"	d	file:
OPT_MAX_FANS_OUT	subcommand/mpmap_main.cpp	206;"	d	file:
OPT_MAX_MOTIF_PAIRS	subcommand/mpmap_main.cpp	216;"	d	file:
OPT_MAX_PATHS	subcommand/mpmap_main.cpp	189;"	d	file:
OPT_MAX_RESCUE_ATTEMPTS	subcommand/mpmap_main.cpp	194;"	d	file:
OPT_MAX_RESCUE_P_VALUE	subcommand/mpmap_main.cpp	209;"	d	file:
OPT_MAX_TRIES	subcommand/sim_main.cpp	134;"	d	file:
OPT_MIN_DIST_CLUSTER	subcommand/mpmap_main.cpp	187;"	d	file:
OPT_MULTI_POSITION	subcommand/sim_main.cpp	133;"	d	file:
OPT_NAMED_COORDINATES	subcommand/giraffe_main.cpp	463;"	d	file:
OPT_NO_CLUSTER	subcommand/mpmap_main.cpp	199;"	d	file:
OPT_NO_EMBEDDED_HAPLOTYPES	subcommand/chunk_main.cpp	122;"	d	file:
OPT_NO_GREEDY_MEM_RESTARTS	subcommand/mpmap_main.cpp	200;"	d	file:
OPT_NO_OUTPUT	subcommand/mpmap_main.cpp	203;"	d	file:
OPT_OUTPUT_BASENAME	subcommand/giraffe_main.cpp	455;"	d	file:
OPT_PATH_RESCUE_GRAPH	subcommand/mpmap_main.cpp	208;"	d	file:
OPT_PRUNE_EXP	subcommand/mpmap_main.cpp	181;"	d	file:
OPT_RECOMBINATION_PENALTY	subcommand/map_main.cpp	111;"	d	file:
OPT_RECOMBINATION_PENALTY	subcommand/mpmap_main.cpp	182;"	d	file:
OPT_REF_PATHS	subcommand/giraffe_main.cpp	461;"	d	file:
OPT_REF_PATHS	subcommand/map_main.cpp	113;"	d	file:
OPT_RENAME_VARIANTS	subcommand/index_main.cpp	100;"	d	file:
OPT_REPORT_ALLELIC_MAPQ	subcommand/mpmap_main.cpp	214;"	d	file:
OPT_REPORT_NAME	subcommand/giraffe_main.cpp	456;"	d	file:
OPT_RESEED_LENGTH	subcommand/mpmap_main.cpp	215;"	d	file:
OPT_SCORE_MATRIX	subcommand/align_main.cpp	59;"	d	file:
OPT_SCORE_MATRIX	subcommand/map_main.cpp	110;"	d	file:
OPT_SECONDARY_MAX_DIFF	subcommand/mpmap_main.cpp	198;"	d	file:
OPT_SECONDARY_RESCUE_ATTEMPTS	subcommand/mpmap_main.cpp	197;"	d	file:
OPT_SHORT_MEM_FILTER_FACTOR	subcommand/mpmap_main.cpp	202;"	d	file:
OPT_SHOW_WORK	subcommand/giraffe_main.cpp	462;"	d	file:
OPT_SNARL_MAX_CUT	subcommand/mpmap_main.cpp	212;"	d	file:
OPT_SPLICE_ODDS	subcommand/mpmap_main.cpp	213;"	d	file:
OPT_STRIPPED_MATCH	subcommand/mpmap_main.cpp	204;"	d	file:
OPT_STRIP_COUNT	subcommand/mpmap_main.cpp	196;"	d	file:
OPT_STRIP_LENGTH	subcommand/mpmap_main.cpp	195;"	d	file:
OPT_SUPPRESS_MISMAPPING_DETECTION	subcommand/mpmap_main.cpp	217;"	d	file:
OPT_SUPPRESS_SUPPRESSION	subcommand/mpmap_main.cpp	211;"	d	file:
OPT_SUPPRESS_TAIL_ANCHORS	subcommand/mpmap_main.cpp	185;"	d	file:
OPT_TOP_TRACEBACKS	subcommand/mpmap_main.cpp	186;"	d	file:
OPT_TRACK_CORRECTNESS	subcommand/giraffe_main.cpp	458;"	d	file:
OPT_TRACK_PROVENANCE	subcommand/giraffe_main.cpp	457;"	d	file:
OPT_VERBOSE	subcommand/view_main.cpp	148;"	d	file:
OS	version.cpp	/^const string Version::OS = VG_OS;$/;"	m	class:vg::Version	file:
OS	version.hpp	/^    const static string OS;$/;"	m	class:vg::Version
OUTPUT_VERSION	stream_index.hpp	/^    const static uint32_t OUTPUT_VERSION = 1;$/;"	m	class:vg::StreamIndexBase
OVERLAP_THRESHOLD	gbwt_extender.cpp	/^constexpr double GaplessExtender::OVERLAP_THRESHOLD;$/;"	m	class:vg::GaplessExtender	file:
OVERLAP_THRESHOLD	gbwt_extender.hpp	/^    constexpr static double OVERLAP_THRESHOLD = 0.8;$/;"	m	class:vg::GaplessExtender
OVERLOAD_PAIR_HASH	hash_map.hpp	26;"	d
OfType	unittest/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
Ok	unittest/catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
OperatingMode	subcommand/haplotypes_main.cpp	/^    enum OperatingMode {$/;"	g	struct:HaplotypesConfig	file:
Opt	unittest/catch.hpp	/^        Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	unittest/catch.hpp	/^        Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	unittest/catch.hpp	/^        explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	unittest/catch.hpp	/^        explicit Opt( bool &ref ) : ParserRefImpl( std::make_shared<BoundFlagRef>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	unittest/catch.hpp	/^    class Opt : public ParserRefImpl<Opt> {$/;"	c	namespace:Catch
Option	option.hpp	/^class Option : public BaseOption<Value, Parser> {$/;"	c	namespace:vg
Option	option.hpp	/^class Option<vector<Item>, Parser> : public BaseOption<vector<Item>, Parser> {$/;"	c	namespace:vg
OptionGroup	subcommand/options.hpp	/^    OptionGroup(const std::string& heading) : heading(heading) {$/;"	f	struct:vg::subcommand::OptionGroup
OptionGroup	subcommand/options.hpp	/^struct OptionGroup : public BaseOptionGroup {$/;"	s	namespace:vg::subcommand
OptionInterface	option.hpp	/^class OptionInterface {$/;"	c	namespace:vg
OptionValueParser	option.hpp	/^class OptionValueParser {$/;"	c	namespace:vg
OptionValueParser	option.hpp	/^class OptionValueParser<vector<Item>> {$/;"	c	namespace:vg
OrderedGraph	dozeu_interface.cpp	/^DozeuInterface::OrderedGraph::OrderedGraph(const HandleGraph& graph, const vector<handle_t>& order) : graph(graph), order(order) {$/;"	f	class:DozeuInterface::OrderedGraph
OrderedGraph	dozeu_interface.hpp	/^    struct OrderedGraph {$/;"	s	class:vg::DozeuInterface
OrientedDistanceClusterer	cluster.cpp	/^OrientedDistanceClusterer::OrientedDistanceClusterer(OrientedDistanceMeasurer& distance_measurer,$/;"	f	class:vg::OrientedDistanceClusterer
OrientedDistanceClusterer	cluster.hpp	/^class OrientedDistanceClusterer : public MEMClusterer {$/;"	c	namespace:vg
OrientedDistanceMeasurer	cluster.hpp	/^class OrientedDistanceMeasurer {$/;"	c	namespace:vg
PARENT_IS_CHAIN_OFFSET	snarl_distance_index.hpp	/^    const static size_t PARENT_IS_CHAIN_OFFSET = 41;$/;"	m	struct:vg::MIPayload
PARENT_IS_ROOT_OFFSET	snarl_distance_index.hpp	/^    const static size_t PARENT_IS_ROOT_OFFSET = 40;$/;"	m	struct:vg::MIPayload
PARENT_RECORD_MASK	snarl_distance_index.hpp	/^    const static code_type PARENT_RECORD_MASK = (static_cast<code_type>(1) << PARENT_RECORD_WIDTH) - 1;$/;"	m	struct:vg::MIPayload
PARENT_RECORD_OFFSET	snarl_distance_index.hpp	/^    const static size_t PARENT_RECORD_OFFSET = 0;$/;"	m	struct:vg::MIPayload
PARENT_RECORD_WIDTH	snarl_distance_index.hpp	/^    const static size_t PARENT_RECORD_WIDTH = 32;$/;"	m	struct:vg::MIPayload
PIPELINE	subcommand/subcommand.hpp	/^    PIPELINE, $/;"	e	enum:vg::subcommand::CommandCategory
PLACED	funnel.hpp	/^        PLACED = 1,$/;"	m	class:vg::Funnel::State
PREFIX_SUM_MASK	snarl_distance_index.hpp	/^    const static code_type PREFIX_SUM_MASK = (static_cast<code_type>(1) << PREFIX_SUM_WIDTH) - 1;$/;"	m	struct:vg::MIPayload
PREFIX_SUM_OFFSET	snarl_distance_index.hpp	/^    const static size_t PREFIX_SUM_OFFSET = 8;$/;"	m	struct:vg::MIPayload
PREFIX_SUM_WIDTH	snarl_distance_index.hpp	/^    const static size_t PREFIX_SUM_WIDTH = 32;$/;"	m	struct:vg::MIPayload
PRESENT_DISCOUNT	recombinator.cpp	/^constexpr double Recombinator::PRESENT_DISCOUNT;$/;"	m	class:vg::Recombinator	file:
PRESENT_DISCOUNT	recombinator.hpp	/^    constexpr static double PRESENT_DISCOUNT = 0.9;$/;"	m	class:vg::Recombinator
PRUNE_THREAD_BUFFER_SIZE	algorithms/prune.cpp	/^constexpr size_t PRUNE_THREAD_BUFFER_SIZE = 1024 * 1024;$/;"	m	namespace:vg::algorithms	file:
PackedGraph	index_registry.hpp	/^    enum MutableGraphImplementation {HashGraph, PackedGraph, VG};$/;"	e	enum:vg::IndexingParameters::MutableGraphImplementation
PackedTraversalSupportFinder	traversal_support.cpp	/^PackedTraversalSupportFinder::PackedTraversalSupportFinder(const Packer& packer, SnarlManager& snarl_manager) :$/;"	f	class:vg::PackedTraversalSupportFinder
PackedTraversalSupportFinder	traversal_support.hpp	/^class PackedTraversalSupportFinder : public TraversalSupportFinder {$/;"	c	namespace:vg
Packer	packer.cpp	/^Packer::Packer(const HandleGraph* graph) : graph(graph), data_width(8), cov_bin_size(0), edge_cov_bin_size(0), num_bases_dynamic(0), base_locks(nullptr), num_edges_dynamic(0), edge_locks(nullptr), node_quality_locks(nullptr), tmpfstream_locks(nullptr) { }$/;"	f	class:vg::Packer
Packer	packer.cpp	/^Packer::Packer(const HandleGraph* graph, bool record_bases, bool record_edges, bool record_edits, bool record_qualities, size_t bin_size, size_t coverage_bins, size_t data_width) :$/;"	f	class:vg::Packer
Packer	packer.hpp	/^class Packer {$/;"	c	namespace:vg
Packers	packer.hpp	/^class Packers : public vector<Packer> {$/;"	c	namespace:vg
PaintableSpace	funnel.hpp	/^    struct PaintableSpace {$/;"	s	class:vg::Funnel::State
PairedEndMapper	mapper.hpp	/^class PairedEndMapper {$/;"	c	namespace:vg
ParallelKFFReader	kff.cpp	/^ParallelKFFReader::ParallelKFFReader(const std::string& filename) :$/;"	f	class:vg::ParallelKFFReader
ParallelKFFReader	kff.hpp	/^class ParallelKFFReader {$/;"	c	namespace:vg
Parameters	recombinator.hpp	/^    struct Parameters {$/;"	s	class:vg::HaplotypePartitioner
Parameters	recombinator.hpp	/^    struct Parameters {$/;"	s	class:vg::Recombinator
Parser	unittest/catch.hpp	/^        auto operator+( T const &other ) const -> Parser;$/;"	m	class:Catch::ComposableParserImpl
Parser	unittest/catch.hpp	/^        auto operator|( T const &other ) const -> Parser;$/;"	m	class:Catch::ComposableParserImpl
Parser	unittest/catch.hpp	/^    struct Parser : ParserBase {$/;"	s	namespace:Catch
ParserRefImpl	unittest/catch.hpp	/^        ParserRefImpl( LambdaT const &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	unittest/catch.hpp	/^        ParserRefImpl( T &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	unittest/catch.hpp	/^        explicit ParserRefImpl( std::shared_ptr<BoundRef> const &ref ) : m_ref( ref ) {}$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	unittest/catch.hpp	/^    class ParserRefImpl : public ComposableParserImpl<DerivedT> {$/;"	c	namespace:Catch
PathBasedTraversalFinder	traversal_finder.cpp	/^PathBasedTraversalFinder::PathBasedTraversalFinder(const PathHandleGraph& g, SnarlManager& sm) : graph(g), snarlmanager(sm){$/;"	f	class:vg::PathBasedTraversalFinder
PathBasedTraversalFinder	traversal_finder.hpp	/^class PathBasedTraversalFinder : public TraversalFinder{$/;"	c	namespace:vg
PathBranch	phase_unfolder.cpp	/^struct PathBranch {$/;"	s	namespace:vg	file:
PathChunker	chunker.cpp	/^PathChunker::PathChunker(const PathPositionHandleGraph* graph) : graph(graph) {$/;"	f	class:vg::PathChunker
PathChunker	chunker.hpp	/^class PathChunker {$/;"	c	namespace:vg
PathComponentIndex	path_component_index.cpp	/^    PathComponentIndex::PathComponentIndex() {$/;"	f	class:vg::PathComponentIndex
PathComponentIndex	path_component_index.cpp	/^    PathComponentIndex::PathComponentIndex(const PathHandleGraph* graph) {$/;"	f	class:vg::PathComponentIndex
PathComponentIndex	path_component_index.hpp	/^    class PathComponentIndex {$/;"	c	namespace:vg
PathIndex	path_index.cpp	/^PathIndex::PathIndex(VG& vg, const string& path_name, bool extract_sequence) {$/;"	f	class:vg::PathIndex
PathIndex	path_index.cpp	/^PathIndex::PathIndex(const Path& path) {$/;"	f	class:vg::PathIndex
PathIndex	path_index.cpp	/^PathIndex::PathIndex(const Path& path, const HandleGraph& graph) {$/;"	f	class:vg::PathIndex
PathIndex	path_index.cpp	/^PathIndex::PathIndex(const PathHandleGraph& graph, const string& path_name, bool extract_sequence) {$/;"	f	class:vg::PathIndex
PathIndex	path_index.cpp	/^PathIndex::PathIndex(const list<mapping_t>& mappings, VG& vg) {$/;"	f	class:vg::PathIndex
PathIndex	path_index.hpp	/^struct PathIndex {$/;"	s	namespace:vg
PathList	gbwt_extender.cpp	/^    struct PathList {$/;"	s	struct:vg::MatchPos	file:
PathNode	multipath_alignment_graph.hpp	/^    class PathNode {$/;"	c	namespace:vg
PathOrientedDistanceMeasurer	cluster.cpp	/^PathOrientedDistanceMeasurer::PathOrientedDistanceMeasurer(const PathPositionHandleGraph* graph,$/;"	f	class:vg::PathOrientedDistanceMeasurer
PathOrientedDistanceMeasurer	cluster.hpp	/^class PathOrientedDistanceMeasurer : public OrientedDistanceMeasurer {$/;"	c	namespace:vg
PathRestrictedTraversalFinder	traversal_finder.cpp	/^PathRestrictedTraversalFinder::PathRestrictedTraversalFinder(VG& graph,$/;"	f	class:vg::PathRestrictedTraversalFinder
PathRestrictedTraversalFinder	traversal_finder.hpp	/^class PathRestrictedTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
PathSubgraph	path_subgraph.cpp	/^    PathSubgraph::PathSubgraph(const HandleGraph* base, const Path& path) : super(base), defining_path(path) {$/;"	f	class:vg::PathSubgraph
PathSubgraph	path_subgraph.hpp	/^    class PathSubgraph : public handlegraph::ExpandingOverlayGraph {$/;"	c	namespace:vg
PathSubgraphOverlay	subgraph_overlay.cpp	/^PathSubgraphOverlay::PathSubgraphOverlay(const PathHandleGraph* backing, const unordered_set<nid_t>* node_subset) :$/;"	f	class:vg::PathSubgraphOverlay
PathSubgraphOverlay	subgraph_overlay.hpp	/^class PathSubgraphOverlay : virtual public SubgraphOverlay, virtual public PathHandleGraph  {$/;"	c	namespace:vg
PathTraversalFinder	traversal_finder.cpp	/^PathTraversalFinder::PathTraversalFinder(const PathHandleGraph& graph, SnarlManager& snarl_manager,$/;"	f	class:vg::PathTraversalFinder
PathTraversalFinder	traversal_finder.hpp	/^class PathTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
Paths	path.cpp	/^Paths::Paths(void) {$/;"	f	class:vg::Paths
Paths	path.hpp	/^    Paths(const Paths& other) {$/;"	f	class:vg::Paths
Paths	path.hpp	/^class Paths {$/;"	c	namespace:vg
PhaseUnfolder	phase_unfolder.cpp	/^PhaseUnfolder::PhaseUnfolder(const PathHandleGraph& path_graph, const gbwt::GBWT& gbwt_index, vg::id_t next_node) :$/;"	f	class:vg::PhaseUnfolder
PhaseUnfolder	phase_unfolder.hpp	/^class PhaseUnfolder {$/;"	c	namespace:vg
PhasedGenome	phased_genome.cpp	/^    PhasedGenome::PhasedGenome(PhasedGenome& rhs){$/;"	f	class:vg::PhasedGenome
PhasedGenome	phased_genome.cpp	/^    PhasedGenome::PhasedGenome(const SnarlManager& snarl_manager) : snarl_manager(&snarl_manager) {$/;"	f	class:vg::PhasedGenome
PhasedGenome	phased_genome.hpp	/^    class PhasedGenome {$/;"	c	namespace:vg
Phi	statistics.cpp	/^double Phi(double x) {$/;"	f	namespace:vg
Phi_inv	statistics.cpp	/^double Phi_inv(double p) {$/;"	f	namespace:vg
Pictographs	pictographs.hpp	/^    Pictographs(int seed_val) {$/;"	f	class:vg::Pictographs
Pictographs	pictographs.hpp	/^    Pictographs(void) { };$/;"	f	class:vg::Pictographs
Pictographs	pictographs.hpp	/^class Pictographs {$/;"	c	namespace:vg
Plan	vg.hpp	/^        Plan(VG* graph,$/;"	f	struct:vg::VG::Plan
Plan	vg.hpp	/^    struct Plan {$/;"	s	class:vg::VG
PoissonCallInfo	snarl_caller.hpp	/^    struct PoissonCallInfo : public SnarlCaller::CallInfo {$/;"	s	class:vg::PoissonSupportSnarlCaller
PoissonSupportSnarlCaller	snarl_caller.cpp	/^PoissonSupportSnarlCaller::PoissonSupportSnarlCaller(const PathHandleGraph& graph, SnarlManager& snarl_manager,$/;"	f	class:vg::PoissonSupportSnarlCaller
PoissonSupportSnarlCaller	snarl_caller.hpp	/^class PoissonSupportSnarlCaller : public SupportBasedSnarlCaller {$/;"	c	namespace:vg
PositionIDScanner	scanner.hpp	/^struct PositionIDScanner {$/;"	s	namespace:vg
Preset	subcommand/options.hpp	/^struct Preset {$/;"	s	namespace:vg::subcommand
PrintAlignment	ssw_aligner.cpp	/^void SSWAligner::PrintAlignment(const StripedSmithWaterman::Alignment& alignment){$/;"	f	class:vg::SSWAligner
Problem	alignment.hpp	/^    enum Problem {$/;"	g	struct:vg::AlignmentValidity
ProblemDumpExplainer	explainer.cpp	/^ProblemDumpExplainer::ProblemDumpExplainer(const std::string& name) : Explainer() {$/;"	f	class:vg::ProblemDumpExplainer
ProblemDumpExplainer	explainer.hpp	/^class ProblemDumpExplainer : public Explainer {$/;"	c	namespace:vg
Progressive	progressive.hpp	/^class Progressive {$/;"	c	namespace:vg
PruningMode	subcommand/prune_main.cpp	/^enum PruningMode { mode_prune, mode_restore, mode_unfold };$/;"	g	file:
PruningParameters	subcommand/prune_main.cpp	/^struct PruningParameters$/;"	s	file:
QUOTE	version.cpp	20;"	d	file:
QualAdjAligner	aligner.cpp	/^QualAdjAligner::QualAdjAligner(const int8_t* _score_matrix,$/;"	f	class:vg::QualAdjAligner
QualAdjAligner	aligner.hpp	/^    class QualAdjAligner : public GSSWAligner {$/;"	c	namespace:vg
QualAdjXdropAligner	dozeu_interface.hpp	/^class QualAdjXdropAligner : public DozeuInterface {$/;"	c	namespace:vg
QualAdjXdropAligner	qual_adj_xdrop_aligner.cpp	/^QualAdjXdropAligner::QualAdjXdropAligner(QualAdjXdropAligner&& other)$/;"	f	class:QualAdjXdropAligner
QualAdjXdropAligner	qual_adj_xdrop_aligner.cpp	/^QualAdjXdropAligner::QualAdjXdropAligner(const QualAdjXdropAligner& other)$/;"	f	class:QualAdjXdropAligner
QualAdjXdropAligner	qual_adj_xdrop_aligner.cpp	/^QualAdjXdropAligner::QualAdjXdropAligner(const int8_t* _score_matrix,$/;"	f	class:QualAdjXdropAligner
R	haplotypes.hpp	/^  double R;$/;"	m	struct:haplo::haplo_DP_rectangle
READ_TIME_FILE	subcommand/mpmap_main.cpp	32;"	d	file:
RESCUED	multipath_mapper.cpp	/^    const size_t MultipathMapper::RESCUED = numeric_limits<size_t>::max();$/;"	m	class:vg::MultipathMapper	file:
RESCUED	multipath_mapper.hpp	/^        static const size_t RESCUED;$/;"	m	class:vg::MultipathMapper
ROI	vtuneConfiguration.h	16;"	d
RRMemo	haplotypes.cpp	/^RRMemo::RRMemo(double recombination_penalty, size_t population_size) : $/;"	f	class:haplo::haploMath::RRMemo
RRMemo	haplotypes.hpp	/^  struct RRMemo {$/;"	s	namespace:haplo::haploMath
Range	subcommand/options.hpp	/^    Range() {$/;"	f	struct:vg::Range
Range	subcommand/options.hpp	/^    Range(Range&& other): start(other.start), end(other.end), step(other.step) {$/;"	f	struct:vg::Range
Range	subcommand/options.hpp	/^    Range(const Number& val): start(val), end(val) {$/;"	f	struct:vg::Range
Range	subcommand/options.hpp	/^    Range(const Range& other): start(other.start), end(other.end), step(other.step) {$/;"	f	struct:vg::Range
Range	subcommand/options.hpp	/^struct Range : public subcommand::TickChainLink {$/;"	s	namespace:vg
RangeArgSpec	subcommand/options.hpp	/^struct RangeArgSpec : public ValueArgSpec<T, Receiver, Range<T>> {$/;"	s	namespace:vg::subcommand
RareVariantSimplifier	rare_variant_simplifier.cpp	/^RareVariantSimplifier::RareVariantSimplifier(MutablePathDeletableHandleGraph& graph, VcfBuffer& variant_source) : Progressive(), graph(graph), variant_source(variant_source) {$/;"	f	class:vg::RareVariantSimplifier
RareVariantSimplifier	rare_variant_simplifier.hpp	/^class RareVariantSimplifier : public Progressive {$/;"	c	namespace:vg
RatioSupportSnarlCaller	snarl_caller.cpp	/^RatioSupportSnarlCaller::RatioSupportSnarlCaller(const PathHandleGraph& graph, SnarlManager& snarl_manager,$/;"	f	class:vg::RatioSupportSnarlCaller
RatioSupportSnarlCaller	snarl_caller.hpp	/^class RatioSupportSnarlCaller : public SupportBasedSnarlCaller {$/;"	c	namespace:vg
ReadFilter	readfilter.hpp	/^class ReadFilter{$/;"	c	namespace:vg
ReadMasker	gbwt_extender.cpp	/^ReadMasker::ReadMasker(const std::string& valid_chars) : mask(256, 'X') {$/;"	f	class:vg::ReadMasker
ReadMasker	gbwt_extender.hpp	/^class ReadMasker {$/;"	c	namespace:vg
ReadRestrictedTraversalFinder	traversal_finder.cpp	/^ReadRestrictedTraversalFinder::ReadRestrictedTraversalFinder(AugmentedGraph& augmented_graph,$/;"	f	class:vg::ReadRestrictedTraversalFinder
ReadRestrictedTraversalFinder	traversal_finder.hpp	/^class ReadRestrictedTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
Reads	genotyper.hpp	/^    enum TraversalAlg { Reads, Exhaustive, Representative, Adaptive };$/;"	e	enum:vg::Genotyper::TraversalAlg
RebuildJob	gbwt_helper.hpp	/^struct RebuildJob {$/;"	s	namespace:vg
RebuildParameters	gbwt_helper.hpp	/^struct RebuildParameters {$/;"	s	namespace:vg
Recombinator	recombinator.cpp	/^Recombinator::Recombinator(const gbwtgraph::GBZ& gbz, Verbosity verbosity) :$/;"	f	class:vg::Recombinator
Recombinator	recombinator.hpp	/^class Recombinator {$/;"	c	namespace:vg
RecombinatorHaplotype	recombinator.cpp	/^struct RecombinatorHaplotype {$/;"	s	namespace:vg	file:
RecurseAlways	graph_caller.hpp	/^    enum RecurseType { RecurseOnFail, RecurseAlways, RecurseNever };$/;"	e	enum:vg::GraphCaller::RecurseType
RecurseNever	graph_caller.hpp	/^    enum RecurseType { RecurseOnFail, RecurseAlways, RecurseNever };$/;"	e	enum:vg::GraphCaller::RecurseType
RecurseOnFail	graph_caller.hpp	/^    enum RecurseType { RecurseOnFail, RecurseAlways, RecurseNever };$/;"	e	enum:vg::GraphCaller::RecurseType
RecurseType	graph_caller.hpp	/^    enum RecurseType { RecurseOnFail, RecurseAlways, RecurseNever };$/;"	g	class:vg::GraphCaller
ReferenceInterval	subcommand/haplotypes_main.cpp	/^struct ReferenceInterval {$/;"	s	file:
ReferencePathVectorizableOverlayHelper	subcommand/call_main.cpp	/^                                VectorizableHandleGraph, bdsg::PathPositionVectorizableOverlay, PathPositionHandleGraph> ReferencePathVectorizableOverlayHelper;$/;"	t	file:
Region	region.hpp	/^struct Region {$/;"	s	namespace:vg
RegionExpander	region_expander.cpp	/^    RegionExpander::RegionExpander(const PathPositionHandleGraph* graph, const SnarlManager* snarl_manager) :$/;"	f	class:vg::RegionExpander
RegionExpander	region_expander.hpp	/^    class RegionExpander {$/;"	c	namespace:vg
RegistrarForTagAliases	unittest/catch.hpp	/^    struct RegistrarForTagAliases {$/;"	s	namespace:Catch
ReplaceLocalHaplotypeCommand	genome_state.hpp	/^struct ReplaceLocalHaplotypeCommand : public GenomeStateCommand {$/;"	s	namespace:vg
ReplaceSnarlHaplotypeCommand	genome_state.hpp	/^struct ReplaceSnarlHaplotypeCommand : public GenomeStateCommand {$/;"	s	namespace:vg
Representative	genotyper.hpp	/^    enum TraversalAlg { Reads, Exhaustive, Representative, Adaptive };$/;"	e	enum:vg::Genotyper::TraversalAlg
RepresentativeTraversalFinder	traversal_finder.cpp	/^RepresentativeTraversalFinder::RepresentativeTraversalFinder(const PathHandleGraph& graph,$/;"	f	class:vg::RepresentativeTraversalFinder
RepresentativeTraversalFinder	traversal_finder.hpp	/^class RepresentativeTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
RescueAlgorithm	minimizer_mapper.hpp	/^    enum RescueAlgorithm { rescue_none, rescue_dozeu, rescue_gssw };$/;"	g	class:vg::MinimizerMapper
ResultDisposition	unittest/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultWas	unittest/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
ReusableStringStream	unittest/catch.hpp	/^    class ReusableStringStream : NonCopyable {$/;"	c	namespace:Catch
Reverse	multipath_mapper.hpp	/^        enum SpliceStrand {Undetermined, Forward, Reverse};$/;"	e	enum:vg::MultipathMapper::SpliceStrand
ReverseGraph	reverse_graph.cpp	/^    ReverseGraph::ReverseGraph(const HandleGraph* forward_graph, bool complement) :$/;"	f	class:vg::ReverseGraph
ReverseGraph	reverse_graph.hpp	/^    class ReverseGraph : public ExpandingOverlayGraph {$/;"	c	namespace:vg
RewindPlanException	index_registry.hpp	/^class RewindPlanException : public std::exception {$/;"	c	namespace:vg
SAM	multipath_alignment_emitter.hpp	/^    enum output_format_t {GAMP, GAM, GAF, BAM, SAM, CRAM};$/;"	e	enum:vg::MultipathAlignmentEmitter::output_format_t
SIMDE_ACCURACY_PREFERENCE	simde/simde-common.h	527;"	d
SIMDE_ALIGN_16_	simde/simde-align.h	192;"	d
SIMDE_ALIGN_16_	simde/simde-align.h	197;"	d
SIMDE_ALIGN_16_	simde/simde-align.h	202;"	d
SIMDE_ALIGN_16_	simde/simde-align.h	207;"	d
SIMDE_ALIGN_16_	simde/simde-align.h	215;"	d
SIMDE_ALIGN_32_	simde/simde-align.h	191;"	d
SIMDE_ALIGN_32_	simde/simde-align.h	196;"	d
SIMDE_ALIGN_32_	simde/simde-align.h	201;"	d
SIMDE_ALIGN_32_	simde/simde-align.h	206;"	d
SIMDE_ALIGN_32_	simde/simde-align.h	214;"	d
SIMDE_ALIGN_64_	simde/simde-align.h	190;"	d
SIMDE_ALIGN_64_	simde/simde-align.h	195;"	d
SIMDE_ALIGN_64_	simde/simde-align.h	200;"	d
SIMDE_ALIGN_64_	simde/simde-align.h	205;"	d
SIMDE_ALIGN_64_	simde/simde-align.h	213;"	d
SIMDE_ALIGN_8_	simde/simde-align.h	193;"	d
SIMDE_ALIGN_8_	simde/simde-align.h	198;"	d
SIMDE_ALIGN_8_	simde/simde-align.h	203;"	d
SIMDE_ALIGN_8_	simde/simde-align.h	208;"	d
SIMDE_ALIGN_8_	simde/simde-align.h	216;"	d
SIMDE_ALIGN_ASSUME_CAST	simde/simde-align.h	443;"	d
SIMDE_ALIGN_ASSUME_LIKE	simde/simde-align.h	406;"	d
SIMDE_ALIGN_ASSUME_TO	simde/simde-align.h	343;"	d
SIMDE_ALIGN_ASSUME_TO	simde/simde-align.h	368;"	d
SIMDE_ALIGN_ASSUME_TO	simde/simde-align.h	370;"	d
SIMDE_ALIGN_ASSUME_TO_UNCHECKED	simde/simde-align.h	314;"	d
SIMDE_ALIGN_ASSUME_TO_UNCHECKED	simde/simde-align.h	317;"	d
SIMDE_ALIGN_ASSUME_TO_UNCHECKED	simde/simde-align.h	324;"	d
SIMDE_ALIGN_ASSUME_TO_UNCHECKED	simde/simde-align.h	336;"	d
SIMDE_ALIGN_ASSUME_TO_UNCHECKED	simde/simde-align.h	338;"	d
SIMDE_ALIGN_CAP	simde/simde-align.h	225;"	d
SIMDE_ALIGN_CAP	simde/simde-align.h	227;"	d
SIMDE_ALIGN_CAST	simde/simde-align.h	423;"	d
SIMDE_ALIGN_CAST	simde/simde-align.h	431;"	d
SIMDE_ALIGN_H	simde/simde-align.h	53;"	d
SIMDE_ALIGN_INTPTR_T_	simde/simde-align.h	75;"	d
SIMDE_ALIGN_INTPTR_T_	simde/simde-align.h	77;"	d
SIMDE_ALIGN_INTPTR_T_	simde/simde-align.h	79;"	d
SIMDE_ALIGN_INTPTR_T_	simde/simde-align.h	82;"	d
SIMDE_ALIGN_INTPTR_T_	simde/simde-align.h	85;"	d
SIMDE_ALIGN_LIKE	simde/simde-align.h	389;"	d
SIMDE_ALIGN_LIKE_16	simde/simde-align.h	392;"	d
SIMDE_ALIGN_LIKE_16	simde/simde-align.h	397;"	d
SIMDE_ALIGN_LIKE_32	simde/simde-align.h	391;"	d
SIMDE_ALIGN_LIKE_32	simde/simde-align.h	396;"	d
SIMDE_ALIGN_LIKE_64	simde/simde-align.h	390;"	d
SIMDE_ALIGN_LIKE_64	simde/simde-align.h	395;"	d
SIMDE_ALIGN_LIKE_8	simde/simde-align.h	393;"	d
SIMDE_ALIGN_LIKE_8	simde/simde-align.h	398;"	d
SIMDE_ALIGN_OF	simde/simde-align.h	112;"	d
SIMDE_ALIGN_OF	simde/simde-align.h	116;"	d
SIMDE_ALIGN_OF	simde/simde-align.h	133;"	d
SIMDE_ALIGN_OF	simde/simde-align.h	136;"	d
SIMDE_ALIGN_OF	simde/simde-align.h	142;"	d
SIMDE_ALIGN_OF_UNUSABLE_FOR_LIKE	simde/simde-align.h	287;"	d
SIMDE_ALIGN_PLATFORM_MAXIMUM	simde/simde-align.h	168;"	d
SIMDE_ALIGN_PLATFORM_MAXIMUM	simde/simde-align.h	172;"	d
SIMDE_ALIGN_PLATFORM_MAXIMUM	simde/simde-align.h	174;"	d
SIMDE_ALIGN_PLATFORM_MAXIMUM	simde/simde-align.h	177;"	d
SIMDE_ALIGN_PLATFORM_MAXIMUM	simde/simde-align.h	180;"	d
SIMDE_ALIGN_SIZE_T_	simde/simde-align.h	61;"	d
SIMDE_ALIGN_SIZE_T_	simde/simde-align.h	63;"	d
SIMDE_ALIGN_SIZE_T_	simde/simde-align.h	66;"	d
SIMDE_ALIGN_SIZE_T_	simde/simde-align.h	69;"	d
SIMDE_ALIGN_TO	simde/simde-align.h	275;"	d
SIMDE_ALIGN_TO	simde/simde-align.h	278;"	d
SIMDE_ALIGN_TO	simde/simde-align.h	281;"	d
SIMDE_ALIGN_TO	simde/simde-align.h	284;"	d
SIMDE_ALIGN_TO_16	simde/simde-align.h	291;"	d
SIMDE_ALIGN_TO_32	simde/simde-align.h	290;"	d
SIMDE_ALIGN_TO_64	simde/simde-align.h	289;"	d
SIMDE_ALIGN_TO_8	simde/simde-align.h	292;"	d
SIMDE_ARCH_AARCH64	simde/simde-arch.h	110;"	d
SIMDE_ARCH_AARCH64_CHECK	simde/simde-arch.h	113;"	d
SIMDE_ARCH_AARCH64_CHECK	simde/simde-arch.h	115;"	d
SIMDE_ARCH_ALPHA	simde/simde-arch.h	49;"	d
SIMDE_ARCH_ALPHA	simde/simde-arch.h	51;"	d
SIMDE_ARCH_ALPHA	simde/simde-arch.h	53;"	d
SIMDE_ARCH_ALPHA	simde/simde-arch.h	55;"	d
SIMDE_ARCH_ALPHA_CHECK	simde/simde-arch.h	59;"	d
SIMDE_ARCH_ALPHA_CHECK	simde/simde-arch.h	61;"	d
SIMDE_ARCH_AMD64	simde/simde-arch.h	73;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	79;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	81;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	83;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	85;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	87;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	89;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	91;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	93;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	95;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	97;"	d
SIMDE_ARCH_ARM	simde/simde-arch.h	99;"	d
SIMDE_ARCH_ARM_CHECK	simde/simde-arch.h	102;"	d
SIMDE_ARCH_ARM_CHECK	simde/simde-arch.h	104;"	d
SIMDE_ARCH_ARM_NEON	simde/simde-arch.h	121;"	d
SIMDE_ARCH_ARM_NEON	simde/simde-arch.h	123;"	d
SIMDE_ARCH_ARM_SVE	simde/simde-arch.h	127;"	d
SIMDE_ARCH_AVR	simde/simde-arch.h	67;"	d
SIMDE_ARCH_BLACKFIN	simde/simde-arch.h	133;"	d
SIMDE_ARCH_CONVEX	simde/simde-arch.h	147;"	d
SIMDE_ARCH_CONVEX	simde/simde-arch.h	149;"	d
SIMDE_ARCH_CONVEX	simde/simde-arch.h	151;"	d
SIMDE_ARCH_CONVEX	simde/simde-arch.h	153;"	d
SIMDE_ARCH_CONVEX	simde/simde-arch.h	155;"	d
SIMDE_ARCH_CONVEX_CHECK	simde/simde-arch.h	158;"	d
SIMDE_ARCH_CONVEX_CHECK	simde/simde-arch.h	160;"	d
SIMDE_ARCH_CRIS	simde/simde-arch.h	139;"	d
SIMDE_ARCH_CRIS	simde/simde-arch.h	141;"	d
SIMDE_ARCH_EPIPHANY	simde/simde-arch.h	166;"	d
SIMDE_ARCH_FRV	simde/simde-arch.h	172;"	d
SIMDE_ARCH_H	simde/simde-arch.h	43;"	d
SIMDE_ARCH_H8300	simde/simde-arch.h	178;"	d
SIMDE_ARCH_HPPA	simde/simde-arch.h	184;"	d
SIMDE_ARCH_HPPA	simde/simde-arch.h	186;"	d
SIMDE_ARCH_HPPA	simde/simde-arch.h	188;"	d
SIMDE_ARCH_HPPA	simde/simde-arch.h	190;"	d
SIMDE_ARCH_HPPA_CHECK	simde/simde-arch.h	193;"	d
SIMDE_ARCH_HPPA_CHECK	simde/simde-arch.h	195;"	d
SIMDE_ARCH_IA64	simde/simde-arch.h	313;"	d
SIMDE_ARCH_M32R	simde/simde-arch.h	319;"	d
SIMDE_ARCH_M68K	simde/simde-arch.h	325;"	d
SIMDE_ARCH_M68K	simde/simde-arch.h	327;"	d
SIMDE_ARCH_M68K	simde/simde-arch.h	329;"	d
SIMDE_ARCH_M68K	simde/simde-arch.h	331;"	d
SIMDE_ARCH_M68K	simde/simde-arch.h	333;"	d
SIMDE_ARCH_M68K	simde/simde-arch.h	335;"	d
SIMDE_ARCH_M68K_CHECK	simde/simde-arch.h	338;"	d
SIMDE_ARCH_M68K_CHECK	simde/simde-arch.h	340;"	d
SIMDE_ARCH_MICROBLAZE	simde/simde-arch.h	346;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	352;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	354;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	356;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	358;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	360;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	362;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	364;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	366;"	d
SIMDE_ARCH_MIPS	simde/simde-arch.h	368;"	d
SIMDE_ARCH_MIPS_CHECK	simde/simde-arch.h	371;"	d
SIMDE_ARCH_MIPS_CHECK	simde/simde-arch.h	373;"	d
SIMDE_ARCH_MIPS_LOONGSON_MMI	simde/simde-arch.h	377;"	d
SIMDE_ARCH_MN10300	simde/simde-arch.h	383;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	389;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	391;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	393;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	395;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	397;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	399;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	401;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	403;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	405;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	407;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	409;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	411;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	413;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	415;"	d
SIMDE_ARCH_POWER	simde/simde-arch.h	417;"	d
SIMDE_ARCH_POWER_ALTIVEC	simde/simde-arch.h	426;"	d
SIMDE_ARCH_POWER_ALTIVEC_CHECK	simde/simde-arch.h	429;"	d
SIMDE_ARCH_POWER_ALTIVEC_CHECK	simde/simde-arch.h	431;"	d
SIMDE_ARCH_POWER_CHECK	simde/simde-arch.h	420;"	d
SIMDE_ARCH_POWER_CHECK	simde/simde-arch.h	422;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	437;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	439;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	441;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	443;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	445;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	447;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	449;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	451;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	453;"	d
SIMDE_ARCH_SPARC	simde/simde-arch.h	455;"	d
SIMDE_ARCH_SPARC_CHECK	simde/simde-arch.h	458;"	d
SIMDE_ARCH_SPARC_CHECK	simde/simde-arch.h	460;"	d
SIMDE_ARCH_SUPERH	simde/simde-arch.h	466;"	d
SIMDE_ARCH_SUPERH	simde/simde-arch.h	468;"	d
SIMDE_ARCH_SUPERH	simde/simde-arch.h	470;"	d
SIMDE_ARCH_SUPERH	simde/simde-arch.h	472;"	d
SIMDE_ARCH_SUPERH	simde/simde-arch.h	474;"	d
SIMDE_ARCH_SUPERH	simde/simde-arch.h	476;"	d
SIMDE_ARCH_SYSTEMZ	simde/simde-arch.h	482;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	488;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	490;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	492;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	494;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	496;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	498;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	500;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	502;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	504;"	d
SIMDE_ARCH_TMS320	simde/simde-arch.h	506;"	d
SIMDE_ARCH_TMS320_CHECK	simde/simde-arch.h	509;"	d
SIMDE_ARCH_TMS320_CHECK	simde/simde-arch.h	511;"	d
SIMDE_ARCH_WASM	simde/simde-arch.h	516;"	d
SIMDE_ARCH_WASM_SIMD128	simde/simde-arch.h	520;"	d
SIMDE_ARCH_X86	simde/simde-arch.h	201;"	d
SIMDE_ARCH_X86	simde/simde-arch.h	203;"	d
SIMDE_ARCH_X86	simde/simde-arch.h	205;"	d
SIMDE_ARCH_X86	simde/simde-arch.h	207;"	d
SIMDE_ARCH_X86	simde/simde-arch.h	209;"	d
SIMDE_ARCH_X86	simde/simde-arch.h	211;"	d
SIMDE_ARCH_X86	simde/simde-arch.h	213;"	d
SIMDE_ARCH_X86_AVX	simde/simde-arch.h	258;"	d
SIMDE_ARCH_X86_AVX	simde/simde-arch.h	275;"	d
SIMDE_ARCH_X86_AVX2	simde/simde-arch.h	270;"	d
SIMDE_ARCH_X86_AVX512BW	simde/simde-arch.h	285;"	d
SIMDE_ARCH_X86_AVX512CD	simde/simde-arch.h	288;"	d
SIMDE_ARCH_X86_AVX512DQ	simde/simde-arch.h	291;"	d
SIMDE_ARCH_X86_AVX512F	simde/simde-arch.h	294;"	d
SIMDE_ARCH_X86_AVX512VBMI	simde/simde-arch.h	282;"	d
SIMDE_ARCH_X86_AVX512VL	simde/simde-arch.h	297;"	d
SIMDE_ARCH_X86_AVX512VP2INTERSECT	simde/simde-arch.h	279;"	d
SIMDE_ARCH_X86_CHECK	simde/simde-arch.h	216;"	d
SIMDE_ARCH_X86_CHECK	simde/simde-arch.h	218;"	d
SIMDE_ARCH_X86_FMA	simde/simde-arch.h	273;"	d
SIMDE_ARCH_X86_GFNI	simde/simde-arch.h	300;"	d
SIMDE_ARCH_X86_MMX	simde/simde-arch.h	224;"	d
SIMDE_ARCH_X86_MMX	simde/simde-arch.h	236;"	d
SIMDE_ARCH_X86_PCLMUL	simde/simde-arch.h	303;"	d
SIMDE_ARCH_X86_SSE	simde/simde-arch.h	226;"	d
SIMDE_ARCH_X86_SSE	simde/simde-arch.h	232;"	d
SIMDE_ARCH_X86_SSE	simde/simde-arch.h	239;"	d
SIMDE_ARCH_X86_SSE2	simde/simde-arch.h	229;"	d
SIMDE_ARCH_X86_SSE2	simde/simde-arch.h	233;"	d
SIMDE_ARCH_X86_SSE2	simde/simde-arch.h	242;"	d
SIMDE_ARCH_X86_SSE3	simde/simde-arch.h	246;"	d
SIMDE_ARCH_X86_SSE3	simde/simde-arch.h	260;"	d
SIMDE_ARCH_X86_SSE4_1	simde/simde-arch.h	252;"	d
SIMDE_ARCH_X86_SSE4_1	simde/simde-arch.h	263;"	d
SIMDE_ARCH_X86_SSE4_2	simde/simde-arch.h	255;"	d
SIMDE_ARCH_X86_SSE4_2	simde/simde-arch.h	266;"	d
SIMDE_ARCH_X86_SSSE3	simde/simde-arch.h	249;"	d
SIMDE_ARCH_X86_VPCLMULQDQ	simde/simde-arch.h	306;"	d
SIMDE_ARCH_XTENSA	simde/simde-arch.h	526;"	d
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES	simde/simde-features.h	472;"	d
SIMDE_ARM_NEON_A32V7_NATIVE	simde/simde-features.h	260;"	d
SIMDE_ARM_NEON_A32V7_NATIVE	simde/simde-features.h	265;"	d
SIMDE_ARM_NEON_A32V8_ENABLE_NATIVE_ALIASES	simde/simde-features.h	475;"	d
SIMDE_ARM_NEON_A32V8_NATIVE	simde/simde-features.h	251;"	d
SIMDE_ARM_NEON_A32V8_NATIVE	simde/simde-features.h	256;"	d
SIMDE_ARM_NEON_A64V8_ENABLE_NATIVE_ALIASES	simde/simde-features.h	478;"	d
SIMDE_ARM_NEON_A64V8_NATIVE	simde/simde-features.h	247;"	d
SIMDE_ARM_NEON_ABA_H	simde/arm/neon/aba.h	28;"	d
SIMDE_ARM_NEON_ABDL_H	simde/arm/neon/abdl.h	28;"	d
SIMDE_ARM_NEON_ABD_H	simde/arm/neon/abd.h	28;"	d
SIMDE_ARM_NEON_ABS_H	simde/arm/neon/abs.h	28;"	d
SIMDE_ARM_NEON_ADDLV_H	simde/arm/neon/addlv.h	28;"	d
SIMDE_ARM_NEON_ADDL_H	simde/arm/neon/addl.h	29;"	d
SIMDE_ARM_NEON_ADDL_HIGH_H	simde/arm/neon/addl_high.h	29;"	d
SIMDE_ARM_NEON_ADDV_H	simde/arm/neon/addv.h	28;"	d
SIMDE_ARM_NEON_ADDW_H	simde/arm/neon/addw.h	29;"	d
SIMDE_ARM_NEON_ADDW_HIGH_H	simde/arm/neon/addw_high.h	28;"	d
SIMDE_ARM_NEON_ADD_H	simde/arm/neon/add.h	28;"	d
SIMDE_ARM_NEON_AND_H	simde/arm/neon/and.h	29;"	d
SIMDE_ARM_NEON_BIC_H	simde/arm/neon/bic.h	28;"	d
SIMDE_ARM_NEON_BSL_H	simde/arm/neon/bsl.h	29;"	d
SIMDE_ARM_NEON_CAGT_H	simde/arm/neon/cagt.h	29;"	d
SIMDE_ARM_NEON_CEQZ_H	simde/arm/neon/ceqz.h	29;"	d
SIMDE_ARM_NEON_CEQ_H	simde/arm/neon/ceq.h	28;"	d
SIMDE_ARM_NEON_CGEZ_H	simde/arm/neon/cgez.h	29;"	d
SIMDE_ARM_NEON_CGE_H	simde/arm/neon/cge.h	29;"	d
SIMDE_ARM_NEON_CGTZ_H	simde/arm/neon/cgtz.h	29;"	d
SIMDE_ARM_NEON_CGT_H	simde/arm/neon/cgt.h	29;"	d
SIMDE_ARM_NEON_CLEZ_H	simde/arm/neon/clez.h	29;"	d
SIMDE_ARM_NEON_CLE_H	simde/arm/neon/cle.h	29;"	d
SIMDE_ARM_NEON_CLS_H	simde/arm/neon/cls.h	28;"	d
SIMDE_ARM_NEON_CLTZ_H	simde/arm/neon/cltz.h	30;"	d
SIMDE_ARM_NEON_CLT_H	simde/arm/neon/clt.h	29;"	d
SIMDE_ARM_NEON_CLZ_H	simde/arm/neon/clz.h	28;"	d
SIMDE_ARM_NEON_CNT_H	simde/arm/neon/cnt.h	28;"	d
SIMDE_ARM_NEON_COMBINE_H	simde/arm/neon/combine.h	29;"	d
SIMDE_ARM_NEON_CREATE_H	simde/arm/neon/create.h	33;"	d
SIMDE_ARM_NEON_CVT_H	simde/arm/neon/cvt.h	48;"	d
SIMDE_ARM_NEON_DOT_H	simde/arm/neon/dot.h	29;"	d
SIMDE_ARM_NEON_DOT_LANE_H	simde/arm/neon/dot_lane.h	29;"	d
SIMDE_ARM_NEON_DUP_LANE_H	simde/arm/neon/dup_lane.h	28;"	d
SIMDE_ARM_NEON_DUP_N_H	simde/arm/neon/dup_n.h	29;"	d
SIMDE_ARM_NEON_EOR_H	simde/arm/neon/eor.h	29;"	d
SIMDE_ARM_NEON_EXT_H	simde/arm/neon/ext.h	29;"	d
SIMDE_ARM_NEON_GET_HIGH_H	simde/arm/neon/get_high.h	29;"	d
SIMDE_ARM_NEON_GET_LANE_H	simde/arm/neon/get_lane.h	29;"	d
SIMDE_ARM_NEON_GET_LOW_H	simde/arm/neon/get_low.h	29;"	d
SIMDE_ARM_NEON_H	simde/arm/neon.h	28;"	d
SIMDE_ARM_NEON_HADD_H	simde/arm/neon/hadd.h	34;"	d
SIMDE_ARM_NEON_HSUB_H	simde/arm/neon/hsub.h	34;"	d
SIMDE_ARM_NEON_LD1_H	simde/arm/neon/ld1.h	28;"	d
SIMDE_ARM_NEON_LD3_H	simde/arm/neon/ld3.h	29;"	d
SIMDE_ARM_NEON_LD4_H	simde/arm/neon/ld4.h	29;"	d
SIMDE_ARM_NEON_MAXNM_H	simde/arm/neon/maxnm.h	28;"	d
SIMDE_ARM_NEON_MAXV_H	simde/arm/neon/maxv.h	28;"	d
SIMDE_ARM_NEON_MAX_H	simde/arm/neon/max.h	29;"	d
SIMDE_ARM_NEON_MINNM_H	simde/arm/neon/minnm.h	28;"	d
SIMDE_ARM_NEON_MINV_H	simde/arm/neon/minv.h	28;"	d
SIMDE_ARM_NEON_MIN_H	simde/arm/neon/min.h	28;"	d
SIMDE_ARM_NEON_MLAL_H	simde/arm/neon/mlal.h	29;"	d
SIMDE_ARM_NEON_MLAL_HIGH_H	simde/arm/neon/mlal_high.h	29;"	d
SIMDE_ARM_NEON_MLAL_N_H	simde/arm/neon/mlal_n.h	28;"	d
SIMDE_ARM_NEON_MLA_H	simde/arm/neon/mla.h	29;"	d
SIMDE_ARM_NEON_MLA_N_H	simde/arm/neon/mla_n.h	29;"	d
SIMDE_ARM_NEON_MLSL_H	simde/arm/neon/mlsl.h	28;"	d
SIMDE_ARM_NEON_MLSL_HIGH_H	simde/arm/neon/mlsl_high.h	28;"	d
SIMDE_ARM_NEON_MLSL_N_H	simde/arm/neon/mlsl_n.h	28;"	d
SIMDE_ARM_NEON_MLS_H	simde/arm/neon/mls.h	28;"	d
SIMDE_ARM_NEON_MOVL_H	simde/arm/neon/movl.h	29;"	d
SIMDE_ARM_NEON_MOVL_HIGH_H	simde/arm/neon/movl_high.h	29;"	d
SIMDE_ARM_NEON_MOVN_H	simde/arm/neon/movn.h	28;"	d
SIMDE_ARM_NEON_MOVN_HIGH_H	simde/arm/neon/movn_high.h	28;"	d
SIMDE_ARM_NEON_MULL_H	simde/arm/neon/mull.h	29;"	d
SIMDE_ARM_NEON_MULL_HIGH_H	simde/arm/neon/mull_high.h	28;"	d
SIMDE_ARM_NEON_MULL_N_H	simde/arm/neon/mull_n.h	29;"	d
SIMDE_ARM_NEON_MUL_H	simde/arm/neon/mul.h	29;"	d
SIMDE_ARM_NEON_MUL_LANE_H	simde/arm/neon/mul_lane.h	28;"	d
SIMDE_ARM_NEON_MUL_N_H	simde/arm/neon/mul_n.h	29;"	d
SIMDE_ARM_NEON_MVN_H	simde/arm/neon/mvn.h	29;"	d
SIMDE_ARM_NEON_NEED_PORTABLE_F64	simde/arm/neon/types.h	173;"	d
SIMDE_ARM_NEON_NEED_PORTABLE_F64X1	simde/arm/neon/types.h	171;"	d
SIMDE_ARM_NEON_NEED_PORTABLE_F64X1XN	simde/arm/neon/types.h	174;"	d
SIMDE_ARM_NEON_NEED_PORTABLE_F64X2	simde/arm/neon/types.h	172;"	d
SIMDE_ARM_NEON_NEED_PORTABLE_F64X2XN	simde/arm/neon/types.h	175;"	d
SIMDE_ARM_NEON_NEG_H	simde/arm/neon/neg.h	28;"	d
SIMDE_ARM_NEON_ORN_H	simde/arm/neon/orn.h	28;"	d
SIMDE_ARM_NEON_ORR_H	simde/arm/neon/orr.h	29;"	d
SIMDE_ARM_NEON_PADAL_H	simde/arm/neon/padal.h	29;"	d
SIMDE_ARM_NEON_PADDL_H	simde/arm/neon/paddl.h	29;"	d
SIMDE_ARM_NEON_PADD_H	simde/arm/neon/padd.h	29;"	d
SIMDE_ARM_NEON_PMAX_H	simde/arm/neon/pmax.h	29;"	d
SIMDE_ARM_NEON_PMIN_H	simde/arm/neon/pmin.h	28;"	d
SIMDE_ARM_NEON_QABS_H	simde/arm/neon/qabs.h	28;"	d
SIMDE_ARM_NEON_QADD_H	simde/arm/neon/qadd.h	29;"	d
SIMDE_ARM_NEON_QDMULH_H	simde/arm/neon/qdmulh.h	29;"	d
SIMDE_ARM_NEON_QDMULL_H	simde/arm/neon/qdmull.h	36;"	d
SIMDE_ARM_NEON_QMOVN_H	simde/arm/neon/qmovn.h	29;"	d
SIMDE_ARM_NEON_QMOVN_HIGH_H	simde/arm/neon/qmovn_high.h	29;"	d
SIMDE_ARM_NEON_QMOVUN_H	simde/arm/neon/qmovun.h	29;"	d
SIMDE_ARM_NEON_QNEG_H	simde/arm/neon/qneg.h	28;"	d
SIMDE_ARM_NEON_QRDMULH_H	simde/arm/neon/qrdmulh.h	29;"	d
SIMDE_ARM_NEON_QRDMULH_N_H	simde/arm/neon/qrdmulh_n.h	29;"	d
SIMDE_ARM_NEON_QSHL_H	simde/arm/neon/qshl.h	29;"	d
SIMDE_ARM_NEON_QSUB_H	simde/arm/neon/qsub.h	28;"	d
SIMDE_ARM_NEON_QTBL_H	simde/arm/neon/qtbl.h	29;"	d
SIMDE_ARM_NEON_QTBX_H	simde/arm/neon/qtbx.h	29;"	d
SIMDE_ARM_NEON_RBIT_H	simde/arm/neon/rbit.h	33;"	d
SIMDE_ARM_NEON_REINTERPRET_H	simde/arm/neon/reinterpret.h	30;"	d
SIMDE_ARM_NEON_REV16_H	simde/arm/neon/rev16.h	29;"	d
SIMDE_ARM_NEON_REV32_H	simde/arm/neon/rev32.h	29;"	d
SIMDE_ARM_NEON_REV64_H	simde/arm/neon/rev64.h	32;"	d
SIMDE_ARM_NEON_RHADD_H	simde/arm/neon/rhadd.h	29;"	d
SIMDE_ARM_NEON_RND_H	simde/arm/neon/rnd.h	28;"	d
SIMDE_ARM_NEON_RSHL_H	simde/arm/neon/rshl.h	29;"	d
SIMDE_ARM_NEON_RSHR_N_H	simde/arm/neon/rshr_n.h	29;"	d
SIMDE_ARM_NEON_RSRA_N_H	simde/arm/neon/rsra_n.h	29;"	d
SIMDE_ARM_NEON_SET_LANE_H	simde/arm/neon/set_lane.h	29;"	d
SIMDE_ARM_NEON_SHL_H	simde/arm/neon/shl.h	29;"	d
SIMDE_ARM_NEON_SHL_N_H	simde/arm/neon/shl_n.h	29;"	d
SIMDE_ARM_NEON_SHR_N_H	simde/arm/neon/shr_n.h	29;"	d
SIMDE_ARM_NEON_SRA_N_H	simde/arm/neon/sra_n.h	29;"	d
SIMDE_ARM_NEON_ST1_H	simde/arm/neon/st1.h	28;"	d
SIMDE_ARM_NEON_ST1_LANE_H	simde/arm/neon/st1_lane.h	29;"	d
SIMDE_ARM_NEON_ST3_H	simde/arm/neon/st3.h	29;"	d
SIMDE_ARM_NEON_ST4_H	simde/arm/neon/st4.h	29;"	d
SIMDE_ARM_NEON_SUBL_H	simde/arm/neon/subl.h	29;"	d
SIMDE_ARM_NEON_SUBW_H	simde/arm/neon/subw.h	28;"	d
SIMDE_ARM_NEON_SUBW_HIGH_H	simde/arm/neon/subw_high.h	28;"	d
SIMDE_ARM_NEON_SUB_H	simde/arm/neon/sub.h	28;"	d
SIMDE_ARM_NEON_TBL_H	simde/arm/neon/tbl.h	29;"	d
SIMDE_ARM_NEON_TBX_H	simde/arm/neon/tbx.h	29;"	d
SIMDE_ARM_NEON_TRN1_H	simde/arm/neon/trn1.h	29;"	d
SIMDE_ARM_NEON_TRN2_H	simde/arm/neon/trn2.h	29;"	d
SIMDE_ARM_NEON_TRN_H	simde/arm/neon/trn.h	29;"	d
SIMDE_ARM_NEON_TST_H	simde/arm/neon/tst.h	29;"	d
SIMDE_ARM_NEON_TYPES_H	simde/arm/neon/types.h	28;"	d
SIMDE_ARM_NEON_TYPE_DEFINE_CONVERSIONS_	simde/arm/neon/types.h	655;"	d
SIMDE_ARM_NEON_TYPE_FLOAT_DEFINE_	simde/arm/neon/types.h	41;"	d
SIMDE_ARM_NEON_TYPE_INT_DEFINE_	simde/arm/neon/types.h	37;"	d
SIMDE_ARM_NEON_UQADD_H	simde/arm/neon/uqadd.h	28;"	d
SIMDE_ARM_NEON_UZP1_H	simde/arm/neon/uzp1.h	29;"	d
SIMDE_ARM_NEON_UZP2_H	simde/arm/neon/uzp2.h	29;"	d
SIMDE_ARM_NEON_UZP_H	simde/arm/neon/uzp.h	29;"	d
SIMDE_ARM_NEON_ZIP1_H	simde/arm/neon/zip1.h	29;"	d
SIMDE_ARM_NEON_ZIP2_H	simde/arm/neon/zip2.h	29;"	d
SIMDE_ARM_NEON_ZIP_H	simde/arm/neon/zip.h	29;"	d
SIMDE_ARM_SVE_NATIVE	simde/simde-features.h	274;"	d
SIMDE_AVX512_ALIGN	simde/x86/avx512/types.h	56;"	d
SIMDE_BEGIN_DECLS_	simde/simde-common.h	356;"	d
SIMDE_BUG_GCC_53784	simde/simde-common.h	786;"	d
SIMDE_BUG_GCC_91341	simde/simde-common.h	780;"	d
SIMDE_BUG_GCC_94482	simde/simde-common.h	783;"	d
SIMDE_BUG_GCC_94488	simde/simde-common.h	789;"	d
SIMDE_BUG_GCC_95399	simde/simde-common.h	792;"	d
SIMDE_BUG_GCC_95399	simde/simde-common.h	802;"	d
SIMDE_BUG_GCC_95471	simde/simde-common.h	793;"	d
SIMDE_BUG_GCC_BAD_MM_EXTRACT_EPI8	simde/simde-common.h	774;"	d
SIMDE_BUG_GCC_BAD_MM_SRA_EPI32	simde/simde-common.h	771;"	d
SIMDE_BUG_GCC_REV_208793	simde/simde-common.h	768;"	d
SIMDE_BUG_GCC_REV_247851	simde/simde-common.h	777;"	d
SIMDE_BUG_IGNORE_SIGN_CONVERSION	simde/simde-common.h	836;"	d
SIMDE_BUILTIN_16_	simde/simde-common.h	739;"	d
SIMDE_BUILTIN_32_	simde/simde-common.h	745;"	d
SIMDE_BUILTIN_64_	simde/simde-common.h	751;"	d
SIMDE_BUILTIN_8_	simde/simde-common.h	733;"	d
SIMDE_BUILTIN_HAS_16_	simde/simde-common.h	740;"	d
SIMDE_BUILTIN_HAS_32_	simde/simde-common.h	746;"	d
SIMDE_BUILTIN_HAS_64_	simde/simde-common.h	752;"	d
SIMDE_BUILTIN_HAS_8_	simde/simde-common.h	734;"	d
SIMDE_BUILTIN_SUFFIX_16_	simde/simde-common.h	700;"	d
SIMDE_BUILTIN_SUFFIX_32_	simde/simde-common.h	711;"	d
SIMDE_BUILTIN_SUFFIX_64_	simde/simde-common.h	722;"	d
SIMDE_BUILTIN_SUFFIX_8_	simde/simde-common.h	689;"	d
SIMDE_BUILTIN_TYPE_16_	simde/simde-common.h	701;"	d
SIMDE_BUILTIN_TYPE_32_	simde/simde-common.h	712;"	d
SIMDE_BUILTIN_TYPE_64_	simde/simde-common.h	723;"	d
SIMDE_BUILTIN_TYPE_8_	simde/simde-common.h	690;"	d
SIMDE_CHAR_MODIFIER	simde/check.h	26;"	d
SIMDE_CHAR_MODIFIER	simde/check.h	34;"	d
SIMDE_CHECKED_REINTERPRET_CAST	simde/simde-common.h	505;"	d
SIMDE_CHECKED_REINTERPRET_CAST	simde/simde-common.h	508;"	d
SIMDE_CHECKED_STATIC_CAST	simde/simde-common.h	506;"	d
SIMDE_CHECKED_STATIC_CAST	simde/simde-common.h	509;"	d
SIMDE_CHECK_CONSTANT_	simde/simde-common.h	125;"	d
SIMDE_CHECK_CONSTANT_	simde/simde-common.h	128;"	d
SIMDE_CHECK_H	simde/check.h	14;"	d
SIMDE_CMP_EQ_OQ	simde/x86/avx.h	301;"	d
SIMDE_CMP_EQ_OS	simde/x86/avx.h	317;"	d
SIMDE_CMP_EQ_UQ	simde/x86/avx.h	309;"	d
SIMDE_CMP_EQ_US	simde/x86/avx.h	325;"	d
SIMDE_CMP_FALSE_OQ	simde/x86/avx.h	312;"	d
SIMDE_CMP_FALSE_OS	simde/x86/avx.h	328;"	d
SIMDE_CMP_GE_OQ	simde/x86/avx.h	330;"	d
SIMDE_CMP_GE_OS	simde/x86/avx.h	314;"	d
SIMDE_CMP_GT_OQ	simde/x86/avx.h	331;"	d
SIMDE_CMP_GT_OS	simde/x86/avx.h	315;"	d
SIMDE_CMP_LE_OQ	simde/x86/avx.h	319;"	d
SIMDE_CMP_LE_OS	simde/x86/avx.h	303;"	d
SIMDE_CMP_LT_OQ	simde/x86/avx.h	318;"	d
SIMDE_CMP_LT_OS	simde/x86/avx.h	302;"	d
SIMDE_CMP_NEQ_OQ	simde/x86/avx.h	313;"	d
SIMDE_CMP_NEQ_OS	simde/x86/avx.h	329;"	d
SIMDE_CMP_NEQ_UQ	simde/x86/avx.h	305;"	d
SIMDE_CMP_NEQ_US	simde/x86/avx.h	321;"	d
SIMDE_CMP_NGE_UQ	simde/x86/avx.h	326;"	d
SIMDE_CMP_NGE_US	simde/x86/avx.h	310;"	d
SIMDE_CMP_NGT_UQ	simde/x86/avx.h	327;"	d
SIMDE_CMP_NGT_US	simde/x86/avx.h	311;"	d
SIMDE_CMP_NLE_UQ	simde/x86/avx.h	323;"	d
SIMDE_CMP_NLE_US	simde/x86/avx.h	307;"	d
SIMDE_CMP_NLT_UQ	simde/x86/avx.h	322;"	d
SIMDE_CMP_NLT_US	simde/x86/avx.h	306;"	d
SIMDE_CMP_ORD_Q	simde/x86/avx.h	308;"	d
SIMDE_CMP_ORD_S	simde/x86/avx.h	324;"	d
SIMDE_CMP_TRUE_UQ	simde/x86/avx.h	316;"	d
SIMDE_CMP_TRUE_US	simde/x86/avx.h	332;"	d
SIMDE_CMP_UNORD_Q	simde/x86/avx.h	304;"	d
SIMDE_CMP_UNORD_S	simde/x86/avx.h	320;"	d
SIMDE_COMMON_H	simde/simde-common.h	28;"	d
SIMDE_CONSTIFY_16_	simde/simde-constify.h	94;"	d
SIMDE_CONSTIFY_16_NO_RESULT_	simde/simde-constify.h	262;"	d
SIMDE_CONSTIFY_2_	simde/simde-constify.h	59;"	d
SIMDE_CONSTIFY_2_NO_RESULT_	simde/simde-constify.h	227;"	d
SIMDE_CONSTIFY_32_	simde/simde-constify.h	117;"	d
SIMDE_CONSTIFY_32_NO_RESULT_	simde/simde-constify.h	285;"	d
SIMDE_CONSTIFY_4_	simde/simde-constify.h	68;"	d
SIMDE_CONSTIFY_4_NO_RESULT_	simde/simde-constify.h	236;"	d
SIMDE_CONSTIFY_64_	simde/simde-constify.h	156;"	d
SIMDE_CONSTIFY_64_NO_RESULT_	simde/simde-constify.h	324;"	d
SIMDE_CONSTIFY_8_	simde/simde-constify.h	79;"	d
SIMDE_CONSTIFY_8_NO_RESULT_	simde/simde-constify.h	247;"	d
SIMDE_CONSTIFY_H	simde/simde-constify.h	51;"	d
SIMDE_CONVERT_FTOI	simde/simde-common.h	494;"	d
SIMDE_CONVERT_FTOI	simde/simde-common.h	500;"	d
SIMDE_CONVERT_VECTOR_	simde/simde-common.h	256;"	d
SIMDE_DBG_LIKELY	simde/debug-trap.h	68;"	d
SIMDE_DBG_LIKELY	simde/debug-trap.h	70;"	d
SIMDE_DBG_LIKELY	simde/debug-trap.h	72;"	d
SIMDE_DEBUG_TRAP_H	simde/debug-trap.h	14;"	d
SIMDE_DETECT_CLANG_H	simde/simde-detect-clang.h	50;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	61;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	63;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	65;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	67;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	69;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	71;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	73;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	75;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	77;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	79;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	81;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	83;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	85;"	d
SIMDE_DETECT_CLANG_VERSION	simde/simde-detect-clang.h	87;"	d
SIMDE_DETECT_CLANG_VERSION_CHECK	simde/simde-detect-clang.h	102;"	d
SIMDE_DETECT_CLANG_VERSION_CHECK	simde/simde-detect-clang.h	105;"	d
SIMDE_DETECT_CLANG_VERSION_NOT	simde/simde-detect-clang.h	103;"	d
SIMDE_DETECT_CLANG_VERSION_NOT	simde/simde-detect-clang.h	106;"	d
SIMDE_DIAGNOSTIC_DISABLE_ANNEX_K_	simde/simde-diagnostic.h	291;"	d
SIMDE_DIAGNOSTIC_DISABLE_ANNEX_K_	simde/simde-diagnostic.h	293;"	d
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_UNUSED_BUT_SET_VARIBALE_	simde/simde-diagnostic.h	282;"	d
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_UNUSED_BUT_SET_VARIBALE_	simde/simde-diagnostic.h	284;"	d
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_VECTOR_CONVERSION_	simde/simde-diagnostic.h	337;"	d
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_VECTOR_CONVERSION_	simde/simde-diagnostic.h	343;"	d
SIMDE_DIAGNOSTIC_DISABLE_C11_EXTENSIONS_	simde/simde-diagnostic.h	325;"	d
SIMDE_DIAGNOSTIC_DISABLE_C11_EXTENSIONS_	simde/simde-diagnostic.h	327;"	d
SIMDE_DIAGNOSTIC_DISABLE_C99_EXTENSIONS_	simde/simde-diagnostic.h	275;"	d
SIMDE_DIAGNOSTIC_DISABLE_C99_EXTENSIONS_	simde/simde-diagnostic.h	277;"	d
SIMDE_DIAGNOSTIC_DISABLE_CAST_FUNCTION_TYPE_	simde/simde-diagnostic.h	266;"	d
SIMDE_DIAGNOSTIC_DISABLE_CAST_FUNCTION_TYPE_	simde/simde-diagnostic.h	268;"	d
SIMDE_DIAGNOSTIC_DISABLE_CONDITIONAL_UNINITIALIZED_	simde/simde-diagnostic.h	132;"	d
SIMDE_DIAGNOSTIC_DISABLE_CONDITIONAL_UNINITIALIZED_	simde/simde-diagnostic.h	134;"	d
SIMDE_DIAGNOSTIC_DISABLE_CPP11_LONG_LONG_	simde/simde-diagnostic.h	308;"	d
SIMDE_DIAGNOSTIC_DISABLE_CPP11_LONG_LONG_	simde/simde-diagnostic.h	310;"	d
SIMDE_DIAGNOSTIC_DISABLE_CPP98_COMPAT_PEDANTIC_	simde/simde-diagnostic.h	301;"	d
SIMDE_DIAGNOSTIC_DISABLE_CPP98_COMPAT_PEDANTIC_	simde/simde-diagnostic.h	303;"	d
SIMDE_DIAGNOSTIC_DISABLE_DISABLED_MACRO_EXPANSION_	simde/simde-diagnostic.h	316;"	d
SIMDE_DIAGNOSTIC_DISABLE_DISABLED_MACRO_EXPANSION_	simde/simde-diagnostic.h	318;"	d
SIMDE_DIAGNOSTIC_DISABLE_DOUBLE_PROMOTION_	simde/simde-diagnostic.h	204;"	d
SIMDE_DIAGNOSTIC_DISABLE_DOUBLE_PROMOTION_	simde/simde-diagnostic.h	206;"	d
SIMDE_DIAGNOSTIC_DISABLE_EXTRA_SEMI_	simde/simde-diagnostic.h	157;"	d
SIMDE_DIAGNOSTIC_DISABLE_EXTRA_SEMI_	simde/simde-diagnostic.h	159;"	d
SIMDE_DIAGNOSTIC_DISABLE_EXTRA_SEMI_	simde/simde-diagnostic.h	161;"	d
SIMDE_DIAGNOSTIC_DISABLE_FLOAT_EQUAL	simde/simde-common.h	513;"	d
SIMDE_DIAGNOSTIC_DISABLE_FLOAT_EQUAL	simde/simde-common.h	515;"	d
SIMDE_DIAGNOSTIC_DISABLE_FLOAT_EQUAL	simde/simde-common.h	517;"	d
SIMDE_DIAGNOSTIC_DISABLE_FLOAT_EQUAL_	simde/simde-diagnostic.h	148;"	d
SIMDE_DIAGNOSTIC_DISABLE_FLOAT_EQUAL_	simde/simde-diagnostic.h	150;"	d
SIMDE_DIAGNOSTIC_DISABLE_IGNORED_QUALIFIERS_	simde/simde-diagnostic.h	348;"	d
SIMDE_DIAGNOSTIC_DISABLE_IGNORED_QUALIFIERS_	simde/simde-diagnostic.h	350;"	d
SIMDE_DIAGNOSTIC_DISABLE_IGNORED_QUALIFIERS_	simde/simde-diagnostic.h	352;"	d
SIMDE_DIAGNOSTIC_DISABLE_MAYBE_UNINITIAZILED_	simde/simde-diagnostic.h	375;"	d
SIMDE_DIAGNOSTIC_DISABLE_MAYBE_UNINITIAZILED_	simde/simde-diagnostic.h	377;"	d
SIMDE_DIAGNOSTIC_DISABLE_NON_CONSTANT_AGGREGATE_INITIALIZER_	simde/simde-diagnostic.h	120;"	d
SIMDE_DIAGNOSTIC_DISABLE_NON_CONSTANT_AGGREGATE_INITIALIZER_	simde/simde-diagnostic.h	122;"	d
SIMDE_DIAGNOSTIC_DISABLE_NO_EMMS_INSTRUCTION_	simde/simde-diagnostic.h	101;"	d
SIMDE_DIAGNOSTIC_DISABLE_NO_EMMS_INSTRUCTION_	simde/simde-diagnostic.h	97;"	d
SIMDE_DIAGNOSTIC_DISABLE_NO_EMMS_INSTRUCTION_	simde/simde-diagnostic.h	99;"	d
SIMDE_DIAGNOSTIC_DISABLE_OLD_STYLE_CAST_	simde/simde-diagnostic.h	260;"	d
SIMDE_DIAGNOSTIC_DISABLE_OLD_STYLE_CAST_	simde/simde-diagnostic.h	262;"	d
SIMDE_DIAGNOSTIC_DISABLE_PACKED_	simde/simde-diagnostic.h	196;"	d
SIMDE_DIAGNOSTIC_DISABLE_PACKED_	simde/simde-diagnostic.h	198;"	d
SIMDE_DIAGNOSTIC_DISABLE_PADDED_	simde/simde-diagnostic.h	246;"	d
SIMDE_DIAGNOSTIC_DISABLE_PADDED_	simde/simde-diagnostic.h	248;"	d
SIMDE_DIAGNOSTIC_DISABLE_PADDED_	simde/simde-diagnostic.h	250;"	d
SIMDE_DIAGNOSTIC_DISABLE_PASS_FAILED_	simde/simde-diagnostic.h	240;"	d
SIMDE_DIAGNOSTIC_DISABLE_PASS_FAILED_	simde/simde-diagnostic.h	242;"	d
SIMDE_DIAGNOSTIC_DISABLE_PEDANTIC_	simde/simde-diagnostic.h	357;"	d
SIMDE_DIAGNOSTIC_DISABLE_PEDANTIC_	simde/simde-diagnostic.h	359;"	d
SIMDE_DIAGNOSTIC_DISABLE_PSABI_	simde/simde-diagnostic.h	85;"	d
SIMDE_DIAGNOSTIC_DISABLE_PSABI_	simde/simde-diagnostic.h	87;"	d
SIMDE_DIAGNOSTIC_DISABLE_RESERVED_ID_MACRO_	simde/simde-diagnostic.h	186;"	d
SIMDE_DIAGNOSTIC_DISABLE_RESERVED_ID_MACRO_	simde/simde-diagnostic.h	188;"	d
SIMDE_DIAGNOSTIC_DISABLE_SIMD_PRAGMA_DEPRECATED_	simde/simde-diagnostic.h	110;"	d
SIMDE_DIAGNOSTIC_DISABLE_SIMD_PRAGMA_DEPRECATED_	simde/simde-diagnostic.h	112;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	55;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	58;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	60;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	62;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	64;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	66;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	68;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	74;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	76;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_	simde/simde-diagnostic.h	78;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNREACHABLE_	simde/simde-diagnostic.h	368;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNREACHABLE_	simde/simde-diagnostic.h	370;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION_	simde/simde-diagnostic.h	230;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION_	simde/simde-diagnostic.h	232;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION_	simde/simde-diagnostic.h	234;"	d
SIMDE_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION_	simde/simde-diagnostic.h	236;"	d
SIMDE_DIAGNOSTIC_DISABLE_USED_BUT_MARKED_UNUSED	simde/simde-common.h	350;"	d
SIMDE_DIAGNOSTIC_DISABLE_USED_BUT_MARKED_UNUSED_	simde/simde-diagnostic.h	224;"	d
SIMDE_DIAGNOSTIC_DISABLE_USED_BUT_MARKED_UNUSED_	simde/simde-diagnostic.h	226;"	d
SIMDE_DIAGNOSTIC_DISABLE_VARIADIC_MACROS_	simde/simde-diagnostic.h	170;"	d
SIMDE_DIAGNOSTIC_DISABLE_VARIADIC_MACROS_	simde/simde-diagnostic.h	174;"	d
SIMDE_DIAGNOSTIC_DISABLE_VARIADIC_MACROS_	simde/simde-diagnostic.h	177;"	d
SIMDE_DIAGNOSTIC_DISABLE_VECTOR_CONVERSION_	simde/simde-diagnostic.h	333;"	d
SIMDE_DIAGNOSTIC_DISABLE_VECTOR_CONVERSION_	simde/simde-diagnostic.h	340;"	d
SIMDE_DIAGNOSTIC_DISABLE_VLA_	simde/simde-diagnostic.h	216;"	d
SIMDE_DIAGNOSTIC_DISABLE_VLA_	simde/simde-diagnostic.h	218;"	d
SIMDE_DIAGNOSTIC_DISABLE_VLA_	simde/simde-diagnostic.h	220;"	d
SIMDE_DIAGNOSTIC_DISABLE_ZERO_AS_NULL_POINTER_CONSTANT_	simde/simde-diagnostic.h	254;"	d
SIMDE_DIAGNOSTIC_DISABLE_ZERO_AS_NULL_POINTER_CONSTANT_	simde/simde-diagnostic.h	256;"	d
SIMDE_DIAGNOSTIC_H	simde/simde-diagnostic.h	48;"	d
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS	simde/simde-diagnostic.h	380;"	d
SIMDE_ENABLE_CILKPLUS	simde/simde-common.h	288;"	d
SIMDE_ENABLE_OPENMP	simde/simde-common.h	284;"	d
SIMDE_ENDIAN_BIG	simde/simde-common.h	381;"	d
SIMDE_ENDIAN_LITTLE	simde/simde-common.h	378;"	d
SIMDE_ENDIAN_ORDER	simde/simde-common.h	387;"	d
SIMDE_END_DECLS_	simde/simde-common.h	357;"	d
SIMDE_FAST_MATH	simde/simde-common.h	74;"	d
SIMDE_FAST_NANS	simde/simde-common.h	79;"	d
SIMDE_FAST_NANS	simde/simde-common.h	82;"	d
SIMDE_FAST_ROUND_MODE	simde/simde-common.h	96;"	d
SIMDE_FAST_ROUND_TIES	simde/simde-common.h	112;"	d
SIMDE_FEATURES_H	simde/simde-features.h	32;"	d
SIMDE_FLOAT32_C	simde/simde-common.h	479;"	d
SIMDE_FLOAT32_C	simde/simde-common.h	489;"	d
SIMDE_FLOAT32_TYPE	simde/simde-common.h	478;"	d
SIMDE_FLOAT64_C	simde/simde-common.h	487;"	d
SIMDE_FLOAT64_TYPE	simde/simde-common.h	486;"	d
SIMDE_FUNCTION_ATTRIBUTES	simde/simde-common.h	336;"	d
SIMDE_FUNCTION_POSSIBLY_UNUSED_	simde/simde-common.h	344;"	d
SIMDE_HAVE_FENV_H	simde/simde-common.h	633;"	d
SIMDE_HAVE_FENV_H	simde/simde-common.h	637;"	d
SIMDE_HAVE_FENV_H	simde/simde-common.h	641;"	d
SIMDE_HAVE_INT128_	simde/simde-common.h	369;"	d
SIMDE_HAVE_STDLIB_H	simde/simde-common.h	645;"	d
SIMDE_HAVE_STDLIB_H	simde/simde-common.h	649;"	d
SIMDE_HAVE_STDLIB_H	simde/simde-common.h	653;"	d
SIMDE_HAVE_UNDEFINED128	simde/x86/sse.h	4143;"	d
SIMDE_HAVE_UNDEFINED128	simde/x86/sse.h	4146;"	d
SIMDE_IEEE754_STORAGE	simde/simde-features.h	502;"	d
SIMDE_MASK_NZ_	simde/simde-common.h	331;"	d
SIMDE_MATH_180_OVER_PI	simde/simde-math.h	302;"	d
SIMDE_MATH_180_OVER_PIF	simde/simde-math.h	306;"	d
SIMDE_MATH_BUILTIN_LIBM	simde/simde-math.h	85;"	d
SIMDE_MATH_CMPLX	simde/simde-math.h	144;"	d
SIMDE_MATH_CMPLXF	simde/simde-math.h	145;"	d
SIMDE_MATH_DBL_MIN	simde/simde-math.h	325;"	d
SIMDE_MATH_FLT_MIN	simde/simde-math.h	311;"	d
SIMDE_MATH_HAVE_MATH_H	simde/simde-math.h	103;"	d
SIMDE_MATH_INFINITY	simde/simde-math.h	227;"	d
SIMDE_MATH_INFINITYF	simde/simde-math.h	240;"	d
SIMDE_MATH_NAN	simde/simde-math.h	256;"	d
SIMDE_MATH_NANF	simde/simde-math.h	269;"	d
SIMDE_MATH_PI	simde/simde-math.h	279;"	d
SIMDE_MATH_PIF	simde/simde-math.h	287;"	d
SIMDE_MATH_PI_OVER_180	simde/simde-math.h	294;"	d
SIMDE_MATH_PI_OVER_180F	simde/simde-math.h	298;"	d
SIMDE_MATH_SLEEF_ENABLE	simde/simde-math.h	63;"	d
SIMDE_MATH_SLEEF_VERSION_CHECK	simde/simde-math.h	76;"	d
SIMDE_MAY_ALIAS	simde/simde-common.h	173;"	d
SIMDE_MAY_ALIAS	simde/simde-common.h	175;"	d
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int16_t        i16 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int16_t        i16 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int16_t        i16 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int32_t        i32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int32_t        i32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int32_t        i32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int64_t        i64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int64_t        i64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int64_t        i64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int8_t          i8 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int8_t          i8 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int8_t          i8 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int_fast32_t  i32f SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int_fast32_t  i32f SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 int_fast32_t  i32f SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_float32  f32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_float32  f32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_float32  f32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_float64  f64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_float64  f64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_float64  f64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_int128  i128 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_int128  i128 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_int128  i128 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_uint128 u128 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_uint128 u128 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde_uint128 u128 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint16_t       u16 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint16_t       u16 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint16_t       u16 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint32_t       u32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint32_t       u32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint32_t       u32 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint64_t       u64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint64_t       u64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint64_t       u64 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint8_t         u8 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint8_t         u8 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint8_t         u8 SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint_fast32_t u32f SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon7
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint_fast32_t u32f SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon8
SIMDE_MAY_ALIAS	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 uint_fast32_t u32f SIMDE_VECTOR(32) SIMDE_MAY_ALIAS;$/;"	m	union:__anon9
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int16_t        i16 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int16_t        i16 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int16_t        i16 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int32_t        i32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int32_t        i32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int32_t        i32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int64_t        i64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int64_t        i64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int64_t        i64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int8_t          i8 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int8_t          i8 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int8_t          i8 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int_fast32_t  i32f SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int_fast32_t  i32f SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN int_fast32_t  i32f SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_float32  f32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_float32  f32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_float32  f32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_float64  f64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_float64  f64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_float64  f64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_int128  i128 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_int128  i128 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_int128  i128 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_uint128 u128 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_uint128 u128 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde_uint128 u128 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint16_t       u16 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint16_t       u16 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint16_t       u16 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint32_t       u32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint32_t       u32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint32_t       u32 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint64_t       u64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint64_t       u64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint64_t       u64 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint8_t         u8 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint8_t         u8 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint8_t         u8 SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint_fast32_t u32f SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon14
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint_fast32_t u32f SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon15
SIMDE_MAY_ALIAS	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN uint_fast32_t u32f SIMDE_VECTOR(64) SIMDE_MAY_ALIAS;$/;"	m	union:__anon16
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 int16_t        i16 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 int32_t        i32 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 int64_t        i64 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 int8_t          i8 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 int_fast32_t  i32f SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 simde_float32  f32 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 uint16_t       u16 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 uint32_t       u32 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 uint64_t       u64 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 uint8_t         u8 SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/mmx.h	/^    SIMDE_ALIGN_TO_8 uint_fast32_t u32f SIMDE_VECTOR(8) SIMDE_MAY_ALIAS;$/;"	m	union:__anon17
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int16_t        i16 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int32_t        i32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int64_t        i64 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int8_t          i8 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int_fast32_t  i32f SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 simde_float32  f32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 simde_int128  i128 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 simde_uint128 u128 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint16_t       u16 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint32_t       u32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint64_t       u64 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint8_t         u8 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint_fast32_t u32f SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon12
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int16_t        i16 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int16_t        i16 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int32_t        i32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int32_t        i32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int64_t        i64 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int64_t        i64 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int8_t          i8 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int8_t          i8 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int_fast32_t  i32f SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int_fast32_t  i32f SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde_float32  f32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde_float32  f32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde_float64  f64 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde_float64  f64 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde_int128  i128 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde_uint128 u128 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint16_t       u16 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint16_t       u16 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint32_t       u32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint32_t       u32 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint64_t       u64 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint64_t       u64 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint8_t         u8 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint8_t         u8 SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint_fast32_t u32f SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon10
SIMDE_MAY_ALIAS	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint_fast32_t u32f SIMDE_VECTOR(16) SIMDE_MAY_ALIAS;$/;"	m	union:__anon11
SIMDE_MIPS_LOONGSON_MMI_NATIVE	simde/simde-features.h	381;"	d
SIMDE_MM_EXCEPT_DENORM	simde/x86/sse.h	4300;"	d
SIMDE_MM_EXCEPT_DENORM	simde/x86/sse.h	4302;"	d
SIMDE_MM_EXCEPT_DIV_ZERO	simde/x86/sse.h	4305;"	d
SIMDE_MM_EXCEPT_DIV_ZERO	simde/x86/sse.h	4307;"	d
SIMDE_MM_EXCEPT_INEXACT	simde/x86/sse.h	4320;"	d
SIMDE_MM_EXCEPT_INEXACT	simde/x86/sse.h	4322;"	d
SIMDE_MM_EXCEPT_INVALID	simde/x86/sse.h	4295;"	d
SIMDE_MM_EXCEPT_INVALID	simde/x86/sse.h	4297;"	d
SIMDE_MM_EXCEPT_MASK	simde/x86/sse.h	4325;"	d
SIMDE_MM_EXCEPT_MASK	simde/x86/sse.h	4327;"	d
SIMDE_MM_EXCEPT_OVERFLOW	simde/x86/sse.h	4310;"	d
SIMDE_MM_EXCEPT_OVERFLOW	simde/x86/sse.h	4312;"	d
SIMDE_MM_EXCEPT_UNDERFLOW	simde/x86/sse.h	4315;"	d
SIMDE_MM_EXCEPT_UNDERFLOW	simde/x86/sse.h	4317;"	d
SIMDE_MM_FLUSH_ZERO_MASK	simde/x86/sse.h	4373;"	d
SIMDE_MM_FLUSH_ZERO_MASK	simde/x86/sse.h	4375;"	d
SIMDE_MM_FLUSH_ZERO_OFF	simde/x86/sse.h	4383;"	d
SIMDE_MM_FLUSH_ZERO_OFF	simde/x86/sse.h	4385;"	d
SIMDE_MM_FLUSH_ZERO_ON	simde/x86/sse.h	4378;"	d
SIMDE_MM_FLUSH_ZERO_ON	simde/x86/sse.h	4380;"	d
SIMDE_MM_FROUND_CEIL	simde/x86/sse.h	243;"	d
SIMDE_MM_FROUND_CUR_DIRECTION	simde/x86/sse.h	224;"	d
SIMDE_MM_FROUND_CUR_DIRECTION	simde/x86/sse.h	233;"	d
SIMDE_MM_FROUND_FLOOR	simde/x86/sse.h	241;"	d
SIMDE_MM_FROUND_NEARBYINT	simde/x86/sse.h	249;"	d
SIMDE_MM_FROUND_NINT	simde/x86/sse.h	239;"	d
SIMDE_MM_FROUND_NO_EXC	simde/x86/sse.h	227;"	d
SIMDE_MM_FROUND_NO_EXC	simde/x86/sse.h	236;"	d
SIMDE_MM_FROUND_RAISE_EXC	simde/x86/sse.h	226;"	d
SIMDE_MM_FROUND_RAISE_EXC	simde/x86/sse.h	235;"	d
SIMDE_MM_FROUND_RINT	simde/x86/sse.h	247;"	d
SIMDE_MM_FROUND_TO_NEAREST_INT	simde/x86/sse.h	220;"	d
SIMDE_MM_FROUND_TO_NEAREST_INT	simde/x86/sse.h	229;"	d
SIMDE_MM_FROUND_TO_NEG_INF	simde/x86/sse.h	221;"	d
SIMDE_MM_FROUND_TO_NEG_INF	simde/x86/sse.h	230;"	d
SIMDE_MM_FROUND_TO_POS_INF	simde/x86/sse.h	222;"	d
SIMDE_MM_FROUND_TO_POS_INF	simde/x86/sse.h	231;"	d
SIMDE_MM_FROUND_TO_ZERO	simde/x86/sse.h	223;"	d
SIMDE_MM_FROUND_TO_ZERO	simde/x86/sse.h	232;"	d
SIMDE_MM_FROUND_TRUNC	simde/x86/sse.h	245;"	d
SIMDE_MM_GET_ROUNDING_MODE	simde/x86/sse.h	/^SIMDE_MM_GET_ROUNDING_MODE(void) {$/;"	f
SIMDE_MM_HINT_ENTA	simde/x86/sse.h	3098;"	d
SIMDE_MM_HINT_ENTA	simde/x86/sse.h	3107;"	d
SIMDE_MM_HINT_ET0	simde/x86/sse.h	3099;"	d
SIMDE_MM_HINT_ET0	simde/x86/sse.h	3108;"	d
SIMDE_MM_HINT_ET1	simde/x86/sse.h	3100;"	d
SIMDE_MM_HINT_ET1	simde/x86/sse.h	3109;"	d
SIMDE_MM_HINT_ET2	simde/x86/sse.h	3101;"	d
SIMDE_MM_HINT_ET2	simde/x86/sse.h	3110;"	d
SIMDE_MM_HINT_NTA	simde/x86/sse.h	3094;"	d
SIMDE_MM_HINT_NTA	simde/x86/sse.h	3103;"	d
SIMDE_MM_HINT_T0	simde/x86/sse.h	3095;"	d
SIMDE_MM_HINT_T0	simde/x86/sse.h	3104;"	d
SIMDE_MM_HINT_T1	simde/x86/sse.h	3096;"	d
SIMDE_MM_HINT_T1	simde/x86/sse.h	3105;"	d
SIMDE_MM_HINT_T2	simde/x86/sse.h	3097;"	d
SIMDE_MM_HINT_T2	simde/x86/sse.h	3106;"	d
SIMDE_MM_MASK_DENORM	simde/x86/sse.h	4339;"	d
SIMDE_MM_MASK_DENORM	simde/x86/sse.h	4341;"	d
SIMDE_MM_MASK_DIV_ZERO	simde/x86/sse.h	4344;"	d
SIMDE_MM_MASK_DIV_ZERO	simde/x86/sse.h	4346;"	d
SIMDE_MM_MASK_INEXACT	simde/x86/sse.h	4359;"	d
SIMDE_MM_MASK_INEXACT	simde/x86/sse.h	4361;"	d
SIMDE_MM_MASK_INVALID	simde/x86/sse.h	4334;"	d
SIMDE_MM_MASK_INVALID	simde/x86/sse.h	4336;"	d
SIMDE_MM_MASK_MASK	simde/x86/sse.h	4364;"	d
SIMDE_MM_MASK_MASK	simde/x86/sse.h	4366;"	d
SIMDE_MM_MASK_OVERFLOW	simde/x86/sse.h	4349;"	d
SIMDE_MM_MASK_OVERFLOW	simde/x86/sse.h	4351;"	d
SIMDE_MM_MASK_UNDERFLOW	simde/x86/sse.h	4354;"	d
SIMDE_MM_MASK_UNDERFLOW	simde/x86/sse.h	4356;"	d
SIMDE_MM_ROUND_DOWN	simde/x86/sse.h	/^    SIMDE_MM_ROUND_DOWN        = _MM_ROUND_DOWN,$/;"	e	enum:__anon13
SIMDE_MM_ROUND_NEAREST	simde/x86/sse.h	/^    SIMDE_MM_ROUND_NEAREST     = _MM_ROUND_NEAREST,$/;"	e	enum:__anon13
SIMDE_MM_ROUND_TOWARD_ZERO	simde/x86/sse.h	/^    SIMDE_MM_ROUND_TOWARD_ZERO = _MM_ROUND_TOWARD_ZERO$/;"	e	enum:__anon13
SIMDE_MM_ROUND_UP	simde/x86/sse.h	/^    SIMDE_MM_ROUND_UP          = _MM_ROUND_UP,$/;"	e	enum:__anon13
SIMDE_MM_SET_ROUNDING_MODE	simde/x86/sse.h	/^SIMDE_MM_SET_ROUNDING_MODE(unsigned int a) {$/;"	f
SIMDE_MM_SHUFFLE	simde/x86/sse.h	3544;"	d
SIMDE_MM_SHUFFLE2	simde/x86/sse2.h	7324;"	d
SIMDE_MM_TRANSPOSE4_PS	simde/x86/sse.h	4263;"	d
SIMDE_MM_TRANSPOSE4_PS	simde/x86/sse.h	4277;"	d
SIMDE_NATURAL_VECTOR_SIZE	simde/simde-features.h	395;"	d
SIMDE_NATURAL_VECTOR_SIZE	simde/simde-features.h	407;"	d
SIMDE_NATURAL_VECTOR_SIZE_GE	simde/simde-features.h	412;"	d
SIMDE_NATURAL_VECTOR_SIZE_LE	simde/simde-features.h	411;"	d
SIMDE_NDEBUG	simde/check.h	17;"	d
SIMDE_NDEBUG	simde/debug-trap.h	17;"	d
SIMDE_NO_STRING_H	simde/simde-common.h	563;"	d
SIMDE_NO_STRING_H	simde/simde-common.h	566;"	d
SIMDE_POP_DISABLE_MSVC_C4127_	simde/check.h	40;"	d
SIMDE_POP_DISABLE_MSVC_C4127_	simde/check.h	43;"	d
SIMDE_POWER_ALTIVEC_BOOL	simde/simde-features.h	371;"	d
SIMDE_POWER_ALTIVEC_P5_NATIVE	simde/simde-features.h	327;"	d
SIMDE_POWER_ALTIVEC_P5_NATIVE	simde/simde-features.h	332;"	d
SIMDE_POWER_ALTIVEC_P6_NATIVE	simde/simde-features.h	318;"	d
SIMDE_POWER_ALTIVEC_P6_NATIVE	simde/simde-features.h	323;"	d
SIMDE_POWER_ALTIVEC_P7_NATIVE	simde/simde-features.h	309;"	d
SIMDE_POWER_ALTIVEC_P7_NATIVE	simde/simde-features.h	314;"	d
SIMDE_POWER_ALTIVEC_P8_NATIVE	simde/simde-features.h	300;"	d
SIMDE_POWER_ALTIVEC_P8_NATIVE	simde/simde-features.h	305;"	d
SIMDE_POWER_ALTIVEC_P9_NATIVE	simde/simde-features.h	296;"	d
SIMDE_POWER_ALTIVEC_PIXEL	simde/simde-features.h	370;"	d
SIMDE_POWER_ALTIVEC_VECTOR	simde/simde-features.h	369;"	d
SIMDE_PUSH_DISABLE_MSVC_C4127_	simde/check.h	39;"	d
SIMDE_PUSH_DISABLE_MSVC_C4127_	simde/check.h	42;"	d
SIMDE_REQUIRE_CONSTANT	simde/simde-common.h	135;"	d
SIMDE_REQUIRE_CONSTANT	simde/simde-common.h	137;"	d
SIMDE_REQUIRE_CONSTANT	simde/simde-common.h	140;"	d
SIMDE_REQUIRE_CONSTANT	simde/x86/clmul.h	/^    SIMDE_REQUIRE_CONSTANT(imm8) {$/;"	f
SIMDE_REQUIRE_CONSTANT	simde/x86/ssse3.h	/^    SIMDE_REQUIRE_CONSTANT(count) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/dot_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/dot_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/dup_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 0) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/dup_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/dup_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/dup_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/dup_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 7) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/ext.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 0) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/ext.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/ext.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/ext.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/ext.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 7) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/get_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 0) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/get_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/get_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/get_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/get_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 7) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/mul_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 0) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/mul_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/mul_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/mul_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 7) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/rshr_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 16) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/rshr_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 32) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/rshr_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 64) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/rshr_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 8) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/rshr_n.h	/^  SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 64) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/set_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 0) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/set_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/set_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/set_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/set_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 7) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/shl_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/shl_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 31) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/shl_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 63) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/shl_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 0, 7) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/shr_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 16) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/shr_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 32) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/shr_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 64) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/shr_n.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(n, 1, 8) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/st1_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 0) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/st1_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/st1_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/st1_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/arm/neon/st1_lane.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lane, 0, 7) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/simde-common.h	146;"	d
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 31) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(count, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255)  {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/cmp.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 31) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/extract.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/extract.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/insert.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/insert.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/kshift.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(count, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/shuffle.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/shuffle.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/avx512/srli.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/gfni.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(b, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 3) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(lax_rounding, 0, 1) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255)  {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 3)  {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 7)  {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse4.1.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 1)  {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse4.1.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 15)  {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse4.1.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255)  {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse4.1.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 3)  {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse4.1.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(rounding, 0, 15) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/sse4.2.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_REQUIRE_CONSTANT_RANGE	simde/x86/ssse3.h	/^    SIMDE_REQUIRE_CONSTANT_RANGE(count, 0, 255) {$/;"	f
SIMDE_REQUIRE_RANGE	simde/simde-common.h	143;"	d
SIMDE_REQUIRE_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_RANGE(index, 0, 15)  {$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_RANGE(index, 0, 3)  {$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_RANGE(index, 0, 3) {$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_RANGE(index, 0, 31) {$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_RANGE(index, 0, 7)  {$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx.h	/^    SIMDE_REQUIRE_RANGE(index, 0, 7) {$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx2.h	/^    SIMDE_REQUIRE_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx2.h	/^    SIMDE_REQUIRE_RANGE(index, 0, 15)  {$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx2.h	/^    SIMDE_REQUIRE_RANGE(index, 0, 31){$/;"	f
SIMDE_REQUIRE_RANGE	simde/x86/avx512/slli.h	/^    SIMDE_REQUIRE_RANGE(imm8, 0, 255) {$/;"	f
SIMDE_SHORT_MODIFIER	simde/check.h	27;"	d
SIMDE_SHORT_MODIFIER	simde/check.h	35;"	d
SIMDE_SHUFFLE_VECTOR_	simde/simde-common.h	240;"	d
SIMDE_SIDD_BIT_MASK	simde/x86/sse4.2.h	56;"	d
SIMDE_SIDD_CMP_EQUAL_ANY	simde/x86/sse4.2.h	46;"	d
SIMDE_SIDD_CMP_EQUAL_EACH	simde/x86/sse4.2.h	48;"	d
SIMDE_SIDD_CMP_EQUAL_ORDERED	simde/x86/sse4.2.h	49;"	d
SIMDE_SIDD_CMP_RANGES	simde/x86/sse4.2.h	47;"	d
SIMDE_SIDD_LEAST_SIGNIFICANT	simde/x86/sse4.2.h	54;"	d
SIMDE_SIDD_MASKED_NEGATIVE_POLARITY	simde/x86/sse4.2.h	53;"	d
SIMDE_SIDD_MASKED_POSITIVE_POLARITY	simde/x86/sse4.2.h	52;"	d
SIMDE_SIDD_MOST_SIGNIFICANT	simde/x86/sse4.2.h	55;"	d
SIMDE_SIDD_NEGATIVE_POLARITY	simde/x86/sse4.2.h	51;"	d
SIMDE_SIDD_POSITIVE_POLARITY	simde/x86/sse4.2.h	50;"	d
SIMDE_SIDD_SBYTE_OPS	simde/x86/sse4.2.h	44;"	d
SIMDE_SIDD_SWORD_OPS	simde/x86/sse4.2.h	45;"	d
SIMDE_SIDD_UBYTE_OPS	simde/x86/sse4.2.h	42;"	d
SIMDE_SIDD_UNIT_MASK	simde/x86/sse4.2.h	57;"	d
SIMDE_SIDD_UWORD_OPS	simde/x86/sse4.2.h	43;"	d
SIMDE_SIZE_MODIFIER	simde/check.h	25;"	d
SIMDE_SIZE_MODIFIER	simde/check.h	30;"	d
SIMDE_SIZE_MODIFIER	simde/check.h	32;"	d
SIMDE_STATIC_ASSERT	simde/simde-common.h	161;"	d
SIMDE_STATIC_ASSERT	simde/simde-common.h	165;"	d
SIMDE_STDC_HOSTED	simde/simde-common.h	531;"	d
SIMDE_STDC_HOSTED	simde/simde-common.h	536;"	d
SIMDE_STDC_HOSTED	simde/simde-common.h	538;"	d
SIMDE_VECTOR	simde/simde-common.h	196;"	d
SIMDE_VECTOR	simde/simde-common.h	202;"	d
SIMDE_VECTOR	simde/simde-common.h	210;"	d
SIMDE_VECTOR	simde/simde-common.h	213;"	d
SIMDE_VECTOR	simde/simde-common.h	215;"	d
SIMDE_VECTORIZE	simde/simde-common.h	292;"	d
SIMDE_VECTORIZE_ALIGNED	simde/simde-common.h	303;"	d
SIMDE_VECTORIZE_REDUCTION	simde/simde-common.h	295;"	d
SIMDE_VECTORIZE_SAFELEN	simde/simde-common.h	293;"	d
SIMDE_VECTOR_NEGATE	simde/simde-common.h	198;"	d
SIMDE_VECTOR_NEGATE	simde/simde-common.h	204;"	d
SIMDE_VECTOR_NEGATE	simde/simde-common.h	217;"	d
SIMDE_VECTOR_OPS	simde/simde-common.h	197;"	d
SIMDE_VECTOR_OPS	simde/simde-common.h	203;"	d
SIMDE_VECTOR_OPS	simde/simde-common.h	211;"	d
SIMDE_VECTOR_OPS	simde/simde-common.h	216;"	d
SIMDE_VECTOR_SCALAR	simde/simde-common.h	199;"	d
SIMDE_VECTOR_SCALAR	simde/simde-common.h	220;"	d
SIMDE_VECTOR_SUBSCRIPT	simde/simde-common.h	200;"	d
SIMDE_VECTOR_SUBSCRIPT	simde/simde-common.h	206;"	d
SIMDE_VECTOR_SUBSCRIPT	simde/simde-common.h	218;"	d
SIMDE_VECTOR_SUBSCRIPT_OPS	simde/simde-common.h	276;"	d
SIMDE_VECTOR_SUBSCRIPT_SCALAR	simde/simde-common.h	279;"	d
SIMDE_VERSION	simde/simde-common.h	35;"	d
SIMDE_VERSION_MAJOR	simde/simde-common.h	32;"	d
SIMDE_VERSION_MICRO	simde/simde-common.h	34;"	d
SIMDE_VERSION_MINOR	simde/simde-common.h	33;"	d
SIMDE_WASM_SIMD128_NATIVE	simde/simde-features.h	281;"	d
SIMDE_X86_AVX2_ENABLE_NATIVE_ALIASES	simde/simde-features.h	441;"	d
SIMDE_X86_AVX2_H	simde/x86/avx2.h	31;"	d
SIMDE_X86_AVX2_NATIVE	simde/simde-features.h	106;"	d
SIMDE_X86_AVX2_NATIVE	simde/simde-features.h	120;"	d
SIMDE_X86_AVX512BW_ENABLE_NATIVE_ALIASES	simde/simde-features.h	453;"	d
SIMDE_X86_AVX512BW_NATIVE	simde/simde-features.h	93;"	d
SIMDE_X86_AVX512CD_ENABLE_NATIVE_ALIASES	simde/simde-features.h	459;"	d
SIMDE_X86_AVX512CD_NATIVE	simde/simde-features.h	66;"	d
SIMDE_X86_AVX512DQ_ENABLE_NATIVE_ALIASES	simde/simde-features.h	456;"	d
SIMDE_X86_AVX512DQ_NATIVE	simde/simde-features.h	75;"	d
SIMDE_X86_AVX512F_ENABLE_NATIVE_ALIASES	simde/simde-features.h	447;"	d
SIMDE_X86_AVX512F_NATIVE	simde/simde-features.h	102;"	d
SIMDE_X86_AVX512F_NATIVE	simde/simde-features.h	43;"	d
SIMDE_X86_AVX512F_NATIVE	simde/simde-features.h	52;"	d
SIMDE_X86_AVX512F_NATIVE	simde/simde-features.h	61;"	d
SIMDE_X86_AVX512F_NATIVE	simde/simde-features.h	70;"	d
SIMDE_X86_AVX512F_NATIVE	simde/simde-features.h	79;"	d
SIMDE_X86_AVX512F_NATIVE	simde/simde-features.h	88;"	d
SIMDE_X86_AVX512F_NATIVE	simde/simde-features.h	97;"	d
SIMDE_X86_AVX512F_NATIVE	simde/x86/avx512/types.h	53;"	d
SIMDE_X86_AVX512VBMI_NATIVE	simde/simde-features.h	57;"	d
SIMDE_X86_AVX512VL_ENABLE_NATIVE_ALIASES	simde/simde-features.h	450;"	d
SIMDE_X86_AVX512VL_NATIVE	simde/simde-features.h	84;"	d
SIMDE_X86_AVX512VP2INTERSECT_NATIVE	simde/simde-features.h	48;"	d
SIMDE_X86_AVX512_2INTERSECT_H	simde/x86/avx512/2intersect.h	29;"	d
SIMDE_X86_AVX512_ABS_H	simde/x86/avx512/abs.h	29;"	d
SIMDE_X86_AVX512_ADDS_H	simde/x86/avx512/adds.h	29;"	d
SIMDE_X86_AVX512_ADD_H	simde/x86/avx512/add.h	29;"	d
SIMDE_X86_AVX512_ANDNOT_H	simde/x86/avx512/andnot.h	29;"	d
SIMDE_X86_AVX512_AND_H	simde/x86/avx512/and.h	30;"	d
SIMDE_X86_AVX512_AVG_H	simde/x86/avx512/avg.h	29;"	d
SIMDE_X86_AVX512_BLEND_H	simde/x86/avx512/blend.h	29;"	d
SIMDE_X86_AVX512_BROADCAST_H	simde/x86/avx512/broadcast.h	30;"	d
SIMDE_X86_AVX512_CAST_H	simde/x86/avx512/cast.h	31;"	d
SIMDE_X86_AVX512_CMPEQ_H	simde/x86/avx512/cmpeq.h	29;"	d
SIMDE_X86_AVX512_CMPGE_H	simde/x86/avx512/cmpge.h	29;"	d
SIMDE_X86_AVX512_CMPGT_H	simde/x86/avx512/cmpgt.h	29;"	d
SIMDE_X86_AVX512_CMPLE_H	simde/x86/avx512/cmple.h	28;"	d
SIMDE_X86_AVX512_CMPLT_H	simde/x86/avx512/cmplt.h	28;"	d
SIMDE_X86_AVX512_CMP_H	simde/x86/avx512/cmp.h	29;"	d
SIMDE_X86_AVX512_COPYSIGN_H	simde/x86/avx512/copysign.h	29;"	d
SIMDE_X86_AVX512_CVTS_H	simde/x86/avx512/cvts.h	30;"	d
SIMDE_X86_AVX512_CVT_H	simde/x86/avx512/cvt.h	30;"	d
SIMDE_X86_AVX512_DIV_H	simde/x86/avx512/div.h	30;"	d
SIMDE_X86_AVX512_EXTRACT_H	simde/x86/avx512/extract.h	29;"	d
SIMDE_X86_AVX512_FMADD_H	simde/x86/avx512/fmadd.h	29;"	d
SIMDE_X86_AVX512_FMSUB_H	simde/x86/avx512/fmsub.h	29;"	d
SIMDE_X86_AVX512_FNMADD_H	simde/x86/avx512/fnmadd.h	29;"	d
SIMDE_X86_AVX512_FNMSUB_H	simde/x86/avx512/fnmsub.h	29;"	d
SIMDE_X86_AVX512_H	simde/x86/avx512.h	28;"	d
SIMDE_X86_AVX512_INSERT_H	simde/x86/avx512/insert.h	29;"	d
SIMDE_X86_AVX512_KSHIFT_H	simde/x86/avx512/kshift.h	29;"	d
SIMDE_X86_AVX512_LOADU_H	simde/x86/avx512/loadu.h	28;"	d
SIMDE_X86_AVX512_LOAD_H	simde/x86/avx512/load.h	28;"	d
SIMDE_X86_AVX512_LZCNT_H	simde/x86/avx512/lzcnt.h	28;"	d
SIMDE_X86_AVX512_MADDUBS_H	simde/x86/avx512/maddubs.h	29;"	d
SIMDE_X86_AVX512_MADD_H	simde/x86/avx512/madd.h	29;"	d
SIMDE_X86_AVX512_MAX_H	simde/x86/avx512/max.h	29;"	d
SIMDE_X86_AVX512_MIN_H	simde/x86/avx512/min.h	29;"	d
SIMDE_X86_AVX512_MOVM_H	simde/x86/avx512/movm.h	29;"	d
SIMDE_X86_AVX512_MOV_H	simde/x86/avx512/mov.h	29;"	d
SIMDE_X86_AVX512_MOV_MASK_H	simde/x86/avx512/mov_mask.h	28;"	d
SIMDE_X86_AVX512_MULHI_H	simde/x86/avx512/mulhi.h	29;"	d
SIMDE_X86_AVX512_MULHRS_H	simde/x86/avx512/mulhrs.h	29;"	d
SIMDE_X86_AVX512_MULLO_H	simde/x86/avx512/mullo.h	29;"	d
SIMDE_X86_AVX512_MUL_H	simde/x86/avx512/mul.h	30;"	d
SIMDE_X86_AVX512_NEGATE_H	simde/x86/avx512/negate.h	29;"	d
SIMDE_X86_AVX512_OR_H	simde/x86/avx512/or.h	30;"	d
SIMDE_X86_AVX512_PACKS_H	simde/x86/avx512/packs.h	29;"	d
SIMDE_X86_AVX512_PACKUS_H	simde/x86/avx512/packus.h	29;"	d
SIMDE_X86_AVX512_PERMUTEX2VAR_H	simde/x86/avx512/permutex2var.h	29;"	d
SIMDE_X86_AVX512_PERMUTEXVAR_H	simde/x86/avx512/permutexvar.h	29;"	d
SIMDE_X86_AVX512_SAD_H	simde/x86/avx512/sad.h	29;"	d
SIMDE_X86_AVX512_SET1_H	simde/x86/avx512/set1.h	29;"	d
SIMDE_X86_AVX512_SET4_H	simde/x86/avx512/set4.h	29;"	d
SIMDE_X86_AVX512_SETONE_H	simde/x86/avx512/setone.h	28;"	d
SIMDE_X86_AVX512_SETR4_H	simde/x86/avx512/setr4.h	29;"	d
SIMDE_X86_AVX512_SETR_H	simde/x86/avx512/setr.h	29;"	d
SIMDE_X86_AVX512_SETZERO_H	simde/x86/avx512/setzero.h	31;"	d
SIMDE_X86_AVX512_SET_H	simde/x86/avx512/set.h	28;"	d
SIMDE_X86_AVX512_SHUFFLE_H	simde/x86/avx512/shuffle.h	29;"	d
SIMDE_X86_AVX512_SLLI_H	simde/x86/avx512/slli.h	30;"	d
SIMDE_X86_AVX512_SLLV_H	simde/x86/avx512/sllv.h	29;"	d
SIMDE_X86_AVX512_SLL_H	simde/x86/avx512/sll.h	29;"	d
SIMDE_X86_AVX512_SQRT_H	simde/x86/avx512/sqrt.h	29;"	d
SIMDE_X86_AVX512_SRAI_H	simde/x86/avx512/srai.h	29;"	d
SIMDE_X86_AVX512_SRAV_H	simde/x86/avx512/srav.h	29;"	d
SIMDE_X86_AVX512_SRA_H	simde/x86/avx512/sra.h	29;"	d
SIMDE_X86_AVX512_SRLI_H	simde/x86/avx512/srli.h	29;"	d
SIMDE_X86_AVX512_SRLV_H	simde/x86/avx512/srlv.h	29;"	d
SIMDE_X86_AVX512_SRL_H	simde/x86/avx512/srl.h	29;"	d
SIMDE_X86_AVX512_STOREU_H	simde/x86/avx512/storeu.h	28;"	d
SIMDE_X86_AVX512_STORE_H	simde/x86/avx512/store.h	28;"	d
SIMDE_X86_AVX512_SUBS_H	simde/x86/avx512/subs.h	29;"	d
SIMDE_X86_AVX512_SUB_H	simde/x86/avx512/sub.h	30;"	d
SIMDE_X86_AVX512_TEST_H	simde/x86/avx512/test.h	30;"	d
SIMDE_X86_AVX512_TYPES_H	simde/x86/avx512/types.h	28;"	d
SIMDE_X86_AVX512_UNPACKHI_H	simde/x86/avx512/unpackhi.h	29;"	d
SIMDE_X86_AVX512_UNPACKLO_H	simde/x86/avx512/unpacklo.h	29;"	d
SIMDE_X86_AVX512_XORSIGN_H	simde/x86/avx512/xorsign.h	45;"	d
SIMDE_X86_AVX512_XOR_H	simde/x86/avx512/xor.h	30;"	d
SIMDE_X86_AVX_ENABLE_NATIVE_ALIASES	simde/simde-features.h	438;"	d
SIMDE_X86_AVX_H	simde/x86/avx.h	30;"	d
SIMDE_X86_AVX_NATIVE	simde/simde-features.h	115;"	d
SIMDE_X86_AVX_NATIVE	simde/simde-features.h	124;"	d
SIMDE_X86_AVX_NATIVE	simde/simde-features.h	129;"	d
SIMDE_X86_CLMUL_H	simde/x86/clmul.h	34;"	d
SIMDE_X86_FMA_ENABLE_NATIVE_ALIASES	simde/simde-features.h	444;"	d
SIMDE_X86_FMA_ENABLE_NATIVE_ALIASES	simde/x86/fma.h	33;"	d
SIMDE_X86_FMA_H	simde/x86/fma.h	28;"	d
SIMDE_X86_FMA_NATIVE	simde/simde-features.h	111;"	d
SIMDE_X86_GENERATE_CONVERSION_FUNCTION	simde/x86/mmx.h	147;"	d
SIMDE_X86_GFNI_ENABLE_NATIVE_ALIASES	simde/simde-features.h	462;"	d
SIMDE_X86_GFNI_H	simde/x86/gfni.h	27;"	d
SIMDE_X86_GFNI_NATIVE	simde/simde-features.h	195;"	d
SIMDE_X86_MMX_ENABLE_NATIVE_ALIASES	simde/simde-features.h	417;"	d
SIMDE_X86_MMX_ENABLE_NATIVE_ALIASES	simde/x86/mmx.h	120;"	d
SIMDE_X86_MMX_H	simde/x86/mmx.h	28;"	d
SIMDE_X86_MMX_NATIVE	simde/simde-features.h	189;"	d
SIMDE_X86_MMX_USE_NATIVE_TYPE	simde/x86/mmx.h	36;"	d
SIMDE_X86_PCLMUL_ENABLE_NATIVE_ALIASES	simde/simde-features.h	465;"	d
SIMDE_X86_PCLMUL_ENABLE_NATIVE_ALIASES	simde/x86/clmul.h	40;"	d
SIMDE_X86_PCLMUL_NATIVE	simde/simde-features.h	201;"	d
SIMDE_X86_SSE2_ENABLE_NATIVE_ALIASES	simde/simde-features.h	423;"	d
SIMDE_X86_SSE2_H	simde/x86/sse2.h	33;"	d
SIMDE_X86_SSE2_NATIVE	simde/simde-features.h	169;"	d
SIMDE_X86_SSE2_NATIVE	simde/simde-features.h	174;"	d
SIMDE_X86_SSE3_ENABLE_NATIVE_ALIASES	simde/simde-features.h	426;"	d
SIMDE_X86_SSE3_H	simde/x86/sse3.h	28;"	d
SIMDE_X86_SSE3_NATIVE	simde/simde-features.h	160;"	d
SIMDE_X86_SSE3_NATIVE	simde/simde-features.h	165;"	d
SIMDE_X86_SSE4_1_ENABLE_NATIVE_ALIASES	simde/simde-features.h	432;"	d
SIMDE_X86_SSE4_1_ENABLE_NATIVE_ALIASES	simde/x86/sse4.1.h	38;"	d
SIMDE_X86_SSE4_1_H	simde/x86/sse4.1.h	29;"	d
SIMDE_X86_SSE4_1_NATIVE	simde/simde-features.h	142;"	d
SIMDE_X86_SSE4_1_NATIVE	simde/simde-features.h	147;"	d
SIMDE_X86_SSE4_2_ENABLE_NATIVE_ALIASES	simde/simde-features.h	435;"	d
SIMDE_X86_SSE4_2_H	simde/x86/sse4.2.h	29;"	d
SIMDE_X86_SSE4_2_NATIVE	simde/simde-features.h	133;"	d
SIMDE_X86_SSE4_2_NATIVE	simde/simde-features.h	138;"	d
SIMDE_X86_SSE_ENABLE_NATIVE_ALIASES	simde/simde-features.h	420;"	d
SIMDE_X86_SSE_H	simde/x86/sse.h	31;"	d
SIMDE_X86_SSE_NATIVE	simde/simde-features.h	178;"	d
SIMDE_X86_SSE_NATIVE	simde/simde-features.h	183;"	d
SIMDE_X86_SSSE3_ENABLE_NATIVE_ALIASES	simde/simde-features.h	429;"	d
SIMDE_X86_SSSE3_H	simde/x86/ssse3.h	28;"	d
SIMDE_X86_SSSE3_NATIVE	simde/simde-features.h	151;"	d
SIMDE_X86_SSSE3_NATIVE	simde/simde-features.h	156;"	d
SIMDE_X86_SVML_ENABLE_NATIVE_ALIASES	simde/x86/svml.h	51;"	d
SIMDE_X86_SVML_ENABLE_NATIVE_ALIASES	simde/x86/svml.h	59;"	d
SIMDE_X86_SVML_H	simde/x86/svml.h	29;"	d
SIMDE_X86_SVML_NATIVE	simde/simde-features.h	213;"	d
SIMDE_X86_SVML_NATIVE	simde/simde-features.h	39;"	d
SIMDE_X86_VPCLMULQDQ_ENABLE_NATIVE_ALIASES	simde/simde-features.h	468;"	d
SIMDE_X86_VPCLMULQDQ_NATIVE	simde/simde-features.h	207;"	d
SIMDE_X_PERMUTEX2VAR_USE_GENERIC	simde/x86/avx512/permutex2var.h	54;"	d
SNVs	haplotypes.cpp	/^linear_haplo_structure::SNVvector linear_haplo_structure::SNVs(const vg::Path& path) const {$/;"	f	class:haplo::linear_haplo_structure
SNVvector	haplotypes.hpp	/^  struct SNVvector{$/;"	s	struct:haplo::linear_haplo_structure
SSWAligner	ssw_aligner.hpp	/^    SSWAligner($/;"	f	class:vg::SSWAligner
SSWAligner	ssw_aligner.hpp	/^class SSWAligner {$/;"	c	namespace:vg
STANDARD_LIBRARY	version.cpp	/^const string Version::STANDARD_LIBRARY = VG_STANDARD_LIBRARY_VERSION;$/;"	m	class:vg::Version	file:
STANDARD_LIBRARY	version.hpp	/^    const static string STANDARD_LIBRARY;$/;"	m	class:vg::Version
STR	version.cpp	22;"	d	file:
STRINGIFY	config/allocator_config_jemalloc.cpp	38;"	d	file:
STRINGIFY_HELPER	config/allocator_config_jemalloc.cpp	37;"	d	file:
STRUCTURES_SPARSE_UNION_FIND_HPP_INCLUDED	sparse_union_find.hpp	2;"	d
SUBCHAIN_LENGTH	recombinator.cpp	/^constexpr size_t HaplotypePartitioner::SUBCHAIN_LENGTH;$/;"	m	class:vg::HaplotypePartitioner	file:
SUBCHAIN_LENGTH	recombinator.hpp	/^    constexpr static size_t SUBCHAIN_LENGTH = 10000;$/;"	m	class:vg::HaplotypePartitioner
SV_TYPE	filter.hpp	/^    int SV_TYPE = 0;$/;"	m	struct:vg::BREAKPOINT
Sampler	sampler.hpp	/^    inline Sampler(PathPositionHandleGraph* x,$/;"	f	class:vg::Sampler
Sampler	sampler.hpp	/^class Sampler: public AbstractReadSampler {$/;"	c	namespace:vg
ScoreProperties	gbwt_extender.cpp	/^    struct ScoreProperties {$/;"	s	class:vg::WFATree	file:
ScoreProvider	haplotypes.hpp	/^class ScoreProvider {$/;"	c	namespace:haplo
ScoringOptions	subcommand/giraffe_main.cpp	/^struct ScoringOptions {$/;"	s	file:
Seed	minimizer_mapper.hpp	/^    typedef SnarlDistanceIndexClusterer::Seed Seed;$/;"	t	class:vg::MinimizerMapper
Seed	snarl_seed_clusterer.hpp	/^        struct Seed {$/;"	s	class:vg::SnarlDistanceIndexClusterer
SeedCache	snarl_seed_clusterer.hpp	/^        struct SeedCache{$/;"	s	class:vg::SnarlDistanceIndexClusterer
SeqComplexity	sequence_complexity.hpp	/^SeqComplexity<MaxOrder>::SeqComplexity(const string& seq) : SeqComplexity(seq.begin(), seq.end()) {$/;"	f	class:vg::SeqComplexity
SeqComplexity	sequence_complexity.hpp	/^SeqComplexity<MaxOrder>::SeqComplexity(string::const_iterator begin, string::const_iterator end) {$/;"	f	class:vg::SeqComplexity
SeqComplexity	sequence_complexity.hpp	/^struct SeqComplexity {$/;"	s	namespace:vg
ShuffledPairs	cluster.cpp	/^ShuffledPairs::ShuffledPairs(size_t num_items) : num_items(num_items), num_pairs(num_items * num_items), larger_prime(1), primitive_root(1) {$/;"	f	class:vg::ShuffledPairs
ShuffledPairs	cluster.hpp	/^class ShuffledPairs {$/;"	c	namespace:vg
SimpleConsistencyCalculator	genotypekit.hpp	/^class SimpleConsistencyCalculator : public ConsistencyCalculator{$/;"	c	namespace:vg
SimpleTraversalSupportCalculator	genotypekit.hpp	/^class SimpleTraversalSupportCalculator : public TraversalSupportCalculator{$/;"	c	namespace:vg
SizeLimitExceededException	kmer.hpp	/^class SizeLimitExceededException : public std::exception {$/;"	c	namespace:vg
SmallBitset	small_bitset.hpp	/^        SmallBitset() : universe_size(0), data({ static_cast<value_type>(0) }) {}$/;"	f	class:vg::SmallBitset
SmallBitset	small_bitset.hpp	/^        SmallBitset(SmallBitset&& another) {$/;"	f	class:vg::SmallBitset
SmallBitset	small_bitset.hpp	/^        SmallBitset(const SmallBitset& another) {$/;"	f	class:vg::SmallBitset
SmallBitset	small_bitset.hpp	/^        explicit SmallBitset(size_t n) : universe_size(n) {$/;"	f	class:vg::SmallBitset
SmallBitset	small_bitset.hpp	/^class SmallBitset {$/;"	c	namespace:vg
SmallSnarlSimplifier	small_snarl_simplifier.cpp	/^SmallSnarlSimplifier::SmallSnarlSimplifier(VG& graph) : Progressive(), graph(graph), traversal_finder(graph) {$/;"	f	class:vg::SmallSnarlSimplifier
SmallSnarlSimplifier	small_snarl_simplifier.hpp	/^class SmallSnarlSimplifier : public Progressive {$/;"	c	namespace:vg
SnarlCaller	snarl_caller.hpp	/^class SnarlCaller {$/;"	c	namespace:vg
SnarlDistanceIndexClusterer	snarl_seed_clusterer.cpp	/^SnarlDistanceIndexClusterer::SnarlDistanceIndexClusterer( const SnarlDistanceIndex& distance_index) :$/;"	f	class:vg::SnarlDistanceIndexClusterer
SnarlDistanceIndexClusterer	snarl_seed_clusterer.cpp	/^SnarlDistanceIndexClusterer::SnarlDistanceIndexClusterer( const SnarlDistanceIndex& distance_index, const HandleGraph* graph) :$/;"	f	class:vg::SnarlDistanceIndexClusterer
SnarlDistanceIndexClusterer	snarl_seed_clusterer.cpp	/^SnarlDistanceIndexClusterer::SnarlDistanceIndexClusterer( const SnarlDistanceIndex* distance_index) :$/;"	f	class:vg::SnarlDistanceIndexClusterer
SnarlDistanceIndexClusterer	snarl_seed_clusterer.cpp	/^SnarlDistanceIndexClusterer::SnarlDistanceIndexClusterer( const SnarlDistanceIndex* distance_index, const HandleGraph* graph) :$/;"	f	class:vg::SnarlDistanceIndexClusterer
SnarlDistanceIndexClusterer	snarl_seed_clusterer.hpp	/^class SnarlDistanceIndexClusterer {$/;"	c	namespace:vg
SnarlFinder	snarls.hpp	/^class SnarlFinder {$/;"	c	namespace:vg
SnarlGraph	graph_caller.cpp	/^SnarlGraph::SnarlGraph(const HandleGraph* backing_graph, SnarlManager& snarl_manager, vector<const Snarl*> snarls) :$/;"	f	class:vg::SnarlGraph
SnarlGraph	graph_caller.hpp	/^class SnarlGraph : virtual public HandleGraph {$/;"	c	namespace:vg
SnarlManager	snarls.cpp	/^SnarlManager::SnarlManager(const function<void(const function<void(Snarl&)>&)>& for_each_snarl) {$/;"	f	class:vg::SnarlManager
SnarlManager	snarls.cpp	/^SnarlManager::SnarlManager(istream& in) : SnarlManager([&in](const function<void(Snarl&)>& consume_snarl) -> void {$/;"	f	class:vg::SnarlManager
SnarlManager	snarls.hpp	/^SnarlManager::SnarlManager(SnarlIterator begin, SnarlIterator end) {$/;"	f	class:vg::SnarlManager
SnarlManager	snarls.hpp	/^class SnarlManager {$/;"	c	namespace:vg
SnarlMinDistance	cluster.cpp	/^SnarlMinDistance::SnarlMinDistance(SnarlDistanceIndex& distance_index) : distance_index(distance_index) {$/;"	f	class:vg::SnarlMinDistance
SnarlMinDistance	cluster.hpp	/^class SnarlMinDistance : public DistanceHeuristic {$/;"	c	namespace:vg
SnarlOrientedDistanceMeasurer	cluster.cpp	/^SnarlOrientedDistanceMeasurer::SnarlOrientedDistanceMeasurer(SnarlDistanceIndex* distance_index) : distance_index(distance_index) {$/;"	f	class:vg::SnarlOrientedDistanceMeasurer
SnarlOrientedDistanceMeasurer	cluster.hpp	/^class SnarlOrientedDistanceMeasurer : public OrientedDistanceMeasurer {$/;"	c	namespace:vg
SnarlState	genome_state.cpp	/^SnarlState::SnarlState(const NetGraph* graph) : graph(graph) {$/;"	f	class:vg::SnarlState
SnarlState	genome_state.hpp	/^class SnarlState {$/;"	c	namespace:vg
SnarlTreeChild	snarl_seed_clusterer.hpp	/^            struct SnarlTreeChild {$/;"	s	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
SnarlTreeNodeProblem	snarl_seed_clusterer.hpp	/^            SnarlTreeNodeProblem( net_handle_t net, size_t read_count, size_t seed_count, bool is_reversed_in_parent, size_t node_length, size_t prefix_sum, size_t component) :$/;"	f	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
SnarlTreeNodeProblem	snarl_seed_clusterer.hpp	/^            SnarlTreeNodeProblem( net_handle_t net, size_t read_count, size_t seed_count, const SnarlDistanceIndex& distance_index) :$/;"	f	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
SnarlTreeNodeProblem	snarl_seed_clusterer.hpp	/^        struct SnarlTreeNodeProblem {$/;"	s	class:vg::SnarlDistanceIndexClusterer
SourceLineInfo	unittest/catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
SourceSinkOverlay	source_sink_overlay.cpp	/^SourceSinkOverlay::SourceSinkOverlay(const HandleGraph* backing, size_t length, id_t source_id, id_t sink_id,$/;"	f	class:vg::SourceSinkOverlay
SourceSinkOverlay	source_sink_overlay.hpp	/^class SourceSinkOverlay : public ExpandingOverlayGraph {$/;"	c	namespace:vg
SparseUnionFind	sparse_union_find.cpp	/^    SparseUnionFind::SparseUnionFind(bool include_children, vector<size_t> node_ids) :$/;"	f	class:vg::SparseUnionFind
SparseUnionFind	sparse_union_find.hpp	/^    class SparseUnionFind : public UnionFind{$/;"	c	namespace:vg
SpliceRegion	splicing.cpp	/^SpliceRegion::SpliceRegion(const pos_t& seed_pos, bool search_left, int64_t search_dist,$/;"	f	class:vg::SpliceRegion
SpliceRegion	splicing.hpp	/^class SpliceRegion {$/;"	c	namespace:vg
SpliceStats	splicing.cpp	/^SpliceStats::SpliceStats(const GSSWAligner& scorer) {$/;"	f	class:vg::SpliceStats
SpliceStats	splicing.cpp	/^SpliceStats::SpliceStats(const vector<tuple<string, string, double>>& motifs,$/;"	f	class:vg::SpliceStats
SpliceStats	splicing.hpp	/^class SpliceStats {$/;"	c	namespace:vg
SpliceStrand	multipath_mapper.hpp	/^        enum SpliceStrand {Undetermined, Forward, Reverse};$/;"	g	class:vg::MultipathMapper
SplicedHTSAlignmentEmitter	hts_alignment_emitter.cpp	/^SplicedHTSAlignmentEmitter::SplicedHTSAlignmentEmitter(const string& filename, const string& format,$/;"	f	class:vg::SplicedHTSAlignmentEmitter
SplicedHTSAlignmentEmitter	hts_alignment_emitter.hpp	/^class SplicedHTSAlignmentEmitter : public HTSAlignmentEmitter {$/;"	c	namespace:vg
Stage	funnel.hpp	/^    struct Stage {$/;"	s	class:vg::Funnel::State
State	funnel.hpp	/^    enum class State {$/;"	c	class:vg::Funnel
Statistics	recombinator.hpp	/^    struct Statistics {$/;"	s	class:vg::Recombinator
StrandSplitGraph	split_strand_graph.cpp	/^    StrandSplitGraph::StrandSplitGraph(const HandleGraph* graph) : graph(graph){$/;"	f	class:vg::StrandSplitGraph
StrandSplitGraph	split_strand_graph.hpp	/^    class StrandSplitGraph : public ExpandingOverlayGraph {$/;"	c	namespace:vg
StreamCompressString	zstdutil.cpp	/^int StreamCompressString(const std::string& src, std::string& dst, int compressionlevel) {$/;"	f	namespace:zstdutil
StreamDecompressString	zstdutil.cpp	/^int StreamDecompressString(const std::string& src, std::string& dst, int compressionlevel) {$/;"	f	namespace:zstdutil
StreamEndStop	unittest/catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StreamIndex	stream_index.hpp	/^class StreamIndex : public StreamIndexBase {$/;"	c	namespace:vg
StreamIndexBase	stream_index.hpp	/^class StreamIndexBase {$/;"	c	namespace:vg
StreamSorter	stream_sorter.hpp	/^StreamSorter<Message>::StreamSorter(bool show_progress) {$/;"	f	class:vg::StreamSorter
StreamSorter	stream_sorter.hpp	/^class StreamSorter : public Progressive {$/;"	c	namespace:vg
String	multipath_alignment.hpp	/^        enum anno_type_t {Null = 0, Double = 2, Bool = 3, String = 4};$/;"	e	enum:vg::multipath_alignment_t::anno_type_t
StringMaker	unittest/catch.hpp	/^    struct StringMaker {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<NSObject*> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<NSString*> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<T^> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<bool> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<char *> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<char const *> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<char> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<char[SZ]> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<double> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<float> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<int> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<long long> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<long> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<signed char> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<signed char[SZ]> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<std::byte> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<std::nullptr_t> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<std::optional<T> > {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<std::pair<T1, T2> > {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<std::string> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<std::string_view> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<std::wstring> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<std::wstring_view> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<unsigned char> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<unsigned char[SZ]> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<unsigned int> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<unsigned long long> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<unsigned long> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<wchar_t *> {$/;"	s	namespace:Catch
StringMaker	unittest/catch.hpp	/^    struct StringMaker<wchar_t const *> {$/;"	s	namespace:Catch
StringMaker	unittest/genotypekit.cpp	/^template<typename Item> struct StringMaker<std::set<Item>> {$/;"	s	namespace:Catch	file:
StringRef	unittest/catch.hpp	/^    class StringRef {$/;"	c	namespace:Catch
SubHandleGraph	subgraph.cpp	/^    SubHandleGraph::SubHandleGraph(const HandleGraph* super) : super(super) {$/;"	f	class:vg::SubHandleGraph
SubHandleGraph	subgraph.hpp	/^    SubHandleGraph::SubHandleGraph(const HandleGraph* super, HandleIter begin, HandleIter end) : super(super) {$/;"	f	class:vg::SubHandleGraph
SubHandleGraph	subgraph.hpp	/^    class SubHandleGraph : public ExpandingOverlayGraph {$/;"	c	namespace:vg
Subchain	recombinator.hpp	/^    struct Subchain {$/;"	s	class:vg::HaplotypePartitioner
Subchain	recombinator.hpp	/^    struct Subchain {$/;"	s	class:vg::Haplotypes
Subcommand	subcommand/subcommand.cpp	/^Subcommand::Subcommand(std::string name, std::string description,$/;"	f	class:vg::subcommand::Subcommand
Subcommand	subcommand/subcommand.hpp	/^class Subcommand {$/;"	c	namespace:vg::subcommand
SubgraphOverlay	subgraph_overlay.cpp	/^SubgraphOverlay::SubgraphOverlay(const HandleGraph* backing, const unordered_set<nid_t>* node_subset) :$/;"	f	class:vg::SubgraphOverlay
SubgraphOverlay	subgraph_overlay.hpp	/^class SubgraphOverlay : virtual public HandleGraph {$/;"	c	namespace:vg
SummaryStatistics	statistics.hpp	/^struct SummaryStatistics {$/;"	s	namespace:vg
SupportAugmentedGraph	genotypekit.hpp	/^struct SupportAugmentedGraph : public AugmentedGraph {$/;"	s	namespace:vg
SupportBasedSnarlCaller	snarl_caller.cpp	/^SupportBasedSnarlCaller::SupportBasedSnarlCaller(const PathHandleGraph& graph, SnarlManager& snarl_manager,$/;"	f	class:vg::SupportBasedSnarlCaller
SupportBasedSnarlCaller	snarl_caller.hpp	/^class SupportBasedSnarlCaller : public SnarlCaller {$/;"	c	namespace:vg
SupportMap	traversal_support.hpp	/^    typedef map<Snarl, tuple<Support, Support, int>, snarl_less> SupportMap;$/;"	t	class:vg::NestedCachedPackedTraversalSupportFinder
SupportRestrictedTraversalFinder	traversal_finder.cpp	/^SupportRestrictedTraversalFinder::SupportRestrictedTraversalFinder(AugmentedGraph& augmented_graph,$/;"	f	class:vg::SupportRestrictedTraversalFinder
SupportRestrictedTraversalFinder	traversal_finder.hpp	/^class SupportRestrictedTraversalFinder : public ExhaustiveTraversalFinder {$/;"	c	namespace:vg
SuppressFail	unittest/catch.hpp	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
SurjectingAlignmentEmitter	surjecting_alignment_emitter.cpp	/^SurjectingAlignmentEmitter::SurjectingAlignmentEmitter(const PathPositionHandleGraph* graph, unordered_set<path_handle_t> paths,$/;"	f	class:vg::SurjectingAlignmentEmitter
SurjectingAlignmentEmitter	surjecting_alignment_emitter.hpp	/^class SurjectingAlignmentEmitter : public vg::io::AlignmentEmitter {$/;"	c	namespace:vg
Surjector	surjector.cpp	/^    Surjector::Surjector(const PathPositionHandleGraph* graph) : graph(graph) {$/;"	f	class:vg::Surjector
Surjector	surjector.hpp	/^    class Surjector : public AlignerClient {$/;"	c	namespace:vg
SwapHaplotypesCommand	genome_state.hpp	/^struct SwapHaplotypesCommand : public GenomeStateCommand {$/;"	s	namespace:vg
TOOLKIT	subcommand/subcommand.hpp	/^    TOOLKIT,$/;"	e	enum:vg::subcommand::CommandCategory
TOTAL_BITS	stream_index.hpp	/^    const static size_t TOTAL_BITS = numeric_limits<uint64_t>::digits;$/;"	m	class:vg::BitString
TO_COMPRESS	unittest/blocked_gzip_input_stream.cpp	/^const static string TO_COMPRESS = "This is some extremely boring text that is going to be compressed.";$/;"	m	namespace:vg::unittest	file:
TVSClusterer	cluster.cpp	/^TVSClusterer::TVSClusterer(const HandleGraph* handle_graph, SnarlDistanceIndex* distance_index) :$/;"	f	class:vg::TVSClusterer
TVSClusterer	cluster.hpp	/^class TVSClusterer : public MEMClusterer {$/;"	c	namespace:vg
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	unittest/catch.hpp	12;"	d
TargetValueSearch	cluster.cpp	/^TargetValueSearch::TargetValueSearch(const HandleGraph& handle_graph,$/;"	f	class:vg::TargetValueSearch
TargetValueSearch	cluster.hpp	/^class TargetValueSearch {$/;"	c	namespace:vg
TestAligner	unittest/test_aligner.hpp	/^    TestAligner() : AlignerClient() {}$/;"	f	class:vg::unittest::TestAligner
TestAligner	unittest/test_aligner.hpp	/^    TestAligner(double gc_content) : AlignerClient(gc_content) {}$/;"	f	class:vg::unittest::TestAligner
TestAligner	unittest/test_aligner.hpp	/^class TestAligner : public AlignerClient {$/;"	c	namespace:vg::unittest
TestDistHeuristic	unittest/vg_algorithms.cpp	/^    TestDistHeuristic(const HandleGraph* graph, const unordered_map<handle_t, int64_t>& heuristic_values) :$/;"	f	struct:vg::unittest::TestDistHeuristic
TestDistHeuristic	unittest/vg_algorithms.cpp	/^struct TestDistHeuristic {$/;"	s	namespace:vg::unittest	file:
TestIndexRegistry	unittest/index_registry.cpp	/^class TestIndexRegistry : public IndexRegistry {$/;"	c	namespace:vg::unittest	file:
TestInvokerAsMethod	unittest/catch.hpp	/^class TestInvokerAsMethod : public ITestInvoker {$/;"	c	namespace:Catch
TestMinimizerMapper	unittest/minimizer_mapper.cpp	/^    TestMinimizerMapper($/;"	f	class:vg::unittest::TestMinimizerMapper
TestMinimizerMapper	unittest/minimizer_mapper.cpp	/^class TestMinimizerMapper : public MinimizerMapper {$/;"	c	namespace:vg::unittest	file:
TestMultipathAlignmentGraph	unittest/multipath_alignment_graph.cpp	/^class TestMultipathAlignmentGraph : public MultipathAlignmentGraph {$/;"	c	namespace:vg::unittest	file:
TestMultipathMapper	unittest/multipath_mapper.cpp	/^class TestMultipathMapper : public MultipathMapper {$/;"	c	namespace:vg::unittest	file:
TestSurjector	unittest/surject.cpp	/^    TestSurjector(const PathPositionHandleGraph* graph) : Surjector(graph) {}$/;"	f	class:vg::unittest::TestSurjector
TestSurjector	unittest/surject.cpp	/^class TestSurjector : public Surjector {$/;"	c	namespace:vg::unittest	file:
TestTraversalSupportFinder	unittest/traversal_support.cpp	/^    TestTraversalSupportFinder(const HandleGraph& graph, SnarlManager& snarl_manager,$/;"	f	class:vg::unittest::TestTraversalSupportFinder
TestTraversalSupportFinder	unittest/traversal_support.cpp	/^class TestTraversalSupportFinder : public TraversalSupportFinder {$/;"	c	namespace:vg::unittest	file:
ThrewException	unittest/catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
TickChainLink	subcommand/options.hpp	/^struct TickChainLink {$/;"	s	namespace:vg::subcommand
TipAnchoredMaxDistance	cluster.cpp	/^TipAnchoredMaxDistance::TipAnchoredMaxDistance(SnarlDistanceIndex& distance_index) : distance_index(distance_index) {$/;"	f	class:vg::TipAnchoredMaxDistance
TipAnchoredMaxDistance	cluster.hpp	/^class TipAnchoredMaxDistance : public DistanceHeuristic {$/;"	c	namespace:vg
TopLevelChain	recombinator.hpp	/^    struct TopLevelChain {$/;"	s	class:vg::Haplotypes
TracedScore	algorithms/chain_items.hpp	/^class TracedScore {$/;"	c	namespace:vg::algorithms
Transcript	transcriptome.hpp	/^    Transcript(const string & name_in, const bool is_reverse_in, const string & chrom_in, const uint32_t & chrom_length_in) : name(name_in), is_reverse(is_reverse_in), chrom(chrom_in), chrom_length(chrom_length_in) {$/;"	f	struct:vg::Transcript
Transcript	transcriptome.hpp	/^struct Transcript {$/;"	s	namespace:vg
TranscriptPath	transcriptome.hpp	/^    TranscriptPath() {}$/;"	f	struct:vg::TranscriptPath
TranscriptPath	transcriptome.hpp	/^    TranscriptPath(const string & transcript_name, const gbwt::size_type & haplotype_gbwt_id, const bool is_reference_in, const bool is_haplotype_in) : is_reference(is_reference_in), is_haplotype(is_haplotype_in) {$/;"	f	struct:vg::TranscriptPath
TranscriptPath	transcriptome.hpp	/^    TranscriptPath(const string & transcript_name, const string & embedded_path_name, const bool is_reference_in, const bool is_haplotype_in) : is_reference(is_reference_in), is_haplotype(is_haplotype_in) {$/;"	f	struct:vg::TranscriptPath
TranscriptPath	transcriptome.hpp	/^struct TranscriptPath {$/;"	s	namespace:vg
Transcriptome	transcriptome.cpp	/^Transcriptome::Transcriptome(unique_ptr<MutablePathDeletableHandleGraph>&& graph_in) : _graph(move(graph_in)) {$/;"	f	class:vg::Transcriptome
Transcriptome	transcriptome.hpp	/^class Transcriptome {$/;"	c	namespace:vg
Translator	translator.cpp	/^Translator::Translator(const vector<Translation>& trans) {$/;"	f	class:vg::Translator
Translator	translator.cpp	/^Translator::Translator(istream& in) {$/;"	f	class:vg::Translator
Translator	translator.cpp	/^Translator::Translator(void) { }$/;"	f	class:vg::Translator
Translator	translator.hpp	/^class Translator {$/;"	c	namespace:vg
TraversalAlg	genotyper.hpp	/^    enum TraversalAlg { Reads, Exhaustive, Representative, Adaptive };$/;"	g	class:vg::Genotyper
TraversalFinder	traversal_finder.hpp	/^class TraversalFinder {$/;"	c	namespace:vg
TraversalSupportCalculator	genotypekit.hpp	/^class TraversalSupportCalculator {$/;"	c	namespace:vg
TraversalSupportFinder	traversal_support.cpp	/^TraversalSupportFinder::TraversalSupportFinder(const HandleGraph& graph, SnarlManager& snarl_manager) :$/;"	f	class:vg::TraversalSupportFinder
TraversalSupportFinder	traversal_support.hpp	/^class TraversalSupportFinder {$/;"	c	namespace:vg
Tree	utility.hpp	/^    Tree(Node* r = 0) : root(r) { }$/;"	f	struct:vg::Tree
Tree	utility.hpp	/^struct Tree {$/;"	s	namespace:vg
TreeNode	stream_index.hpp	/^    struct TreeNode {$/;"	s	class:vg::BitStringTree
TreeNode	utility.hpp	/^    TreeNode() : parent(0) {}$/;"	f	struct:vg::TreeNode
TreeNode	utility.hpp	/^struct TreeNode {$/;"	s	namespace:vg
TreeSubgraph	tree_subgraph.cpp	/^TreeSubgraph::TreeSubgraph(const HandleGraph* super, vector<pair<int64_t, handle_t>>&& tree, size_t root_trim) : super(super),$/;"	f	class:vg::TreeSubgraph
TreeSubgraph	tree_subgraph.hpp	/^    class TreeSubgraph : public handlegraph::ExpandingOverlayGraph {$/;"	c	namespace:vg
TrivialTraversalFinder	traversal_finder.cpp	/^TrivialTraversalFinder::TrivialTraversalFinder(const HandleGraph& graph) : graph(graph) {$/;"	f	class:vg::TrivialTraversalFinder
TrivialTraversalFinder	traversal_finder.hpp	/^class TrivialTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
Undetermined	multipath_mapper.hpp	/^        enum SpliceStrand {Undetermined, Forward, Reverse};$/;"	e	enum:vg::MultipathMapper::SpliceStrand
Unknown	unittest/catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
VALUE_BITS	small_bitset.hpp	/^        constexpr static size_t VALUE_BITS = static_cast<size_t>(1) << VALUE_SHIFT;$/;"	m	class:vg::SmallBitset
VALUE_MASK	small_bitset.hpp	/^        constexpr static size_t VALUE_MASK = VALUE_BITS - 1;$/;"	m	class:vg::SmallBitset
VALUE_SHIFT	small_bitset.hpp	/^        constexpr static size_t VALUE_SHIFT = 6;$/;"	m	class:vg::SmallBitset
VCFGenotyper	graph_caller.cpp	/^VCFGenotyper::VCFGenotyper(const PathHandleGraph& graph,$/;"	f	class:vg::VCFGenotyper
VCFGenotyper	graph_caller.hpp	/^class VCFGenotyper : public GraphCaller, public VCFOutputCaller, public GAFOutputCaller {$/;"	c	namespace:vg
VCFOutputCaller	graph_caller.cpp	/^VCFOutputCaller::VCFOutputCaller(const string& sample_name) : sample_name(sample_name), translation(nullptr), include_nested(false)$/;"	f	class:vg::VCFOutputCaller
VCFOutputCaller	graph_caller.hpp	/^class VCFOutputCaller {$/;"	c	namespace:vg
VCFTraversalFinder	traversal_finder.cpp	/^VCFTraversalFinder::VCFTraversalFinder(const PathHandleGraph& graph, SnarlManager& snarl_manager,$/;"	f	class:vg::VCFTraversalFinder
VCFTraversalFinder	traversal_finder.hpp	/^class VCFTraversalFinder : public TraversalFinder {$/;"	c	namespace:vg
VECVEC	vectorizer.hpp	2;"	d
VERSION	recombinator.cpp	/^constexpr std::uint32_t Haplotypes::Header::VERSION;$/;"	m	class:vg::Haplotypes::Header	file:
VERSION	recombinator.hpp	/^        constexpr static std::uint32_t VERSION = 2;$/;"	m	struct:vg::Haplotypes::Header
VERSION	version.cpp	/^const string Version::VERSION = VG_GIT_VERSION;$/;"	m	class:vg::Version	file:
VERSION	version.hpp	/^    const static string VERSION;$/;"	m	class:vg::Version
VG	index_registry.hpp	/^    enum MutableGraphImplementation {HashGraph, PackedGraph, VG};$/;"	e	enum:vg::IndexingParameters::MutableGraphImplementation
VG	vg.cpp	/^VG::VG(const Graph& from, bool showp, bool warn_on_duplicates) {$/;"	f	class:vg::VG
VG	vg.cpp	/^VG::VG(const VG& other) {$/;"	f	class:vg::VG
VG	vg.cpp	/^VG::VG(const function<void(const function<void(Graph&)>&)>& send_graphs, bool showp, bool warn_on_duplicates) {$/;"	f	class:vg::VG
VG	vg.cpp	/^VG::VG(istream& in, bool showp, bool warn_on_duplicates) {$/;"	f	class:vg::VG
VG	vg.cpp	/^VG::VG(set<Node*>& nodes, set<Edge*>& edges) {$/;"	f	class:vg::VG
VG	vg.cpp	/^VG::VG(void) {$/;"	f	class:vg::VG
VG	vg.hpp	/^class VG : public Progressive, public MutablePathDeletableHandleGraph {$/;"	c	namespace:vg
VGIndexes	index_registry.hpp	/^struct VGIndexes {$/;"	s	namespace:vg
VG_ALGORITHMS_A_STAR_HPP_INCLUDED	algorithms/a_star.hpp	2;"	d
VG_ALGORITHMS_BACK_TRANSLATE_HPP_INCLUDED	algorithms/back_translate.hpp	2;"	d
VG_ALGORITHMS_CHAIN_ITEMS_HPP_INCLUDED	algorithms/chain_items.hpp	2;"	d
VG_ALGORITHMS_COMPONENT_HPP_INCLUDED	algorithms/component.hpp	6;"	d
VG_ALGORITHMS_COUNT_COVERED_HPP_INCLUDED	algorithms/count_covered.hpp	2;"	d
VG_ALGORITHMS_DFS_HPP_INCLUDED	algorithms/dfs.hpp	2;"	d
VG_ALGORITHMS_DISTANCE_TO_HEAD_HPP_INCLUDED	algorithms/distance_to_head.hpp	2;"	d
VG_ALGORITHMS_DISTANCE_TO_TAIL_HPP_INCLUDED	algorithms/distance_to_tail.hpp	2;"	d
VG_ALGORITHMS_EXPAND_CONTEXT_HPP_INCLUDED	algorithms/expand_context.hpp	2;"	d
VG_ALGORITHMS_EXTRACT_CONNECTING_GRAPH_HPP_INCLUDED	algorithms/extract_connecting_graph.hpp	2;"	d
VG_ALGORITHMS_EXTRACT_CONTAINING_GRAPH_HPP_INCLUDED	algorithms/extract_containing_graph.hpp	2;"	d
VG_ALGORITHMS_EXTRACT_EXTENDING_GRAPH_HPP_INCLUDED	algorithms/extract_extending_graph.hpp	2;"	d
VG_ALGORITHMS_FIND_CLOSEST_WITH_PATHS_HPP_INCLUDED	algorithms/nearest_offsets_in_paths.hpp	2;"	d
VG_ALGORITHMS_FIND_GBWTGRAPH_HPP_INCLUDED	algorithms/find_gbwtgraph.hpp	2;"	d
VG_ALGORITHMS_FIND_GBWT_HPP_INCLUDED	algorithms/find_gbwt.hpp	2;"	d
VG_ALGORITHMS_FIND_MIN_CUT_IN_GRAPH_HPP_INCLUDED	algorithms/min_cut_graph.hpp	2;"	d
VG_ALGORITHMS_FIND_TRANSLATION_HPP_INCLUDED	algorithms/find_translation.hpp	2;"	d
VG_ALGORITHMS_GFA_TO_HANDLE_HPP_INCLUDED	algorithms/gfa_to_handle.hpp	2;"	d
VG_ALGORITHMS_ID_SORT_HPP_INCLUDED	algorithms/id_sort.hpp	2;"	d
VG_ALGORITHMS_INTERSECT_PATH_OFFSETS_HPP_INCLUDED	algorithms/intersect_path_offsets.hpp	2;"	d
VG_ALGORITHMS_JUMP_ALONG_PATH_HPP_INCLUDED	algorithms/jump_along_path.hpp	2;"	d
VG_ALGORITHMS_K_WIDEST_PATHS_HPP_INCLUDED	algorithms/k_widest_paths.hpp	2;"	d
VG_ALGORITHMS_LOCALLY_EXPAND_GRAPH_HPP_INCLUDED	algorithms/locally_expand_graph.hpp	2;"	d
VG_ALGORITHMS_MERGE_HPP_INCLUDED	algorithms/merge.hpp	2;"	d
VG_ALGORITHMS_NORMALIZE_HPP_INCLUDED	algorithms/normalize.hpp	2;"	d
VG_ALGORITHMS_PRUNE_HPP_INCLUDED	algorithms/prune.hpp	2;"	d
VG_ALGORITHMS_PRUNE_TO_CONNECTING_GRAPH_HPP_INCLUDED	algorithms/prune_to_connecting_graph.hpp	2;"	d
VG_ALGORITHMS_REF_PATH_DISTANCE_HPP_INCLUDED	algorithms/ref_path_distance.hpp	7;"	d
VG_ALGORITHMS_SHORTEST_CYCLE_HPP_INCLUDED	algorithms/shortest_cycle.hpp	2;"	d
VG_ALGORITHMS_SIMPLIFY_SIBLINGS_HPP_INCLUDED	algorithms/simplify_siblings.hpp	2;"	d
VG_ALGORITHMS_SORTED_ID_RANGES_HPP_INCLUDED	algorithms/sorted_id_ranges.hpp	2;"	d
VG_ALGORITHMS_THREE_EDGE_CONNECTED_COMPONENTS_HPP_INCLUDED	algorithms/three_edge_connected_components.hpp	2;"	d
VG_ALIGNER_HPP_INCLUDED	aligner.hpp	2;"	d
VG_ALIGNMENT_HPP_INCLUDED	alignment.hpp	2;"	d
VG_ALLOCATOR_CONFIG_HPP_INCLUDED	config/allocator_config.hpp	2;"	d
VG_ANNOTATION_HPP_INCLUDED	annotation.hpp	6;"	d
VG_AUGMENT_HPP_INCLUDED	augment.hpp	2;"	d
VG_BACK_TRANSLATING_ALIGNMENT_EMITTER_HPP_INCLUDED	back_translating_alignment_emitter.hpp	2;"	d
VG_BENCHMARK_HPP_INCLUDED	benchmark.hpp	2;"	d
VG_BUILD_INDEX_HPP_INCLUDED	build_index.hpp	2;"	d
VG_CACTUS_HPP_INCLUDED	cactus.hpp	3;"	d
VG_CACTUS_SNARL_FINDER_HPP_INCLUDED	cactus_snarl_finder.hpp	8;"	d
VG_CHUNKER_HPP_INCLUDED	chunker.hpp	2;"	d
VG_CLIP_HPP_INCLUDED	clip.hpp	2;"	d
VG_CLUSTER_HPP_INCLUDED	cluster.hpp	2;"	d
VG_COLORS_HPP_INCLUDED	colors.hpp	2;"	d
VG_CONSTRUCTOR_HPP_INCLUDED	constructor.hpp	2;"	d
VG_CONVERT_HPP_INCLUDED	convert.hpp	2;"	d
VG_CRASH_HPP_INCLUDED	crash.hpp	2;"	d
VG_DAGIFIED_GRAPH_HPP_INCLUDED	dagified_graph.hpp	2;"	d
VG_DECONSTRUCTOR_HPP_INCLUDED	deconstructor.hpp	2;"	d
VG_DELETION_ALIGNER_GRAPH_HPP_INCLUDED	deletion_aligner.hpp	8;"	d
VG_DEPTH_HPP_INCLUDED	algorithms/coverage_depth.hpp	2;"	d
VG_DINUCLEOTIDE_MACHINE_GRAPH_HPP_INCLUDED	dinucleotide_machine.hpp	8;"	d
VG_DISJOINT_COMPONENTS_HPP_INCLUDED	algorithms/disjoint_components.hpp	2;"	d
VG_DOZEU_INTERFACE_HPP_INCLUDED	dozeu_interface.hpp	7;"	d
VG_DOZEU_PINNING_OVERLAY_HPP_INCLUDED	dozeu_pinning_overlay.hpp	2;"	d
VG_ENDIANNESS_HPP_INCLUDED	endianness.hpp	2;"	d
VG_ENTROPY_HPP_INCLUDED	entropy.hpp	2;"	d
VG_EXPLAINER_HPP_INCLUDED	explainer.hpp	2;"	d
VG_EXTRA_NODE_GRAPH_HPP_INCLUDED	extra_node_graph.hpp	2;"	d
VG_FEATURE_SET_HPP_INCLUDED	feature_set.hpp	2;"	d
VG_FILTER	filter.hpp	2;"	d
VG_FLAT_FILE_BACK_TRANSLATION_HPP_INCLUDED	flat_file_back_translation.hpp	8;"	d
VG_FLOW_SORT_HPP_INCLUDED	flow_sort.hpp	2;"	d
VG_FUNNEL_HPP_INCLUDED	funnel.hpp	2;"	d
VG_GBWTGRAPH_HELPER_HPP_INCLUDED	gbwtgraph_helper.hpp	2;"	d
VG_GBWT_EXTENDER_HPP_INCLUDED	gbwt_extender.hpp	2;"	d
VG_GBWT_HELPER_HPP_INCLUDED	gbwt_helper.hpp	2;"	d
VG_GBZGRAPH_HPP_INCLUDED	gbzgraph.hpp	2;"	d
VG_GCSA_HELPER_HPP_INCLUDED	gcsa_helper.hpp	2;"	d
VG_GENOME_STATE_HPP_INCLUDED	genome_state.hpp	2;"	d
VG_GENOTYPEKIT_HPP_INCLUDED	genotypekit.hpp	2;"	d
VG_GENOTYPER_HPP_INCLUDED	genotyper.hpp	2;"	d
VG_GFA_HPP_INCLUDED	gfa.hpp	2;"	d
VG_GFF_READER_HPP_INCLUDED	gff_reader.hpp	2;"	d
VG_GIT_VERSION	version.cpp	15;"	d	file:
VG_GRAPH_CALLER_HPP_INCLUDED	graph_caller.hpp	2;"	d
VG_GRAPH_HPP_INCLUDED	graph.hpp	2;"	d
VG_GRAPH_SYNCHRONIZER_HPP_INCLUDED	graph_synchronizer.hpp	2;"	d
VG_HANDLE_HPP_INCLUDED	handle.hpp	2;"	d
VG_HAPLOTYPE_EXTRACTER_HPP_INCLUDED	haplotype_extracter.hpp	2;"	d
VG_HAPLOTYPE_INDEXER_HPP_INCLUDED	haplotype_indexer.hpp	2;"	d
VG_HASH_MAP_HPP_INCLUDED	hash_map.hpp	2;"	d
VG_HTS_ALIGNMENT_EMITTER_HPP_INCLUDED	hts_alignment_emitter.hpp	2;"	d
VG_IDENTITY_OVERLAY_HPP_INCLUDED	identity_overlay.hpp	2;"	d
VG_INCREMENTAL_SUBGRAPH_HPP_INCLUDED	incremental_subgraph.hpp	6;"	d
VG_INDEXED_VG_HPP_INCLUDED	indexed_vg.hpp	2;"	d
VG_INDEX_REGISTRY_HPP_INCLUDED	index_registry.hpp	2;"	d
VG_INTEGRATED_SNARL_FINDER_HPP_INCLUDED	integrated_snarl_finder.hpp	8;"	d
VG_IO_CONVERTED_HASH_GRAPH_HPP_INCLUDED	io/converted_hash_graph.hpp	2;"	d
VG_IO_JSON_STREAM_HELPER_HPP_INCLUDED	io/json_stream_helper.hpp	2;"	d
VG_IO_LOAD_PROTO_TO_GRAPH_HPP_INCLUDED	io/load_proto_to_graph.hpp	2;"	d
VG_IO_REGISTER_LIBVG_IO_HPP_INCLUDED	io/register_libvg_io.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_DISTANCE_INDEX_HPP_INCLUDED	io/register_loader_saver_distance_index.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_GBWTGRAPH_HPP_INCLUDED	io/register_loader_saver_gbwtgraph.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_GBWT_HPP_INCLUDED	io/register_loader_saver_gbwt.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_GBZGRAPH_HPP_INCLUDED	io/register_loader_saver_gbzgraph.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_GBZ_HPP_INCLUDED	io/register_loader_saver_gbz.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_GCSA_HPP_INCLUDED	io/register_loader_saver_gcsa.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_GFA_HPP_INCLUDED	io/register_loader_saver_gfa.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_HASH_GRAPH_HPP_INCLUDED	io/register_loader_saver_hash_graph.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_LCP_HPP_INCLUDED	io/register_loader_saver_lcp.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_MINIMIZER_HPP_INCLUDED	io/register_loader_saver_minimizer.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_PACKED_GRAPH_HPP_INCLUDED	io/register_loader_saver_packed_graph.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_R_INDEX_HPP_INCLUDED	io/register_loader_saver_r_index.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_SNARL_MANAGER_HPP_INCLUDED	io/register_loader_saver_snarl_manager.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_VG_HPP_INCLUDED	io/register_loader_saver_vg.hpp	2;"	d
VG_IO_REGISTER_LOADER_SAVER_XG_HPP_INCLUDED	io/register_loader_saver_xg.hpp	2;"	d
VG_IO_SAVE_HANDLE_GRAPH_HPP_INCLUDED	io/save_handle_graph.hpp	2;"	d
VG_JOB_SECHEDULE_HPP_INCLUDED	job_schedule.hpp	2;"	d
VG_KFF_HPP_INCLUDED	kff.hpp	2;"	d
VG_KMER_HPP_INCLUDED	kmer.hpp	2;"	d
VG_KMP_HPP_INCLUDED	kmp.hpp	2;"	d
VG_MAPPER_HPP_INCLUDED	mapper.hpp	2;"	d
VG_MCMC_CALLER_HPP_INCLUDED	mcmc_caller.hpp	2;"	d
VG_MCMC_GENOTYPER_HPP_INCLUDED	mcmc_genotyper.hpp	2;"	d
VG_MEMOIZING_GRAPH_HPP_INCLUDED	memoizing_graph.hpp	2;"	d
VG_MEMUSAGE_HPP_INCLUDED	memusage.hpp	2;"	d
VG_MEM_ACCELERATOR_HPP_INCLUDED	mem_accelerator.hpp	8;"	d
VG_MEM_HPP_INCLUDED	mem.hpp	2;"	d
VG_MINIMIZER_MAPPER_HPP_INCLUDED	minimizer_mapper.hpp	2;"	d
VG_MSA_CONVERTER_HPP_INCLUDED	msa_converter.hpp	2;"	d
VG_MULTIPATH_ALIGNMENT_EMITTER_HPP_INCLUDED	multipath_alignment_emitter.hpp	2;"	d
VG_NAME_MAPPER_HPP_INCLUDED	name_mapper.hpp	2;"	d
VG_NESTED_TRAVERSAL_FINDER_HPP_INCLUDED	nested_traversal_finder.hpp	2;"	d
VG_NODESIDE_HPP_INCLUDED	nodeside.hpp	2;"	d
VG_NODETRAVERSAL_HPP_INCLUDED	nodetraversal.hpp	2;"	d
VG_NULL_MASKING_GRAPH_HPP_INCLUDED	null_masking_graph.hpp	2;"	d
VG_OPTION_HPP_INCLUDED	option.hpp	2;"	d
VG_PACKER_HPP_INCLUDED	packer.hpp	2;"	d
VG_PATH_COMPONENT_INDEX_HPP_INCLUDED	path_component_index.hpp	2;"	d
VG_PATH_HPP_INCLUDED	path.hpp	2;"	d
VG_PATH_INDEX_HPP_INCLUDED	path_index.hpp	2;"	d
VG_PATH_SUBGRAPH_HPP_INCLUDED	path_subgraph.hpp	2;"	d
VG_PHASE_UNFOLDER_HPP_INCLUDED	phase_unfolder.hpp	2;"	d
VG_PICTOGRAPHS_HPP_INCLUDED	pictographs.hpp	2;"	d
VG_POSITION_HPP_INCLUDED	position.hpp	2;"	d
VG_PREFLIGHT_EVERYWHERE	preflight.hpp	/^void preflight_check() VG_PREFLIGHT_EVERYWHERE;$/;"	m	namespace:vg
VG_PREFLIGHT_EVERYWHERE	preflight.hpp	18;"	d
VG_PREFLIGHT_HPP_INCLUDED	preflight.hpp	2;"	d
VG_PROGRESSIVE_HPP_INCLUDED	progressive.hpp	2;"	d
VG_RARE_VARIANT_SIMPLIFIER_HPP_INCLUDED	rare_variant_simplifier.hpp	2;"	d
VG_READFILTER_HPP_INCLUDED	readfilter.hpp	2;"	d
VG_RECOMBINATOR_HPP_INCLUDED	recombinator.hpp	2;"	d
VG_REGION_EXPANDER_HPP_INCLUDED	region_expander.hpp	2;"	d
VG_REGION_HPP_INCLUDED	region.hpp	2;"	d
VG_REVERSE_GRAPH_HPP_INCLUDED	reverse_graph.hpp	2;"	d
VG_SCANNER_HPP_INCLUDED	scanner.hpp	2;"	d
VG_SEQUENCE_COMPLEXITY_HPP_INCLUDED	sequence_complexity.hpp	8;"	d
VG_SET_HPP_INCLUDED	vg_set.hpp	2;"	d
VG_SIMULATOR_HPP_INCLUDED	sampler.hpp	2;"	d
VG_SMALL_BITSET_INCLUDED	small_bitset.hpp	2;"	d
VG_SMALL_SNARL_SIMPLIFIER_HPP_INCLUDED	small_snarl_simplifier.hpp	2;"	d
VG_SNARLS_HPP_INCLUDED	snarls.hpp	9;"	d
VG_SNARL_CALLER_HPP_INCLUDED	snarl_caller.hpp	2;"	d
VG_SNARL_DISTANCE_HPP_INCLUDED	snarl_distance_index.hpp	2;"	d
VG_SNARL_SEED_CLUSTERER_HPP_INCLUDED	snarl_seed_clusterer.hpp	2;"	d
VG_SOURCE_SINK_OVERLAY_HPP_INCLUDED	source_sink_overlay.hpp	2;"	d
VG_SPLICING_HPP_INCLUDED	splicing.hpp	8;"	d
VG_SPLIT_STRAND_GRAPH_HPP_INCLUDED	split_strand_graph.hpp	2;"	d
VG_SSW_ALIGNER_HPP_INCLUDED	ssw_aligner.hpp	2;"	d
VG_STANDARD_LIBRARY_VERSION	version.cpp	26;"	d	file:
VG_STANDARD_LIBRARY_VERSION	version.cpp	29;"	d	file:
VG_STANDARD_LIBRARY_VERSION	version.cpp	32;"	d	file:
VG_STATISTICS_HPP_INCLUDED	statistics.hpp	2;"	d
VG_STREAM_INDEX_HPP_INCLUDED	stream_index.hpp	2;"	d
VG_STREAM_SORTER_HPP_INCLUDED	stream_sorter.hpp	2;"	d
VG_SUBCOMMAND_OPTIONS_HPP_INCLUDED	subcommand/options.hpp	2;"	d
VG_SUBCOMMAND_SUBCOMMAND_HPP_INCLUDED	subcommand/subcommand.hpp	2;"	d
VG_SUBGRAPH_HPP_INCLUDED	subgraph.hpp	2;"	d
VG_SUBGRAPH_OVERLAY_HPP_INCLUDED	subgraph_overlay.hpp	2;"	d
VG_SURJECTING_ALIGNMENT_EMITTER_HPP_INCLUDED	surjecting_alignment_emitter.hpp	2;"	d
VG_SURJECTOR_HPP_INCLUDED	surjector.hpp	2;"	d
VG_SWAP_REMOVE_HPP_INCLUDED	swap_remove.hpp	2;"	d
VG_TEST_ALIGNER_HPP_INCLUDED	unittest/test_aligner.hpp	2;"	d
VG_TRANSCRIPTOME_HPP_INCLUDED	transcriptome.hpp	3;"	d
VG_TRANSLATOR_HPP_INCLUDED	translator.hpp	2;"	d
VG_TRAVERSAL_FINDER_HPP_INCLUDED	traversal_finder.hpp	2;"	d
VG_TRAVERSAL_SUPPORT_HPP_INCLUDED	traversal_support.hpp	2;"	d
VG_TREE_SUBGRAPH_HPP_INCLUDED	tree_subgraph.hpp	2;"	d
VG_TYPES_HPP_INCLUDED	types.hpp	2;"	d
VG_UNITTEST_RANDOMNESS_HPP_INCLUDED	unittest/randomness.hpp	2;"	d
VG_UNITTEST_RANDOM_GRAPH_HPP_INCLUDED	unittest/random_graph.hpp	5;"	d
VG_UTILITY_HPP_INCLUDED	utility.hpp	2;"	d
VG_VARIANT_ADDER_HPP_INCLUDED	variant_adder.hpp	2;"	d
VG_VARIANT_RECALL_HPP_INCLUDED	variant_recall.hpp	2;"	d
VG_VCF_BUFFER_HPP_INCLUDED	vcf_buffer.hpp	2;"	d
VG_VERSION_HPP_INCLUDED	version.hpp	2;"	d
VG_VG_HPP_INCLUDED	vg.hpp	3;"	d
VG_VIZ_HPP_INCLUDED	viz.hpp	2;"	d
VG_WANG_HASH_HPP_INCLUDED	wang_hash.hpp	2;"	d
VG_WATCHDOG_HPP_INCLUDED	watchdog.hpp	2;"	d
VGset	vg_set.hpp	/^    VGset() { };$/;"	f	class:vg::VGset
VGset	vg_set.hpp	/^    VGset(vector<string>& files)$/;"	f	class:vg::VGset
VGset	vg_set.hpp	/^class VGset {$/;"	c	namespace:vg
VTUNE_ANALYSIS	vtuneConfiguration.h	4;"	d
Valuation	subcommand/options.hpp	/^    Valuation(const std::string& option, const T& value) : BaseValuation(option), value(value) {$/;"	f	struct:vg::subcommand::Valuation
Valuation	subcommand/options.hpp	/^struct Valuation : public BaseValuation {$/;"	s	namespace:vg::subcommand
ValueArgSpec	subcommand/options.hpp	/^    ValueArgSpec(const std::string& option, T Receiver::*dest, const T& default_value, const std::string& help, const ValidatorFunction<T>& validator) : ValueArgSpec(option, '\\0', dest, default_value, help, validator) {$/;"	f	struct:vg::subcommand::ValueArgSpec
ValueArgSpec	subcommand/options.hpp	/^    ValueArgSpec(const std::string& option, char short_option, T Receiver::*dest, const T& default_value, const std::string& help, const ValidatorFunction<T>& validator) : ArgSpec<T, Receiver>(option, short_option, dest, default_value, help, validator), value(default_value)  {$/;"	f	struct:vg::subcommand::ValueArgSpec
ValueArgSpec	subcommand/options.hpp	/^struct ValueArgSpec : public ArgSpec<T, Receiver> {$/;"	s	namespace:vg::subcommand
VariantAdder	variant_adder.cpp	/^VariantAdder::VariantAdder(VG& graph) : graph(graph), sync([&](VG& g) -> VG& {$/;"	f	class:vg::VariantAdder
VariantAdder	variant_adder.hpp	/^class VariantAdder : public NameMapper, public Progressive {$/;"	c	namespace:vg
VcfBuffer	vcf_buffer.cpp	/^VcfBuffer::VcfBuffer(vcflib::VariantCallFile* file) : file(file) {$/;"	f	class:vg::VcfBuffer
VcfBuffer	vcf_buffer.hpp	/^class VcfBuffer {$/;"	c	namespace:vg
VcfRecordConverter	genotypekit.hpp	/^class VcfRecordConverter {$/;"	c	namespace:vg
VcfRecordFilter	genotypekit.hpp	/^class VcfRecordFilter {$/;"	c	namespace:vg
VectorView	utility.hpp	/^    inline VectorView() : items(nullptr), indexes(nullptr) {$/;"	f	struct:vg::VectorView
VectorView	utility.hpp	/^    inline VectorView(const vector<Item>& items) : items(&items), indexes(nullptr) {$/;"	f	struct:vg::VectorView
VectorView	utility.hpp	/^    inline VectorView(const vector<Item>& items, const vector<size_t>& indexes) : items(&items), indexes(&indexes) {$/;"	f	struct:vg::VectorView
VectorView	utility.hpp	/^struct VectorView {$/;"	s	namespace:vg
VectorViewInverse	utility.hpp	/^    inline VectorViewInverse() : inverse() {$/;"	f	class:vg::VectorViewInverse
VectorViewInverse	utility.hpp	/^    inline VectorViewInverse(const VectorView<Item>& view) : inverse() {$/;"	f	class:vg::VectorViewInverse
VectorViewInverse	utility.hpp	/^class VectorViewInverse {$/;"	c	namespace:vg
Vectorizer	vectorizer.cpp	/^Vectorizer::Vectorizer(const PathPositionHandleGraph* x) : my_xg(x){$/;"	f	class:Vectorizer
Vectorizer	vectorizer.hpp	/^class Vectorizer{$/;"	c
Verbosity	index_registry.hpp	/^    enum Verbosity {None = 0, Basic = 1, Debug = 2};$/;"	g	struct:vg::IndexingParameters
Verbosity	recombinator.hpp	/^    typedef Haplotypes::Verbosity Verbosity;$/;"	t	class:vg::HaplotypePartitioner
Verbosity	recombinator.hpp	/^    typedef Haplotypes::Verbosity Verbosity;$/;"	t	class:vg::Recombinator
Version	version.hpp	/^class Version {$/;"	c	namespace:vg
Viz	viz.cpp	/^Viz::Viz(PathHandleGraph* x, vector<Packer>* p, const vector<string>& n, const string& o, int w, int h, bool c, bool d, bool t) {$/;"	f	class:vg::Viz
Viz	viz.hpp	/^    Viz(void) { }$/;"	f	class:vg::Viz
Viz	viz.hpp	/^class Viz {$/;"	c	namespace:vg
WFAAlignment	gbwt_extender.hpp	/^struct WFAAlignment {$/;"	s	namespace:vg
WFAExtender	gbwt_extender.cpp	/^WFAExtender::WFAExtender() :$/;"	f	class:vg::WFAExtender
WFAExtender	gbwt_extender.cpp	/^WFAExtender::WFAExtender(const gbwtgraph::GBWTGraph& graph, const Aligner& aligner, const ErrorModel& error_model) :$/;"	f	class:vg::WFAExtender
WFAExtender	gbwt_extender.hpp	/^class WFAExtender {$/;"	c	namespace:vg
WFANode	gbwt_extender.cpp	/^    WFANode(const vector<gbwt::SearchState>& states, uint32_t parent, const gbwtgraph::GBWTGraph& graph) :$/;"	f	struct:vg::WFANode
WFANode	gbwt_extender.cpp	/^struct WFANode {$/;"	s	namespace:vg	file:
WFAPoint	gbwt_extender.cpp	/^struct WFAPoint {$/;"	s	namespace:vg	file:
WFATree	gbwt_extender.cpp	/^    WFATree(const gbwtgraph::GBWTGraph& graph, const std::string& sequence, const gbwt::SearchState& root, uint32_t node_offset, const Aligner& aligner, const WFAExtender::ErrorModel& error_model) :$/;"	f	class:vg::WFATree
WFATree	gbwt_extender.cpp	/^class WFATree {$/;"	c	namespace:vg	file:
WIDGET	subcommand/subcommand.hpp	/^    WIDGET,$/;"	e	enum:vg::subcommand::CommandCategory
WINDOW_SHIFT	stream_index.hpp	/^    const static size_t WINDOW_SHIFT = 8;$/;"	m	class:vg::StreamIndexBase
Warning	unittest/catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
Watchdog	watchdog.cpp	/^Watchdog::Watchdog(size_t thread_count, const duration& timeout) :$/;"	f	class:vg::Watchdog
Watchdog	watchdog.hpp	/^class Watchdog {$/;"	c	namespace:vg
WeightedGraph	flow_sort.hpp	/^    struct WeightedGraph {$/;"	s	class:vg::FlowSort
WideningPRNG	statistics.hpp	/^    WideningPRNG(PRNG& to_widen) : base(to_widen) {$/;"	f	class:vg::WideningPRNG
WideningPRNG	statistics.hpp	/^class WideningPRNG {$/;"	c	namespace:vg
WindowedVcfBuffer	vcf_buffer.cpp	/^WindowedVcfBuffer::WindowedVcfBuffer(vcflib::VariantCallFile* file, size_t window_size): reader(file), window_size(window_size) {$/;"	f	class:vg::WindowedVcfBuffer
WindowedVcfBuffer	vcf_buffer.hpp	/^class WindowedVcfBuffer {$/;"	c	namespace:vg
WrappingPositionScanner	scanner.hpp	/^struct WrappingPositionScanner {$/;"	s	namespace:vg
XdropAligner	dozeu_interface.hpp	/^class XdropAligner : public DozeuInterface {$/;"	c	namespace:vg
XdropAligner	xdrop_aligner.cpp	/^XdropAligner::XdropAligner(XdropAligner&& other)$/;"	f	class:XdropAligner
XdropAligner	xdrop_aligner.cpp	/^XdropAligner::XdropAligner(const XdropAligner& other)$/;"	f	class:XdropAligner
XdropAligner	xdrop_aligner.cpp	/^XdropAligner::XdropAligner(const int8_t* _score_matrix, int8_t _gap_open, int8_t _gap_extension)$/;"	f	class:XdropAligner
Yes	unittest/catch.hpp	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
Z	statistics.hpp	/^    T Z() const {$/;"	f	class:vg::truncated_normal_distribution
_BSD_SOURCE	unittest/catch.hpp	228;"	d
_CMP_EQ_OQ	simde/x86/avx.h	335;"	d
_CMP_EQ_OS	simde/x86/avx.h	351;"	d
_CMP_EQ_UQ	simde/x86/avx.h	343;"	d
_CMP_EQ_US	simde/x86/avx.h	359;"	d
_CMP_FALSE_OQ	simde/x86/avx.h	346;"	d
_CMP_FALSE_OS	simde/x86/avx.h	362;"	d
_CMP_GE_OQ	simde/x86/avx.h	364;"	d
_CMP_GE_OS	simde/x86/avx.h	348;"	d
_CMP_GT_OQ	simde/x86/avx.h	365;"	d
_CMP_GT_OS	simde/x86/avx.h	349;"	d
_CMP_LE_OQ	simde/x86/avx.h	353;"	d
_CMP_LE_OS	simde/x86/avx.h	337;"	d
_CMP_LT_OQ	simde/x86/avx.h	352;"	d
_CMP_LT_OS	simde/x86/avx.h	336;"	d
_CMP_NEQ_OQ	simde/x86/avx.h	347;"	d
_CMP_NEQ_OS	simde/x86/avx.h	363;"	d
_CMP_NEQ_UQ	simde/x86/avx.h	339;"	d
_CMP_NEQ_US	simde/x86/avx.h	355;"	d
_CMP_NGE_UQ	simde/x86/avx.h	360;"	d
_CMP_NGE_US	simde/x86/avx.h	344;"	d
_CMP_NGT_UQ	simde/x86/avx.h	361;"	d
_CMP_NGT_US	simde/x86/avx.h	345;"	d
_CMP_NLE_UQ	simde/x86/avx.h	357;"	d
_CMP_NLE_US	simde/x86/avx.h	341;"	d
_CMP_NLT_UQ	simde/x86/avx.h	356;"	d
_CMP_NLT_US	simde/x86/avx.h	340;"	d
_CMP_ORD_Q	simde/x86/avx.h	342;"	d
_CMP_ORD_S	simde/x86/avx.h	358;"	d
_CMP_TRUE_UQ	simde/x86/avx.h	350;"	d
_CMP_TRUE_US	simde/x86/avx.h	366;"	d
_CMP_UNORD_Q	simde/x86/avx.h	338;"	d
_CMP_UNORD_S	simde/x86/avx.h	354;"	d
_MM_FROUND_CEIL	simde/x86/sse.h	261;"	d
_MM_FROUND_CUR_DIRECTION	simde/x86/sse.h	257;"	d
_MM_FROUND_FLOOR	simde/x86/sse.h	260;"	d
_MM_FROUND_NEARBYINT	simde/x86/sse.h	264;"	d
_MM_FROUND_NINT	simde/x86/sse.h	259;"	d
_MM_FROUND_RAISE_EXC	simde/x86/sse.h	258;"	d
_MM_FROUND_RINT	simde/x86/sse.h	263;"	d
_MM_FROUND_TO_NEAREST_INT	simde/x86/sse.h	253;"	d
_MM_FROUND_TO_NEG_INF	simde/x86/sse.h	254;"	d
_MM_FROUND_TO_POS_INF	simde/x86/sse.h	255;"	d
_MM_FROUND_TO_ZERO	simde/x86/sse.h	256;"	d
_MM_FROUND_TRUNC	simde/x86/sse.h	262;"	d
_MM_GET_ROUNDING_MODE	simde/x86/sse.h	311;"	d
_MM_HINT_ET0	simde/x86/sse.h	3128;"	d
_MM_HINT_ET0	simde/x86/sse.h	3129;"	d
_MM_HINT_ET1	simde/x86/sse.h	3130;"	d
_MM_HINT_ET1	simde/x86/sse.h	3131;"	d
_MM_HINT_ET1	simde/x86/sse.h	3132;"	d
_MM_HINT_ET2	simde/x86/sse.h	3133;"	d
_MM_HINT_ETNA	simde/x86/sse.h	3126;"	d
_MM_HINT_ETNA	simde/x86/sse.h	3127;"	d
_MM_HINT_NTA	simde/x86/sse.h	3118;"	d
_MM_HINT_NTA	simde/x86/sse.h	3119;"	d
_MM_HINT_T0	simde/x86/sse.h	3120;"	d
_MM_HINT_T0	simde/x86/sse.h	3121;"	d
_MM_HINT_T1	simde/x86/sse.h	3122;"	d
_MM_HINT_T1	simde/x86/sse.h	3123;"	d
_MM_HINT_T2	simde/x86/sse.h	3124;"	d
_MM_HINT_T2	simde/x86/sse.h	3125;"	d
_MM_SET_ROUNDING_MODE	simde/x86/sse.h	357;"	d
_MM_SHUFFLE	simde/x86/sse.h	3546;"	d
_MM_SHUFFLE2	simde/x86/sse2.h	7326;"	d
_MM_TRANSPOSE4_PS	simde/x86/sse.h	4291;"	d
_POSIX_C_SOURCE	crash.cpp	8;"	d	file:
_SIDD_BIT_MASK	simde/x86/sse4.2.h	92;"	d
_SIDD_CMP_EQUAL_ANY	simde/x86/sse4.2.h	82;"	d
_SIDD_CMP_EQUAL_EACH	simde/x86/sse4.2.h	84;"	d
_SIDD_CMP_EQUAL_ORDERED	simde/x86/sse4.2.h	85;"	d
_SIDD_CMP_RANGES	simde/x86/sse4.2.h	83;"	d
_SIDD_LEAST_SIGNIFICANT	simde/x86/sse4.2.h	90;"	d
_SIDD_MASKED_NEGATIVE_POLARITY	simde/x86/sse4.2.h	89;"	d
_SIDD_MASKED_POSITIVE_POLARITY	simde/x86/sse4.2.h	88;"	d
_SIDD_MOST_SIGNIFICANT	simde/x86/sse4.2.h	91;"	d
_SIDD_NEGATIVE_POLARITY	simde/x86/sse4.2.h	87;"	d
_SIDD_POSITIVE_POLARITY	simde/x86/sse4.2.h	86;"	d
_SIDD_SBYTE_OPS	simde/x86/sse4.2.h	80;"	d
_SIDD_SWORD_OPS	simde/x86/sse4.2.h	81;"	d
_SIDD_UBYTE_OPS	simde/x86/sse4.2.h	78;"	d
_SIDD_UNIT_MASK	simde/x86/sse4.2.h	93;"	d
_SIDD_UWORD_OPS	simde/x86/sse4.2.h	79;"	d
_XOPEN_SOURCE	crash.cpp	12;"	d	file:
__DARWIN_C_LEVEL	crash.cpp	5;"	d	file:
__m128	simde/x86/sse.h	/^  typedef simde__m128 __m128;$/;"	t
__m128d	simde/x86/sse2.h	/^  typedef simde__m128d __m128d;$/;"	t
__m128i	simde/x86/sse2.h	/^  typedef simde__m128i __m128i;$/;"	t
__m256	simde/x86/avx.h	/^    typedef simde__m256 __m256;$/;"	t
__m256	simde/x86/avx.h	232;"	d
__m256d	simde/x86/avx.h	/^    typedef simde__m256d __m256d;$/;"	t
__m256d	simde/x86/avx.h	234;"	d
__m256i	simde/x86/avx.h	/^    typedef simde__m256i __m256i;$/;"	t
__m256i	simde/x86/avx.h	233;"	d
__m512	simde/x86/avx512/types.h	/^    typedef simde__m512 __m512;$/;"	t
__m512	simde/x86/avx512/types.h	308;"	d
__m512d	simde/x86/avx512/types.h	/^    typedef simde__m512d __m512d;$/;"	t
__m512d	simde/x86/avx512/types.h	310;"	d
__m512i	simde/x86/avx512/types.h	/^    typedef simde__m512i __m512i;$/;"	t
__m512i	simde/x86/avx512/types.h	309;"	d
__m64	simde/x86/mmx.h	/^  typedef simde__m64 __m64;$/;"	t
__mm_2intersect_epi32	simde/x86/avx512/2intersect.h	68;"	d
__mm_2intersect_epi32	simde/x86/avx512/2intersect.h	69;"	d
__mm_2intersect_epi64	simde/x86/avx512/2intersect.h	103;"	d
__mm_2intersect_epi64	simde/x86/avx512/2intersect.h	104;"	d
__wasm_unimplemented_simd128__	simde/simde-features.h	288;"	d
_add_edit	dozeu_interface.cpp	311;"	d	file:
_add_edit	dozeu_interface.cpp	333;"	d	file:
_annotation	multipath_alignment.hpp	/^        map<string, pair<anno_type_t, void*>> _annotation;$/;"	m	class:vg::multipath_alignment_t
_append_op	dozeu_interface.cpp	433;"	d	file:
_append_op	dozeu_interface.cpp	566;"	d	file:
_connection	multipath_alignment.hpp	/^        vector<connection_t> _connection;$/;"	m	class:vg::subpath_t
_edit	path.hpp	/^    vector<edit_t> _edit;$/;"	m	class:vg::path_mapping_t
_flush_op	dozeu_interface.cpp	437;"	d	file:
_flush_op	dozeu_interface.cpp	567;"	d	file:
_fp	io/json_stream_helper.hpp	/^    FILE* _fp;$/;"	m	class:vg::io::JSONStreamHelper
_from_length	path.hpp	/^    int32_t _from_length;$/;"	m	class:vg::edit_t
_graph	transcriptome.hpp	/^        unique_ptr<MutablePathDeletableHandleGraph> _graph;$/;"	m	class:vg::Transcriptome
_is_reverse	position.hpp	/^    bool _is_reverse;$/;"	m	class:vg::position_t
_kshiftli_mask16	simde/x86/avx512/kshift.h	47;"	d
_kshiftli_mask16	simde/x86/avx512/kshift.h	48;"	d
_kshiftli_mask32	simde/x86/avx512/kshift.h	61;"	d
_kshiftli_mask32	simde/x86/avx512/kshift.h	62;"	d
_kshiftli_mask64	simde/x86/avx512/kshift.h	75;"	d
_kshiftli_mask64	simde/x86/avx512/kshift.h	76;"	d
_kshiftli_mask8	simde/x86/avx512/kshift.h	89;"	d
_kshiftli_mask8	simde/x86/avx512/kshift.h	90;"	d
_kshiftri_mask16	simde/x86/avx512/kshift.h	103;"	d
_kshiftri_mask16	simde/x86/avx512/kshift.h	104;"	d
_kshiftri_mask32	simde/x86/avx512/kshift.h	117;"	d
_kshiftri_mask32	simde/x86/avx512/kshift.h	118;"	d
_kshiftri_mask64	simde/x86/avx512/kshift.h	131;"	d
_kshiftri_mask64	simde/x86/avx512/kshift.h	132;"	d
_kshiftri_mask8	simde/x86/avx512/kshift.h	145;"	d
_kshiftri_mask8	simde/x86/avx512/kshift.h	146;"	d
_m_empty	simde/x86/mmx.h	769;"	d
_m_from_int	simde/x86/mmx.h	707;"	d
_m_from_int64	simde/x86/mmx.h	730;"	d
_m_maskmovq	simde/x86/sse.h	2598;"	d
_m_packssdw	simde/x86/mmx.h	986;"	d
_m_packsswb	simde/x86/mmx.h	939;"	d
_m_packuswb	simde/x86/mmx.h	1048;"	d
_m_paddb	simde/x86/mmx.h	215;"	d
_m_paddd	simde/x86/mmx.h	279;"	d
_m_paddsb	simde/x86/mmx.h	316;"	d
_m_paddsw	simde/x86/mmx.h	386;"	d
_m_paddusb	simde/x86/mmx.h	350;"	d
_m_paddusw	simde/x86/mmx.h	420;"	d
_m_paddw	simde/x86/mmx.h	247;"	d
_m_pand	simde/x86/mmx.h	447;"	d
_m_pandn	simde/x86/mmx.h	476;"	d
_m_pavgb	simde/x86/sse.h	929;"	d
_m_pavgw	simde/x86/sse.h	892;"	d
_m_pcmpeqb	simde/x86/mmx.h	506;"	d
_m_pcmpeqd	simde/x86/mmx.h	566;"	d
_m_pcmpeqw	simde/x86/mmx.h	536;"	d
_m_pcmpgtb	simde/x86/mmx.h	596;"	d
_m_pcmpgtd	simde/x86/mmx.h	656;"	d
_m_pcmpgtw	simde/x86/mmx.h	626;"	d
_m_pextrw	simde/x86/sse.h	2350;"	d
_m_pinsrw	simde/x86/sse.h	2383;"	d
_m_pmaddwd	simde/x86/mmx.h	800;"	d
_m_pmaxsw	simde/x86/sse.h	2627;"	d
_m_pmaxub	simde/x86/sse.h	2693;"	d
_m_pminsw	simde/x86/sse.h	2752;"	d
_m_pminub	simde/x86/sse.h	2833;"	d
_m_pmovmskb	simde/x86/sse.h	2965;"	d
_m_pmulhuw	simde/x86/sse.h	3090;"	d
_m_pmulhw	simde/x86/mmx.h	833;"	d
_m_pmullw	simde/x86/mmx.h	865;"	d
_m_por	simde/x86/mmx.h	892;"	d
_m_psadbw	simde/x86/sse.h	3432;"	d
_m_pshufw	simde/x86/sse.h	3589;"	d
_m_pslld	simde/x86/mmx.h	1458;"	d
_m_pslldi	simde/x86/mmx.h	1526;"	d
_m_psllq	simde/x86/mmx.h	1584;"	d
_m_psllqi	simde/x86/mmx.h	1552;"	d
_m_psllw	simde/x86/mmx.h	1418;"	d
_m_psllwi	simde/x86/mmx.h	1495;"	d
_m_psrad	simde/x86/mmx.h	1903;"	d
_m_psradi	simde/x86/mmx.h	1841;"	d
_m_psraw	simde/x86/mmx.h	1872;"	d
_m_psrawi	simde/x86/mmx.h	1810;"	d
_m_psrld	simde/x86/mmx.h	1659;"	d
_m_psrldi	simde/x86/mmx.h	1721;"	d
_m_psrlq	simde/x86/mmx.h	1779;"	d
_m_psrlqi	simde/x86/mmx.h	1747;"	d
_m_psrlw	simde/x86/mmx.h	1624;"	d
_m_psrlwi	simde/x86/mmx.h	1690;"	d
_m_psubb	simde/x86/mmx.h	1935;"	d
_m_psubd	simde/x86/mmx.h	1999;"	d
_m_psubsb	simde/x86/mmx.h	2035;"	d
_m_psubsw	simde/x86/mmx.h	2108;"	d
_m_psubusb	simde/x86/mmx.h	2072;"	d
_m_psubusw	simde/x86/mmx.h	2145;"	d
_m_psubw	simde/x86/mmx.h	1967;"	d
_m_punpckhbw	simde/x86/mmx.h	2181;"	d
_m_punpckhdq	simde/x86/mmx.h	2243;"	d
_m_punpckhwd	simde/x86/mmx.h	2213;"	d
_m_punpcklbw	simde/x86/mmx.h	2279;"	d
_m_punpckldq	simde/x86/mmx.h	2341;"	d
_m_punpcklwd	simde/x86/mmx.h	2311;"	d
_m_pxor	simde/x86/mmx.h	2368;"	d
_m_to_int	simde/x86/mmx.h	2392;"	d
_m_to_int64	simde/x86/mmx.h	682;"	d
_mapping	path.hpp	/^    vector<path_mapping_t> _mapping;$/;"	m	class:vg::path_t
_mapping_quality	multipath_alignment.hpp	/^        int32_t _mapping_quality;$/;"	m	class:vg::multipath_alignment_t
_mem_stats	multipath_mapper.hpp	/^        ofstream _mem_stats;$/;"	m	class:vg::MultipathMapper
_mm256_2intersect_epi32	simde/x86/avx512/2intersect.h	138;"	d
_mm256_2intersect_epi32	simde/x86/avx512/2intersect.h	139;"	d
_mm256_2intersect_epi64	simde/x86/avx512/2intersect.h	173;"	d
_mm256_2intersect_epi64	simde/x86/avx512/2intersect.h	174;"	d
_mm256_abs_epi16	simde/x86/avx2.h	91;"	d
_mm256_abs_epi16	simde/x86/avx2.h	92;"	d
_mm256_abs_epi32	simde/x86/avx2.h	119;"	d
_mm256_abs_epi32	simde/x86/avx2.h	120;"	d
_mm256_abs_epi64	simde/x86/avx512/abs.h	205;"	d
_mm256_abs_epi64	simde/x86/avx512/abs.h	206;"	d
_mm256_abs_epi8	simde/x86/avx2.h	63;"	d
_mm256_abs_epi8	simde/x86/avx2.h	64;"	d
_mm256_acos_pd	simde/x86/svml.h	187;"	d
_mm256_acos_pd	simde/x86/svml.h	188;"	d
_mm256_acos_ps	simde/x86/svml.h	151;"	d
_mm256_acos_ps	simde/x86/svml.h	152;"	d
_mm256_acosh_pd	simde/x86/svml.h	398;"	d
_mm256_acosh_pd	simde/x86/svml.h	399;"	d
_mm256_acosh_ps	simde/x86/svml.h	366;"	d
_mm256_acosh_ps	simde/x86/svml.h	367;"	d
_mm256_add_epi16	simde/x86/avx2.h	181;"	d
_mm256_add_epi16	simde/x86/avx2.h	182;"	d
_mm256_add_epi32	simde/x86/avx2.h	226;"	d
_mm256_add_epi32	simde/x86/avx2.h	227;"	d
_mm256_add_epi64	simde/x86/avx2.h	271;"	d
_mm256_add_epi64	simde/x86/avx2.h	272;"	d
_mm256_add_epi8	simde/x86/avx2.h	150;"	d
_mm256_add_epi8	simde/x86/avx2.h	151;"	d
_mm256_add_pd	simde/x86/avx.h	1565;"	d
_mm256_add_pd	simde/x86/avx.h	1566;"	d
_mm256_add_ps	simde/x86/avx.h	1520;"	d
_mm256_add_ps	simde/x86/avx.h	1521;"	d
_mm256_adds_epi16	simde/x86/avx2.h	430;"	d
_mm256_adds_epi16	simde/x86/avx2.h	431;"	d
_mm256_adds_epi8	simde/x86/avx2.h	401;"	d
_mm256_adds_epi8	simde/x86/avx2.h	402;"	d
_mm256_adds_epu16	simde/x86/avx2.h	502;"	d
_mm256_adds_epu16	simde/x86/avx2.h	503;"	d
_mm256_adds_epu8	simde/x86/avx2.h	473;"	d
_mm256_adds_epu8	simde/x86/avx2.h	474;"	d
_mm256_addsub_pd	simde/x86/avx.h	1639;"	d
_mm256_addsub_pd	simde/x86/avx.h	1640;"	d
_mm256_addsub_ps	simde/x86/avx.h	1609;"	d
_mm256_addsub_ps	simde/x86/avx.h	1610;"	d
_mm256_alignr_epi8	simde/x86/avx2.h	312;"	d
_mm256_alignr_epi8	simde/x86/avx2.h	313;"	d
_mm256_and_pd	simde/x86/avx.h	1701;"	d
_mm256_and_pd	simde/x86/avx.h	1702;"	d
_mm256_and_ps	simde/x86/avx.h	1670;"	d
_mm256_and_ps	simde/x86/avx.h	1671;"	d
_mm256_and_si256	simde/x86/avx2.h	343;"	d
_mm256_and_si256	simde/x86/avx2.h	344;"	d
_mm256_andnot_pd	simde/x86/avx.h	1763;"	d
_mm256_andnot_pd	simde/x86/avx.h	1764;"	d
_mm256_andnot_ps	simde/x86/avx.h	1732;"	d
_mm256_andnot_ps	simde/x86/avx.h	1733;"	d
_mm256_andnot_si256	simde/x86/avx2.h	372;"	d
_mm256_andnot_si256	simde/x86/avx2.h	373;"	d
_mm256_asin_pd	simde/x86/svml.h	617;"	d
_mm256_asin_pd	simde/x86/svml.h	618;"	d
_mm256_asin_ps	simde/x86/svml.h	581;"	d
_mm256_asin_ps	simde/x86/svml.h	582;"	d
_mm256_asinh_pd	simde/x86/svml.h	828;"	d
_mm256_asinh_pd	simde/x86/svml.h	829;"	d
_mm256_asinh_ps	simde/x86/svml.h	796;"	d
_mm256_asinh_ps	simde/x86/svml.h	797;"	d
_mm256_atan2_pd	simde/x86/svml.h	1278;"	d
_mm256_atan2_pd	simde/x86/svml.h	1279;"	d
_mm256_atan2_ps	simde/x86/svml.h	1241;"	d
_mm256_atan2_ps	simde/x86/svml.h	1242;"	d
_mm256_atan_pd	simde/x86/svml.h	1047;"	d
_mm256_atan_pd	simde/x86/svml.h	1048;"	d
_mm256_atan_ps	simde/x86/svml.h	1011;"	d
_mm256_atan_ps	simde/x86/svml.h	1012;"	d
_mm256_atanh_pd	simde/x86/svml.h	1491;"	d
_mm256_atanh_pd	simde/x86/svml.h	1492;"	d
_mm256_atanh_ps	simde/x86/svml.h	1459;"	d
_mm256_atanh_ps	simde/x86/svml.h	1460;"	d
_mm256_avg_epu16	simde/x86/avx2.h	550;"	d
_mm256_avg_epu16	simde/x86/avx2.h	551;"	d
_mm256_avg_epu8	simde/x86/avx2.h	526;"	d
_mm256_avg_epu8	simde/x86/avx2.h	527;"	d
_mm256_blend_epi16	simde/x86/avx2.h	606;"	d
_mm256_blend_epi16	simde/x86/avx2.h	607;"	d
_mm256_blend_epi32	simde/x86/avx2.h	636;"	d
_mm256_blend_epi32	simde/x86/avx2.h	637;"	d
_mm256_blend_pd	simde/x86/avx.h	1820;"	d
_mm256_blend_pd	simde/x86/avx.h	1821;"	d
_mm256_blend_ps	simde/x86/avx.h	1792;"	d
_mm256_blend_ps	simde/x86/avx.h	1793;"	d
_mm256_blendv_epi8	simde/x86/avx2.h	674;"	d
_mm256_blendv_epi8	simde/x86/avx2.h	675;"	d
_mm256_blendv_pd	simde/x86/avx.h	1880;"	d
_mm256_blendv_pd	simde/x86/avx.h	1881;"	d
_mm256_blendv_ps	simde/x86/avx.h	1850;"	d
_mm256_blendv_ps	simde/x86/avx.h	1851;"	d
_mm256_broadcast_f32x2	simde/x86/avx512/broadcast.h	66;"	d
_mm256_broadcast_f32x2	simde/x86/avx512/broadcast.h	67;"	d
_mm256_broadcast_f32x4	simde/x86/avx512/broadcast.h	297;"	d
_mm256_broadcast_f32x4	simde/x86/avx512/broadcast.h	298;"	d
_mm256_broadcast_f64x2	simde/x86/avx512/broadcast.h	355;"	d
_mm256_broadcast_f64x2	simde/x86/avx512/broadcast.h	356;"	d
_mm256_broadcast_pd	simde/x86/avx.h	1900;"	d
_mm256_broadcast_pd	simde/x86/avx.h	1901;"	d
_mm256_broadcast_ps	simde/x86/avx.h	1920;"	d
_mm256_broadcast_ps	simde/x86/avx.h	1921;"	d
_mm256_broadcast_sd	simde/x86/avx.h	1934;"	d
_mm256_broadcast_sd	simde/x86/avx.h	1935;"	d
_mm256_broadcast_ss	simde/x86/avx.h	1962;"	d
_mm256_broadcast_ss	simde/x86/avx.h	1963;"	d
_mm256_broadcastb_epi8	simde/x86/avx2.h	718;"	d
_mm256_broadcastb_epi8	simde/x86/avx2.h	719;"	d
_mm256_broadcastd_epi32	simde/x86/avx2.h	806;"	d
_mm256_broadcastd_epi32	simde/x86/avx2.h	807;"	d
_mm256_broadcastq_epi64	simde/x86/avx2.h	850;"	d
_mm256_broadcastq_epi64	simde/x86/avx2.h	851;"	d
_mm256_broadcastsd_pd	simde/x86/avx2.h	926;"	d
_mm256_broadcastsd_pd	simde/x86/avx2.h	927;"	d
_mm256_broadcastsi128_si256	simde/x86/avx2.h	955;"	d
_mm256_broadcastsi128_si256	simde/x86/avx2.h	956;"	d
_mm256_broadcastss_ps	simde/x86/avx2.h	894;"	d
_mm256_broadcastss_ps	simde/x86/avx2.h	895;"	d
_mm256_broadcastw_epi16	simde/x86/avx2.h	762;"	d
_mm256_broadcastw_epi16	simde/x86/avx2.h	763;"	d
_mm256_bslli_epi128	simde/x86/avx2.h	995;"	d
_mm256_bslli_epi128	simde/x86/avx2.h	996;"	d
_mm256_bsrli_epi128	simde/x86/avx2.h	1033;"	d
_mm256_bsrli_epi128	simde/x86/avx2.h	1034;"	d
_mm256_castpd128_pd256	simde/x86/avx.h	1981;"	d
_mm256_castpd128_pd256	simde/x86/avx.h	1982;"	d
_mm256_castpd256_pd128	simde/x86/avx.h	1996;"	d
_mm256_castpd256_pd128	simde/x86/avx.h	1997;"	d
_mm256_castpd_ps	simde/x86/avx.h	435;"	d
_mm256_castpd_ps	simde/x86/avx.h	436;"	d
_mm256_castpd_si256	simde/x86/avx.h	449;"	d
_mm256_castpd_si256	simde/x86/avx.h	450;"	d
_mm256_castps128_ps256	simde/x86/avx.h	2015;"	d
_mm256_castps128_ps256	simde/x86/avx.h	2016;"	d
_mm256_castps256_ps128	simde/x86/avx.h	2030;"	d
_mm256_castps256_ps128	simde/x86/avx.h	2031;"	d
_mm256_castps_pd	simde/x86/avx.h	379;"	d
_mm256_castps_pd	simde/x86/avx.h	380;"	d
_mm256_castps_si256	simde/x86/avx.h	393;"	d
_mm256_castps_si256	simde/x86/avx.h	394;"	d
_mm256_castsi128_si256	simde/x86/avx.h	2049;"	d
_mm256_castsi128_si256	simde/x86/avx.h	2050;"	d
_mm256_castsi256_pd	simde/x86/avx.h	407;"	d
_mm256_castsi256_pd	simde/x86/avx.h	408;"	d
_mm256_castsi256_ps	simde/x86/avx.h	421;"	d
_mm256_castsi256_ps	simde/x86/avx.h	422;"	d
_mm256_castsi256_si128	simde/x86/avx.h	2064;"	d
_mm256_castsi256_si128	simde/x86/avx.h	2065;"	d
_mm256_cbrt_pd	simde/x86/svml.h	1694;"	d
_mm256_cbrt_pd	simde/x86/svml.h	1695;"	d
_mm256_cbrt_ps	simde/x86/svml.h	1662;"	d
_mm256_cbrt_ps	simde/x86/svml.h	1663;"	d
_mm256_cdfnorm_pd	simde/x86/svml.h	4947;"	d
_mm256_cdfnorm_pd	simde/x86/svml.h	4948;"	d
_mm256_cdfnorm_ps	simde/x86/svml.h	4887;"	d
_mm256_cdfnorm_ps	simde/x86/svml.h	4888;"	d
_mm256_cdfnorminv_pd	simde/x86/svml.h	6273;"	d
_mm256_cdfnorminv_pd	simde/x86/svml.h	6274;"	d
_mm256_cdfnorminv_ps	simde/x86/svml.h	6142;"	d
_mm256_cdfnorminv_ps	simde/x86/svml.h	6143;"	d
_mm256_ceil_pd	simde/x86/avx.h	2198;"	d
_mm256_ceil_pd	simde/x86/avx.h	2199;"	d
_mm256_ceil_ps	simde/x86/avx.h	2208;"	d
_mm256_ceil_ps	simde/x86/avx.h	2209;"	d
_mm256_cexp_ps	simde/x86/svml.h	1834;"	d
_mm256_cexp_ps	simde/x86/svml.h	1835;"	d
_mm256_clmulepi64_epi128	simde/x86/clmul.h	309;"	d
_mm256_clmulepi64_epi128	simde/x86/clmul.h	310;"	d
_mm256_clog_ps	simde/x86/svml.h	8846;"	d
_mm256_clog_ps	simde/x86/svml.h	8847;"	d
_mm256_cmp_pd	simde/x86/avx.h	2890;"	d
_mm256_cmp_pd	simde/x86/avx.h	2891;"	d
_mm256_cmp_ps	simde/x86/avx.h	3159;"	d
_mm256_cmp_ps	simde/x86/avx.h	3160;"	d
_mm256_cmpeq_epi16	simde/x86/avx2.h	1091;"	d
_mm256_cmpeq_epi16	simde/x86/avx2.h	1092;"	d
_mm256_cmpeq_epi32	simde/x86/avx2.h	1120;"	d
_mm256_cmpeq_epi32	simde/x86/avx2.h	1121;"	d
_mm256_cmpeq_epi64	simde/x86/avx2.h	1149;"	d
_mm256_cmpeq_epi64	simde/x86/avx2.h	1150;"	d
_mm256_cmpeq_epi8	simde/x86/avx2.h	1062;"	d
_mm256_cmpeq_epi8	simde/x86/avx2.h	1063;"	d
_mm256_cmpgt_epi16	simde/x86/avx2.h	1211;"	d
_mm256_cmpgt_epi16	simde/x86/avx2.h	1212;"	d
_mm256_cmpgt_epi32	simde/x86/avx2.h	1242;"	d
_mm256_cmpgt_epi32	simde/x86/avx2.h	1243;"	d
_mm256_cmpgt_epi64	simde/x86/avx2.h	1273;"	d
_mm256_cmpgt_epi64	simde/x86/avx2.h	1274;"	d
_mm256_cmpgt_epi8	simde/x86/avx2.h	1180;"	d
_mm256_cmpgt_epi8	simde/x86/avx2.h	1181;"	d
_mm256_cos_pd	simde/x86/svml.h	1963;"	d
_mm256_cos_pd	simde/x86/svml.h	1964;"	d
_mm256_cos_ps	simde/x86/svml.h	1927;"	d
_mm256_cos_ps	simde/x86/svml.h	1928;"	d
_mm256_cosd_pd	simde/x86/svml.h	2376;"	d
_mm256_cosd_pd	simde/x86/svml.h	2377;"	d
_mm256_cosd_ps	simde/x86/svml.h	2341;"	d
_mm256_cosd_ps	simde/x86/svml.h	2342;"	d
_mm256_cosh_pd	simde/x86/svml.h	2587;"	d
_mm256_cosh_pd	simde/x86/svml.h	2588;"	d
_mm256_cosh_ps	simde/x86/svml.h	2555;"	d
_mm256_cosh_ps	simde/x86/svml.h	2556;"	d
_mm256_csqrt_ps	simde/x86/svml.h	8906;"	d
_mm256_csqrt_ps	simde/x86/svml.h	8907;"	d
_mm256_cvtepi16_epi32	simde/x86/avx2.h	1373;"	d
_mm256_cvtepi16_epi32	simde/x86/avx2.h	1374;"	d
_mm256_cvtepi16_epi64	simde/x86/avx2.h	1399;"	d
_mm256_cvtepi16_epi64	simde/x86/avx2.h	1400;"	d
_mm256_cvtepi32_epi64	simde/x86/avx2.h	1425;"	d
_mm256_cvtepi32_epi64	simde/x86/avx2.h	1426;"	d
_mm256_cvtepi32_pd	simde/x86/avx.h	3225;"	d
_mm256_cvtepi32_pd	simde/x86/avx.h	3226;"	d
_mm256_cvtepi32_ps	simde/x86/avx.h	3247;"	d
_mm256_cvtepi32_ps	simde/x86/avx.h	3248;"	d
_mm256_cvtepi8_epi16	simde/x86/avx2.h	1299;"	d
_mm256_cvtepi8_epi16	simde/x86/avx2.h	1300;"	d
_mm256_cvtepi8_epi32	simde/x86/avx2.h	1325;"	d
_mm256_cvtepi8_epi32	simde/x86/avx2.h	1326;"	d
_mm256_cvtepi8_epi64	simde/x86/avx2.h	1347;"	d
_mm256_cvtepi8_epi64	simde/x86/avx2.h	1348;"	d
_mm256_cvtepu16_epi32	simde/x86/avx2.h	1525;"	d
_mm256_cvtepu16_epi32	simde/x86/avx2.h	1526;"	d
_mm256_cvtepu16_epi64	simde/x86/avx2.h	1551;"	d
_mm256_cvtepu16_epi64	simde/x86/avx2.h	1552;"	d
_mm256_cvtepu32_epi64	simde/x86/avx2.h	1577;"	d
_mm256_cvtepu32_epi64	simde/x86/avx2.h	1578;"	d
_mm256_cvtepu8_epi16	simde/x86/avx2.h	1451;"	d
_mm256_cvtepu8_epi16	simde/x86/avx2.h	1452;"	d
_mm256_cvtepu8_epi32	simde/x86/avx2.h	1477;"	d
_mm256_cvtepu8_epi32	simde/x86/avx2.h	1478;"	d
_mm256_cvtepu8_epi64	simde/x86/avx2.h	1499;"	d
_mm256_cvtepu8_epi64	simde/x86/avx2.h	1500;"	d
_mm256_cvtpd_epi32	simde/x86/avx.h	3273;"	d
_mm256_cvtpd_epi32	simde/x86/avx.h	3274;"	d
_mm256_cvtpd_ps	simde/x86/avx.h	3295;"	d
_mm256_cvtpd_ps	simde/x86/avx.h	3296;"	d
_mm256_cvtps_epi32	simde/x86/avx.h	3321;"	d
_mm256_cvtps_epi32	simde/x86/avx.h	3322;"	d
_mm256_cvtps_pd	simde/x86/avx.h	3343;"	d
_mm256_cvtps_pd	simde/x86/avx.h	3344;"	d
_mm256_cvtsd_f64	simde/x86/avx.h	3362;"	d
_mm256_cvtsd_f64	simde/x86/avx.h	3363;"	d
_mm256_cvtsepi16_epi8	simde/x86/avx512/cvts.h	89;"	d
_mm256_cvtsepi16_epi8	simde/x86/avx512/cvts.h	90;"	d
_mm256_cvtsepi32_epi16	simde/x86/avx512/cvts.h	197;"	d
_mm256_cvtsepi32_epi16	simde/x86/avx512/cvts.h	198;"	d
_mm256_cvtsepi32_epi8	simde/x86/avx512/cvts.h	143;"	d
_mm256_cvtsepi32_epi8	simde/x86/avx512/cvts.h	144;"	d
_mm256_cvtsepi64_epi8	simde/x86/avx512/cvts.h	251;"	d
_mm256_cvtsepi64_epi8	simde/x86/avx512/cvts.h	252;"	d
_mm256_cvtsi256_si32	simde/x86/avx.h	3380;"	d
_mm256_cvtsi256_si32	simde/x86/avx.h	3381;"	d
_mm256_cvtss_f32	simde/x86/avx.h	3399;"	d
_mm256_cvtss_f32	simde/x86/avx.h	3400;"	d
_mm256_cvttpd_epi32	simde/x86/avx.h	3426;"	d
_mm256_cvttpd_epi32	simde/x86/avx.h	3427;"	d
_mm256_cvttps_epi32	simde/x86/avx.h	3452;"	d
_mm256_cvttps_epi32	simde/x86/avx.h	3453;"	d
_mm256_div_epi16	simde/x86/svml.h	2991;"	d
_mm256_div_epi16	simde/x86/svml.h	2992;"	d
_mm256_div_epi32	simde/x86/svml.h	3026;"	d
_mm256_div_epi32	simde/x86/svml.h	3027;"	d
_mm256_div_epi64	simde/x86/svml.h	3062;"	d
_mm256_div_epi64	simde/x86/svml.h	3063;"	d
_mm256_div_epi8	simde/x86/svml.h	2957;"	d
_mm256_div_epi8	simde/x86/svml.h	2958;"	d
_mm256_div_epu16	simde/x86/svml.h	3130;"	d
_mm256_div_epu16	simde/x86/svml.h	3131;"	d
_mm256_div_epu32	simde/x86/svml.h	3165;"	d
_mm256_div_epu32	simde/x86/svml.h	3166;"	d
_mm256_div_epu64	simde/x86/svml.h	3201;"	d
_mm256_div_epu64	simde/x86/svml.h	3202;"	d
_mm256_div_epu8	simde/x86/svml.h	3096;"	d
_mm256_div_epu8	simde/x86/svml.h	3097;"	d
_mm256_div_pd	simde/x86/avx.h	3514;"	d
_mm256_div_pd	simde/x86/avx.h	3515;"	d
_mm256_div_ps	simde/x86/avx.h	3483;"	d
_mm256_div_ps	simde/x86/avx.h	3484;"	d
_mm256_dp_ps	simde/x86/avx.h	3711;"	d
_mm256_dp_ps	simde/x86/avx.h	3712;"	d
_mm256_erf_pd	simde/x86/svml.h	3614;"	d
_mm256_erf_pd	simde/x86/svml.h	3615;"	d
_mm256_erf_ps	simde/x86/svml.h	3582;"	d
_mm256_erf_ps	simde/x86/svml.h	3583;"	d
_mm256_erfc_pd	simde/x86/svml.h	3817;"	d
_mm256_erfc_pd	simde/x86/svml.h	3818;"	d
_mm256_erfc_ps	simde/x86/svml.h	3785;"	d
_mm256_erfc_ps	simde/x86/svml.h	3786;"	d
_mm256_erfcinv_pd	simde/x86/svml.h	7396;"	d
_mm256_erfcinv_pd	simde/x86/svml.h	7397;"	d
_mm256_erfcinv_ps	simde/x86/svml.h	7246;"	d
_mm256_erfcinv_ps	simde/x86/svml.h	7247;"	d
_mm256_erfinv_pd	simde/x86/svml.h	6692;"	d
_mm256_erfinv_pd	simde/x86/svml.h	6693;"	d
_mm256_erfinv_ps	simde/x86/svml.h	6648;"	d
_mm256_erfinv_ps	simde/x86/svml.h	6649;"	d
_mm256_exp10_pd	simde/x86/svml.h	4629;"	d
_mm256_exp10_pd	simde/x86/svml.h	4630;"	d
_mm256_exp10_ps	simde/x86/svml.h	4597;"	d
_mm256_exp10_ps	simde/x86/svml.h	4598;"	d
_mm256_exp2_pd	simde/x86/svml.h	4426;"	d
_mm256_exp2_pd	simde/x86/svml.h	4427;"	d
_mm256_exp2_ps	simde/x86/svml.h	4394;"	d
_mm256_exp2_ps	simde/x86/svml.h	4395;"	d
_mm256_exp_pd	simde/x86/svml.h	4020;"	d
_mm256_exp_pd	simde/x86/svml.h	4021;"	d
_mm256_exp_ps	simde/x86/svml.h	3988;"	d
_mm256_exp_ps	simde/x86/svml.h	3989;"	d
_mm256_expm1_pd	simde/x86/svml.h	4223;"	d
_mm256_expm1_pd	simde/x86/svml.h	4224;"	d
_mm256_expm1_ps	simde/x86/svml.h	4191;"	d
_mm256_expm1_ps	simde/x86/svml.h	4192;"	d
_mm256_extract_epi16	simde/x86/avx2.h	1607;"	d
_mm256_extract_epi16	simde/x86/avx2.h	1608;"	d
_mm256_extract_epi32	simde/x86/avx.h	3726;"	d
_mm256_extract_epi32	simde/x86/avx.h	3727;"	d
_mm256_extract_epi64	simde/x86/avx.h	3743;"	d
_mm256_extract_epi64	simde/x86/avx.h	3744;"	d
_mm256_extract_epi8	simde/x86/avx2.h	1592;"	d
_mm256_extract_epi8	simde/x86/avx2.h	1593;"	d
_mm256_extractf128_pd	simde/x86/avx.h	3529;"	d
_mm256_extractf128_pd	simde/x86/avx.h	3530;"	d
_mm256_extractf128_ps	simde/x86/avx.h	3544;"	d
_mm256_extractf128_ps	simde/x86/avx.h	3545;"	d
_mm256_extractf128_si256	simde/x86/avx.h	3559;"	d
_mm256_extractf128_si256	simde/x86/avx.h	3560;"	d
_mm256_extracti128_si256	simde/x86/avx2.h	1622;"	d
_mm256_extracti128_si256	simde/x86/avx2.h	1623;"	d
_mm256_floor_pd	simde/x86/avx.h	3569;"	d
_mm256_floor_pd	simde/x86/avx.h	3570;"	d
_mm256_floor_ps	simde/x86/avx.h	3579;"	d
_mm256_floor_ps	simde/x86/avx.h	3580;"	d
_mm256_fmadd_pd	simde/x86/fma.h	86;"	d
_mm256_fmadd_pd	simde/x86/fma.h	87;"	d
_mm256_fmadd_ps	simde/x86/fma.h	152;"	d
_mm256_fmadd_ps	simde/x86/fma.h	153;"	d
_mm256_fmaddsub_pd	simde/x86/fma.h	208;"	d
_mm256_fmaddsub_pd	simde/x86/fma.h	209;"	d
_mm256_fmaddsub_ps	simde/x86/fma.h	236;"	d
_mm256_fmaddsub_ps	simde/x86/fma.h	237;"	d
_mm256_fmsub_pd	simde/x86/fma.h	264;"	d
_mm256_fmsub_pd	simde/x86/fma.h	265;"	d
_mm256_fmsub_ps	simde/x86/fma.h	292;"	d
_mm256_fmsub_ps	simde/x86/fma.h	293;"	d
_mm256_fmsubadd_pd	simde/x86/fma.h	372;"	d
_mm256_fmsubadd_pd	simde/x86/fma.h	373;"	d
_mm256_fmsubadd_ps	simde/x86/fma.h	424;"	d
_mm256_fmsubadd_ps	simde/x86/fma.h	425;"	d
_mm256_fnmadd_pd	simde/x86/fma.h	474;"	d
_mm256_fnmadd_pd	simde/x86/fma.h	475;"	d
_mm256_fnmadd_ps	simde/x86/fma.h	524;"	d
_mm256_fnmadd_ps	simde/x86/fma.h	525;"	d
_mm256_fnmsub_pd	simde/x86/fma.h	620;"	d
_mm256_fnmsub_pd	simde/x86/fma.h	621;"	d
_mm256_fnmsub_ps	simde/x86/fma.h	670;"	d
_mm256_fnmsub_ps	simde/x86/fma.h	671;"	d
_mm256_gf2p8affine_epi64_epi8	simde/x86/gfni.h	360;"	d
_mm256_gf2p8affine_epi64_epi8	simde/x86/gfni.h	361;"	d
_mm256_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	462;"	d
_mm256_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	463;"	d
_mm256_gf2p8mul_epi8	simde/x86/gfni.h	656;"	d
_mm256_gf2p8mul_epi8	simde/x86/gfni.h	657;"	d
_mm256_hadd_epi16	simde/x86/avx2.h	195;"	d
_mm256_hadd_epi16	simde/x86/avx2.h	196;"	d
_mm256_hadd_epi32	simde/x86/avx2.h	240;"	d
_mm256_hadd_epi32	simde/x86/avx2.h	241;"	d
_mm256_hadd_pd	simde/x86/avx.h	1579;"	d
_mm256_hadd_pd	simde/x86/avx.h	1580;"	d
_mm256_hadd_ps	simde/x86/avx.h	1534;"	d
_mm256_hadd_ps	simde/x86/avx.h	1535;"	d
_mm256_hadds_epi16	simde/x86/avx2.h	444;"	d
_mm256_hadds_epi16	simde/x86/avx2.h	445;"	d
_mm256_hsub_epi16	simde/x86/avx2.h	5154;"	d
_mm256_hsub_epi16	simde/x86/avx2.h	5155;"	d
_mm256_hsub_epi32	simde/x86/avx2.h	5199;"	d
_mm256_hsub_epi32	simde/x86/avx2.h	5200;"	d
_mm256_hsub_pd	simde/x86/avx.h	5381;"	d
_mm256_hsub_pd	simde/x86/avx.h	5382;"	d
_mm256_hsub_ps	simde/x86/avx.h	5336;"	d
_mm256_hsub_ps	simde/x86/avx.h	5337;"	d
_mm256_hsubs_epi16	simde/x86/avx2.h	5325;"	d
_mm256_hsubs_epi16	simde/x86/avx2.h	5326;"	d
_mm256_hypot_pd	simde/x86/svml.h	5266;"	d
_mm256_hypot_pd	simde/x86/svml.h	5267;"	d
_mm256_hypot_ps	simde/x86/svml.h	5229;"	d
_mm256_hypot_ps	simde/x86/svml.h	5230;"	d
_mm256_i32_gather_epi32	simde/x86/avx2.h	1713;"	d
_mm256_i32_gather_epi64	simde/x86/avx2.h	1980;"	d
_mm256_i32_gather_pd	simde/x86/avx2.h	2516;"	d
_mm256_i32_gather_ps	simde/x86/avx2.h	2256;"	d
_mm256_i32gather_epi32	simde/x86/avx2.h	1714;"	d
_mm256_i32gather_epi64	simde/x86/avx2.h	1981;"	d
_mm256_i32gather_pd	simde/x86/avx2.h	2517;"	d
_mm256_i32gather_ps	simde/x86/avx2.h	2257;"	d
_mm256_i64_gather_epi32	simde/x86/avx2.h	1840;"	d
_mm256_i64_gather_epi64	simde/x86/avx2.h	2123;"	d
_mm256_i64_gather_pd	simde/x86/avx2.h	2646;"	d
_mm256_i64_gather_ps	simde/x86/avx2.h	2386;"	d
_mm256_i64gather_epi32	simde/x86/avx2.h	1841;"	d
_mm256_i64gather_epi64	simde/x86/avx2.h	2124;"	d
_mm256_i64gather_pd	simde/x86/avx2.h	2647;"	d
_mm256_i64gather_ps	simde/x86/avx2.h	2387;"	d
_mm256_idiv_epi32	simde/x86/svml.h	3028;"	d
_mm256_idiv_epi32	simde/x86/svml.h	3029;"	d
_mm256_idivrem_epi32	simde/x86/svml.h	5133;"	d
_mm256_idivrem_epi32	simde/x86/svml.h	5134;"	d
_mm256_insert_epi16	simde/x86/avx.h	3615;"	d
_mm256_insert_epi16	simde/x86/avx.h	3616;"	d
_mm256_insert_epi32	simde/x86/avx.h	3633;"	d
_mm256_insert_epi32	simde/x86/avx.h	3634;"	d
_mm256_insert_epi64	simde/x86/avx.h	3653;"	d
_mm256_insert_epi64	simde/x86/avx.h	3654;"	d
_mm256_insert_epi8	simde/x86/avx.h	3597;"	d
_mm256_insert_epi8	simde/x86/avx.h	3598;"	d
_mm256_insertf128_pd	simde/x86/avx.h	3668;"	d
_mm256_insertf128_pd	simde/x86/avx.h	3669;"	d
_mm256_insertf128_ps	simde/x86/avx.h	3683;"	d
_mm256_insertf128_ps	simde/x86/avx.h	3684;"	d
_mm256_insertf128_si256	simde/x86/avx.h	3698;"	d
_mm256_insertf128_si256	simde/x86/avx.h	3699;"	d
_mm256_inserti128_si256	simde/x86/avx2.h	2701;"	d
_mm256_inserti128_si256	simde/x86/avx2.h	2702;"	d
_mm256_invcbrt_pd	simde/x86/svml.h	5422;"	d
_mm256_invcbrt_pd	simde/x86/svml.h	5423;"	d
_mm256_invcbrt_ps	simde/x86/svml.h	5408;"	d
_mm256_invcbrt_ps	simde/x86/svml.h	5409;"	d
_mm256_invsqrt_pd	simde/x86/svml.h	5478;"	d
_mm256_invsqrt_pd	simde/x86/svml.h	5479;"	d
_mm256_invsqrt_ps	simde/x86/svml.h	5464;"	d
_mm256_invsqrt_ps	simde/x86/svml.h	5465;"	d
_mm256_irem_epi32	simde/x86/svml.h	9241;"	d
_mm256_irem_epi32	simde/x86/svml.h	9242;"	d
_mm256_lddqu_si256	simde/x86/avx.h	3813;"	d
_mm256_lddqu_si256	simde/x86/avx.h	3814;"	d
_mm256_load_pd	simde/x86/avx.h	3829;"	d
_mm256_load_pd	simde/x86/avx.h	3830;"	d
_mm256_load_ps	simde/x86/avx.h	3845;"	d
_mm256_load_ps	simde/x86/avx.h	3846;"	d
_mm256_load_si256	simde/x86/avx.h	3861;"	d
_mm256_load_si256	simde/x86/avx.h	3862;"	d
_mm256_loadu2_m128	simde/x86/avx.h	3925;"	d
_mm256_loadu2_m128	simde/x86/avx.h	3926;"	d
_mm256_loadu2_m128d	simde/x86/avx.h	3941;"	d
_mm256_loadu2_m128d	simde/x86/avx.h	3942;"	d
_mm256_loadu2_m128i	simde/x86/avx.h	3957;"	d
_mm256_loadu2_m128i	simde/x86/avx.h	3958;"	d
_mm256_loadu_pd	simde/x86/avx.h	3877;"	d
_mm256_loadu_pd	simde/x86/avx.h	3878;"	d
_mm256_loadu_ps	simde/x86/avx.h	3893;"	d
_mm256_loadu_ps	simde/x86/avx.h	3894;"	d
_mm256_loadu_si256	simde/x86/avx.h	3909;"	d
_mm256_loadu_si256	simde/x86/avx.h	3910;"	d
_mm256_log10_pd	simde/x86/svml.h	8447;"	d
_mm256_log10_pd	simde/x86/svml.h	8448;"	d
_mm256_log10_ps	simde/x86/svml.h	8415;"	d
_mm256_log10_ps	simde/x86/svml.h	8416;"	d
_mm256_log1p_pd	simde/x86/svml.h	8244;"	d
_mm256_log1p_pd	simde/x86/svml.h	8245;"	d
_mm256_log1p_ps	simde/x86/svml.h	8212;"	d
_mm256_log1p_ps	simde/x86/svml.h	8213;"	d
_mm256_log2_pd	simde/x86/svml.h	8033;"	d
_mm256_log2_pd	simde/x86/svml.h	8034;"	d
_mm256_log2_ps	simde/x86/svml.h	7997;"	d
_mm256_log2_ps	simde/x86/svml.h	7998;"	d
_mm256_log_pd	simde/x86/svml.h	5663;"	d
_mm256_log_pd	simde/x86/svml.h	5664;"	d
_mm256_log_ps	simde/x86/svml.h	5627;"	d
_mm256_log_ps	simde/x86/svml.h	5628;"	d
_mm256_logb_pd	simde/x86/svml.h	7818;"	d
_mm256_logb_pd	simde/x86/svml.h	7819;"	d
_mm256_logb_ps	simde/x86/svml.h	7788;"	d
_mm256_logb_ps	simde/x86/svml.h	7789;"	d
_mm256_madd_epi16	simde/x86/avx2.h	2730;"	d
_mm256_madd_epi16	simde/x86/avx2.h	2731;"	d
_mm256_maddubs_epi16	simde/x86/avx2.h	2763;"	d
_mm256_maddubs_epi16	simde/x86/avx2.h	2764;"	d
_mm256_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	759;"	d
_mm256_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	760;"	d
_mm256_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	838;"	d
_mm256_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	839;"	d
_mm256_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	905;"	d
_mm256_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	906;"	d
_mm256_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	996;"	d
_mm256_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	997;"	d
_mm256_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	1052;"	d
_mm256_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	1053;"	d
_mm256_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	1108;"	d
_mm256_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	1109;"	d
_mm256_mask_abs_epi64	simde/x86/avx512/abs.h	219;"	d
_mm256_mask_abs_epi64	simde/x86/avx512/abs.h	220;"	d
_mm256_mask_add_epi16	simde/x86/avx512/add.h	208;"	d
_mm256_mask_add_epi16	simde/x86/avx512/add.h	209;"	d
_mm256_mask_add_epi32	simde/x86/avx512/add.h	236;"	d
_mm256_mask_add_epi32	simde/x86/avx512/add.h	237;"	d
_mm256_mask_add_epi64	simde/x86/avx512/add.h	264;"	d
_mm256_mask_add_epi64	simde/x86/avx512/add.h	265;"	d
_mm256_mask_adds_epi16	simde/x86/avx512/adds.h	133;"	d
_mm256_mask_adds_epi16	simde/x86/avx512/adds.h	134;"	d
_mm256_mask_adds_epi8	simde/x86/avx512/adds.h	105;"	d
_mm256_mask_adds_epi8	simde/x86/avx512/adds.h	106;"	d
_mm256_mask_avg_epu16	simde/x86/avx512/avg.h	133;"	d
_mm256_mask_avg_epu16	simde/x86/avx512/avg.h	134;"	d
_mm256_mask_avg_epu8	simde/x86/avx512/avg.h	105;"	d
_mm256_mask_avg_epu8	simde/x86/avx512/avg.h	106;"	d
_mm256_mask_blend_epi16	simde/x86/avx512/blend.h	146;"	d
_mm256_mask_blend_epi16	simde/x86/avx512/blend.h	147;"	d
_mm256_mask_blend_epi32	simde/x86/avx512/blend.h	160;"	d
_mm256_mask_blend_epi32	simde/x86/avx512/blend.h	161;"	d
_mm256_mask_blend_epi64	simde/x86/avx512/blend.h	174;"	d
_mm256_mask_blend_epi64	simde/x86/avx512/blend.h	175;"	d
_mm256_mask_blend_epi8	simde/x86/avx512/blend.h	132;"	d
_mm256_mask_blend_epi8	simde/x86/avx512/blend.h	133;"	d
_mm256_mask_blend_pd	simde/x86/avx512/blend.h	202;"	d
_mm256_mask_blend_pd	simde/x86/avx512/blend.h	203;"	d
_mm256_mask_blend_ps	simde/x86/avx512/blend.h	188;"	d
_mm256_mask_blend_ps	simde/x86/avx512/blend.h	189;"	d
_mm256_mask_broadcast_f32x2	simde/x86/avx512/broadcast.h	80;"	d
_mm256_mask_broadcast_f32x2	simde/x86/avx512/broadcast.h	81;"	d
_mm256_mask_broadcast_f32x4	simde/x86/avx512/broadcast.h	311;"	d
_mm256_mask_broadcast_f32x4	simde/x86/avx512/broadcast.h	312;"	d
_mm256_mask_broadcast_f64x2	simde/x86/avx512/broadcast.h	369;"	d
_mm256_mask_broadcast_f64x2	simde/x86/avx512/broadcast.h	370;"	d
_mm256_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	394;"	d
_mm256_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	395;"	d
_mm256_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	496;"	d
_mm256_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	497;"	d
_mm256_mask_gf2p8mul_epi8	simde/x86/gfni.h	738;"	d
_mm256_mask_gf2p8mul_epi8	simde/x86/gfni.h	739;"	d
_mm256_mask_i32gather_epi32	simde/x86/avx2.h	1748;"	d
_mm256_mask_i32gather_epi32	simde/x86/avx2.h	1749;"	d
_mm256_mask_i32gather_epi64	simde/x86/avx2.h	2020;"	d
_mm256_mask_i32gather_epi64	simde/x86/avx2.h	2021;"	d
_mm256_mask_i32gather_pd	simde/x86/avx2.h	2552;"	d
_mm256_mask_i32gather_pd	simde/x86/avx2.h	2553;"	d
_mm256_mask_i32gather_ps	simde/x86/avx2.h	2292;"	d
_mm256_mask_i32gather_ps	simde/x86/avx2.h	2293;"	d
_mm256_mask_i64gather_epi32	simde/x86/avx2.h	1876;"	d
_mm256_mask_i64gather_epi32	simde/x86/avx2.h	1877;"	d
_mm256_mask_i64gather_epi64	simde/x86/avx2.h	2162;"	d
_mm256_mask_i64gather_epi64	simde/x86/avx2.h	2163;"	d
_mm256_mask_i64gather_pd	simde/x86/avx2.h	2682;"	d
_mm256_mask_i64gather_pd	simde/x86/avx2.h	2683;"	d
_mm256_mask_i64gather_ps	simde/x86/avx2.h	2422;"	d
_mm256_mask_i64gather_ps	simde/x86/avx2.h	2423;"	d
_mm256_mask_madd_epi16	simde/x86/avx512/madd.h	77;"	d
_mm256_mask_madd_epi16	simde/x86/avx512/madd.h	78;"	d
_mm256_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	78;"	d
_mm256_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	79;"	d
_mm256_mask_mov_epi16	simde/x86/avx512/mov.h	218;"	d
_mm256_mask_mov_epi16	simde/x86/avx512/mov.h	219;"	d
_mm256_mask_mov_epi32	simde/x86/avx512/mov.h	247;"	d
_mm256_mask_mov_epi32	simde/x86/avx512/mov.h	248;"	d
_mm256_mask_mov_epi64	simde/x86/avx512/mov.h	277;"	d
_mm256_mask_mov_epi64	simde/x86/avx512/mov.h	278;"	d
_mm256_mask_mov_epi8	simde/x86/avx512/mov.h	189;"	d
_mm256_mask_mov_epi8	simde/x86/avx512/mov.h	190;"	d
_mm256_mask_mov_pd	simde/x86/avx512/mov.h	291;"	d
_mm256_mask_mov_pd	simde/x86/avx512/mov.h	292;"	d
_mm256_mask_mov_ps	simde/x86/avx512/mov.h	305;"	d
_mm256_mask_mov_ps	simde/x86/avx512/mov.h	306;"	d
_mm256_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	745;"	d
_mm256_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	746;"	d
_mm256_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	824;"	d
_mm256_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	825;"	d
_mm256_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	891;"	d
_mm256_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	892;"	d
_mm256_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	982;"	d
_mm256_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	983;"	d
_mm256_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	1038;"	d
_mm256_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	1039;"	d
_mm256_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	1094;"	d
_mm256_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	1095;"	d
_mm256_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	292;"	d
_mm256_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	293;"	d
_mm256_mask_permutexvar_epi32	simde/x86/avx512/permutexvar.h	363;"	d
_mm256_mask_permutexvar_epi32	simde/x86/avx512/permutexvar.h	364;"	d
_mm256_mask_permutexvar_epi64	simde/x86/avx512/permutexvar.h	417;"	d
_mm256_mask_permutexvar_epi64	simde/x86/avx512/permutexvar.h	418;"	d
_mm256_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	509;"	d
_mm256_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	510;"	d
_mm256_mask_permutexvar_pd	simde/x86/avx512/permutexvar.h	551;"	d
_mm256_mask_permutexvar_pd	simde/x86/avx512/permutexvar.h	552;"	d
_mm256_mask_permutexvar_ps	simde/x86/avx512/permutexvar.h	595;"	d
_mm256_mask_permutexvar_ps	simde/x86/avx512/permutexvar.h	596;"	d
_mm256_maskload_epi32	simde/x86/avx2.h	2814;"	d
_mm256_maskload_epi32	simde/x86/avx2.h	2815;"	d
_mm256_maskload_epi64	simde/x86/avx2.h	2865;"	d
_mm256_maskload_epi64	simde/x86/avx2.h	2866;"	d
_mm256_maskload_pd	simde/x86/avx.h	4008;"	d
_mm256_maskload_pd	simde/x86/avx.h	4009;"	d
_mm256_maskload_ps	simde/x86/avx.h	4059;"	d
_mm256_maskload_ps	simde/x86/avx.h	4060;"	d
_mm256_maskstore_epi32	simde/x86/avx2.h	2907;"	d
_mm256_maskstore_epi32	simde/x86/avx2.h	2908;"	d
_mm256_maskstore_epi64	simde/x86/avx2.h	2949;"	d
_mm256_maskstore_epi64	simde/x86/avx2.h	2950;"	d
_mm256_maskstore_pd	simde/x86/avx.h	4101;"	d
_mm256_maskstore_pd	simde/x86/avx.h	4102;"	d
_mm256_maskstore_ps	simde/x86/avx.h	4143;"	d
_mm256_maskstore_ps	simde/x86/avx.h	4144;"	d
_mm256_maskz_abs_epi64	simde/x86/avx512/abs.h	233;"	d
_mm256_maskz_abs_epi64	simde/x86/avx512/abs.h	234;"	d
_mm256_maskz_add_epi16	simde/x86/avx512/add.h	222;"	d
_mm256_maskz_add_epi16	simde/x86/avx512/add.h	223;"	d
_mm256_maskz_add_epi32	simde/x86/avx512/add.h	250;"	d
_mm256_maskz_add_epi32	simde/x86/avx512/add.h	251;"	d
_mm256_maskz_add_epi64	simde/x86/avx512/add.h	278;"	d
_mm256_maskz_add_epi64	simde/x86/avx512/add.h	279;"	d
_mm256_maskz_adds_epi16	simde/x86/avx512/adds.h	147;"	d
_mm256_maskz_adds_epi16	simde/x86/avx512/adds.h	148;"	d
_mm256_maskz_adds_epi8	simde/x86/avx512/adds.h	119;"	d
_mm256_maskz_adds_epi8	simde/x86/avx512/adds.h	120;"	d
_mm256_maskz_avg_epu16	simde/x86/avx512/avg.h	147;"	d
_mm256_maskz_avg_epu16	simde/x86/avx512/avg.h	148;"	d
_mm256_maskz_avg_epu8	simde/x86/avx512/avg.h	119;"	d
_mm256_maskz_avg_epu8	simde/x86/avx512/avg.h	120;"	d
_mm256_maskz_broadcast_f32x2	simde/x86/avx512/broadcast.h	94;"	d
_mm256_maskz_broadcast_f32x2	simde/x86/avx512/broadcast.h	95;"	d
_mm256_maskz_broadcast_f32x4	simde/x86/avx512/broadcast.h	325;"	d
_mm256_maskz_broadcast_f32x4	simde/x86/avx512/broadcast.h	326;"	d
_mm256_maskz_broadcast_f64x2	simde/x86/avx512/broadcast.h	383;"	d
_mm256_maskz_broadcast_f64x2	simde/x86/avx512/broadcast.h	384;"	d
_mm256_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	424;"	d
_mm256_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	425;"	d
_mm256_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	526;"	d
_mm256_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	527;"	d
_mm256_maskz_gf2p8mul_epi8	simde/x86/gfni.h	780;"	d
_mm256_maskz_gf2p8mul_epi8	simde/x86/gfni.h	781;"	d
_mm256_maskz_madd_epi16	simde/x86/avx512/madd.h	91;"	d
_mm256_maskz_madd_epi16	simde/x86/avx512/madd.h	92;"	d
_mm256_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	92;"	d
_mm256_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	93;"	d
_mm256_maskz_mov_epi16	simde/x86/avx512/mov.h	627;"	d
_mm256_maskz_mov_epi16	simde/x86/avx512/mov.h	628;"	d
_mm256_maskz_mov_epi32	simde/x86/avx512/mov.h	655;"	d
_mm256_maskz_mov_epi32	simde/x86/avx512/mov.h	656;"	d
_mm256_maskz_mov_epi64	simde/x86/avx512/mov.h	684;"	d
_mm256_maskz_mov_epi64	simde/x86/avx512/mov.h	685;"	d
_mm256_maskz_mov_epi8	simde/x86/avx512/mov.h	599;"	d
_mm256_maskz_mov_epi8	simde/x86/avx512/mov.h	600;"	d
_mm256_maskz_mov_pd	simde/x86/avx512/mov.h	698;"	d
_mm256_maskz_mov_pd	simde/x86/avx512/mov.h	699;"	d
_mm256_maskz_mov_ps	simde/x86/avx512/mov.h	712;"	d
_mm256_maskz_mov_ps	simde/x86/avx512/mov.h	713;"	d
_mm256_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	773;"	d
_mm256_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	774;"	d
_mm256_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	852;"	d
_mm256_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	853;"	d
_mm256_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	919;"	d
_mm256_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	920;"	d
_mm256_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1010;"	d
_mm256_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1011;"	d
_mm256_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	1066;"	d
_mm256_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	1067;"	d
_mm256_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	1122;"	d
_mm256_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	1123;"	d
_mm256_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	306;"	d
_mm256_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	307;"	d
_mm256_maskz_permutexvar_epi32	simde/x86/avx512/permutexvar.h	377;"	d
_mm256_maskz_permutexvar_epi32	simde/x86/avx512/permutexvar.h	378;"	d
_mm256_maskz_permutexvar_epi64	simde/x86/avx512/permutexvar.h	431;"	d
_mm256_maskz_permutexvar_epi64	simde/x86/avx512/permutexvar.h	432;"	d
_mm256_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	523;"	d
_mm256_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	524;"	d
_mm256_maskz_permutexvar_pd	simde/x86/avx512/permutexvar.h	565;"	d
_mm256_maskz_permutexvar_pd	simde/x86/avx512/permutexvar.h	566;"	d
_mm256_maskz_permutexvar_ps	simde/x86/avx512/permutexvar.h	609;"	d
_mm256_maskz_permutexvar_ps	simde/x86/avx512/permutexvar.h	610;"	d
_mm256_max_epi16	simde/x86/avx2.h	3094;"	d
_mm256_max_epi16	simde/x86/avx2.h	3095;"	d
_mm256_max_epi32	simde/x86/avx2.h	3123;"	d
_mm256_max_epi32	simde/x86/avx2.h	3124;"	d
_mm256_max_epi8	simde/x86/avx2.h	2978;"	d
_mm256_max_epi8	simde/x86/avx2.h	2979;"	d
_mm256_max_epu16	simde/x86/avx2.h	3036;"	d
_mm256_max_epu16	simde/x86/avx2.h	3037;"	d
_mm256_max_epu32	simde/x86/avx2.h	3065;"	d
_mm256_max_epu32	simde/x86/avx2.h	3066;"	d
_mm256_max_epu8	simde/x86/avx2.h	3007;"	d
_mm256_max_epu8	simde/x86/avx2.h	3008;"	d
_mm256_max_pd	simde/x86/avx.h	4259;"	d
_mm256_max_pd	simde/x86/avx.h	4260;"	d
_mm256_max_ps	simde/x86/avx.h	4230;"	d
_mm256_max_ps	simde/x86/avx.h	4231;"	d
_mm256_min_epi16	simde/x86/avx2.h	3181;"	d
_mm256_min_epi16	simde/x86/avx2.h	3182;"	d
_mm256_min_epi32	simde/x86/avx2.h	3210;"	d
_mm256_min_epi32	simde/x86/avx2.h	3211;"	d
_mm256_min_epi8	simde/x86/avx2.h	3152;"	d
_mm256_min_epi8	simde/x86/avx2.h	3153;"	d
_mm256_min_epu16	simde/x86/avx2.h	3268;"	d
_mm256_min_epu16	simde/x86/avx2.h	3269;"	d
_mm256_min_epu32	simde/x86/avx2.h	3297;"	d
_mm256_min_epu32	simde/x86/avx2.h	3298;"	d
_mm256_min_epu8	simde/x86/avx2.h	3239;"	d
_mm256_min_epu8	simde/x86/avx2.h	3240;"	d
_mm256_min_pd	simde/x86/avx.h	4201;"	d
_mm256_min_pd	simde/x86/avx.h	4202;"	d
_mm256_min_ps	simde/x86/avx.h	4172;"	d
_mm256_min_ps	simde/x86/avx.h	4173;"	d
_mm256_movedup_pd	simde/x86/avx.h	4286;"	d
_mm256_movedup_pd	simde/x86/avx.h	4287;"	d
_mm256_movehdup_ps	simde/x86/avx.h	4313;"	d
_mm256_movehdup_ps	simde/x86/avx.h	4314;"	d
_mm256_moveldup_ps	simde/x86/avx.h	4340;"	d
_mm256_moveldup_ps	simde/x86/avx.h	4341;"	d
_mm256_movemask_epi8	simde/x86/avx2.h	3326;"	d
_mm256_movemask_epi8	simde/x86/avx2.h	3327;"	d
_mm256_movemask_pd	simde/x86/avx.h	4384;"	d
_mm256_movemask_pd	simde/x86/avx.h	4385;"	d
_mm256_movemask_ps	simde/x86/avx.h	4362;"	d
_mm256_movemask_ps	simde/x86/avx.h	4363;"	d
_mm256_movepi16_mask	simde/x86/avx512/mov_mask.h	195;"	d
_mm256_movepi16_mask	simde/x86/avx512/mov_mask.h	196;"	d
_mm256_movepi32_mask	simde/x86/avx512/mov_mask.h	223;"	d
_mm256_movepi32_mask	simde/x86/avx512/mov_mask.h	224;"	d
_mm256_movepi64_mask	simde/x86/avx512/mov_mask.h	251;"	d
_mm256_movepi64_mask	simde/x86/avx512/mov_mask.h	252;"	d
_mm256_movepi8_mask	simde/x86/avx512/mov_mask.h	167;"	d
_mm256_movepi8_mask	simde/x86/avx512/mov_mask.h	168;"	d
_mm256_movm_epi16	simde/x86/avx512/movm.h	212;"	d
_mm256_movm_epi16	simde/x86/avx512/movm.h	213;"	d
_mm256_movm_epi32	simde/x86/avx512/movm.h	318;"	d
_mm256_movm_epi32	simde/x86/avx512/movm.h	319;"	d
_mm256_movm_epi64	simde/x86/avx512/movm.h	426;"	d
_mm256_movm_epi64	simde/x86/avx512/movm.h	427;"	d
_mm256_movm_epi8	simde/x86/avx512/movm.h	114;"	d
_mm256_movm_epi8	simde/x86/avx512/movm.h	115;"	d
_mm256_mpsadbw_epu8	simde/x86/avx2.h	3373;"	d
_mm256_mpsadbw_epu8	simde/x86/avx2.h	3374;"	d
_mm256_mul_epi32	simde/x86/avx2.h	3404;"	d
_mm256_mul_epu32	simde/x86/avx2.h	3432;"	d
_mm256_mul_pd	simde/x86/avx.h	4446;"	d
_mm256_mul_pd	simde/x86/avx.h	4447;"	d
_mm256_mul_ps	simde/x86/avx.h	4415;"	d
_mm256_mul_ps	simde/x86/avx.h	4416;"	d
_mm256_mulhi_epi16	simde/x86/avx2.h	3455;"	d
_mm256_mulhi_epu16	simde/x86/avx2.h	3478;"	d
_mm256_mulhrs_epi16	simde/x86/avx2.h	3501;"	d
_mm256_mullo_epi16	simde/x86/avx2.h	3524;"	d
_mm256_mullo_epi16	simde/x86/avx2.h	3525;"	d
_mm256_mullo_epi32	simde/x86/avx2.h	3548;"	d
_mm256_mullo_epi32	simde/x86/avx2.h	3549;"	d
_mm256_or_pd	simde/x86/avx.h	4508;"	d
_mm256_or_pd	simde/x86/avx.h	4509;"	d
_mm256_or_ps	simde/x86/avx.h	4477;"	d
_mm256_or_ps	simde/x86/avx.h	4478;"	d
_mm256_or_si256	simde/x86/avx2.h	3599;"	d
_mm256_or_si256	simde/x86/avx2.h	3600;"	d
_mm256_packs_epi16	simde/x86/avx2.h	3633;"	d
_mm256_packs_epi16	simde/x86/avx2.h	3634;"	d
_mm256_packs_epi32	simde/x86/avx2.h	3665;"	d
_mm256_packs_epi32	simde/x86/avx2.h	3666;"	d
_mm256_packus_epi16	simde/x86/avx2.h	3699;"	d
_mm256_packus_epi16	simde/x86/avx2.h	3700;"	d
_mm256_packus_epi32	simde/x86/avx2.h	3733;"	d
_mm256_packus_epi32	simde/x86/avx2.h	3734;"	d
_mm256_permute2f128_pd	simde/x86/avx.h	4741;"	d
_mm256_permute2f128_pd	simde/x86/avx.h	4742;"	d
_mm256_permute2f128_ps	simde/x86/avx.h	4719;"	d
_mm256_permute2f128_ps	simde/x86/avx.h	4720;"	d
_mm256_permute2f128_si256	simde/x86/avx.h	4763;"	d
_mm256_permute2f128_si256	simde/x86/avx.h	4764;"	d
_mm256_permute2x128_si256	simde/x86/avx2.h	3755;"	d
_mm256_permute2x128_si256	simde/x86/avx2.h	3756;"	d
_mm256_permute4x64_epi64	simde/x86/avx2.h	3778;"	d
_mm256_permute4x64_epi64	simde/x86/avx2.h	3779;"	d
_mm256_permute4x64_pd	simde/x86/avx2.h	3801;"	d
_mm256_permute4x64_pd	simde/x86/avx2.h	3802;"	d
_mm256_permute_pd	simde/x86/avx.h	4554;"	d
_mm256_permute_pd	simde/x86/avx.h	4555;"	d
_mm256_permute_ps	simde/x86/avx.h	4531;"	d
_mm256_permute_ps	simde/x86/avx.h	4532;"	d
_mm256_permutevar8x32_epi32	simde/x86/avx2.h	3825;"	d
_mm256_permutevar8x32_epi32	simde/x86/avx2.h	3826;"	d
_mm256_permutevar8x32_ps	simde/x86/avx2.h	3850;"	d
_mm256_permutevar8x32_ps	simde/x86/avx2.h	3851;"	d
_mm256_permutevar_pd	simde/x86/avx.h	4697;"	d
_mm256_permutevar_pd	simde/x86/avx.h	4698;"	d
_mm256_permutevar_ps	simde/x86/avx.h	4673;"	d
_mm256_permutevar_ps	simde/x86/avx.h	4674;"	d
_mm256_permutex2var_epi16	simde/x86/avx512/permutex2var.h	731;"	d
_mm256_permutex2var_epi16	simde/x86/avx512/permutex2var.h	732;"	d
_mm256_permutex2var_epi32	simde/x86/avx512/permutex2var.h	810;"	d
_mm256_permutex2var_epi32	simde/x86/avx512/permutex2var.h	811;"	d
_mm256_permutex2var_epi64	simde/x86/avx512/permutex2var.h	877;"	d
_mm256_permutex2var_epi64	simde/x86/avx512/permutex2var.h	878;"	d
_mm256_permutex2var_epi8	simde/x86/avx512/permutex2var.h	968;"	d
_mm256_permutex2var_epi8	simde/x86/avx512/permutex2var.h	969;"	d
_mm256_permutex2var_pd	simde/x86/avx512/permutex2var.h	1024;"	d
_mm256_permutex2var_pd	simde/x86/avx512/permutex2var.h	1025;"	d
_mm256_permutex2var_ps	simde/x86/avx512/permutex2var.h	1080;"	d
_mm256_permutex2var_ps	simde/x86/avx512/permutex2var.h	1081;"	d
_mm256_permutexvar_epi16	simde/x86/avx512/permutexvar.h	278;"	d
_mm256_permutexvar_epi16	simde/x86/avx512/permutexvar.h	279;"	d
_mm256_permutexvar_epi32	simde/x86/avx512/permutexvar.h	349;"	d
_mm256_permutexvar_epi32	simde/x86/avx512/permutexvar.h	350;"	d
_mm256_permutexvar_epi64	simde/x86/avx512/permutexvar.h	403;"	d
_mm256_permutexvar_epi64	simde/x86/avx512/permutexvar.h	404;"	d
_mm256_permutexvar_epi8	simde/x86/avx512/permutexvar.h	495;"	d
_mm256_permutexvar_epi8	simde/x86/avx512/permutexvar.h	496;"	d
_mm256_permutexvar_pd	simde/x86/avx512/permutexvar.h	537;"	d
_mm256_permutexvar_pd	simde/x86/avx512/permutexvar.h	538;"	d
_mm256_permutexvar_ps	simde/x86/avx512/permutexvar.h	581;"	d
_mm256_permutexvar_ps	simde/x86/avx512/permutexvar.h	582;"	d
_mm256_pow_pd	simde/x86/svml.h	8716;"	d
_mm256_pow_pd	simde/x86/svml.h	8717;"	d
_mm256_pow_ps	simde/x86/svml.h	8689;"	d
_mm256_pow_ps	simde/x86/svml.h	8690;"	d
_mm256_rcp_ps	simde/x86/avx.h	4791;"	d
_mm256_rcp_ps	simde/x86/avx.h	4792;"	d
_mm256_rem_epi16	simde/x86/svml.h	9204;"	d
_mm256_rem_epi16	simde/x86/svml.h	9205;"	d
_mm256_rem_epi32	simde/x86/svml.h	9239;"	d
_mm256_rem_epi32	simde/x86/svml.h	9240;"	d
_mm256_rem_epi64	simde/x86/svml.h	9275;"	d
_mm256_rem_epi64	simde/x86/svml.h	9276;"	d
_mm256_rem_epi8	simde/x86/svml.h	9170;"	d
_mm256_rem_epi8	simde/x86/svml.h	9171;"	d
_mm256_rem_epu16	simde/x86/svml.h	9343;"	d
_mm256_rem_epu16	simde/x86/svml.h	9344;"	d
_mm256_rem_epu32	simde/x86/svml.h	9378;"	d
_mm256_rem_epu32	simde/x86/svml.h	9379;"	d
_mm256_rem_epu64	simde/x86/svml.h	9414;"	d
_mm256_rem_epu64	simde/x86/svml.h	9415;"	d
_mm256_rem_epu8	simde/x86/svml.h	9309;"	d
_mm256_rem_epu8	simde/x86/svml.h	9310;"	d
_mm256_round_pd	simde/x86/avx.h	2188;"	d
_mm256_round_pd	simde/x86/avx.h	2189;"	d
_mm256_round_ps	simde/x86/avx.h	2126;"	d
_mm256_round_ps	simde/x86/avx.h	2127;"	d
_mm256_rsqrt_ps	simde/x86/avx.h	4818;"	d
_mm256_rsqrt_ps	simde/x86/avx.h	4819;"	d
_mm256_sad_epu8	simde/x86/avx2.h	3884;"	d
_mm256_sad_epu8	simde/x86/avx2.h	3885;"	d
_mm256_set1_epi16	simde/x86/avx.h	1141;"	d
_mm256_set1_epi16	simde/x86/avx.h	1142;"	d
_mm256_set1_epi32	simde/x86/avx.h	1167;"	d
_mm256_set1_epi32	simde/x86/avx.h	1168;"	d
_mm256_set1_epi64x	simde/x86/avx.h	1193;"	d
_mm256_set1_epi64x	simde/x86/avx.h	1194;"	d
_mm256_set1_epi8	simde/x86/avx.h	1115;"	d
_mm256_set1_epi8	simde/x86/avx.h	1116;"	d
_mm256_set1_pd	simde/x86/avx.h	1245;"	d
_mm256_set1_pd	simde/x86/avx.h	1246;"	d
_mm256_set1_ps	simde/x86/avx.h	1219;"	d
_mm256_set1_ps	simde/x86/avx.h	1220;"	d
_mm256_set_epi16	simde/x86/avx.h	763;"	d
_mm256_set_epi16	simde/x86/avx.h	764;"	d
_mm256_set_epi32	simde/x86/avx.h	795;"	d
_mm256_set_epi32	simde/x86/avx.h	796;"	d
_mm256_set_epi64x	simde/x86/avx.h	822;"	d
_mm256_set_epi64x	simde/x86/avx.h	823;"	d
_mm256_set_epi8	simde/x86/avx.h	720;"	d
_mm256_set_epi8	simde/x86/avx.h	721;"	d
_mm256_set_m128	simde/x86/avx.h	1031;"	d
_mm256_set_m128	simde/x86/avx.h	1032;"	d
_mm256_set_m128d	simde/x86/avx.h	1060;"	d
_mm256_set_m128d	simde/x86/avx.h	1061;"	d
_mm256_set_m128i	simde/x86/avx.h	1089;"	d
_mm256_set_m128i	simde/x86/avx.h	1090;"	d
_mm256_set_pd	simde/x86/avx.h	998;"	d
_mm256_set_pd	simde/x86/avx.h	999;"	d
_mm256_set_ps	simde/x86/avx.h	971;"	d
_mm256_set_ps	simde/x86/avx.h	972;"	d
_mm256_setr_epi16	simde/x86/avx.h	4865;"	d
_mm256_setr_epi16	simde/x86/avx.h	4866;"	d
_mm256_setr_epi32	simde/x86/avx.h	4881;"	d
_mm256_setr_epi32	simde/x86/avx.h	4882;"	d
_mm256_setr_epi64x	simde/x86/avx.h	4896;"	d
_mm256_setr_epi64x	simde/x86/avx.h	4897;"	d
_mm256_setr_epi8	simde/x86/avx.h	4844;"	d
_mm256_setr_epi8	simde/x86/avx.h	4845;"	d
_mm256_setr_m128	simde/x86/avx.h	4945;"	d
_mm256_setr_m128	simde/x86/avx.h	4946;"	d
_mm256_setr_m128d	simde/x86/avx.h	4962;"	d
_mm256_setr_m128d	simde/x86/avx.h	4963;"	d
_mm256_setr_m128i	simde/x86/avx.h	4979;"	d
_mm256_setr_m128i	simde/x86/avx.h	4980;"	d
_mm256_setr_pd	simde/x86/avx.h	4928;"	d
_mm256_setr_pd	simde/x86/avx.h	4929;"	d
_mm256_setr_ps	simde/x86/avx.h	4913;"	d
_mm256_setr_ps	simde/x86/avx.h	4914;"	d
_mm256_setzero_pd	simde/x86/avx.h	503;"	d
_mm256_setzero_pd	simde/x86/avx.h	504;"	d
_mm256_setzero_ps	simde/x86/avx.h	489;"	d
_mm256_setzero_ps	simde/x86/avx.h	490;"	d
_mm256_setzero_si256	simde/x86/avx.h	475;"	d
_mm256_setzero_si256	simde/x86/avx.h	476;"	d
_mm256_shuffle_epi32	simde/x86/avx2.h	3959;"	d
_mm256_shuffle_epi32	simde/x86/avx2.h	3960;"	d
_mm256_shuffle_epi8	simde/x86/avx2.h	3914;"	d
_mm256_shuffle_epi8	simde/x86/avx2.h	3915;"	d
_mm256_shuffle_i32x4	simde/x86/avx512/shuffle.h	115;"	d
_mm256_shuffle_i32x4	simde/x86/avx512/shuffle.h	116;"	d
_mm256_shuffle_pd	simde/x86/avx.h	5060;"	d
_mm256_shuffle_pd	simde/x86/avx.h	5061;"	d
_mm256_shuffle_ps	simde/x86/avx.h	5024;"	d
_mm256_shuffle_ps	simde/x86/avx.h	5025;"	d
_mm256_shufflehi_epi16	simde/x86/avx2.h	3995;"	d
_mm256_shufflehi_epi16	simde/x86/avx2.h	3996;"	d
_mm256_shufflelo_epi16	simde/x86/avx2.h	4030;"	d
_mm256_shufflelo_epi16	simde/x86/avx2.h	4031;"	d
_mm256_sign_epi16	simde/x86/avx2.h	4078;"	d
_mm256_sign_epi16	simde/x86/avx2.h	4079;"	d
_mm256_sign_epi32	simde/x86/avx2.h	4102;"	d
_mm256_sign_epi32	simde/x86/avx2.h	4103;"	d
_mm256_sign_epi8	simde/x86/avx2.h	4054;"	d
_mm256_sign_epi8	simde/x86/avx2.h	4055;"	d
_mm256_sin_pd	simde/x86/svml.h	9977;"	d
_mm256_sin_pd	simde/x86/svml.h	9978;"	d
_mm256_sin_ps	simde/x86/svml.h	9941;"	d
_mm256_sin_ps	simde/x86/svml.h	9942;"	d
_mm256_sincos_pd	simde/x86/svml.h	10195;"	d
_mm256_sincos_pd	simde/x86/svml.h	10196;"	d
_mm256_sincos_ps	simde/x86/svml.h	10165;"	d
_mm256_sincos_ps	simde/x86/svml.h	10166;"	d
_mm256_sind_pd	simde/x86/svml.h	10417;"	d
_mm256_sind_pd	simde/x86/svml.h	10418;"	d
_mm256_sind_ps	simde/x86/svml.h	10382;"	d
_mm256_sind_ps	simde/x86/svml.h	10383;"	d
_mm256_sinh_pd	simde/x86/svml.h	10629;"	d
_mm256_sinh_pd	simde/x86/svml.h	10630;"	d
_mm256_sinh_ps	simde/x86/svml.h	10597;"	d
_mm256_sinh_ps	simde/x86/svml.h	10598;"	d
_mm256_sll_epi16	simde/x86/avx2.h	4141;"	d
_mm256_sll_epi16	simde/x86/avx2.h	4142;"	d
_mm256_sll_epi32	simde/x86/avx2.h	4180;"	d
_mm256_sll_epi32	simde/x86/avx2.h	4181;"	d
_mm256_sll_epi64	simde/x86/avx2.h	4219;"	d
_mm256_sll_epi64	simde/x86/avx2.h	4220;"	d
_mm256_slli_epi16	simde/x86/avx2.h	4260;"	d
_mm256_slli_epi16	simde/x86/avx2.h	4261;"	d
_mm256_slli_epi32	simde/x86/avx2.h	4297;"	d
_mm256_slli_epi32	simde/x86/avx2.h	4298;"	d
_mm256_slli_epi64	simde/x86/avx2.h	4329;"	d
_mm256_slli_epi64	simde/x86/avx2.h	4330;"	d
_mm256_slli_si256	simde/x86/avx2.h	4365;"	d
_mm256_slli_si256	simde/x86/avx2.h	4366;"	d
_mm256_sllv_epi32	simde/x86/avx2.h	4425;"	d
_mm256_sllv_epi32	simde/x86/avx2.h	4426;"	d
_mm256_sllv_epi64	simde/x86/avx2.h	4485;"	d
_mm256_sllv_epi64	simde/x86/avx2.h	4486;"	d
_mm256_sqrt_pd	simde/x86/avx.h	5120;"	d
_mm256_sqrt_pd	simde/x86/avx.h	5121;"	d
_mm256_sqrt_ps	simde/x86/avx.h	5090;"	d
_mm256_sqrt_ps	simde/x86/avx.h	5091;"	d
_mm256_sra_epi16	simde/x86/avx2.h	4524;"	d
_mm256_sra_epi16	simde/x86/avx2.h	4525;"	d
_mm256_sra_epi32	simde/x86/avx2.h	4562;"	d
_mm256_sra_epi32	simde/x86/avx2.h	4563;"	d
_mm256_srai_epi16	simde/x86/avx2.h	4597;"	d
_mm256_srai_epi16	simde/x86/avx2.h	4598;"	d
_mm256_srai_epi32	simde/x86/avx2.h	4632;"	d
_mm256_srai_epi32	simde/x86/avx2.h	4633;"	d
_mm256_srav_epi32	simde/x86/avx2.h	4693;"	d
_mm256_srav_epi32	simde/x86/avx2.h	4694;"	d
_mm256_srl_epi16	simde/x86/avx2.h	4730;"	d
_mm256_srl_epi16	simde/x86/avx2.h	4731;"	d
_mm256_srl_epi32	simde/x86/avx2.h	4767;"	d
_mm256_srl_epi32	simde/x86/avx2.h	4768;"	d
_mm256_srl_epi64	simde/x86/avx2.h	4804;"	d
_mm256_srl_epi64	simde/x86/avx2.h	4805;"	d
_mm256_srli_epi16	simde/x86/avx2.h	4850;"	d
_mm256_srli_epi16	simde/x86/avx2.h	4851;"	d
_mm256_srli_epi32	simde/x86/avx2.h	4887;"	d
_mm256_srli_epi32	simde/x86/avx2.h	4888;"	d
_mm256_srli_epi64	simde/x86/avx2.h	4919;"	d
_mm256_srli_epi64	simde/x86/avx2.h	4920;"	d
_mm256_srli_si256	simde/x86/avx2.h	4955;"	d
_mm256_srli_si256	simde/x86/avx2.h	4956;"	d
_mm256_srlv_epi16	simde/x86/avx512/srlv.h	179;"	d
_mm256_srlv_epi16	simde/x86/avx512/srlv.h	180;"	d
_mm256_srlv_epi32	simde/x86/avx2.h	5009;"	d
_mm256_srlv_epi32	simde/x86/avx2.h	5010;"	d
_mm256_srlv_epi64	simde/x86/avx2.h	5063;"	d
_mm256_srlv_epi64	simde/x86/avx2.h	5064;"	d
_mm256_store_pd	simde/x86/avx.h	5148;"	d
_mm256_store_pd	simde/x86/avx.h	5149;"	d
_mm256_store_ps	simde/x86/avx.h	5134;"	d
_mm256_store_ps	simde/x86/avx.h	5135;"	d
_mm256_store_si256	simde/x86/avx.h	5162;"	d
_mm256_store_si256	simde/x86/avx.h	5163;"	d
_mm256_storeu2_m128	simde/x86/avx.h	5219;"	d
_mm256_storeu2_m128	simde/x86/avx.h	5220;"	d
_mm256_storeu2_m128d	simde/x86/avx.h	5234;"	d
_mm256_storeu2_m128d	simde/x86/avx.h	5235;"	d
_mm256_storeu2_m128i	simde/x86/avx.h	5249;"	d
_mm256_storeu2_m128i	simde/x86/avx.h	5250;"	d
_mm256_storeu_pd	simde/x86/avx.h	5190;"	d
_mm256_storeu_pd	simde/x86/avx.h	5191;"	d
_mm256_storeu_ps	simde/x86/avx.h	5176;"	d
_mm256_storeu_ps	simde/x86/avx.h	5177;"	d
_mm256_storeu_si256	simde/x86/avx.h	5204;"	d
_mm256_storeu_si256	simde/x86/avx.h	5205;"	d
_mm256_stream_load_si256	simde/x86/avx2.h	5079;"	d
_mm256_stream_pd	simde/x86/avx.h	5277;"	d
_mm256_stream_pd	simde/x86/avx.h	5278;"	d
_mm256_stream_ps	simde/x86/avx.h	5263;"	d
_mm256_stream_ps	simde/x86/avx.h	5264;"	d
_mm256_stream_si256	simde/x86/avx.h	5291;"	d
_mm256_stream_si256	simde/x86/avx.h	5292;"	d
_mm256_sub_epi16	simde/x86/avx2.h	5140;"	d
_mm256_sub_epi16	simde/x86/avx2.h	5141;"	d
_mm256_sub_epi32	simde/x86/avx2.h	5185;"	d
_mm256_sub_epi32	simde/x86/avx2.h	5186;"	d
_mm256_sub_epi64	simde/x86/avx2.h	5230;"	d
_mm256_sub_epi64	simde/x86/avx2.h	5231;"	d
_mm256_sub_epi8	simde/x86/avx2.h	5109;"	d
_mm256_sub_epi8	simde/x86/avx2.h	5110;"	d
_mm256_sub_pd	simde/x86/avx.h	5367;"	d
_mm256_sub_pd	simde/x86/avx.h	5368;"	d
_mm256_sub_ps	simde/x86/avx.h	5322;"	d
_mm256_sub_ps	simde/x86/avx.h	5323;"	d
_mm256_subs_epi16	simde/x86/avx2.h	5311;"	d
_mm256_subs_epi16	simde/x86/avx2.h	5312;"	d
_mm256_subs_epi8	simde/x86/avx2.h	5282;"	d
_mm256_subs_epi8	simde/x86/avx2.h	5283;"	d
_mm256_subs_epu16	simde/x86/avx2.h	5383;"	d
_mm256_subs_epu16	simde/x86/avx2.h	5384;"	d
_mm256_subs_epu8	simde/x86/avx2.h	5354;"	d
_mm256_subs_epu8	simde/x86/avx2.h	5355;"	d
_mm256_svml_ceil_pd	simde/x86/svml.h	10783;"	d
_mm256_svml_ceil_pd	simde/x86/svml.h	10784;"	d
_mm256_svml_ceil_ps	simde/x86/svml.h	10767;"	d
_mm256_svml_ceil_ps	simde/x86/svml.h	10768;"	d
_mm256_svml_floor_pd	simde/x86/svml.h	10937;"	d
_mm256_svml_floor_pd	simde/x86/svml.h	10938;"	d
_mm256_svml_floor_ps	simde/x86/svml.h	10921;"	d
_mm256_svml_floor_ps	simde/x86/svml.h	10922;"	d
_mm256_svml_round_pd	simde/x86/svml.h	11140;"	d
_mm256_svml_round_pd	simde/x86/svml.h	11141;"	d
_mm256_svml_round_ps	simde/x86/svml.h	11108;"	d
_mm256_svml_round_ps	simde/x86/svml.h	11109;"	d
_mm256_svml_sqrt_pd	simde/x86/svml.h	11249;"	d
_mm256_svml_sqrt_pd	simde/x86/svml.h	11250;"	d
_mm256_svml_sqrt_ps	simde/x86/svml.h	11233;"	d
_mm256_svml_sqrt_ps	simde/x86/svml.h	11234;"	d
_mm256_tan_pd	simde/x86/svml.h	11410;"	d
_mm256_tan_pd	simde/x86/svml.h	11411;"	d
_mm256_tan_ps	simde/x86/svml.h	11374;"	d
_mm256_tan_ps	simde/x86/svml.h	11375;"	d
_mm256_tand_pd	simde/x86/svml.h	11636;"	d
_mm256_tand_pd	simde/x86/svml.h	11637;"	d
_mm256_tand_ps	simde/x86/svml.h	11601;"	d
_mm256_tand_ps	simde/x86/svml.h	11602;"	d
_mm256_tanh_pd	simde/x86/svml.h	11847;"	d
_mm256_tanh_pd	simde/x86/svml.h	11848;"	d
_mm256_tanh_ps	simde/x86/svml.h	11815;"	d
_mm256_tanh_ps	simde/x86/svml.h	11816;"	d
_mm256_testc_pd	simde/x86/avx.h	5857;"	d
_mm256_testc_pd	simde/x86/avx.h	5858;"	d
_mm256_testc_ps	simde/x86/avx.h	5833;"	d
_mm256_testc_ps	simde/x86/avx.h	5834;"	d
_mm256_testc_si256	simde/x86/avx.h	5881;"	d
_mm256_testc_si256	simde/x86/avx.h	5882;"	d
_mm256_testnzc_pd	simde/x86/avx.h	6139;"	d
_mm256_testnzc_pd	simde/x86/avx.h	6140;"	d
_mm256_testnzc_ps	simde/x86/avx.h	6113;"	d
_mm256_testnzc_ps	simde/x86/avx.h	6114;"	d
_mm256_testnzc_si256	simde/x86/avx.h	6163;"	d
_mm256_testnzc_si256	simde/x86/avx.h	6164;"	d
_mm256_testz_pd	simde/x86/avx.h	5989;"	d
_mm256_testz_pd	simde/x86/avx.h	5990;"	d
_mm256_testz_ps	simde/x86/avx.h	5965;"	d
_mm256_testz_ps	simde/x86/avx.h	5966;"	d
_mm256_testz_si256	simde/x86/avx.h	6019;"	d
_mm256_testz_si256	simde/x86/avx.h	6020;"	d
_mm256_trunc_pd	simde/x86/svml.h	12001;"	d
_mm256_trunc_pd	simde/x86/svml.h	12002;"	d
_mm256_trunc_ps	simde/x86/svml.h	11985;"	d
_mm256_trunc_ps	simde/x86/svml.h	11986;"	d
_mm256_udiv_epi32	simde/x86/svml.h	3167;"	d
_mm256_udiv_epi32	simde/x86/svml.h	3168;"	d
_mm256_udivrem_epi32	simde/x86/svml.h	12129;"	d
_mm256_udivrem_epi32	simde/x86/svml.h	12130;"	d
_mm256_undefined_pd	simde/x86/avx.h	5428;"	d
_mm256_undefined_pd	simde/x86/avx.h	5429;"	d
_mm256_undefined_ps	simde/x86/avx.h	5407;"	d
_mm256_undefined_ps	simde/x86/avx.h	5408;"	d
_mm256_undefined_si256	simde/x86/avx.h	5448;"	d
_mm256_undefined_si256	simde/x86/avx.h	5449;"	d
_mm256_unpackhi_epi16	simde/x86/avx2.h	5568;"	d
_mm256_unpackhi_epi16	simde/x86/avx2.h	5569;"	d
_mm256_unpackhi_epi32	simde/x86/avx2.h	5595;"	d
_mm256_unpackhi_epi32	simde/x86/avx2.h	5596;"	d
_mm256_unpackhi_epi64	simde/x86/avx2.h	5621;"	d
_mm256_unpackhi_epi64	simde/x86/avx2.h	5622;"	d
_mm256_unpackhi_epi8	simde/x86/avx2.h	5540;"	d
_mm256_unpackhi_epi8	simde/x86/avx2.h	5541;"	d
_mm256_unpackhi_pd	simde/x86/avx.h	5632;"	d
_mm256_unpackhi_pd	simde/x86/avx.h	5633;"	d
_mm256_unpackhi_ps	simde/x86/avx.h	5604;"	d
_mm256_unpackhi_ps	simde/x86/avx.h	5605;"	d
_mm256_unpacklo_epi16	simde/x86/avx2.h	5457;"	d
_mm256_unpacklo_epi16	simde/x86/avx2.h	5458;"	d
_mm256_unpacklo_epi32	simde/x86/avx2.h	5484;"	d
_mm256_unpacklo_epi32	simde/x86/avx2.h	5485;"	d
_mm256_unpacklo_epi64	simde/x86/avx2.h	5510;"	d
_mm256_unpacklo_epi64	simde/x86/avx2.h	5511;"	d
_mm256_unpacklo_epi8	simde/x86/avx2.h	5430;"	d
_mm256_unpacklo_epi8	simde/x86/avx2.h	5431;"	d
_mm256_unpacklo_pd	simde/x86/avx.h	5692;"	d
_mm256_unpacklo_pd	simde/x86/avx.h	5693;"	d
_mm256_unpacklo_ps	simde/x86/avx.h	5664;"	d
_mm256_unpacklo_ps	simde/x86/avx.h	5665;"	d
_mm256_urem_epi32	simde/x86/svml.h	9380;"	d
_mm256_urem_epi32	simde/x86/svml.h	9381;"	d
_mm256_xor_pd	simde/x86/avx.h	5514;"	d
_mm256_xor_pd	simde/x86/avx.h	5515;"	d
_mm256_xor_ps	simde/x86/avx.h	5483;"	d
_mm256_xor_ps	simde/x86/avx.h	5484;"	d
_mm256_xor_si256	simde/x86/avx2.h	5652;"	d
_mm256_xor_si256	simde/x86/avx2.h	5653;"	d
_mm256_zextpd128_pd256	simde/x86/avx.h	5730;"	d
_mm256_zextpd128_pd256	simde/x86/avx.h	5731;"	d
_mm256_zextps128_ps256	simde/x86/avx.h	5711;"	d
_mm256_zextps128_ps256	simde/x86/avx.h	5712;"	d
_mm256_zextsi128_si256	simde/x86/avx.h	5749;"	d
_mm256_zextsi128_si256	simde/x86/avx.h	5750;"	d
_mm512_2intersect_epi32	simde/x86/avx512/2intersect.h	208;"	d
_mm512_2intersect_epi32	simde/x86/avx512/2intersect.h	209;"	d
_mm512_2intersect_epi64	simde/x86/avx512/2intersect.h	243;"	d
_mm512_2intersect_epi64	simde/x86/avx512/2intersect.h	244;"	d
_mm512_abs_epi16	simde/x86/avx512/abs.h	319;"	d
_mm512_abs_epi16	simde/x86/avx512/abs.h	320;"	d
_mm512_abs_epi32	simde/x86/avx512/abs.h	376;"	d
_mm512_abs_epi32	simde/x86/avx512/abs.h	377;"	d
_mm512_abs_epi64	simde/x86/avx512/abs.h	433;"	d
_mm512_abs_epi64	simde/x86/avx512/abs.h	434;"	d
_mm512_abs_epi8	simde/x86/avx512/abs.h	262;"	d
_mm512_abs_epi8	simde/x86/avx512/abs.h	263;"	d
_mm512_abs_pd	simde/x86/avx512/abs.h	541;"	d
_mm512_abs_pd	simde/x86/avx512/abs.h	542;"	d
_mm512_abs_ps	simde/x86/avx512/abs.h	494;"	d
_mm512_abs_ps	simde/x86/avx512/abs.h	495;"	d
_mm512_acos_pd	simde/x86/svml.h	257;"	d
_mm512_acos_pd	simde/x86/svml.h	258;"	d
_mm512_acos_ps	simde/x86/svml.h	222;"	d
_mm512_acos_ps	simde/x86/svml.h	223;"	d
_mm512_acosh_pd	simde/x86/svml.h	460;"	d
_mm512_acosh_pd	simde/x86/svml.h	461;"	d
_mm512_acosh_ps	simde/x86/svml.h	429;"	d
_mm512_acosh_ps	simde/x86/svml.h	430;"	d
_mm512_add_epi16	simde/x86/avx512/add.h	362;"	d
_mm512_add_epi16	simde/x86/avx512/add.h	363;"	d
_mm512_add_epi32	simde/x86/avx512/add.h	434;"	d
_mm512_add_epi32	simde/x86/avx512/add.h	435;"	d
_mm512_add_epi64	simde/x86/avx512/add.h	494;"	d
_mm512_add_epi64	simde/x86/avx512/add.h	495;"	d
_mm512_add_epi8	simde/x86/avx512/add.h	306;"	d
_mm512_add_epi8	simde/x86/avx512/add.h	307;"	d
_mm512_add_pd	simde/x86/avx512/add.h	606;"	d
_mm512_add_pd	simde/x86/avx512/add.h	607;"	d
_mm512_add_ps	simde/x86/avx512/add.h	550;"	d
_mm512_add_ps	simde/x86/avx512/add.h	551;"	d
_mm512_adds_epi16	simde/x86/avx512/adds.h	237;"	d
_mm512_adds_epi16	simde/x86/avx512/adds.h	238;"	d
_mm512_adds_epi8	simde/x86/avx512/adds.h	178;"	d
_mm512_adds_epi8	simde/x86/avx512/adds.h	179;"	d
_mm512_adds_epu16	simde/x86/avx512/adds.h	355;"	d
_mm512_adds_epu16	simde/x86/avx512/adds.h	356;"	d
_mm512_adds_epu8	simde/x86/avx512/adds.h	296;"	d
_mm512_adds_epu8	simde/x86/avx512/adds.h	297;"	d
_mm512_and_epi32	simde/x86/avx512/and.h	183;"	d
_mm512_and_epi32	simde/x86/avx512/and.h	184;"	d
_mm512_and_epi64	simde/x86/avx512/and.h	239;"	d
_mm512_and_epi64	simde/x86/avx512/and.h	240;"	d
_mm512_and_pd	simde/x86/avx512/and.h	68;"	d
_mm512_and_pd	simde/x86/avx512/and.h	69;"	d
_mm512_and_ps	simde/x86/avx512/and.h	100;"	d
_mm512_and_ps	simde/x86/avx512/and.h	99;"	d
_mm512_and_si512	simde/x86/avx512/and.h	298;"	d
_mm512_and_si512	simde/x86/avx512/and.h	299;"	d
_mm512_andnot_epi32	simde/x86/avx512/andnot.h	128;"	d
_mm512_andnot_epi32	simde/x86/avx512/andnot.h	129;"	d
_mm512_andnot_epi64	simde/x86/avx512/andnot.h	130;"	d
_mm512_andnot_epi64	simde/x86/avx512/andnot.h	131;"	d
_mm512_andnot_pd	simde/x86/avx512/andnot.h	75;"	d
_mm512_andnot_pd	simde/x86/avx512/andnot.h	76;"	d
_mm512_andnot_ps	simde/x86/avx512/andnot.h	45;"	d
_mm512_andnot_ps	simde/x86/avx512/andnot.h	46;"	d
_mm512_andnot_si512	simde/x86/avx512/andnot.h	126;"	d
_mm512_andnot_si512	simde/x86/avx512/andnot.h	127;"	d
_mm512_asin_pd	simde/x86/svml.h	687;"	d
_mm512_asin_pd	simde/x86/svml.h	688;"	d
_mm512_asin_ps	simde/x86/svml.h	652;"	d
_mm512_asin_ps	simde/x86/svml.h	653;"	d
_mm512_asinh_pd	simde/x86/svml.h	890;"	d
_mm512_asinh_pd	simde/x86/svml.h	891;"	d
_mm512_asinh_ps	simde/x86/svml.h	859;"	d
_mm512_asinh_ps	simde/x86/svml.h	860;"	d
_mm512_atan2_pd	simde/x86/svml.h	1350;"	d
_mm512_atan2_pd	simde/x86/svml.h	1351;"	d
_mm512_atan2_ps	simde/x86/svml.h	1314;"	d
_mm512_atan2_ps	simde/x86/svml.h	1315;"	d
_mm512_atan_pd	simde/x86/svml.h	1117;"	d
_mm512_atan_pd	simde/x86/svml.h	1118;"	d
_mm512_atan_ps	simde/x86/svml.h	1082;"	d
_mm512_atan_ps	simde/x86/svml.h	1083;"	d
_mm512_atanh_pd	simde/x86/svml.h	1553;"	d
_mm512_atanh_pd	simde/x86/svml.h	1554;"	d
_mm512_atanh_ps	simde/x86/svml.h	1522;"	d
_mm512_atanh_ps	simde/x86/svml.h	1523;"	d
_mm512_avg_epu16	simde/x86/avx512/avg.h	223;"	d
_mm512_avg_epu16	simde/x86/avx512/avg.h	224;"	d
_mm512_avg_epu8	simde/x86/avx512/avg.h	171;"	d
_mm512_avg_epu8	simde/x86/avx512/avg.h	172;"	d
_mm512_broadcast_f32x2	simde/x86/avx512/broadcast.h	121;"	d
_mm512_broadcast_f32x2	simde/x86/avx512/broadcast.h	122;"	d
_mm512_broadcast_f32x4	simde/x86/avx512/broadcast.h	408;"	d
_mm512_broadcast_f32x4	simde/x86/avx512/broadcast.h	409;"	d
_mm512_broadcast_f32x8	simde/x86/avx512/broadcast.h	182;"	d
_mm512_broadcast_f32x8	simde/x86/avx512/broadcast.h	183;"	d
_mm512_broadcast_f64x2	simde/x86/avx512/broadcast.h	237;"	d
_mm512_broadcast_f64x2	simde/x86/avx512/broadcast.h	238;"	d
_mm512_broadcast_f64x4	simde/x86/avx512/broadcast.h	457;"	d
_mm512_broadcast_f64x4	simde/x86/avx512/broadcast.h	458;"	d
_mm512_broadcast_i32x4	simde/x86/avx512/broadcast.h	512;"	d
_mm512_broadcast_i32x4	simde/x86/avx512/broadcast.h	513;"	d
_mm512_broadcast_i64x4	simde/x86/avx512/broadcast.h	561;"	d
_mm512_broadcast_i64x4	simde/x86/avx512/broadcast.h	562;"	d
_mm512_broadcastb_epi8	simde/x86/avx512/broadcast.h	847;"	d
_mm512_broadcastb_epi8	simde/x86/avx512/broadcast.h	848;"	d
_mm512_broadcastd_epi32	simde/x86/avx512/broadcast.h	611;"	d
_mm512_broadcastd_epi32	simde/x86/avx512/broadcast.h	612;"	d
_mm512_broadcastq_epi64	simde/x86/avx512/broadcast.h	661;"	d
_mm512_broadcastq_epi64	simde/x86/avx512/broadcast.h	662;"	d
_mm512_broadcastsd_pd	simde/x86/avx512/broadcast.h	783;"	d
_mm512_broadcastsd_pd	simde/x86/avx512/broadcast.h	784;"	d
_mm512_broadcastss_ps	simde/x86/avx512/broadcast.h	711;"	d
_mm512_broadcastss_ps	simde/x86/avx512/broadcast.h	712;"	d
_mm512_broadcastw_epi16	simde/x86/avx512/broadcast.h	890;"	d
_mm512_broadcastw_epi16	simde/x86/avx512/broadcast.h	891;"	d
_mm512_castpd128_pd512	simde/x86/avx512/cast.h	147;"	d
_mm512_castpd128_pd512	simde/x86/avx512/cast.h	148;"	d
_mm512_castpd256_pd512	simde/x86/avx512/cast.h	163;"	d
_mm512_castpd256_pd512	simde/x86/avx512/cast.h	164;"	d
_mm512_castpd512_pd128	simde/x86/avx512/cast.h	178;"	d
_mm512_castpd512_pd128	simde/x86/avx512/cast.h	179;"	d
_mm512_castpd512_pd256	simde/x86/avx512/cast.h	193;"	d
_mm512_castpd512_pd256	simde/x86/avx512/cast.h	194;"	d
_mm512_castpd_ps	simde/x86/avx512/cast.h	51;"	d
_mm512_castpd_ps	simde/x86/avx512/cast.h	52;"	d
_mm512_castpd_si512	simde/x86/avx512/cast.h	67;"	d
_mm512_castpd_si512	simde/x86/avx512/cast.h	68;"	d
_mm512_castps128_ps512	simde/x86/avx512/cast.h	209;"	d
_mm512_castps128_ps512	simde/x86/avx512/cast.h	210;"	d
_mm512_castps256_ps512	simde/x86/avx512/cast.h	225;"	d
_mm512_castps256_ps512	simde/x86/avx512/cast.h	226;"	d
_mm512_castps512_ps128	simde/x86/avx512/cast.h	240;"	d
_mm512_castps512_ps128	simde/x86/avx512/cast.h	241;"	d
_mm512_castps512_ps256	simde/x86/avx512/cast.h	255;"	d
_mm512_castps512_ps256	simde/x86/avx512/cast.h	256;"	d
_mm512_castps_pd	simde/x86/avx512/cast.h	83;"	d
_mm512_castps_pd	simde/x86/avx512/cast.h	84;"	d
_mm512_castps_si512	simde/x86/avx512/cast.h	100;"	d
_mm512_castps_si512	simde/x86/avx512/cast.h	99;"	d
_mm512_castsi128_si512	simde/x86/avx512/cast.h	271;"	d
_mm512_castsi128_si512	simde/x86/avx512/cast.h	272;"	d
_mm512_castsi256_si512	simde/x86/avx512/cast.h	287;"	d
_mm512_castsi256_si512	simde/x86/avx512/cast.h	288;"	d
_mm512_castsi512_pd	simde/x86/avx512/cast.h	131;"	d
_mm512_castsi512_pd	simde/x86/avx512/cast.h	132;"	d
_mm512_castsi512_ps	simde/x86/avx512/cast.h	115;"	d
_mm512_castsi512_ps	simde/x86/avx512/cast.h	116;"	d
_mm512_castsi512_si128	simde/x86/avx512/cast.h	302;"	d
_mm512_castsi512_si128	simde/x86/avx512/cast.h	303;"	d
_mm512_castsi512_si256	simde/x86/avx512/cast.h	317;"	d
_mm512_castsi512_si256	simde/x86/avx512/cast.h	318;"	d
_mm512_cbrt_pd	simde/x86/svml.h	1756;"	d
_mm512_cbrt_pd	simde/x86/svml.h	1757;"	d
_mm512_cbrt_ps	simde/x86/svml.h	1725;"	d
_mm512_cbrt_ps	simde/x86/svml.h	1726;"	d
_mm512_cdfnorm_pd	simde/x86/svml.h	5067;"	d
_mm512_cdfnorm_pd	simde/x86/svml.h	5068;"	d
_mm512_cdfnorm_ps	simde/x86/svml.h	5007;"	d
_mm512_cdfnorm_ps	simde/x86/svml.h	5008;"	d
_mm512_cdfnorminv_pd	simde/x86/svml.h	6491;"	d
_mm512_cdfnorminv_pd	simde/x86/svml.h	6492;"	d
_mm512_cdfnorminv_ps	simde/x86/svml.h	6382;"	d
_mm512_cdfnorminv_ps	simde/x86/svml.h	6383;"	d
_mm512_ceil_pd	simde/x86/svml.h	10845;"	d
_mm512_ceil_pd	simde/x86/svml.h	10846;"	d
_mm512_ceil_ps	simde/x86/svml.h	10814;"	d
_mm512_ceil_ps	simde/x86/svml.h	10815;"	d
_mm512_clmulepi64_epi128	simde/x86/clmul.h	406;"	d
_mm512_clmulepi64_epi128	simde/x86/clmul.h	407;"	d
_mm512_cmp_pd_mask	simde/x86/avx512/cmp.h	580;"	d
_mm512_cmp_pd_mask	simde/x86/avx512/cmp.h	581;"	d
_mm512_cmp_ps_mask	simde/x86/avx512/cmp.h	309;"	d
_mm512_cmp_ps_mask	simde/x86/avx512/cmp.h	310;"	d
_mm512_cmpeq_epi32_mask	simde/x86/avx512/cmpeq.h	101;"	d
_mm512_cmpeq_epi32_mask	simde/x86/avx512/cmpeq.h	102;"	d
_mm512_cmpeq_epi64_mask	simde/x86/avx512/cmpeq.h	138;"	d
_mm512_cmpeq_epi64_mask	simde/x86/avx512/cmpeq.h	139;"	d
_mm512_cmpeq_epi8_mask	simde/x86/avx512/cmpeq.h	78;"	d
_mm512_cmpeq_epi8_mask	simde/x86/avx512/cmpeq.h	79;"	d
_mm512_cmpeq_pd_mask	simde/x86/avx512/cmpeq.h	172;"	d
_mm512_cmpeq_pd_mask	simde/x86/avx512/cmpeq.h	173;"	d
_mm512_cmpeq_ps_mask	simde/x86/avx512/cmpeq.h	162;"	d
_mm512_cmpeq_ps_mask	simde/x86/avx512/cmpeq.h	163;"	d
_mm512_cmpge_epi8_mask	simde/x86/avx512/cmpge.h	66;"	d
_mm512_cmpge_epi8_mask	simde/x86/avx512/cmpge.h	67;"	d
_mm512_cmpge_epu8_mask	simde/x86/avx512/cmpge.h	97;"	d
_mm512_cmpge_epu8_mask	simde/x86/avx512/cmpge.h	98;"	d
_mm512_cmpgt_epi32_mask	simde/x86/avx512/cmpgt.h	131;"	d
_mm512_cmpgt_epi32_mask	simde/x86/avx512/cmpgt.h	132;"	d
_mm512_cmpgt_epi64_mask	simde/x86/avx512/cmpgt.h	168;"	d
_mm512_cmpgt_epi64_mask	simde/x86/avx512/cmpgt.h	169;"	d
_mm512_cmpgt_epi8_mask	simde/x86/avx512/cmpgt.h	77;"	d
_mm512_cmpgt_epi8_mask	simde/x86/avx512/cmpgt.h	78;"	d
_mm512_cmpgt_epu8_mask	simde/x86/avx512/cmpgt.h	108;"	d
_mm512_cmpgt_epu8_mask	simde/x86/avx512/cmpgt.h	109;"	d
_mm512_cmple_epi8_mask	simde/x86/avx512/cmple.h	65;"	d
_mm512_cmple_epi8_mask	simde/x86/avx512/cmple.h	66;"	d
_mm512_cmple_epu8_mask	simde/x86/avx512/cmple.h	96;"	d
_mm512_cmple_epu8_mask	simde/x86/avx512/cmple.h	97;"	d
_mm512_cmplt_epi8_mask	simde/x86/avx512/cmplt.h	85;"	d
_mm512_cmplt_epi8_mask	simde/x86/avx512/cmplt.h	86;"	d
_mm512_cmplt_epu8_mask	simde/x86/avx512/cmplt.h	116;"	d
_mm512_cmplt_epu8_mask	simde/x86/avx512/cmplt.h	117;"	d
_mm512_cmplt_pd_mask	simde/x86/avx512/cmplt.h	54;"	d
_mm512_cmplt_pd_mask	simde/x86/avx512/cmplt.h	55;"	d
_mm512_cmplt_ps_mask	simde/x86/avx512/cmplt.h	44;"	d
_mm512_cmplt_ps_mask	simde/x86/avx512/cmplt.h	45;"	d
_mm512_cos_pd	simde/x86/svml.h	2033;"	d
_mm512_cos_pd	simde/x86/svml.h	2034;"	d
_mm512_cos_ps	simde/x86/svml.h	1998;"	d
_mm512_cos_ps	simde/x86/svml.h	1999;"	d
_mm512_cosd_pd	simde/x86/svml.h	2446;"	d
_mm512_cosd_pd	simde/x86/svml.h	2447;"	d
_mm512_cosd_ps	simde/x86/svml.h	2411;"	d
_mm512_cosd_ps	simde/x86/svml.h	2412;"	d
_mm512_cosh_pd	simde/x86/svml.h	2649;"	d
_mm512_cosh_pd	simde/x86/svml.h	2650;"	d
_mm512_cosh_ps	simde/x86/svml.h	2618;"	d
_mm512_cosh_ps	simde/x86/svml.h	2619;"	d
_mm512_cvtepi16_epi8	simde/x86/avx512/cvt.h	61;"	d
_mm512_cvtepi16_epi8	simde/x86/avx512/cvt.h	62;"	d
_mm512_cvtepi8_epi16	simde/x86/avx512/cvt.h	115;"	d
_mm512_cvtepi8_epi16	simde/x86/avx512/cvt.h	116;"	d
_mm512_cvtsepi16_epi8	simde/x86/avx512/cvts.h	278;"	d
_mm512_cvtsepi16_epi8	simde/x86/avx512/cvts.h	279;"	d
_mm512_cvtsepi32_epi16	simde/x86/avx512/cvts.h	415;"	d
_mm512_cvtsepi32_epi16	simde/x86/avx512/cvts.h	416;"	d
_mm512_cvtsepi32_epi8	simde/x86/avx512/cvts.h	333;"	d
_mm512_cvtsepi32_epi8	simde/x86/avx512/cvts.h	334;"	d
_mm512_cvtsepi64_epi16	simde/x86/avx512/cvts.h	579;"	d
_mm512_cvtsepi64_epi16	simde/x86/avx512/cvts.h	580;"	d
_mm512_cvtsepi64_epi32	simde/x86/avx512/cvts.h	661;"	d
_mm512_cvtsepi64_epi32	simde/x86/avx512/cvts.h	662;"	d
_mm512_cvtsepi64_epi8	simde/x86/avx512/cvts.h	497;"	d
_mm512_cvtsepi64_epi8	simde/x86/avx512/cvts.h	498;"	d
_mm512_div_epi16	simde/x86/svml.h	3269;"	d
_mm512_div_epi16	simde/x86/svml.h	3270;"	d
_mm512_div_epi32	simde/x86/svml.h	3303;"	d
_mm512_div_epi32	simde/x86/svml.h	3304;"	d
_mm512_div_epi64	simde/x86/svml.h	3351;"	d
_mm512_div_epi64	simde/x86/svml.h	3352;"	d
_mm512_div_epi8	simde/x86/svml.h	3235;"	d
_mm512_div_epi8	simde/x86/svml.h	3236;"	d
_mm512_div_epu16	simde/x86/svml.h	3419;"	d
_mm512_div_epu16	simde/x86/svml.h	3420;"	d
_mm512_div_epu32	simde/x86/svml.h	3453;"	d
_mm512_div_epu32	simde/x86/svml.h	3454;"	d
_mm512_div_epu64	simde/x86/svml.h	3501;"	d
_mm512_div_epu64	simde/x86/svml.h	3502;"	d
_mm512_div_epu8	simde/x86/svml.h	3385;"	d
_mm512_div_epu8	simde/x86/svml.h	3386;"	d
_mm512_div_pd	simde/x86/avx512/div.h	127;"	d
_mm512_div_pd	simde/x86/avx512/div.h	128;"	d
_mm512_div_ps	simde/x86/avx512/div.h	67;"	d
_mm512_div_ps	simde/x86/avx512/div.h	68;"	d
_mm512_erf_pd	simde/x86/svml.h	3676;"	d
_mm512_erf_pd	simde/x86/svml.h	3677;"	d
_mm512_erf_ps	simde/x86/svml.h	3645;"	d
_mm512_erf_ps	simde/x86/svml.h	3646;"	d
_mm512_erfc_pd	simde/x86/svml.h	3879;"	d
_mm512_erfc_pd	simde/x86/svml.h	3880;"	d
_mm512_erfc_ps	simde/x86/svml.h	3848;"	d
_mm512_erfc_ps	simde/x86/svml.h	3849;"	d
_mm512_erfcinv_pd	simde/x86/svml.h	7685;"	d
_mm512_erfcinv_pd	simde/x86/svml.h	7686;"	d
_mm512_erfcinv_ps	simde/x86/svml.h	7542;"	d
_mm512_erfcinv_ps	simde/x86/svml.h	7543;"	d
_mm512_erfinv_pd	simde/x86/svml.h	6780;"	d
_mm512_erfinv_pd	simde/x86/svml.h	6781;"	d
_mm512_erfinv_ps	simde/x86/svml.h	6736;"	d
_mm512_erfinv_ps	simde/x86/svml.h	6737;"	d
_mm512_exp10_pd	simde/x86/svml.h	4691;"	d
_mm512_exp10_pd	simde/x86/svml.h	4692;"	d
_mm512_exp10_ps	simde/x86/svml.h	4660;"	d
_mm512_exp10_ps	simde/x86/svml.h	4661;"	d
_mm512_exp2_pd	simde/x86/svml.h	4488;"	d
_mm512_exp2_pd	simde/x86/svml.h	4489;"	d
_mm512_exp2_ps	simde/x86/svml.h	4457;"	d
_mm512_exp2_ps	simde/x86/svml.h	4458;"	d
_mm512_exp_pd	simde/x86/svml.h	4082;"	d
_mm512_exp_pd	simde/x86/svml.h	4083;"	d
_mm512_exp_ps	simde/x86/svml.h	4051;"	d
_mm512_exp_ps	simde/x86/svml.h	4052;"	d
_mm512_expm1_pd	simde/x86/svml.h	4285;"	d
_mm512_expm1_pd	simde/x86/svml.h	4286;"	d
_mm512_expm1_ps	simde/x86/svml.h	4254;"	d
_mm512_expm1_ps	simde/x86/svml.h	4255;"	d
_mm512_extractf32x4_ps	simde/x86/avx512/extract.h	63;"	d
_mm512_extractf32x4_ps	simde/x86/avx512/extract.h	64;"	d
_mm512_extractf64x4_pd	simde/x86/avx512/extract.h	100;"	d
_mm512_extractf64x4_pd	simde/x86/avx512/extract.h	99;"	d
_mm512_extracti32x4_epi32	simde/x86/avx512/extract.h	135;"	d
_mm512_extracti32x4_epi32	simde/x86/avx512/extract.h	136;"	d
_mm512_extracti64x4_epi64	simde/x86/avx512/extract.h	171;"	d
_mm512_extracti64x4_epi64	simde/x86/avx512/extract.h	172;"	d
_mm512_floor_pd	simde/x86/svml.h	10999;"	d
_mm512_floor_pd	simde/x86/svml.h	11000;"	d
_mm512_floor_ps	simde/x86/svml.h	10968;"	d
_mm512_floor_ps	simde/x86/svml.h	10969;"	d
_mm512_fmadd_pd	simde/x86/avx512/fmadd.h	129;"	d
_mm512_fmadd_pd	simde/x86/avx512/fmadd.h	130;"	d
_mm512_fmadd_ps	simde/x86/avx512/fmadd.h	68;"	d
_mm512_fmadd_ps	simde/x86/avx512/fmadd.h	69;"	d
_mm512_fmsub_pd	simde/x86/avx512/fmsub.h	101;"	d
_mm512_fmsub_pd	simde/x86/avx512/fmsub.h	102;"	d
_mm512_fmsub_ps	simde/x86/avx512/fmsub.h	68;"	d
_mm512_fmsub_ps	simde/x86/avx512/fmsub.h	69;"	d
_mm512_fnmadd_pd	simde/x86/avx512/fnmadd.h	101;"	d
_mm512_fnmadd_pd	simde/x86/avx512/fnmadd.h	102;"	d
_mm512_fnmadd_ps	simde/x86/avx512/fnmadd.h	68;"	d
_mm512_fnmadd_ps	simde/x86/avx512/fnmadd.h	69;"	d
_mm512_fnmsub_pd	simde/x86/avx512/fnmsub.h	101;"	d
_mm512_fnmsub_pd	simde/x86/avx512/fnmsub.h	102;"	d
_mm512_fnmsub_ps	simde/x86/avx512/fnmsub.h	68;"	d
_mm512_fnmsub_ps	simde/x86/avx512/fnmsub.h	69;"	d
_mm512_gf2p8affine_epi64_epi8	simde/x86/gfni.h	374;"	d
_mm512_gf2p8affine_epi64_epi8	simde/x86/gfni.h	375;"	d
_mm512_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	476;"	d
_mm512_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	477;"	d
_mm512_gf2p8mul_epi8	simde/x86/gfni.h	710;"	d
_mm512_gf2p8mul_epi8	simde/x86/gfni.h	711;"	d
_mm512_hypot_pd	simde/x86/svml.h	5338;"	d
_mm512_hypot_pd	simde/x86/svml.h	5339;"	d
_mm512_hypot_ps	simde/x86/svml.h	5302;"	d
_mm512_hypot_ps	simde/x86/svml.h	5303;"	d
_mm512_insertf32x4	simde/x86/avx512/insert.h	52;"	d
_mm512_insertf32x4	simde/x86/avx512/insert.h	53;"	d
_mm512_insertf64x4	simde/x86/avx512/insert.h	90;"	d
_mm512_insertf64x4	simde/x86/avx512/insert.h	91;"	d
_mm512_inserti32x4	simde/x86/avx512/insert.h	128;"	d
_mm512_inserti32x4	simde/x86/avx512/insert.h	129;"	d
_mm512_inserti64x4	simde/x86/avx512/insert.h	166;"	d
_mm512_inserti64x4	simde/x86/avx512/insert.h	167;"	d
_mm512_invsqrt_pd	simde/x86/svml.h	5506;"	d
_mm512_invsqrt_pd	simde/x86/svml.h	5507;"	d
_mm512_invsqrt_ps	simde/x86/svml.h	5492;"	d
_mm512_invsqrt_ps	simde/x86/svml.h	5493;"	d
_mm512_load_epi16	simde/x86/avx512/load.h	53;"	d
_mm512_load_epi16	simde/x86/avx512/load.h	59;"	d
_mm512_load_epi32	simde/x86/avx512/load.h	54;"	d
_mm512_load_epi32	simde/x86/avx512/load.h	60;"	d
_mm512_load_epi64	simde/x86/avx512/load.h	55;"	d
_mm512_load_epi64	simde/x86/avx512/load.h	61;"	d
_mm512_load_epi8	simde/x86/avx512/load.h	52;"	d
_mm512_load_epi8	simde/x86/avx512/load.h	58;"	d
_mm512_load_si512	simde/x86/avx512/load.h	56;"	d
_mm512_load_si512	simde/x86/avx512/load.h	57;"	d
_mm512_loadu_epi16	simde/x86/avx512/loadu.h	209;"	d
_mm512_loadu_epi16	simde/x86/avx512/loadu.h	211;"	d
_mm512_loadu_epi32	simde/x86/avx512/loadu.h	214;"	d
_mm512_loadu_epi32	simde/x86/avx512/loadu.h	218;"	d
_mm512_loadu_epi64	simde/x86/avx512/loadu.h	215;"	d
_mm512_loadu_epi64	simde/x86/avx512/loadu.h	219;"	d
_mm512_loadu_epi8	simde/x86/avx512/loadu.h	208;"	d
_mm512_loadu_epi8	simde/x86/avx512/loadu.h	210;"	d
_mm512_loadu_pd	simde/x86/avx512/loadu.h	176;"	d
_mm512_loadu_pd	simde/x86/avx512/loadu.h	177;"	d
_mm512_loadu_ps	simde/x86/avx512/loadu.h	160;"	d
_mm512_loadu_ps	simde/x86/avx512/loadu.h	161;"	d
_mm512_loadu_si512	simde/x86/avx512/loadu.h	216;"	d
_mm512_loadu_si512	simde/x86/avx512/loadu.h	217;"	d
_mm512_log10_pd	simde/x86/svml.h	8509;"	d
_mm512_log10_pd	simde/x86/svml.h	8510;"	d
_mm512_log10_ps	simde/x86/svml.h	8478;"	d
_mm512_log10_ps	simde/x86/svml.h	8479;"	d
_mm512_log1p_pd	simde/x86/svml.h	8306;"	d
_mm512_log1p_pd	simde/x86/svml.h	8307;"	d
_mm512_log1p_ps	simde/x86/svml.h	8275;"	d
_mm512_log1p_ps	simde/x86/svml.h	8276;"	d
_mm512_log2_pd	simde/x86/svml.h	8103;"	d
_mm512_log2_pd	simde/x86/svml.h	8104;"	d
_mm512_log2_ps	simde/x86/svml.h	8068;"	d
_mm512_log2_ps	simde/x86/svml.h	8069;"	d
_mm512_log_pd	simde/x86/svml.h	5733;"	d
_mm512_log_pd	simde/x86/svml.h	5734;"	d
_mm512_log_ps	simde/x86/svml.h	5698;"	d
_mm512_log_ps	simde/x86/svml.h	5699;"	d
_mm512_logb_pd	simde/x86/svml.h	7876;"	d
_mm512_logb_pd	simde/x86/svml.h	7877;"	d
_mm512_logb_ps	simde/x86/svml.h	7847;"	d
_mm512_logb_ps	simde/x86/svml.h	7848;"	d
_mm512_madd_epi16	simde/x86/avx512/madd.h	120;"	d
_mm512_madd_epi16	simde/x86/avx512/madd.h	121;"	d
_mm512_maddubs_epi16	simde/x86/avx512/maddubs.h	124;"	d
_mm512_maddubs_epi16	simde/x86/avx512/maddubs.h	125;"	d
_mm512_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	1228;"	d
_mm512_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	1229;"	d
_mm512_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	1320;"	d
_mm512_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	1321;"	d
_mm512_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	1387;"	d
_mm512_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	1388;"	d
_mm512_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1512;"	d
_mm512_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1513;"	d
_mm512_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	1568;"	d
_mm512_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	1569;"	d
_mm512_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	1624;"	d
_mm512_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	1625;"	d
_mm512_mask_abs_epi16	simde/x86/avx512/abs.h	333;"	d
_mm512_mask_abs_epi16	simde/x86/avx512/abs.h	334;"	d
_mm512_mask_abs_epi32	simde/x86/avx512/abs.h	390;"	d
_mm512_mask_abs_epi32	simde/x86/avx512/abs.h	391;"	d
_mm512_mask_abs_epi64	simde/x86/avx512/abs.h	447;"	d
_mm512_mask_abs_epi64	simde/x86/avx512/abs.h	448;"	d
_mm512_mask_abs_epi8	simde/x86/avx512/abs.h	276;"	d
_mm512_mask_abs_epi8	simde/x86/avx512/abs.h	277;"	d
_mm512_mask_abs_pd	simde/x86/avx512/abs.h	555;"	d
_mm512_mask_abs_pd	simde/x86/avx512/abs.h	556;"	d
_mm512_mask_abs_ps	simde/x86/avx512/abs.h	508;"	d
_mm512_mask_abs_ps	simde/x86/avx512/abs.h	509;"	d
_mm512_mask_acos_pd	simde/x86/svml.h	285;"	d
_mm512_mask_acos_pd	simde/x86/svml.h	286;"	d
_mm512_mask_acos_ps	simde/x86/svml.h	271;"	d
_mm512_mask_acos_ps	simde/x86/svml.h	272;"	d
_mm512_mask_acosh_pd	simde/x86/svml.h	488;"	d
_mm512_mask_acosh_pd	simde/x86/svml.h	489;"	d
_mm512_mask_acosh_ps	simde/x86/svml.h	474;"	d
_mm512_mask_acosh_ps	simde/x86/svml.h	475;"	d
_mm512_mask_add_epi16	simde/x86/avx512/add.h	376;"	d
_mm512_mask_add_epi16	simde/x86/avx512/add.h	377;"	d
_mm512_mask_add_epi32	simde/x86/avx512/add.h	448;"	d
_mm512_mask_add_epi32	simde/x86/avx512/add.h	449;"	d
_mm512_mask_add_epi64	simde/x86/avx512/add.h	508;"	d
_mm512_mask_add_epi64	simde/x86/avx512/add.h	509;"	d
_mm512_mask_add_epi8	simde/x86/avx512/add.h	320;"	d
_mm512_mask_add_epi8	simde/x86/avx512/add.h	321;"	d
_mm512_mask_add_pd	simde/x86/avx512/add.h	620;"	d
_mm512_mask_add_pd	simde/x86/avx512/add.h	621;"	d
_mm512_mask_add_ps	simde/x86/avx512/add.h	564;"	d
_mm512_mask_add_ps	simde/x86/avx512/add.h	565;"	d
_mm512_mask_adds_epi16	simde/x86/avx512/adds.h	251;"	d
_mm512_mask_adds_epi16	simde/x86/avx512/adds.h	252;"	d
_mm512_mask_adds_epi8	simde/x86/avx512/adds.h	192;"	d
_mm512_mask_adds_epi8	simde/x86/avx512/adds.h	193;"	d
_mm512_mask_adds_epu16	simde/x86/avx512/adds.h	369;"	d
_mm512_mask_adds_epu16	simde/x86/avx512/adds.h	370;"	d
_mm512_mask_adds_epu8	simde/x86/avx512/adds.h	310;"	d
_mm512_mask_adds_epu8	simde/x86/avx512/adds.h	311;"	d
_mm512_mask_and_epi32	simde/x86/avx512/and.h	197;"	d
_mm512_mask_and_epi32	simde/x86/avx512/and.h	198;"	d
_mm512_mask_and_epi64	simde/x86/avx512/and.h	253;"	d
_mm512_mask_and_epi64	simde/x86/avx512/and.h	254;"	d
_mm512_mask_and_pd	simde/x86/avx512/and.h	141;"	d
_mm512_mask_and_pd	simde/x86/avx512/and.h	142;"	d
_mm512_mask_and_ps	simde/x86/avx512/and.h	113;"	d
_mm512_mask_and_ps	simde/x86/avx512/and.h	114;"	d
_mm512_mask_andnot_epi32	simde/x86/avx512/andnot.h	144;"	d
_mm512_mask_andnot_epi32	simde/x86/avx512/andnot.h	145;"	d
_mm512_mask_andnot_epi64	simde/x86/avx512/andnot.h	172;"	d
_mm512_mask_andnot_epi64	simde/x86/avx512/andnot.h	173;"	d
_mm512_mask_andnot_pd	simde/x86/avx512/andnot.h	85;"	d
_mm512_mask_andnot_pd	simde/x86/avx512/andnot.h	86;"	d
_mm512_mask_andnot_ps	simde/x86/avx512/andnot.h	55;"	d
_mm512_mask_andnot_ps	simde/x86/avx512/andnot.h	56;"	d
_mm512_mask_asin_pd	simde/x86/svml.h	715;"	d
_mm512_mask_asin_pd	simde/x86/svml.h	716;"	d
_mm512_mask_asin_ps	simde/x86/svml.h	701;"	d
_mm512_mask_asin_ps	simde/x86/svml.h	702;"	d
_mm512_mask_asinh_pd	simde/x86/svml.h	918;"	d
_mm512_mask_asinh_pd	simde/x86/svml.h	919;"	d
_mm512_mask_asinh_ps	simde/x86/svml.h	904;"	d
_mm512_mask_asinh_ps	simde/x86/svml.h	905;"	d
_mm512_mask_atan2_pd	simde/x86/svml.h	1378;"	d
_mm512_mask_atan2_pd	simde/x86/svml.h	1379;"	d
_mm512_mask_atan2_ps	simde/x86/svml.h	1364;"	d
_mm512_mask_atan2_ps	simde/x86/svml.h	1365;"	d
_mm512_mask_atan_pd	simde/x86/svml.h	1145;"	d
_mm512_mask_atan_pd	simde/x86/svml.h	1146;"	d
_mm512_mask_atan_ps	simde/x86/svml.h	1131;"	d
_mm512_mask_atan_ps	simde/x86/svml.h	1132;"	d
_mm512_mask_atanh_pd	simde/x86/svml.h	1581;"	d
_mm512_mask_atanh_pd	simde/x86/svml.h	1582;"	d
_mm512_mask_atanh_ps	simde/x86/svml.h	1567;"	d
_mm512_mask_atanh_ps	simde/x86/svml.h	1568;"	d
_mm512_mask_avg_epu16	simde/x86/avx512/avg.h	237;"	d
_mm512_mask_avg_epu16	simde/x86/avx512/avg.h	238;"	d
_mm512_mask_avg_epu8	simde/x86/avx512/avg.h	185;"	d
_mm512_mask_avg_epu8	simde/x86/avx512/avg.h	186;"	d
_mm512_mask_blend_epi16	simde/x86/avx512/blend.h	230;"	d
_mm512_mask_blend_epi16	simde/x86/avx512/blend.h	231;"	d
_mm512_mask_blend_epi32	simde/x86/avx512/blend.h	244;"	d
_mm512_mask_blend_epi32	simde/x86/avx512/blend.h	245;"	d
_mm512_mask_blend_epi64	simde/x86/avx512/blend.h	258;"	d
_mm512_mask_blend_epi64	simde/x86/avx512/blend.h	259;"	d
_mm512_mask_blend_epi8	simde/x86/avx512/blend.h	216;"	d
_mm512_mask_blend_epi8	simde/x86/avx512/blend.h	217;"	d
_mm512_mask_blend_pd	simde/x86/avx512/blend.h	286;"	d
_mm512_mask_blend_pd	simde/x86/avx512/blend.h	287;"	d
_mm512_mask_blend_ps	simde/x86/avx512/blend.h	272;"	d
_mm512_mask_blend_ps	simde/x86/avx512/blend.h	273;"	d
_mm512_mask_broadcast_f32x2	simde/x86/avx512/broadcast.h	135;"	d
_mm512_mask_broadcast_f32x2	simde/x86/avx512/broadcast.h	136;"	d
_mm512_mask_broadcast_f32x4	simde/x86/avx512/broadcast.h	422;"	d
_mm512_mask_broadcast_f32x4	simde/x86/avx512/broadcast.h	423;"	d
_mm512_mask_broadcast_f32x8	simde/x86/avx512/broadcast.h	196;"	d
_mm512_mask_broadcast_f32x8	simde/x86/avx512/broadcast.h	197;"	d
_mm512_mask_broadcast_f64x2	simde/x86/avx512/broadcast.h	251;"	d
_mm512_mask_broadcast_f64x2	simde/x86/avx512/broadcast.h	252;"	d
_mm512_mask_broadcast_f64x4	simde/x86/avx512/broadcast.h	471;"	d
_mm512_mask_broadcast_f64x4	simde/x86/avx512/broadcast.h	472;"	d
_mm512_mask_broadcast_i32x4	simde/x86/avx512/broadcast.h	526;"	d
_mm512_mask_broadcast_i32x4	simde/x86/avx512/broadcast.h	527;"	d
_mm512_mask_broadcast_i64x4	simde/x86/avx512/broadcast.h	575;"	d
_mm512_mask_broadcast_i64x4	simde/x86/avx512/broadcast.h	576;"	d
_mm512_mask_broadcastb_epi8	simde/x86/avx512/broadcast.h	861;"	d
_mm512_mask_broadcastb_epi8	simde/x86/avx512/broadcast.h	862;"	d
_mm512_mask_broadcastd_epi32	simde/x86/avx512/broadcast.h	625;"	d
_mm512_mask_broadcastd_epi32	simde/x86/avx512/broadcast.h	626;"	d
_mm512_mask_broadcastq_epi64	simde/x86/avx512/broadcast.h	675;"	d
_mm512_mask_broadcastq_epi64	simde/x86/avx512/broadcast.h	676;"	d
_mm512_mask_broadcastsd_pd	simde/x86/avx512/broadcast.h	808;"	d
_mm512_mask_broadcastsd_pd	simde/x86/avx512/broadcast.h	809;"	d
_mm512_mask_broadcastss_ps	simde/x86/avx512/broadcast.h	737;"	d
_mm512_mask_broadcastss_ps	simde/x86/avx512/broadcast.h	738;"	d
_mm512_mask_cbrt_pd	simde/x86/svml.h	1784;"	d
_mm512_mask_cbrt_pd	simde/x86/svml.h	1785;"	d
_mm512_mask_cbrt_ps	simde/x86/svml.h	1770;"	d
_mm512_mask_cbrt_ps	simde/x86/svml.h	1771;"	d
_mm512_mask_cdfnorm_pd	simde/x86/svml.h	5095;"	d
_mm512_mask_cdfnorm_pd	simde/x86/svml.h	5096;"	d
_mm512_mask_cdfnorm_ps	simde/x86/svml.h	5081;"	d
_mm512_mask_cdfnorm_ps	simde/x86/svml.h	5082;"	d
_mm512_mask_cdfnorminv_pd	simde/x86/svml.h	6519;"	d
_mm512_mask_cdfnorminv_pd	simde/x86/svml.h	6520;"	d
_mm512_mask_cdfnorminv_ps	simde/x86/svml.h	6505;"	d
_mm512_mask_cdfnorminv_ps	simde/x86/svml.h	6506;"	d
_mm512_mask_ceil_pd	simde/x86/svml.h	10873;"	d
_mm512_mask_ceil_pd	simde/x86/svml.h	10874;"	d
_mm512_mask_ceil_ps	simde/x86/svml.h	10859;"	d
_mm512_mask_ceil_ps	simde/x86/svml.h	10860;"	d
_mm512_mask_cmpeq_epi32_mask	simde/x86/avx512/cmpeq.h	115;"	d
_mm512_mask_cmpeq_epi32_mask	simde/x86/avx512/cmpeq.h	116;"	d
_mm512_mask_cmpeq_epi64_mask	simde/x86/avx512/cmpeq.h	152;"	d
_mm512_mask_cmpeq_epi64_mask	simde/x86/avx512/cmpeq.h	153;"	d
_mm512_mask_cmpgt_epi32_mask	simde/x86/avx512/cmpgt.h	145;"	d
_mm512_mask_cmpgt_epi32_mask	simde/x86/avx512/cmpgt.h	146;"	d
_mm512_mask_cmpgt_epi64_mask	simde/x86/avx512/cmpgt.h	182;"	d
_mm512_mask_cmpgt_epi64_mask	simde/x86/avx512/cmpgt.h	183;"	d
_mm512_mask_cos_pd	simde/x86/svml.h	2061;"	d
_mm512_mask_cos_pd	simde/x86/svml.h	2062;"	d
_mm512_mask_cos_ps	simde/x86/svml.h	2047;"	d
_mm512_mask_cos_ps	simde/x86/svml.h	2048;"	d
_mm512_mask_cosd_pd	simde/x86/svml.h	2474;"	d
_mm512_mask_cosd_pd	simde/x86/svml.h	2475;"	d
_mm512_mask_cosd_ps	simde/x86/svml.h	2460;"	d
_mm512_mask_cosd_ps	simde/x86/svml.h	2461;"	d
_mm512_mask_cosh_pd	simde/x86/svml.h	2677;"	d
_mm512_mask_cosh_pd	simde/x86/svml.h	2678;"	d
_mm512_mask_cosh_ps	simde/x86/svml.h	2663;"	d
_mm512_mask_cosh_ps	simde/x86/svml.h	2664;"	d
_mm512_mask_cvtepi16_epi8	simde/x86/avx512/cvt.h	75;"	d
_mm512_mask_cvtepi16_epi8	simde/x86/avx512/cvt.h	76;"	d
_mm512_mask_cvtsepi16_epi8	simde/x86/avx512/cvts.h	292;"	d
_mm512_mask_cvtsepi16_epi8	simde/x86/avx512/cvts.h	293;"	d
_mm512_mask_cvtsepi32_epi16	simde/x86/avx512/cvts.h	443;"	d
_mm512_mask_cvtsepi32_epi16	simde/x86/avx512/cvts.h	444;"	d
_mm512_mask_cvtsepi32_epi8	simde/x86/avx512/cvts.h	361;"	d
_mm512_mask_cvtsepi32_epi8	simde/x86/avx512/cvts.h	362;"	d
_mm512_mask_cvtsepi64_epi16	simde/x86/avx512/cvts.h	607;"	d
_mm512_mask_cvtsepi64_epi16	simde/x86/avx512/cvts.h	608;"	d
_mm512_mask_cvtsepi64_epi32	simde/x86/avx512/cvts.h	689;"	d
_mm512_mask_cvtsepi64_epi32	simde/x86/avx512/cvts.h	690;"	d
_mm512_mask_cvtsepi64_epi8	simde/x86/avx512/cvts.h	525;"	d
_mm512_mask_cvtsepi64_epi8	simde/x86/avx512/cvts.h	526;"	d
_mm512_mask_div_epi32	simde/x86/svml.h	3317;"	d
_mm512_mask_div_epi32	simde/x86/svml.h	3318;"	d
_mm512_mask_div_epu32	simde/x86/svml.h	3467;"	d
_mm512_mask_div_epu32	simde/x86/svml.h	3468;"	d
_mm512_mask_div_pd	simde/x86/avx512/div.h	141;"	d
_mm512_mask_div_pd	simde/x86/avx512/div.h	142;"	d
_mm512_mask_div_ps	simde/x86/avx512/div.h	81;"	d
_mm512_mask_div_ps	simde/x86/avx512/div.h	82;"	d
_mm512_mask_erf_pd	simde/x86/svml.h	3704;"	d
_mm512_mask_erf_pd	simde/x86/svml.h	3705;"	d
_mm512_mask_erf_ps	simde/x86/svml.h	3690;"	d
_mm512_mask_erf_ps	simde/x86/svml.h	3691;"	d
_mm512_mask_erfc_pd	simde/x86/svml.h	3907;"	d
_mm512_mask_erfc_pd	simde/x86/svml.h	3908;"	d
_mm512_mask_erfc_ps	simde/x86/svml.h	3893;"	d
_mm512_mask_erfc_ps	simde/x86/svml.h	3894;"	d
_mm512_mask_erfcinv_pd	simde/x86/svml.h	7713;"	d
_mm512_mask_erfcinv_pd	simde/x86/svml.h	7714;"	d
_mm512_mask_erfcinv_ps	simde/x86/svml.h	7699;"	d
_mm512_mask_erfcinv_ps	simde/x86/svml.h	7700;"	d
_mm512_mask_erfinv_pd	simde/x86/svml.h	6808;"	d
_mm512_mask_erfinv_pd	simde/x86/svml.h	6809;"	d
_mm512_mask_erfinv_ps	simde/x86/svml.h	6794;"	d
_mm512_mask_erfinv_ps	simde/x86/svml.h	6795;"	d
_mm512_mask_exp10_pd	simde/x86/svml.h	4719;"	d
_mm512_mask_exp10_pd	simde/x86/svml.h	4720;"	d
_mm512_mask_exp10_ps	simde/x86/svml.h	4705;"	d
_mm512_mask_exp10_ps	simde/x86/svml.h	4706;"	d
_mm512_mask_exp2_pd	simde/x86/svml.h	4516;"	d
_mm512_mask_exp2_pd	simde/x86/svml.h	4517;"	d
_mm512_mask_exp2_ps	simde/x86/svml.h	4502;"	d
_mm512_mask_exp2_ps	simde/x86/svml.h	4503;"	d
_mm512_mask_exp_pd	simde/x86/svml.h	4110;"	d
_mm512_mask_exp_pd	simde/x86/svml.h	4111;"	d
_mm512_mask_exp_ps	simde/x86/svml.h	4096;"	d
_mm512_mask_exp_ps	simde/x86/svml.h	4097;"	d
_mm512_mask_expm1_pd	simde/x86/svml.h	4313;"	d
_mm512_mask_expm1_pd	simde/x86/svml.h	4314;"	d
_mm512_mask_expm1_ps	simde/x86/svml.h	4299;"	d
_mm512_mask_expm1_ps	simde/x86/svml.h	4300;"	d
_mm512_mask_extractf32x4_ps	simde/x86/avx512/extract.h	73;"	d
_mm512_mask_extractf32x4_ps	simde/x86/avx512/extract.h	74;"	d
_mm512_mask_extractf64x4_pd	simde/x86/avx512/extract.h	109;"	d
_mm512_mask_extractf64x4_pd	simde/x86/avx512/extract.h	110;"	d
_mm512_mask_extracti32x4_epi32	simde/x86/avx512/extract.h	145;"	d
_mm512_mask_extracti32x4_epi32	simde/x86/avx512/extract.h	146;"	d
_mm512_mask_extracti64x4_epi64	simde/x86/avx512/extract.h	181;"	d
_mm512_mask_extracti64x4_epi64	simde/x86/avx512/extract.h	182;"	d
_mm512_mask_floor_pd	simde/x86/svml.h	11027;"	d
_mm512_mask_floor_pd	simde/x86/svml.h	11028;"	d
_mm512_mask_floor_ps	simde/x86/svml.h	11013;"	d
_mm512_mask_floor_ps	simde/x86/svml.h	11014;"	d
_mm512_mask_fmadd_ps	simde/x86/avx512/fmadd.h	82;"	d
_mm512_mask_fmadd_ps	simde/x86/avx512/fmadd.h	83;"	d
_mm512_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	404;"	d
_mm512_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	405;"	d
_mm512_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	506;"	d
_mm512_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	507;"	d
_mm512_mask_gf2p8mul_epi8	simde/x86/gfni.h	752;"	d
_mm512_mask_gf2p8mul_epi8	simde/x86/gfni.h	753;"	d
_mm512_mask_hypot_pd	simde/x86/svml.h	5366;"	d
_mm512_mask_hypot_pd	simde/x86/svml.h	5367;"	d
_mm512_mask_hypot_ps	simde/x86/svml.h	5352;"	d
_mm512_mask_hypot_ps	simde/x86/svml.h	5353;"	d
_mm512_mask_insertf32x4	simde/x86/avx512/insert.h	62;"	d
_mm512_mask_insertf32x4	simde/x86/avx512/insert.h	63;"	d
_mm512_mask_insertf64x4	simde/x86/avx512/insert.h	100;"	d
_mm512_mask_insertf64x4	simde/x86/avx512/insert.h	101;"	d
_mm512_mask_inserti32x4	simde/x86/avx512/insert.h	138;"	d
_mm512_mask_inserti32x4	simde/x86/avx512/insert.h	139;"	d
_mm512_mask_inserti64x4	simde/x86/avx512/insert.h	176;"	d
_mm512_mask_inserti64x4	simde/x86/avx512/insert.h	177;"	d
_mm512_mask_invsqrt_pd	simde/x86/svml.h	5534;"	d
_mm512_mask_invsqrt_pd	simde/x86/svml.h	5535;"	d
_mm512_mask_invsqrt_ps	simde/x86/svml.h	5520;"	d
_mm512_mask_invsqrt_ps	simde/x86/svml.h	5521;"	d
_mm512_mask_log10_pd	simde/x86/svml.h	8537;"	d
_mm512_mask_log10_pd	simde/x86/svml.h	8538;"	d
_mm512_mask_log10_ps	simde/x86/svml.h	8523;"	d
_mm512_mask_log10_ps	simde/x86/svml.h	8524;"	d
_mm512_mask_log1p_pd	simde/x86/svml.h	8334;"	d
_mm512_mask_log1p_pd	simde/x86/svml.h	8335;"	d
_mm512_mask_log1p_ps	simde/x86/svml.h	8320;"	d
_mm512_mask_log1p_ps	simde/x86/svml.h	8321;"	d
_mm512_mask_log2_pd	simde/x86/svml.h	8131;"	d
_mm512_mask_log2_pd	simde/x86/svml.h	8132;"	d
_mm512_mask_log2_ps	simde/x86/svml.h	8117;"	d
_mm512_mask_log2_ps	simde/x86/svml.h	8118;"	d
_mm512_mask_log_pd	simde/x86/svml.h	5761;"	d
_mm512_mask_log_pd	simde/x86/svml.h	5762;"	d
_mm512_mask_log_ps	simde/x86/svml.h	5747;"	d
_mm512_mask_log_ps	simde/x86/svml.h	5748;"	d
_mm512_mask_logb_pd	simde/x86/svml.h	7904;"	d
_mm512_mask_logb_pd	simde/x86/svml.h	7905;"	d
_mm512_mask_logb_ps	simde/x86/svml.h	7890;"	d
_mm512_mask_logb_ps	simde/x86/svml.h	7891;"	d
_mm512_mask_madd_epi16	simde/x86/avx512/madd.h	134;"	d
_mm512_mask_madd_epi16	simde/x86/avx512/madd.h	135;"	d
_mm512_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	138;"	d
_mm512_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	139;"	d
_mm512_mask_max_epi16	simde/x86/avx512/max.h	181;"	d
_mm512_mask_max_epi16	simde/x86/avx512/max.h	182;"	d
_mm512_mask_max_epi32	simde/x86/avx512/max.h	296;"	d
_mm512_mask_max_epi32	simde/x86/avx512/max.h	297;"	d
_mm512_mask_max_epi64	simde/x86/avx512/max.h	405;"	d
_mm512_mask_max_epi64	simde/x86/avx512/max.h	406;"	d
_mm512_mask_max_epi8	simde/x86/avx512/max.h	72;"	d
_mm512_mask_max_epi8	simde/x86/avx512/max.h	73;"	d
_mm512_mask_max_epu16	simde/x86/avx512/max.h	239;"	d
_mm512_mask_max_epu16	simde/x86/avx512/max.h	240;"	d
_mm512_mask_max_epu32	simde/x86/avx512/max.h	353;"	d
_mm512_mask_max_epu32	simde/x86/avx512/max.h	354;"	d
_mm512_mask_max_epu64	simde/x86/avx512/max.h	457;"	d
_mm512_mask_max_epu64	simde/x86/avx512/max.h	458;"	d
_mm512_mask_max_epu8	simde/x86/avx512/max.h	130;"	d
_mm512_mask_max_epu8	simde/x86/avx512/max.h	131;"	d
_mm512_mask_max_pd	simde/x86/avx512/max.h	566;"	d
_mm512_mask_max_pd	simde/x86/avx512/max.h	567;"	d
_mm512_mask_max_ps	simde/x86/avx512/max.h	514;"	d
_mm512_mask_max_ps	simde/x86/avx512/max.h	515;"	d
_mm512_mask_min_epi16	simde/x86/avx512/min.h	181;"	d
_mm512_mask_min_epi16	simde/x86/avx512/min.h	182;"	d
_mm512_mask_min_epi32	simde/x86/avx512/min.h	296;"	d
_mm512_mask_min_epi32	simde/x86/avx512/min.h	297;"	d
_mm512_mask_min_epi64	simde/x86/avx512/min.h	405;"	d
_mm512_mask_min_epi64	simde/x86/avx512/min.h	406;"	d
_mm512_mask_min_epi8	simde/x86/avx512/min.h	72;"	d
_mm512_mask_min_epi8	simde/x86/avx512/min.h	73;"	d
_mm512_mask_min_epu16	simde/x86/avx512/min.h	239;"	d
_mm512_mask_min_epu16	simde/x86/avx512/min.h	240;"	d
_mm512_mask_min_epu32	simde/x86/avx512/min.h	353;"	d
_mm512_mask_min_epu32	simde/x86/avx512/min.h	354;"	d
_mm512_mask_min_epu64	simde/x86/avx512/min.h	457;"	d
_mm512_mask_min_epu64	simde/x86/avx512/min.h	458;"	d
_mm512_mask_min_epu8	simde/x86/avx512/min.h	130;"	d
_mm512_mask_min_epu8	simde/x86/avx512/min.h	131;"	d
_mm512_mask_min_pd	simde/x86/avx512/min.h	566;"	d
_mm512_mask_min_pd	simde/x86/avx512/min.h	567;"	d
_mm512_mask_min_ps	simde/x86/avx512/min.h	514;"	d
_mm512_mask_min_ps	simde/x86/avx512/min.h	515;"	d
_mm512_mask_mov_epi16	simde/x86/avx512/mov.h	363;"	d
_mm512_mask_mov_epi16	simde/x86/avx512/mov.h	364;"	d
_mm512_mask_mov_epi32	simde/x86/avx512/mov.h	392;"	d
_mm512_mask_mov_epi32	simde/x86/avx512/mov.h	393;"	d
_mm512_mask_mov_epi64	simde/x86/avx512/mov.h	422;"	d
_mm512_mask_mov_epi64	simde/x86/avx512/mov.h	423;"	d
_mm512_mask_mov_epi8	simde/x86/avx512/mov.h	334;"	d
_mm512_mask_mov_epi8	simde/x86/avx512/mov.h	335;"	d
_mm512_mask_mov_pd	simde/x86/avx512/mov.h	436;"	d
_mm512_mask_mov_pd	simde/x86/avx512/mov.h	437;"	d
_mm512_mask_mov_ps	simde/x86/avx512/mov.h	450;"	d
_mm512_mask_mov_ps	simde/x86/avx512/mov.h	451;"	d
_mm512_mask_mul_epi32	simde/x86/avx512/mul.h	196;"	d
_mm512_mask_mul_epi32	simde/x86/avx512/mul.h	197;"	d
_mm512_mask_mul_epu32	simde/x86/avx512/mul.h	258;"	d
_mm512_mask_mul_epu32	simde/x86/avx512/mul.h	259;"	d
_mm512_mask_mul_pd	simde/x86/avx512/mul.h	133;"	d
_mm512_mask_mul_pd	simde/x86/avx512/mul.h	134;"	d
_mm512_mask_mul_ps	simde/x86/avx512/mul.h	77;"	d
_mm512_mask_mul_ps	simde/x86/avx512/mul.h	78;"	d
_mm512_mask_mullo_epi32	simde/x86/avx512/mullo.h	96;"	d
_mm512_mask_mullo_epi32	simde/x86/avx512/mullo.h	97;"	d
_mm512_mask_nearbyint_pd	simde/x86/svml.h	8611;"	d
_mm512_mask_nearbyint_pd	simde/x86/svml.h	8612;"	d
_mm512_mask_nearbyint_ps	simde/x86/svml.h	8597;"	d
_mm512_mask_nearbyint_ps	simde/x86/svml.h	8598;"	d
_mm512_mask_or_epi32	simde/x86/avx512/or.h	140;"	d
_mm512_mask_or_epi32	simde/x86/avx512/or.h	141;"	d
_mm512_mask_or_epi64	simde/x86/avx512/or.h	200;"	d
_mm512_mask_or_epi64	simde/x86/avx512/or.h	201;"	d
_mm512_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	1214;"	d
_mm512_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	1215;"	d
_mm512_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	1306;"	d
_mm512_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	1307;"	d
_mm512_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	1373;"	d
_mm512_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	1374;"	d
_mm512_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1498;"	d
_mm512_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1499;"	d
_mm512_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	1554;"	d
_mm512_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	1555;"	d
_mm512_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	1610;"	d
_mm512_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	1611;"	d
_mm512_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	737;"	d
_mm512_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	738;"	d
_mm512_mask_permutexvar_epi32	simde/x86/avx512/permutexvar.h	879;"	d
_mm512_mask_permutexvar_epi32	simde/x86/avx512/permutexvar.h	880;"	d
_mm512_mask_permutexvar_epi64	simde/x86/avx512/permutexvar.h	933;"	d
_mm512_mask_permutexvar_epi64	simde/x86/avx512/permutexvar.h	934;"	d
_mm512_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	1075;"	d
_mm512_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	1076;"	d
_mm512_mask_permutexvar_pd	simde/x86/avx512/permutexvar.h	1117;"	d
_mm512_mask_permutexvar_pd	simde/x86/avx512/permutexvar.h	1118;"	d
_mm512_mask_permutexvar_ps	simde/x86/avx512/permutexvar.h	1159;"	d
_mm512_mask_permutexvar_ps	simde/x86/avx512/permutexvar.h	1160;"	d
_mm512_mask_pow_pd	simde/x86/svml.h	8796;"	d
_mm512_mask_pow_pd	simde/x86/svml.h	8797;"	d
_mm512_mask_pow_ps	simde/x86/svml.h	8782;"	d
_mm512_mask_pow_ps	simde/x86/svml.h	8783;"	d
_mm512_mask_recip_pd	simde/x86/svml.h	9770;"	d
_mm512_mask_recip_pd	simde/x86/svml.h	9771;"	d
_mm512_mask_recip_ps	simde/x86/svml.h	9756;"	d
_mm512_mask_recip_ps	simde/x86/svml.h	9757;"	d
_mm512_mask_rem_epi32	simde/x86/svml.h	9530;"	d
_mm512_mask_rem_epi32	simde/x86/svml.h	9531;"	d
_mm512_mask_rem_epu32	simde/x86/svml.h	9680;"	d
_mm512_mask_rem_epu32	simde/x86/svml.h	9681;"	d
_mm512_mask_rint_pd	simde/x86/svml.h	9848;"	d
_mm512_mask_rint_pd	simde/x86/svml.h	9849;"	d
_mm512_mask_rint_ps	simde/x86/svml.h	9834;"	d
_mm512_mask_rint_ps	simde/x86/svml.h	9835;"	d
_mm512_mask_set1_epi16	simde/x86/avx512/set1.h	118;"	d
_mm512_mask_set1_epi16	simde/x86/avx512/set1.h	119;"	d
_mm512_mask_set1_epi32	simde/x86/avx512/set1.h	167;"	d
_mm512_mask_set1_epi32	simde/x86/avx512/set1.h	168;"	d
_mm512_mask_set1_epi64	simde/x86/avx512/set1.h	216;"	d
_mm512_mask_set1_epi64	simde/x86/avx512/set1.h	217;"	d
_mm512_mask_set1_epi8	simde/x86/avx512/set1.h	69;"	d
_mm512_mask_set1_epi8	simde/x86/avx512/set1.h	70;"	d
_mm512_mask_shuffle_epi8	simde/x86/avx512/shuffle.h	79;"	d
_mm512_mask_shuffle_epi8	simde/x86/avx512/shuffle.h	80;"	d
_mm512_mask_sin_pd	simde/x86/svml.h	10075;"	d
_mm512_mask_sin_pd	simde/x86/svml.h	10076;"	d
_mm512_mask_sin_ps	simde/x86/svml.h	10061;"	d
_mm512_mask_sin_ps	simde/x86/svml.h	10062;"	d
_mm512_mask_sincos_pd	simde/x86/svml.h	10289;"	d
_mm512_mask_sincos_pd	simde/x86/svml.h	10290;"	d
_mm512_mask_sincos_ps	simde/x86/svml.h	10272;"	d
_mm512_mask_sincos_ps	simde/x86/svml.h	10273;"	d
_mm512_mask_sind_pd	simde/x86/svml.h	10516;"	d
_mm512_mask_sind_pd	simde/x86/svml.h	10517;"	d
_mm512_mask_sind_ps	simde/x86/svml.h	10502;"	d
_mm512_mask_sind_ps	simde/x86/svml.h	10503;"	d
_mm512_mask_sinh_pd	simde/x86/svml.h	10719;"	d
_mm512_mask_sinh_pd	simde/x86/svml.h	10720;"	d
_mm512_mask_sinh_ps	simde/x86/svml.h	10705;"	d
_mm512_mask_sinh_ps	simde/x86/svml.h	10706;"	d
_mm512_mask_sll_epi16	simde/x86/avx512/sll.h	90;"	d
_mm512_mask_sll_epi16	simde/x86/avx512/sll.h	91;"	d
_mm512_mask_sll_epi32	simde/x86/avx512/sll.h	158;"	d
_mm512_mask_sll_epi32	simde/x86/avx512/sll.h	159;"	d
_mm512_mask_sll_epi64	simde/x86/avx512/sll.h	226;"	d
_mm512_mask_sll_epi64	simde/x86/avx512/sll.h	227;"	d
_mm512_mask_sqrt_pd	simde/x86/avx512/sqrt.h	120;"	d
_mm512_mask_sqrt_pd	simde/x86/avx512/sqrt.h	121;"	d
_mm512_mask_sqrt_ps	simde/x86/avx512/sqrt.h	77;"	d
_mm512_mask_sqrt_ps	simde/x86/avx512/sqrt.h	78;"	d
_mm512_mask_srl_epi32	simde/x86/avx512/srl.h	128;"	d
_mm512_mask_srl_epi32	simde/x86/avx512/srl.h	129;"	d
_mm512_mask_srl_epi64	simde/x86/avx512/srl.h	195;"	d
_mm512_mask_srl_epi64	simde/x86/avx512/srl.h	196;"	d
_mm512_mask_sub_epi32	simde/x86/avx512/sub.h	162;"	d
_mm512_mask_sub_epi32	simde/x86/avx512/sub.h	163;"	d
_mm512_mask_sub_epi64	simde/x86/avx512/sub.h	218;"	d
_mm512_mask_sub_epi64	simde/x86/avx512/sub.h	219;"	d
_mm512_mask_sub_epi8	simde/x86/avx512/sub.h	78;"	d
_mm512_mask_sub_epi8	simde/x86/avx512/sub.h	79;"	d
_mm512_mask_sub_pd	simde/x86/avx512/sub.h	330;"	d
_mm512_mask_sub_pd	simde/x86/avx512/sub.h	331;"	d
_mm512_mask_sub_ps	simde/x86/avx512/sub.h	274;"	d
_mm512_mask_sub_ps	simde/x86/avx512/sub.h	275;"	d
_mm512_mask_subs_epi8	simde/x86/avx512/subs.h	80;"	d
_mm512_mask_subs_epi8	simde/x86/avx512/subs.h	81;"	d
_mm512_mask_subs_epu8	simde/x86/avx512/subs.h	170;"	d
_mm512_mask_subs_epu8	simde/x86/avx512/subs.h	171;"	d
_mm512_mask_svml_round_pd	simde/x86/svml.h	11185;"	d
_mm512_mask_svml_round_pd	simde/x86/svml.h	11186;"	d
_mm512_mask_tan_pd	simde/x86/svml.h	11508;"	d
_mm512_mask_tan_pd	simde/x86/svml.h	11509;"	d
_mm512_mask_tan_ps	simde/x86/svml.h	11494;"	d
_mm512_mask_tan_ps	simde/x86/svml.h	11495;"	d
_mm512_mask_tand_pd	simde/x86/svml.h	11734;"	d
_mm512_mask_tand_pd	simde/x86/svml.h	11735;"	d
_mm512_mask_tand_ps	simde/x86/svml.h	11720;"	d
_mm512_mask_tand_ps	simde/x86/svml.h	11721;"	d
_mm512_mask_tanh_pd	simde/x86/svml.h	11937;"	d
_mm512_mask_tanh_pd	simde/x86/svml.h	11938;"	d
_mm512_mask_tanh_ps	simde/x86/svml.h	11923;"	d
_mm512_mask_tanh_ps	simde/x86/svml.h	11924;"	d
_mm512_mask_test_epi16_mask	simde/x86/avx512/test.h	144;"	d
_mm512_mask_test_epi16_mask	simde/x86/avx512/test.h	145;"	d
_mm512_mask_test_epi32_mask	simde/x86/avx512/test.h	158;"	d
_mm512_mask_test_epi32_mask	simde/x86/avx512/test.h	159;"	d
_mm512_mask_test_epi64_mask	simde/x86/avx512/test.h	172;"	d
_mm512_mask_test_epi64_mask	simde/x86/avx512/test.h	173;"	d
_mm512_mask_test_epi8_mask	simde/x86/avx512/test.h	186;"	d
_mm512_mask_test_epi8_mask	simde/x86/avx512/test.h	187;"	d
_mm512_mask_trunc_pd	simde/x86/svml.h	12091;"	d
_mm512_mask_trunc_pd	simde/x86/svml.h	12092;"	d
_mm512_mask_trunc_ps	simde/x86/svml.h	12077;"	d
_mm512_mask_trunc_ps	simde/x86/svml.h	12078;"	d
_mm512_mask_unpackhi_epi16	simde/x86/avx512/unpackhi.h	139;"	d
_mm512_mask_unpackhi_epi16	simde/x86/avx512/unpackhi.h	140;"	d
_mm512_mask_unpackhi_epi32	simde/x86/avx512/unpackhi.h	195;"	d
_mm512_mask_unpackhi_epi32	simde/x86/avx512/unpackhi.h	196;"	d
_mm512_mask_unpackhi_epi64	simde/x86/avx512/unpackhi.h	249;"	d
_mm512_mask_unpackhi_epi64	simde/x86/avx512/unpackhi.h	250;"	d
_mm512_mask_unpackhi_epi8	simde/x86/avx512/unpackhi.h	83;"	d
_mm512_mask_unpackhi_epi8	simde/x86/avx512/unpackhi.h	84;"	d
_mm512_mask_unpackhi_pd	simde/x86/avx512/unpackhi.h	359;"	d
_mm512_mask_unpackhi_pd	simde/x86/avx512/unpackhi.h	360;"	d
_mm512_mask_unpackhi_ps	simde/x86/avx512/unpackhi.h	305;"	d
_mm512_mask_unpackhi_ps	simde/x86/avx512/unpackhi.h	306;"	d
_mm512_mask_xor_epi32	simde/x86/avx512/xor.h	146;"	d
_mm512_mask_xor_epi32	simde/x86/avx512/xor.h	147;"	d
_mm512_mask_xor_epi64	simde/x86/avx512/xor.h	206;"	d
_mm512_mask_xor_epi64	simde/x86/avx512/xor.h	207;"	d
_mm512_maskz_abs_epi16	simde/x86/avx512/abs.h	347;"	d
_mm512_maskz_abs_epi16	simde/x86/avx512/abs.h	348;"	d
_mm512_maskz_abs_epi32	simde/x86/avx512/abs.h	404;"	d
_mm512_maskz_abs_epi32	simde/x86/avx512/abs.h	405;"	d
_mm512_maskz_abs_epi64	simde/x86/avx512/abs.h	461;"	d
_mm512_maskz_abs_epi64	simde/x86/avx512/abs.h	462;"	d
_mm512_maskz_abs_epi8	simde/x86/avx512/abs.h	290;"	d
_mm512_maskz_abs_epi8	simde/x86/avx512/abs.h	291;"	d
_mm512_maskz_add_epi16	simde/x86/avx512/add.h	390;"	d
_mm512_maskz_add_epi16	simde/x86/avx512/add.h	391;"	d
_mm512_maskz_add_epi32	simde/x86/avx512/add.h	462;"	d
_mm512_maskz_add_epi32	simde/x86/avx512/add.h	463;"	d
_mm512_maskz_add_epi64	simde/x86/avx512/add.h	522;"	d
_mm512_maskz_add_epi64	simde/x86/avx512/add.h	523;"	d
_mm512_maskz_add_epi8	simde/x86/avx512/add.h	334;"	d
_mm512_maskz_add_epi8	simde/x86/avx512/add.h	335;"	d
_mm512_maskz_add_pd	simde/x86/avx512/add.h	634;"	d
_mm512_maskz_add_pd	simde/x86/avx512/add.h	635;"	d
_mm512_maskz_add_ps	simde/x86/avx512/add.h	578;"	d
_mm512_maskz_add_ps	simde/x86/avx512/add.h	579;"	d
_mm512_maskz_adds_epi16	simde/x86/avx512/adds.h	265;"	d
_mm512_maskz_adds_epi16	simde/x86/avx512/adds.h	266;"	d
_mm512_maskz_adds_epi8	simde/x86/avx512/adds.h	206;"	d
_mm512_maskz_adds_epi8	simde/x86/avx512/adds.h	207;"	d
_mm512_maskz_adds_epu16	simde/x86/avx512/adds.h	383;"	d
_mm512_maskz_adds_epu16	simde/x86/avx512/adds.h	384;"	d
_mm512_maskz_adds_epu8	simde/x86/avx512/adds.h	324;"	d
_mm512_maskz_adds_epu8	simde/x86/avx512/adds.h	325;"	d
_mm512_maskz_and_epi32	simde/x86/avx512/and.h	211;"	d
_mm512_maskz_and_epi32	simde/x86/avx512/and.h	212;"	d
_mm512_maskz_and_epi64	simde/x86/avx512/and.h	267;"	d
_mm512_maskz_and_epi64	simde/x86/avx512/and.h	268;"	d
_mm512_maskz_and_pd	simde/x86/avx512/and.h	155;"	d
_mm512_maskz_and_pd	simde/x86/avx512/and.h	156;"	d
_mm512_maskz_and_ps	simde/x86/avx512/and.h	127;"	d
_mm512_maskz_and_ps	simde/x86/avx512/and.h	128;"	d
_mm512_maskz_andnot_epi32	simde/x86/avx512/andnot.h	158;"	d
_mm512_maskz_andnot_epi32	simde/x86/avx512/andnot.h	159;"	d
_mm512_maskz_andnot_epi64	simde/x86/avx512/andnot.h	186;"	d
_mm512_maskz_andnot_epi64	simde/x86/avx512/andnot.h	187;"	d
_mm512_maskz_andnot_pd	simde/x86/avx512/andnot.h	95;"	d
_mm512_maskz_andnot_pd	simde/x86/avx512/andnot.h	96;"	d
_mm512_maskz_andnot_ps	simde/x86/avx512/andnot.h	65;"	d
_mm512_maskz_andnot_ps	simde/x86/avx512/andnot.h	66;"	d
_mm512_maskz_avg_epu16	simde/x86/avx512/avg.h	251;"	d
_mm512_maskz_avg_epu16	simde/x86/avx512/avg.h	252;"	d
_mm512_maskz_avg_epu8	simde/x86/avx512/avg.h	199;"	d
_mm512_maskz_avg_epu8	simde/x86/avx512/avg.h	200;"	d
_mm512_maskz_broadcast_f32x2	simde/x86/avx512/broadcast.h	149;"	d
_mm512_maskz_broadcast_f32x2	simde/x86/avx512/broadcast.h	150;"	d
_mm512_maskz_broadcast_f32x4	simde/x86/avx512/broadcast.h	436;"	d
_mm512_maskz_broadcast_f32x4	simde/x86/avx512/broadcast.h	437;"	d
_mm512_maskz_broadcast_f32x8	simde/x86/avx512/broadcast.h	210;"	d
_mm512_maskz_broadcast_f32x8	simde/x86/avx512/broadcast.h	211;"	d
_mm512_maskz_broadcast_f64x2	simde/x86/avx512/broadcast.h	265;"	d
_mm512_maskz_broadcast_f64x2	simde/x86/avx512/broadcast.h	266;"	d
_mm512_maskz_broadcast_f64x4	simde/x86/avx512/broadcast.h	485;"	d
_mm512_maskz_broadcast_f64x4	simde/x86/avx512/broadcast.h	486;"	d
_mm512_maskz_broadcast_i32x4	simde/x86/avx512/broadcast.h	540;"	d
_mm512_maskz_broadcast_i32x4	simde/x86/avx512/broadcast.h	541;"	d
_mm512_maskz_broadcast_i64x4	simde/x86/avx512/broadcast.h	589;"	d
_mm512_maskz_broadcast_i64x4	simde/x86/avx512/broadcast.h	590;"	d
_mm512_maskz_broadcastb_epi8	simde/x86/avx512/broadcast.h	875;"	d
_mm512_maskz_broadcastb_epi8	simde/x86/avx512/broadcast.h	876;"	d
_mm512_maskz_broadcastd_epi32	simde/x86/avx512/broadcast.h	639;"	d
_mm512_maskz_broadcastd_epi32	simde/x86/avx512/broadcast.h	640;"	d
_mm512_maskz_broadcastq_epi64	simde/x86/avx512/broadcast.h	689;"	d
_mm512_maskz_broadcastq_epi64	simde/x86/avx512/broadcast.h	690;"	d
_mm512_maskz_broadcastsd_pd	simde/x86/avx512/broadcast.h	832;"	d
_mm512_maskz_broadcastsd_pd	simde/x86/avx512/broadcast.h	833;"	d
_mm512_maskz_broadcastss_ps	simde/x86/avx512/broadcast.h	761;"	d
_mm512_maskz_broadcastss_ps	simde/x86/avx512/broadcast.h	762;"	d
_mm512_maskz_cvtepi16_epi8	simde/x86/avx512/cvt.h	89;"	d
_mm512_maskz_cvtepi16_epi8	simde/x86/avx512/cvt.h	90;"	d
_mm512_maskz_cvtsepi16_epi8	simde/x86/avx512/cvts.h	306;"	d
_mm512_maskz_cvtsepi16_epi8	simde/x86/avx512/cvts.h	307;"	d
_mm512_maskz_cvtsepi32_epi16	simde/x86/avx512/cvts.h	470;"	d
_mm512_maskz_cvtsepi32_epi16	simde/x86/avx512/cvts.h	471;"	d
_mm512_maskz_cvtsepi32_epi8	simde/x86/avx512/cvts.h	388;"	d
_mm512_maskz_cvtsepi32_epi8	simde/x86/avx512/cvts.h	389;"	d
_mm512_maskz_cvtsepi64_epi16	simde/x86/avx512/cvts.h	634;"	d
_mm512_maskz_cvtsepi64_epi16	simde/x86/avx512/cvts.h	635;"	d
_mm512_maskz_cvtsepi64_epi32	simde/x86/avx512/cvts.h	716;"	d
_mm512_maskz_cvtsepi64_epi32	simde/x86/avx512/cvts.h	717;"	d
_mm512_maskz_cvtsepi64_epi8	simde/x86/avx512/cvts.h	552;"	d
_mm512_maskz_cvtsepi64_epi8	simde/x86/avx512/cvts.h	553;"	d
_mm512_maskz_div_pd	simde/x86/avx512/div.h	155;"	d
_mm512_maskz_div_pd	simde/x86/avx512/div.h	156;"	d
_mm512_maskz_div_ps	simde/x86/avx512/div.h	95;"	d
_mm512_maskz_div_ps	simde/x86/avx512/div.h	96;"	d
_mm512_maskz_extractf32x4_ps	simde/x86/avx512/extract.h	83;"	d
_mm512_maskz_extractf32x4_ps	simde/x86/avx512/extract.h	84;"	d
_mm512_maskz_extractf64x4_pd	simde/x86/avx512/extract.h	119;"	d
_mm512_maskz_extractf64x4_pd	simde/x86/avx512/extract.h	120;"	d
_mm512_maskz_extracti32x4_epi32	simde/x86/avx512/extract.h	155;"	d
_mm512_maskz_extracti32x4_epi32	simde/x86/avx512/extract.h	156;"	d
_mm512_maskz_extracti64x4_epi64	simde/x86/avx512/extract.h	191;"	d
_mm512_maskz_extracti64x4_epi64	simde/x86/avx512/extract.h	192;"	d
_mm512_maskz_fmadd_ps	simde/x86/avx512/fmadd.h	96;"	d
_mm512_maskz_fmadd_ps	simde/x86/avx512/fmadd.h	97;"	d
_mm512_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	434;"	d
_mm512_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	435;"	d
_mm512_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	536;"	d
_mm512_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	537;"	d
_mm512_maskz_gf2p8mul_epi8	simde/x86/gfni.h	794;"	d
_mm512_maskz_gf2p8mul_epi8	simde/x86/gfni.h	795;"	d
_mm512_maskz_insertf32x4	simde/x86/avx512/insert.h	72;"	d
_mm512_maskz_insertf32x4	simde/x86/avx512/insert.h	73;"	d
_mm512_maskz_insertf64x4	simde/x86/avx512/insert.h	110;"	d
_mm512_maskz_insertf64x4	simde/x86/avx512/insert.h	111;"	d
_mm512_maskz_inserti32x4	simde/x86/avx512/insert.h	148;"	d
_mm512_maskz_inserti32x4	simde/x86/avx512/insert.h	149;"	d
_mm512_maskz_inserti64x4	simde/x86/avx512/insert.h	186;"	d
_mm512_maskz_inserti64x4	simde/x86/avx512/insert.h	187;"	d
_mm512_maskz_madd_epi16	simde/x86/avx512/madd.h	148;"	d
_mm512_maskz_madd_epi16	simde/x86/avx512/madd.h	149;"	d
_mm512_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	152;"	d
_mm512_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	153;"	d
_mm512_maskz_max_epi16	simde/x86/avx512/max.h	195;"	d
_mm512_maskz_max_epi16	simde/x86/avx512/max.h	196;"	d
_mm512_maskz_max_epi32	simde/x86/avx512/max.h	310;"	d
_mm512_maskz_max_epi32	simde/x86/avx512/max.h	311;"	d
_mm512_maskz_max_epi64	simde/x86/avx512/max.h	419;"	d
_mm512_maskz_max_epi64	simde/x86/avx512/max.h	420;"	d
_mm512_maskz_max_epi8	simde/x86/avx512/max.h	86;"	d
_mm512_maskz_max_epi8	simde/x86/avx512/max.h	87;"	d
_mm512_maskz_max_epu16	simde/x86/avx512/max.h	253;"	d
_mm512_maskz_max_epu16	simde/x86/avx512/max.h	254;"	d
_mm512_maskz_max_epu32	simde/x86/avx512/max.h	367;"	d
_mm512_maskz_max_epu32	simde/x86/avx512/max.h	368;"	d
_mm512_maskz_max_epu64	simde/x86/avx512/max.h	471;"	d
_mm512_maskz_max_epu64	simde/x86/avx512/max.h	472;"	d
_mm512_maskz_max_epu8	simde/x86/avx512/max.h	144;"	d
_mm512_maskz_max_epu8	simde/x86/avx512/max.h	145;"	d
_mm512_maskz_max_pd	simde/x86/avx512/max.h	580;"	d
_mm512_maskz_max_pd	simde/x86/avx512/max.h	581;"	d
_mm512_maskz_max_ps	simde/x86/avx512/max.h	528;"	d
_mm512_maskz_max_ps	simde/x86/avx512/max.h	529;"	d
_mm512_maskz_min_epi16	simde/x86/avx512/min.h	195;"	d
_mm512_maskz_min_epi16	simde/x86/avx512/min.h	196;"	d
_mm512_maskz_min_epi32	simde/x86/avx512/min.h	310;"	d
_mm512_maskz_min_epi32	simde/x86/avx512/min.h	311;"	d
_mm512_maskz_min_epi64	simde/x86/avx512/min.h	419;"	d
_mm512_maskz_min_epi64	simde/x86/avx512/min.h	420;"	d
_mm512_maskz_min_epi8	simde/x86/avx512/min.h	86;"	d
_mm512_maskz_min_epi8	simde/x86/avx512/min.h	87;"	d
_mm512_maskz_min_epu16	simde/x86/avx512/min.h	253;"	d
_mm512_maskz_min_epu16	simde/x86/avx512/min.h	254;"	d
_mm512_maskz_min_epu32	simde/x86/avx512/min.h	367;"	d
_mm512_maskz_min_epu32	simde/x86/avx512/min.h	368;"	d
_mm512_maskz_min_epu64	simde/x86/avx512/min.h	471;"	d
_mm512_maskz_min_epu64	simde/x86/avx512/min.h	472;"	d
_mm512_maskz_min_epu8	simde/x86/avx512/min.h	144;"	d
_mm512_maskz_min_epu8	simde/x86/avx512/min.h	145;"	d
_mm512_maskz_min_pd	simde/x86/avx512/min.h	580;"	d
_mm512_maskz_min_pd	simde/x86/avx512/min.h	581;"	d
_mm512_maskz_min_ps	simde/x86/avx512/min.h	528;"	d
_mm512_maskz_min_ps	simde/x86/avx512/min.h	529;"	d
_mm512_maskz_mov_epi16	simde/x86/avx512/mov.h	767;"	d
_mm512_maskz_mov_epi16	simde/x86/avx512/mov.h	768;"	d
_mm512_maskz_mov_epi32	simde/x86/avx512/mov.h	795;"	d
_mm512_maskz_mov_epi32	simde/x86/avx512/mov.h	796;"	d
_mm512_maskz_mov_epi64	simde/x86/avx512/mov.h	824;"	d
_mm512_maskz_mov_epi64	simde/x86/avx512/mov.h	825;"	d
_mm512_maskz_mov_epi8	simde/x86/avx512/mov.h	739;"	d
_mm512_maskz_mov_epi8	simde/x86/avx512/mov.h	740;"	d
_mm512_maskz_mov_pd	simde/x86/avx512/mov.h	838;"	d
_mm512_maskz_mov_pd	simde/x86/avx512/mov.h	839;"	d
_mm512_maskz_mov_ps	simde/x86/avx512/mov.h	852;"	d
_mm512_maskz_mov_ps	simde/x86/avx512/mov.h	853;"	d
_mm512_maskz_mul_epi32	simde/x86/avx512/mul.h	210;"	d
_mm512_maskz_mul_epi32	simde/x86/avx512/mul.h	211;"	d
_mm512_maskz_mul_epu32	simde/x86/avx512/mul.h	272;"	d
_mm512_maskz_mul_epu32	simde/x86/avx512/mul.h	273;"	d
_mm512_maskz_mul_pd	simde/x86/avx512/mul.h	147;"	d
_mm512_maskz_mul_pd	simde/x86/avx512/mul.h	148;"	d
_mm512_maskz_mul_ps	simde/x86/avx512/mul.h	91;"	d
_mm512_maskz_mul_ps	simde/x86/avx512/mul.h	92;"	d
_mm512_maskz_mullo_epi32	simde/x86/avx512/mullo.h	110;"	d
_mm512_maskz_mullo_epi32	simde/x86/avx512/mullo.h	111;"	d
_mm512_maskz_or_epi32	simde/x86/avx512/or.h	154;"	d
_mm512_maskz_or_epi32	simde/x86/avx512/or.h	155;"	d
_mm512_maskz_or_epi64	simde/x86/avx512/or.h	214;"	d
_mm512_maskz_or_epi64	simde/x86/avx512/or.h	215;"	d
_mm512_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	1242;"	d
_mm512_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	1243;"	d
_mm512_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	1334;"	d
_mm512_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	1335;"	d
_mm512_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	1401;"	d
_mm512_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	1402;"	d
_mm512_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1526;"	d
_mm512_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1527;"	d
_mm512_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	1582;"	d
_mm512_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	1583;"	d
_mm512_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	1638;"	d
_mm512_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	1639;"	d
_mm512_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	751;"	d
_mm512_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	752;"	d
_mm512_maskz_permutexvar_epi32	simde/x86/avx512/permutexvar.h	893;"	d
_mm512_maskz_permutexvar_epi32	simde/x86/avx512/permutexvar.h	894;"	d
_mm512_maskz_permutexvar_epi64	simde/x86/avx512/permutexvar.h	947;"	d
_mm512_maskz_permutexvar_epi64	simde/x86/avx512/permutexvar.h	948;"	d
_mm512_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	1089;"	d
_mm512_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	1090;"	d
_mm512_maskz_permutexvar_pd	simde/x86/avx512/permutexvar.h	1131;"	d
_mm512_maskz_permutexvar_pd	simde/x86/avx512/permutexvar.h	1132;"	d
_mm512_maskz_permutexvar_ps	simde/x86/avx512/permutexvar.h	1173;"	d
_mm512_maskz_permutexvar_ps	simde/x86/avx512/permutexvar.h	1174;"	d
_mm512_maskz_set1_epi16	simde/x86/avx512/set1.h	132;"	d
_mm512_maskz_set1_epi16	simde/x86/avx512/set1.h	133;"	d
_mm512_maskz_set1_epi32	simde/x86/avx512/set1.h	181;"	d
_mm512_maskz_set1_epi32	simde/x86/avx512/set1.h	182;"	d
_mm512_maskz_set1_epi64	simde/x86/avx512/set1.h	230;"	d
_mm512_maskz_set1_epi64	simde/x86/avx512/set1.h	231;"	d
_mm512_maskz_set1_epi8	simde/x86/avx512/set1.h	83;"	d
_mm512_maskz_set1_epi8	simde/x86/avx512/set1.h	84;"	d
_mm512_maskz_shuffle_epi8	simde/x86/avx512/shuffle.h	93;"	d
_mm512_maskz_shuffle_epi8	simde/x86/avx512/shuffle.h	94;"	d
_mm512_maskz_sll_epi16	simde/x86/avx512/sll.h	104;"	d
_mm512_maskz_sll_epi16	simde/x86/avx512/sll.h	105;"	d
_mm512_maskz_sll_epi32	simde/x86/avx512/sll.h	172;"	d
_mm512_maskz_sll_epi32	simde/x86/avx512/sll.h	173;"	d
_mm512_maskz_sll_epi64	simde/x86/avx512/sll.h	240;"	d
_mm512_maskz_sll_epi64	simde/x86/avx512/sll.h	241;"	d
_mm512_maskz_srl_epi32	simde/x86/avx512/srl.h	142;"	d
_mm512_maskz_srl_epi32	simde/x86/avx512/srl.h	143;"	d
_mm512_maskz_srl_epi64	simde/x86/avx512/srl.h	209;"	d
_mm512_maskz_srl_epi64	simde/x86/avx512/srl.h	210;"	d
_mm512_maskz_sub_epi32	simde/x86/avx512/sub.h	176;"	d
_mm512_maskz_sub_epi32	simde/x86/avx512/sub.h	177;"	d
_mm512_maskz_sub_epi64	simde/x86/avx512/sub.h	232;"	d
_mm512_maskz_sub_epi64	simde/x86/avx512/sub.h	233;"	d
_mm512_maskz_sub_epi8	simde/x86/avx512/sub.h	92;"	d
_mm512_maskz_sub_epi8	simde/x86/avx512/sub.h	93;"	d
_mm512_maskz_sub_pd	simde/x86/avx512/sub.h	344;"	d
_mm512_maskz_sub_pd	simde/x86/avx512/sub.h	345;"	d
_mm512_maskz_sub_ps	simde/x86/avx512/sub.h	288;"	d
_mm512_maskz_sub_ps	simde/x86/avx512/sub.h	289;"	d
_mm512_maskz_subs_epi8	simde/x86/avx512/subs.h	94;"	d
_mm512_maskz_subs_epi8	simde/x86/avx512/subs.h	95;"	d
_mm512_maskz_subs_epu8	simde/x86/avx512/subs.h	184;"	d
_mm512_maskz_subs_epu8	simde/x86/avx512/subs.h	185;"	d
_mm512_maskz_unpackhi_epi16	simde/x86/avx512/unpackhi.h	153;"	d
_mm512_maskz_unpackhi_epi16	simde/x86/avx512/unpackhi.h	154;"	d
_mm512_maskz_unpackhi_epi32	simde/x86/avx512/unpackhi.h	209;"	d
_mm512_maskz_unpackhi_epi32	simde/x86/avx512/unpackhi.h	210;"	d
_mm512_maskz_unpackhi_epi64	simde/x86/avx512/unpackhi.h	263;"	d
_mm512_maskz_unpackhi_epi64	simde/x86/avx512/unpackhi.h	264;"	d
_mm512_maskz_unpackhi_epi8	simde/x86/avx512/unpackhi.h	97;"	d
_mm512_maskz_unpackhi_epi8	simde/x86/avx512/unpackhi.h	98;"	d
_mm512_maskz_unpackhi_pd	simde/x86/avx512/unpackhi.h	373;"	d
_mm512_maskz_unpackhi_pd	simde/x86/avx512/unpackhi.h	374;"	d
_mm512_maskz_unpackhi_ps	simde/x86/avx512/unpackhi.h	319;"	d
_mm512_maskz_unpackhi_ps	simde/x86/avx512/unpackhi.h	320;"	d
_mm512_maskz_xor_epi32	simde/x86/avx512/xor.h	160;"	d
_mm512_maskz_xor_epi32	simde/x86/avx512/xor.h	161;"	d
_mm512_maskz_xor_epi64	simde/x86/avx512/xor.h	220;"	d
_mm512_maskz_xor_epi64	simde/x86/avx512/xor.h	221;"	d
_mm512_max_epi16	simde/x86/avx512/max.h	168;"	d
_mm512_max_epi32	simde/x86/avx512/max.h	282;"	d
_mm512_max_epi32	simde/x86/avx512/max.h	283;"	d
_mm512_max_epi64	simde/x86/avx512/max.h	391;"	d
_mm512_max_epi64	simde/x86/avx512/max.h	392;"	d
_mm512_max_epi8	simde/x86/avx512/max.h	59;"	d
_mm512_max_epu16	simde/x86/avx512/max.h	225;"	d
_mm512_max_epu16	simde/x86/avx512/max.h	226;"	d
_mm512_max_epu32	simde/x86/avx512/max.h	339;"	d
_mm512_max_epu32	simde/x86/avx512/max.h	340;"	d
_mm512_max_epu64	simde/x86/avx512/max.h	443;"	d
_mm512_max_epu64	simde/x86/avx512/max.h	444;"	d
_mm512_max_epu8	simde/x86/avx512/max.h	116;"	d
_mm512_max_epu8	simde/x86/avx512/max.h	117;"	d
_mm512_max_pd	simde/x86/avx512/max.h	552;"	d
_mm512_max_pd	simde/x86/avx512/max.h	553;"	d
_mm512_max_ps	simde/x86/avx512/max.h	500;"	d
_mm512_max_ps	simde/x86/avx512/max.h	501;"	d
_mm512_min_epi16	simde/x86/avx512/min.h	168;"	d
_mm512_min_epi32	simde/x86/avx512/min.h	282;"	d
_mm512_min_epi32	simde/x86/avx512/min.h	283;"	d
_mm512_min_epi64	simde/x86/avx512/min.h	391;"	d
_mm512_min_epi64	simde/x86/avx512/min.h	392;"	d
_mm512_min_epi8	simde/x86/avx512/min.h	59;"	d
_mm512_min_epu16	simde/x86/avx512/min.h	225;"	d
_mm512_min_epu16	simde/x86/avx512/min.h	226;"	d
_mm512_min_epu32	simde/x86/avx512/min.h	339;"	d
_mm512_min_epu32	simde/x86/avx512/min.h	340;"	d
_mm512_min_epu64	simde/x86/avx512/min.h	443;"	d
_mm512_min_epu64	simde/x86/avx512/min.h	444;"	d
_mm512_min_epu8	simde/x86/avx512/min.h	116;"	d
_mm512_min_epu8	simde/x86/avx512/min.h	117;"	d
_mm512_min_pd	simde/x86/avx512/min.h	552;"	d
_mm512_min_pd	simde/x86/avx512/min.h	553;"	d
_mm512_min_ps	simde/x86/avx512/min.h	500;"	d
_mm512_min_ps	simde/x86/avx512/min.h	501;"	d
_mm512_movepi16_mask	simde/x86/avx512/mov_mask.h	309;"	d
_mm512_movepi16_mask	simde/x86/avx512/mov_mask.h	310;"	d
_mm512_movepi32_mask	simde/x86/avx512/mov_mask.h	337;"	d
_mm512_movepi32_mask	simde/x86/avx512/mov_mask.h	338;"	d
_mm512_movepi64_mask	simde/x86/avx512/mov_mask.h	365;"	d
_mm512_movepi64_mask	simde/x86/avx512/mov_mask.h	366;"	d
_mm512_movepi8_mask	simde/x86/avx512/mov_mask.h	281;"	d
_mm512_movepi8_mask	simde/x86/avx512/mov_mask.h	282;"	d
_mm512_movm_epi16	simde/x86/avx512/movm.h	238;"	d
_mm512_movm_epi16	simde/x86/avx512/movm.h	239;"	d
_mm512_movm_epi32	simde/x86/avx512/movm.h	344;"	d
_mm512_movm_epi32	simde/x86/avx512/movm.h	345;"	d
_mm512_movm_epi64	simde/x86/avx512/movm.h	453;"	d
_mm512_movm_epi64	simde/x86/avx512/movm.h	454;"	d
_mm512_movm_epi8	simde/x86/avx512/movm.h	140;"	d
_mm512_movm_epi8	simde/x86/avx512/movm.h	141;"	d
_mm512_mul_epi32	simde/x86/avx512/mul.h	182;"	d
_mm512_mul_epi32	simde/x86/avx512/mul.h	183;"	d
_mm512_mul_epu32	simde/x86/avx512/mul.h	244;"	d
_mm512_mul_epu32	simde/x86/avx512/mul.h	245;"	d
_mm512_mul_pd	simde/x86/avx512/mul.h	119;"	d
_mm512_mul_pd	simde/x86/avx512/mul.h	120;"	d
_mm512_mul_ps	simde/x86/avx512/mul.h	63;"	d
_mm512_mul_ps	simde/x86/avx512/mul.h	64;"	d
_mm512_mulhi_epi16	simde/x86/avx512/mulhi.h	58;"	d
_mm512_mulhi_epi16	simde/x86/avx512/mulhi.h	59;"	d
_mm512_mulhrs_epi16	simde/x86/avx512/mulhrs.h	58;"	d
_mm512_mulhrs_epi16	simde/x86/avx512/mulhrs.h	59;"	d
_mm512_mullo_epi16	simde/x86/avx512/mullo.h	58;"	d
_mm512_mullo_epi16	simde/x86/avx512/mullo.h	59;"	d
_mm512_mullo_epi32	simde/x86/avx512/mullo.h	82;"	d
_mm512_mullo_epi32	simde/x86/avx512/mullo.h	83;"	d
_mm512_nearbyint_pd	simde/x86/svml.h	8583;"	d
_mm512_nearbyint_pd	simde/x86/svml.h	8584;"	d
_mm512_nearbyint_ps	simde/x86/svml.h	8560;"	d
_mm512_nearbyint_ps	simde/x86/svml.h	8561;"	d
_mm512_or_epi32	simde/x86/avx512/or.h	126;"	d
_mm512_or_epi32	simde/x86/avx512/or.h	127;"	d
_mm512_or_epi64	simde/x86/avx512/or.h	186;"	d
_mm512_or_epi64	simde/x86/avx512/or.h	187;"	d
_mm512_or_pd	simde/x86/avx512/or.h	98;"	d
_mm512_or_pd	simde/x86/avx512/or.h	99;"	d
_mm512_or_ps	simde/x86/avx512/or.h	67;"	d
_mm512_or_ps	simde/x86/avx512/or.h	68;"	d
_mm512_or_si512	simde/x86/avx512/or.h	245;"	d
_mm512_or_si512	simde/x86/avx512/or.h	246;"	d
_mm512_packs_epi16	simde/x86/avx512/packs.h	75;"	d
_mm512_packs_epi16	simde/x86/avx512/packs.h	76;"	d
_mm512_packs_epi32	simde/x86/avx512/packs.h	115;"	d
_mm512_packs_epi32	simde/x86/avx512/packs.h	116;"	d
_mm512_packus_epi16	simde/x86/avx512/packus.h	75;"	d
_mm512_packus_epi16	simde/x86/avx512/packus.h	76;"	d
_mm512_packus_epi32	simde/x86/avx512/packus.h	115;"	d
_mm512_packus_epi32	simde/x86/avx512/packus.h	116;"	d
_mm512_permutex2var_epi16	simde/x86/avx512/permutex2var.h	1200;"	d
_mm512_permutex2var_epi16	simde/x86/avx512/permutex2var.h	1201;"	d
_mm512_permutex2var_epi32	simde/x86/avx512/permutex2var.h	1292;"	d
_mm512_permutex2var_epi32	simde/x86/avx512/permutex2var.h	1293;"	d
_mm512_permutex2var_epi64	simde/x86/avx512/permutex2var.h	1359;"	d
_mm512_permutex2var_epi64	simde/x86/avx512/permutex2var.h	1360;"	d
_mm512_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1484;"	d
_mm512_permutex2var_epi8	simde/x86/avx512/permutex2var.h	1485;"	d
_mm512_permutex2var_pd	simde/x86/avx512/permutex2var.h	1540;"	d
_mm512_permutex2var_pd	simde/x86/avx512/permutex2var.h	1541;"	d
_mm512_permutex2var_ps	simde/x86/avx512/permutex2var.h	1596;"	d
_mm512_permutex2var_ps	simde/x86/avx512/permutex2var.h	1597;"	d
_mm512_permutexvar_epi16	simde/x86/avx512/permutexvar.h	723;"	d
_mm512_permutexvar_epi16	simde/x86/avx512/permutexvar.h	724;"	d
_mm512_permutexvar_epi32	simde/x86/avx512/permutexvar.h	865;"	d
_mm512_permutexvar_epi32	simde/x86/avx512/permutexvar.h	866;"	d
_mm512_permutexvar_epi64	simde/x86/avx512/permutexvar.h	919;"	d
_mm512_permutexvar_epi64	simde/x86/avx512/permutexvar.h	920;"	d
_mm512_permutexvar_epi8	simde/x86/avx512/permutexvar.h	1061;"	d
_mm512_permutexvar_epi8	simde/x86/avx512/permutexvar.h	1062;"	d
_mm512_permutexvar_pd	simde/x86/avx512/permutexvar.h	1103;"	d
_mm512_permutexvar_pd	simde/x86/avx512/permutexvar.h	1104;"	d
_mm512_permutexvar_ps	simde/x86/avx512/permutexvar.h	1145;"	d
_mm512_permutexvar_ps	simde/x86/avx512/permutexvar.h	1146;"	d
_mm512_pow_pd	simde/x86/svml.h	8768;"	d
_mm512_pow_pd	simde/x86/svml.h	8769;"	d
_mm512_pow_ps	simde/x86/svml.h	8742;"	d
_mm512_pow_ps	simde/x86/svml.h	8743;"	d
_mm512_recip_pd	simde/x86/svml.h	9742;"	d
_mm512_recip_pd	simde/x86/svml.h	9743;"	d
_mm512_recip_ps	simde/x86/svml.h	9728;"	d
_mm512_recip_ps	simde/x86/svml.h	9729;"	d
_mm512_rem_epi16	simde/x86/svml.h	9482;"	d
_mm512_rem_epi16	simde/x86/svml.h	9483;"	d
_mm512_rem_epi32	simde/x86/svml.h	9516;"	d
_mm512_rem_epi32	simde/x86/svml.h	9517;"	d
_mm512_rem_epi64	simde/x86/svml.h	9564;"	d
_mm512_rem_epi64	simde/x86/svml.h	9565;"	d
_mm512_rem_epi8	simde/x86/svml.h	9448;"	d
_mm512_rem_epi8	simde/x86/svml.h	9449;"	d
_mm512_rem_epu16	simde/x86/svml.h	9632;"	d
_mm512_rem_epu16	simde/x86/svml.h	9633;"	d
_mm512_rem_epu32	simde/x86/svml.h	9666;"	d
_mm512_rem_epu32	simde/x86/svml.h	9667;"	d
_mm512_rem_epu64	simde/x86/svml.h	9714;"	d
_mm512_rem_epu64	simde/x86/svml.h	9715;"	d
_mm512_rem_epu8	simde/x86/svml.h	9598;"	d
_mm512_rem_epu8	simde/x86/svml.h	9599;"	d
_mm512_rint_pd	simde/x86/svml.h	9820;"	d
_mm512_rint_pd	simde/x86/svml.h	9821;"	d
_mm512_rint_ps	simde/x86/svml.h	9795;"	d
_mm512_rint_ps	simde/x86/svml.h	9796;"	d
_mm512_sad_epu8	simde/x86/avx512/sad.h	70;"	d
_mm512_sad_epu8	simde/x86/avx512/sad.h	71;"	d
_mm512_set1_epi16	simde/x86/avx512/set1.h	104;"	d
_mm512_set1_epi16	simde/x86/avx512/set1.h	105;"	d
_mm512_set1_epi32	simde/x86/avx512/set1.h	153;"	d
_mm512_set1_epi32	simde/x86/avx512/set1.h	154;"	d
_mm512_set1_epi64	simde/x86/avx512/set1.h	202;"	d
_mm512_set1_epi64	simde/x86/avx512/set1.h	203;"	d
_mm512_set1_epi8	simde/x86/avx512/set1.h	55;"	d
_mm512_set1_epi8	simde/x86/avx512/set1.h	56;"	d
_mm512_set1_pd	simde/x86/avx512/set1.h	324;"	d
_mm512_set1_pd	simde/x86/avx512/set1.h	325;"	d
_mm512_set1_ps	simde/x86/avx512/set1.h	303;"	d
_mm512_set1_ps	simde/x86/avx512/set1.h	304;"	d
_mm512_set4_epi32	simde/x86/avx512/set4.h	62;"	d
_mm512_set4_epi32	simde/x86/avx512/set4.h	63;"	d
_mm512_set4_epi64	simde/x86/avx512/set4.h	83;"	d
_mm512_set4_epi64	simde/x86/avx512/set4.h	84;"	d
_mm512_set4_pd	simde/x86/avx512/set4.h	133;"	d
_mm512_set4_pd	simde/x86/avx512/set4.h	134;"	d
_mm512_set4_ps	simde/x86/avx512/set4.h	112;"	d
_mm512_set4_ps	simde/x86/avx512/set4.h	113;"	d
_mm512_set_epi16	simde/x86/avx512/set.h	81;"	d
_mm512_set_epi16	simde/x86/avx512/set.h	82;"	d
_mm512_set_epi32	simde/x86/avx512/set.h	111;"	d
_mm512_set_epi32	simde/x86/avx512/set.h	112;"	d
_mm512_set_epi64	simde/x86/avx512/set.h	132;"	d
_mm512_set_epi64	simde/x86/avx512/set.h	133;"	d
_mm512_set_epi8	simde/x86/avx512/set.h	383;"	d
_mm512_set_epi8	simde/x86/avx512/set.h	384;"	d
_mm512_set_pd	simde/x86/avx512/set.h	470;"	d
_mm512_set_pd	simde/x86/avx512/set.h	471;"	d
_mm512_set_ps	simde/x86/avx512/set.h	449;"	d
_mm512_set_ps	simde/x86/avx512/set.h	450;"	d
_mm512_setr4_epi32	simde/x86/avx512/setr4.h	62;"	d
_mm512_setr4_epi32	simde/x86/avx512/setr4.h	63;"	d
_mm512_setr4_epi64	simde/x86/avx512/setr4.h	83;"	d
_mm512_setr4_epi64	simde/x86/avx512/setr4.h	84;"	d
_mm512_setr4_pd	simde/x86/avx512/setr4.h	133;"	d
_mm512_setr4_pd	simde/x86/avx512/setr4.h	134;"	d
_mm512_setr4_ps	simde/x86/avx512/setr4.h	112;"	d
_mm512_setr4_ps	simde/x86/avx512/setr4.h	113;"	d
_mm512_setr_epi32	simde/x86/avx512/setr.h	63;"	d
_mm512_setr_epi32	simde/x86/avx512/setr.h	64;"	d
_mm512_setr_epi64	simde/x86/avx512/setr.h	84;"	d
_mm512_setr_epi64	simde/x86/avx512/setr.h	85;"	d
_mm512_setr_pd	simde/x86/avx512/setr.h	137;"	d
_mm512_setr_pd	simde/x86/avx512/setr.h	138;"	d
_mm512_setr_ps	simde/x86/avx512/setr.h	116;"	d
_mm512_setr_ps	simde/x86/avx512/setr.h	117;"	d
_mm512_setzero_epi32	simde/x86/avx512/setzero.h	55;"	d
_mm512_setzero_epi32	simde/x86/avx512/setzero.h	56;"	d
_mm512_setzero_si512	simde/x86/avx512/setzero.h	53;"	d
_mm512_setzero_si512	simde/x86/avx512/setzero.h	54;"	d
_mm512_setzero_si512	simde/x86/avx512/setzero.h	69;"	d
_mm512_setzero_si512	simde/x86/avx512/setzero.h	70;"	d
_mm512_setzero_si512	simde/x86/avx512/setzero.h	83;"	d
_mm512_setzero_si512	simde/x86/avx512/setzero.h	84;"	d
_mm512_shuffle_epi8	simde/x86/avx512/shuffle.h	65;"	d
_mm512_shuffle_epi8	simde/x86/avx512/shuffle.h	66;"	d
_mm512_shuffle_i32x4	simde/x86/avx512/shuffle.h	154;"	d
_mm512_shuffle_i32x4	simde/x86/avx512/shuffle.h	155;"	d
_mm512_sin_pd	simde/x86/svml.h	10047;"	d
_mm512_sin_pd	simde/x86/svml.h	10048;"	d
_mm512_sin_ps	simde/x86/svml.h	10012;"	d
_mm512_sin_ps	simde/x86/svml.h	10013;"	d
_mm512_sincos_pd	simde/x86/svml.h	10255;"	d
_mm512_sincos_pd	simde/x86/svml.h	10256;"	d
_mm512_sincos_ps	simde/x86/svml.h	10225;"	d
_mm512_sincos_ps	simde/x86/svml.h	10226;"	d
_mm512_sind_pd	simde/x86/svml.h	10487;"	d
_mm512_sind_pd	simde/x86/svml.h	10488;"	d
_mm512_sind_ps	simde/x86/svml.h	10452;"	d
_mm512_sind_ps	simde/x86/svml.h	10453;"	d
_mm512_sinh_pd	simde/x86/svml.h	10691;"	d
_mm512_sinh_pd	simde/x86/svml.h	10692;"	d
_mm512_sinh_ps	simde/x86/svml.h	10660;"	d
_mm512_sinh_ps	simde/x86/svml.h	10661;"	d
_mm512_sll_epi16	simde/x86/avx512/sll.h	76;"	d
_mm512_sll_epi16	simde/x86/avx512/sll.h	77;"	d
_mm512_sll_epi32	simde/x86/avx512/sll.h	144;"	d
_mm512_sll_epi32	simde/x86/avx512/sll.h	145;"	d
_mm512_sll_epi64	simde/x86/avx512/sll.h	212;"	d
_mm512_sll_epi64	simde/x86/avx512/sll.h	213;"	d
_mm512_slli_epi16	simde/x86/avx512/slli.h	74;"	d
_mm512_slli_epi16	simde/x86/avx512/slli.h	75;"	d
_mm512_slli_epi32	simde/x86/avx512/slli.h	124;"	d
_mm512_slli_epi32	simde/x86/avx512/slli.h	125;"	d
_mm512_slli_epi64	simde/x86/avx512/slli.h	172;"	d
_mm512_slli_epi64	simde/x86/avx512/slli.h	173;"	d
_mm512_sllv_epi16	simde/x86/avx512/sllv.h	61;"	d
_mm512_sllv_epi16	simde/x86/avx512/sllv.h	62;"	d
_mm512_sqrt_pd	simde/x86/avx512/sqrt.h	107;"	d
_mm512_sqrt_ps	simde/x86/avx512/sqrt.h	64;"	d
_mm512_sra_epi16	simde/x86/avx512/sra.h	74;"	d
_mm512_sra_epi16	simde/x86/avx512/sra.h	75;"	d
_mm512_srai_epi16	simde/x86/avx512/srai.h	63;"	d
_mm512_srai_epi16	simde/x86/avx512/srai.h	64;"	d
_mm512_srav_epi16	simde/x86/avx512/srav.h	60;"	d
_mm512_srav_epi16	simde/x86/avx512/srav.h	61;"	d
_mm512_srl_epi16	simde/x86/avx512/srl.h	75;"	d
_mm512_srl_epi16	simde/x86/avx512/srl.h	76;"	d
_mm512_srl_epi32	simde/x86/avx512/srl.h	114;"	d
_mm512_srl_epi32	simde/x86/avx512/srl.h	115;"	d
_mm512_srl_epi64	simde/x86/avx512/srl.h	181;"	d
_mm512_srl_epi64	simde/x86/avx512/srl.h	182;"	d
_mm512_srli_epi16	simde/x86/avx512/srli.h	76;"	d
_mm512_srli_epi16	simde/x86/avx512/srli.h	77;"	d
_mm512_srli_epi32	simde/x86/avx512/srli.h	123;"	d
_mm512_srli_epi32	simde/x86/avx512/srli.h	124;"	d
_mm512_srli_epi64	simde/x86/avx512/srli.h	173;"	d
_mm512_srli_epi64	simde/x86/avx512/srli.h	174;"	d
_mm512_srlv_epi16	simde/x86/avx512/srlv.h	211;"	d
_mm512_srlv_epi16	simde/x86/avx512/srlv.h	212;"	d
_mm512_srlv_epi32	simde/x86/avx512/srlv.h	243;"	d
_mm512_srlv_epi32	simde/x86/avx512/srlv.h	244;"	d
_mm512_srlv_epi64	simde/x86/avx512/srlv.h	275;"	d
_mm512_srlv_epi64	simde/x86/avx512/srlv.h	276;"	d
_mm512_store_epi16	simde/x86/avx512/store.h	79;"	d
_mm512_store_epi16	simde/x86/avx512/store.h	85;"	d
_mm512_store_epi32	simde/x86/avx512/store.h	80;"	d
_mm512_store_epi32	simde/x86/avx512/store.h	86;"	d
_mm512_store_epi64	simde/x86/avx512/store.h	81;"	d
_mm512_store_epi64	simde/x86/avx512/store.h	87;"	d
_mm512_store_epi8	simde/x86/avx512/store.h	78;"	d
_mm512_store_epi8	simde/x86/avx512/store.h	84;"	d
_mm512_store_pd	simde/x86/avx512/store.h	60;"	d
_mm512_store_pd	simde/x86/avx512/store.h	61;"	d
_mm512_store_ps	simde/x86/avx512/store.h	46;"	d
_mm512_store_ps	simde/x86/avx512/store.h	47;"	d
_mm512_store_si512	simde/x86/avx512/store.h	82;"	d
_mm512_store_si512	simde/x86/avx512/store.h	83;"	d
_mm512_storeu_epi16	simde/x86/avx512/storeu.h	79;"	d
_mm512_storeu_epi16	simde/x86/avx512/storeu.h	85;"	d
_mm512_storeu_epi32	simde/x86/avx512/storeu.h	80;"	d
_mm512_storeu_epi32	simde/x86/avx512/storeu.h	86;"	d
_mm512_storeu_epi64	simde/x86/avx512/storeu.h	81;"	d
_mm512_storeu_epi64	simde/x86/avx512/storeu.h	87;"	d
_mm512_storeu_epi8	simde/x86/avx512/storeu.h	78;"	d
_mm512_storeu_epi8	simde/x86/avx512/storeu.h	84;"	d
_mm512_storeu_pd	simde/x86/avx512/storeu.h	60;"	d
_mm512_storeu_pd	simde/x86/avx512/storeu.h	61;"	d
_mm512_storeu_ps	simde/x86/avx512/storeu.h	46;"	d
_mm512_storeu_ps	simde/x86/avx512/storeu.h	47;"	d
_mm512_storeu_si512	simde/x86/avx512/storeu.h	82;"	d
_mm512_storeu_si512	simde/x86/avx512/storeu.h	83;"	d
_mm512_sub_epi16	simde/x86/avx512/sub.h	120;"	d
_mm512_sub_epi16	simde/x86/avx512/sub.h	121;"	d
_mm512_sub_epi32	simde/x86/avx512/sub.h	148;"	d
_mm512_sub_epi32	simde/x86/avx512/sub.h	149;"	d
_mm512_sub_epi64	simde/x86/avx512/sub.h	204;"	d
_mm512_sub_epi64	simde/x86/avx512/sub.h	205;"	d
_mm512_sub_epi8	simde/x86/avx512/sub.h	64;"	d
_mm512_sub_epi8	simde/x86/avx512/sub.h	65;"	d
_mm512_sub_pd	simde/x86/avx512/sub.h	316;"	d
_mm512_sub_pd	simde/x86/avx512/sub.h	317;"	d
_mm512_sub_ps	simde/x86/avx512/sub.h	260;"	d
_mm512_sub_ps	simde/x86/avx512/sub.h	261;"	d
_mm512_subs_epi16	simde/x86/avx512/subs.h	125;"	d
_mm512_subs_epi16	simde/x86/avx512/subs.h	126;"	d
_mm512_subs_epi8	simde/x86/avx512/subs.h	66;"	d
_mm512_subs_epi8	simde/x86/avx512/subs.h	67;"	d
_mm512_subs_epu16	simde/x86/avx512/subs.h	215;"	d
_mm512_subs_epu16	simde/x86/avx512/subs.h	216;"	d
_mm512_subs_epu8	simde/x86/avx512/subs.h	156;"	d
_mm512_subs_epu8	simde/x86/avx512/subs.h	157;"	d
_mm512_svml_round_pd	simde/x86/svml.h	11171;"	d
_mm512_svml_round_pd	simde/x86/svml.h	11172;"	d
_mm512_svml_sqrt_pd	simde/x86/svml.h	11281;"	d
_mm512_svml_sqrt_pd	simde/x86/svml.h	11282;"	d
_mm512_svml_sqrt_ps	simde/x86/svml.h	11265;"	d
_mm512_svml_sqrt_ps	simde/x86/svml.h	11266;"	d
_mm512_tan_pd	simde/x86/svml.h	11480;"	d
_mm512_tan_pd	simde/x86/svml.h	11481;"	d
_mm512_tan_ps	simde/x86/svml.h	11445;"	d
_mm512_tan_ps	simde/x86/svml.h	11446;"	d
_mm512_tand_pd	simde/x86/svml.h	11706;"	d
_mm512_tand_pd	simde/x86/svml.h	11707;"	d
_mm512_tand_ps	simde/x86/svml.h	11671;"	d
_mm512_tand_ps	simde/x86/svml.h	11672;"	d
_mm512_tanh_pd	simde/x86/svml.h	11909;"	d
_mm512_tanh_pd	simde/x86/svml.h	11910;"	d
_mm512_tanh_ps	simde/x86/svml.h	11878;"	d
_mm512_tanh_ps	simde/x86/svml.h	11879;"	d
_mm512_test_epi16_mask	simde/x86/avx512/test.h	58;"	d
_mm512_test_epi16_mask	simde/x86/avx512/test.h	59;"	d
_mm512_test_epi32_mask	simde/x86/avx512/test.h	82;"	d
_mm512_test_epi32_mask	simde/x86/avx512/test.h	83;"	d
_mm512_test_epi64_mask	simde/x86/avx512/test.h	106;"	d
_mm512_test_epi64_mask	simde/x86/avx512/test.h	107;"	d
_mm512_test_epi8_mask	simde/x86/avx512/test.h	130;"	d
_mm512_test_epi8_mask	simde/x86/avx512/test.h	131;"	d
_mm512_trunc_pd	simde/x86/svml.h	12063;"	d
_mm512_trunc_pd	simde/x86/svml.h	12064;"	d
_mm512_trunc_ps	simde/x86/svml.h	12032;"	d
_mm512_trunc_ps	simde/x86/svml.h	12033;"	d
_mm512_unpackhi_epi16	simde/x86/avx512/unpackhi.h	125;"	d
_mm512_unpackhi_epi16	simde/x86/avx512/unpackhi.h	126;"	d
_mm512_unpackhi_epi32	simde/x86/avx512/unpackhi.h	181;"	d
_mm512_unpackhi_epi32	simde/x86/avx512/unpackhi.h	182;"	d
_mm512_unpackhi_epi64	simde/x86/avx512/unpackhi.h	235;"	d
_mm512_unpackhi_epi64	simde/x86/avx512/unpackhi.h	236;"	d
_mm512_unpackhi_epi8	simde/x86/avx512/unpackhi.h	69;"	d
_mm512_unpackhi_epi8	simde/x86/avx512/unpackhi.h	70;"	d
_mm512_unpackhi_pd	simde/x86/avx512/unpackhi.h	345;"	d
_mm512_unpackhi_pd	simde/x86/avx512/unpackhi.h	346;"	d
_mm512_unpackhi_ps	simde/x86/avx512/unpackhi.h	291;"	d
_mm512_unpackhi_ps	simde/x86/avx512/unpackhi.h	292;"	d
_mm512_unpacklo_epi16	simde/x86/avx512/unpacklo.h	97;"	d
_mm512_unpacklo_epi16	simde/x86/avx512/unpacklo.h	98;"	d
_mm512_unpacklo_epi8	simde/x86/avx512/unpacklo.h	69;"	d
_mm512_unpacklo_epi8	simde/x86/avx512/unpacklo.h	70;"	d
_mm512_xor_epi32	simde/x86/avx512/xor.h	132;"	d
_mm512_xor_epi32	simde/x86/avx512/xor.h	133;"	d
_mm512_xor_epi64	simde/x86/avx512/xor.h	192;"	d
_mm512_xor_epi64	simde/x86/avx512/xor.h	193;"	d
_mm512_xor_pd	simde/x86/avx512/xor.h	100;"	d
_mm512_xor_pd	simde/x86/avx512/xor.h	101;"	d
_mm512_xor_ps	simde/x86/avx512/xor.h	69;"	d
_mm512_xor_ps	simde/x86/avx512/xor.h	70;"	d
_mm512_xor_si512	simde/x86/avx512/xor.h	256;"	d
_mm512_xor_si512	simde/x86/avx512/xor.h	257;"	d
_mm_abs_epi16	simde/x86/ssse3.h	89;"	d
_mm_abs_epi32	simde/x86/ssse3.h	124;"	d
_mm_abs_epi64	simde/x86/avx512/abs.h	148;"	d
_mm_abs_epi64	simde/x86/avx512/abs.h	149;"	d
_mm_abs_epi8	simde/x86/ssse3.h	61;"	d
_mm_abs_pi16	simde/x86/ssse3.h	176;"	d
_mm_abs_pi32	simde/x86/ssse3.h	202;"	d
_mm_abs_pi8	simde/x86/ssse3.h	150;"	d
_mm_acos_pd	simde/x86/svml.h	116;"	d
_mm_acos_pd	simde/x86/svml.h	117;"	d
_mm_acos_ps	simde/x86/svml.h	87;"	d
_mm_acos_ps	simde/x86/svml.h	88;"	d
_mm_acosh_pd	simde/x86/svml.h	335;"	d
_mm_acosh_pd	simde/x86/svml.h	336;"	d
_mm_acosh_ps	simde/x86/svml.h	310;"	d
_mm_acosh_ps	simde/x86/svml.h	311;"	d
_mm_add_epi16	simde/x86/sse2.h	563;"	d
_mm_add_epi32	simde/x86/sse2.h	596;"	d
_mm_add_epi64	simde/x86/sse2.h	629;"	d
_mm_add_epi8	simde/x86/sse2.h	530;"	d
_mm_add_pd	simde/x86/sse2.h	664;"	d
_mm_add_pi16	simde/x86/mmx.h	246;"	d
_mm_add_pi32	simde/x86/mmx.h	278;"	d
_mm_add_pi8	simde/x86/mmx.h	214;"	d
_mm_add_ps	simde/x86/sse.h	617;"	d
_mm_add_sd	simde/x86/sse2.h	722;"	d
_mm_add_si64	simde/x86/sse2.h	746;"	d
_mm_add_ss	simde/x86/sse.h	649;"	d
_mm_adds_epi16	simde/x86/sse2.h	814;"	d
_mm_adds_epi8	simde/x86/sse2.h	780;"	d
_mm_adds_epu16	simde/x86/sse2.h	876;"	d
_mm_adds_epu8	simde/x86/sse2.h	845;"	d
_mm_adds_pi16	simde/x86/mmx.h	385;"	d
_mm_adds_pi8	simde/x86/mmx.h	315;"	d
_mm_adds_pu16	simde/x86/mmx.h	419;"	d
_mm_adds_pu8	simde/x86/mmx.h	349;"	d
_mm_addsub_pd	simde/x86/sse3.h	266;"	d
_mm_addsub_ps	simde/x86/sse3.h	297;"	d
_mm_alignr_epi8	simde/x86/ssse3.h	243;"	d
_mm_alignr_pi8	simde/x86/ssse3.h	284;"	d
_mm_and_pd	simde/x86/sse2.h	909;"	d
_mm_and_ps	simde/x86/sse.h	682;"	d
_mm_and_si128	simde/x86/sse2.h	940;"	d
_mm_and_si64	simde/x86/mmx.h	446;"	d
_mm_andnot_pd	simde/x86/sse2.h	975;"	d
_mm_andnot_ps	simde/x86/sse.h	715;"	d
_mm_andnot_si128	simde/x86/sse2.h	1006;"	d
_mm_andnot_si64	simde/x86/mmx.h	475;"	d
_mm_asin_pd	simde/x86/svml.h	546;"	d
_mm_asin_pd	simde/x86/svml.h	547;"	d
_mm_asin_ps	simde/x86/svml.h	517;"	d
_mm_asin_ps	simde/x86/svml.h	518;"	d
_mm_asinh_pd	simde/x86/svml.h	765;"	d
_mm_asinh_pd	simde/x86/svml.h	766;"	d
_mm_asinh_ps	simde/x86/svml.h	740;"	d
_mm_asinh_ps	simde/x86/svml.h	741;"	d
_mm_atan2_pd	simde/x86/svml.h	1205;"	d
_mm_atan2_pd	simde/x86/svml.h	1206;"	d
_mm_atan2_ps	simde/x86/svml.h	1175;"	d
_mm_atan2_ps	simde/x86/svml.h	1176;"	d
_mm_atan_pd	simde/x86/svml.h	976;"	d
_mm_atan_pd	simde/x86/svml.h	977;"	d
_mm_atan_ps	simde/x86/svml.h	947;"	d
_mm_atan_ps	simde/x86/svml.h	948;"	d
_mm_atanh_pd	simde/x86/svml.h	1428;"	d
_mm_atanh_pd	simde/x86/svml.h	1429;"	d
_mm_atanh_ps	simde/x86/svml.h	1403;"	d
_mm_atanh_ps	simde/x86/svml.h	1404;"	d
_mm_avg_epu16	simde/x86/sse2.h	1115;"	d
_mm_avg_epu8	simde/x86/sse2.h	1076;"	d
_mm_avg_pu16	simde/x86/sse.h	891;"	d
_mm_avg_pu8	simde/x86/sse.h	928;"	d
_mm_blend_epi16	simde/x86/sse4.1.h	92;"	d
_mm_blend_epi16	simde/x86/sse4.1.h	93;"	d
_mm_blend_epi32	simde/x86/avx2.h	577;"	d
_mm_blend_epi32	simde/x86/avx2.h	578;"	d
_mm_blend_pd	simde/x86/sse4.1.h	134;"	d
_mm_blend_pd	simde/x86/sse4.1.h	135;"	d
_mm_blend_ps	simde/x86/sse4.1.h	180;"	d
_mm_blend_ps	simde/x86/sse4.1.h	181;"	d
_mm_blendv_epi8	simde/x86/sse4.1.h	227;"	d
_mm_blendv_epi8	simde/x86/sse4.1.h	228;"	d
_mm_blendv_pd	simde/x86/sse4.1.h	364;"	d
_mm_blendv_pd	simde/x86/sse4.1.h	365;"	d
_mm_blendv_ps	simde/x86/sse4.1.h	378;"	d
_mm_blendv_ps	simde/x86/sse4.1.h	379;"	d
_mm_broadcast_ss	simde/x86/avx.h	1948;"	d
_mm_broadcast_ss	simde/x86/avx.h	1949;"	d
_mm_broadcastb_epi8	simde/x86/avx2.h	696;"	d
_mm_broadcastb_epi8	simde/x86/avx2.h	697;"	d
_mm_broadcastd_epi32	simde/x86/avx2.h	784;"	d
_mm_broadcastd_epi32	simde/x86/avx2.h	785;"	d
_mm_broadcastq_epi64	simde/x86/avx2.h	828;"	d
_mm_broadcastq_epi64	simde/x86/avx2.h	829;"	d
_mm_broadcastsd_pd	simde/x86/avx2.h	904;"	d
_mm_broadcastsd_pd	simde/x86/avx2.h	905;"	d
_mm_broadcastsi128_si256	simde/x86/avx2.h	957;"	d
_mm_broadcastsi128_si256	simde/x86/avx2.h	958;"	d
_mm_broadcastss_ps	simde/x86/avx2.h	872;"	d
_mm_broadcastss_ps	simde/x86/avx2.h	873;"	d
_mm_broadcastw_epi16	simde/x86/avx2.h	740;"	d
_mm_broadcastw_epi16	simde/x86/avx2.h	741;"	d
_mm_bslli_si128	simde/x86/sse2.h	1217;"	d
_mm_bsrli_si128	simde/x86/sse2.h	1289;"	d
_mm_castpd_ps	simde/x86/sse2.h	1495;"	d
_mm_castpd_si128	simde/x86/sse2.h	1512;"	d
_mm_castps_pd	simde/x86/sse2.h	1529;"	d
_mm_castps_si128	simde/x86/sse2.h	1546;"	d
_mm_castsi128_pd	simde/x86/sse2.h	1563;"	d
_mm_castsi128_ps	simde/x86/sse2.h	1582;"	d
_mm_cbrt_pd	simde/x86/svml.h	1631;"	d
_mm_cbrt_pd	simde/x86/svml.h	1632;"	d
_mm_cbrt_ps	simde/x86/svml.h	1606;"	d
_mm_cbrt_ps	simde/x86/svml.h	1607;"	d
_mm_cdfnorm_pd	simde/x86/svml.h	4827;"	d
_mm_cdfnorm_pd	simde/x86/svml.h	4828;"	d
_mm_cdfnorm_ps	simde/x86/svml.h	4773;"	d
_mm_cdfnorm_ps	simde/x86/svml.h	4774;"	d
_mm_cdfnorminv_pd	simde/x86/svml.h	6011;"	d
_mm_cdfnorminv_pd	simde/x86/svml.h	6012;"	d
_mm_cdfnorminv_ps	simde/x86/svml.h	5886;"	d
_mm_cdfnorminv_ps	simde/x86/svml.h	5887;"	d
_mm_ceil_pd	simde/x86/sse4.1.h	488;"	d
_mm_ceil_pd	simde/x86/sse4.1.h	489;"	d
_mm_ceil_ps	simde/x86/sse4.1.h	498;"	d
_mm_ceil_ps	simde/x86/sse4.1.h	499;"	d
_mm_ceil_sd	simde/x86/sse4.1.h	523;"	d
_mm_ceil_sd	simde/x86/sse4.1.h	524;"	d
_mm_ceil_ss	simde/x86/sse4.1.h	550;"	d
_mm_ceil_ss	simde/x86/sse4.1.h	551;"	d
_mm_cexp_ps	simde/x86/svml.h	1809;"	d
_mm_cexp_ps	simde/x86/svml.h	1810;"	d
_mm_clflush	simde/x86/sse2.h	1303;"	d
_mm_clmulepi64_si128	simde/x86/clmul.h	220;"	d
_mm_clmulepi64_si128	simde/x86/clmul.h	221;"	d
_mm_clog_ps	simde/x86/svml.h	8821;"	d
_mm_clog_ps	simde/x86/svml.h	8822;"	d
_mm_cmp_pd	simde/x86/avx.h	2281;"	d
_mm_cmp_pd	simde/x86/avx.h	2282;"	d
_mm_cmp_ps	simde/x86/avx.h	2353;"	d
_mm_cmp_ps	simde/x86/avx.h	2354;"	d
_mm_cmp_sd	simde/x86/avx.h	2488;"	d
_mm_cmp_sd	simde/x86/avx.h	2489;"	d
_mm_cmp_ss	simde/x86/avx.h	2625;"	d
_mm_cmp_ss	simde/x86/avx.h	2626;"	d
_mm_cmpeq_epi16	simde/x86/sse2.h	1648;"	d
_mm_cmpeq_epi32	simde/x86/sse2.h	1681;"	d
_mm_cmpeq_epi64	simde/x86/sse4.1.h	587;"	d
_mm_cmpeq_epi64	simde/x86/sse4.1.h	588;"	d
_mm_cmpeq_epi8	simde/x86/sse2.h	1615;"	d
_mm_cmpeq_pd	simde/x86/sse2.h	1714;"	d
_mm_cmpeq_pi16	simde/x86/mmx.h	535;"	d
_mm_cmpeq_pi32	simde/x86/mmx.h	565;"	d
_mm_cmpeq_pi8	simde/x86/mmx.h	505;"	d
_mm_cmpeq_ps	simde/x86/sse.h	990;"	d
_mm_cmpeq_sd	simde/x86/sse2.h	1737;"	d
_mm_cmpeq_ss	simde/x86/sse.h	1016;"	d
_mm_cmpestrs	simde/x86/sse4.2.h	112;"	d
_mm_cmpestrs	simde/x86/sse4.2.h	113;"	d
_mm_cmpestrz	simde/x86/sse4.2.h	132;"	d
_mm_cmpestrz	simde/x86/sse4.2.h	133;"	d
_mm_cmpge_pd	simde/x86/sse2.h	2189;"	d
_mm_cmpge_ps	simde/x86/sse.h	1049;"	d
_mm_cmpge_sd	simde/x86/sse2.h	2212;"	d
_mm_cmpge_ss	simde/x86/sse.h	1075;"	d
_mm_cmpgt_epi16	simde/x86/sse2.h	2067;"	d
_mm_cmpgt_epi32	simde/x86/sse2.h	2100;"	d
_mm_cmpgt_epi64	simde/x86/sse4.2.h	190;"	d
_mm_cmpgt_epi64	simde/x86/sse4.2.h	191;"	d
_mm_cmpgt_epi8	simde/x86/sse2.h	2034;"	d
_mm_cmpgt_pd	simde/x86/sse2.h	2133;"	d
_mm_cmpgt_pi16	simde/x86/mmx.h	625;"	d
_mm_cmpgt_pi32	simde/x86/mmx.h	655;"	d
_mm_cmpgt_pi8	simde/x86/mmx.h	595;"	d
_mm_cmpgt_ps	simde/x86/sse.h	1108;"	d
_mm_cmpgt_sd	simde/x86/sse2.h	2156;"	d
_mm_cmpgt_ss	simde/x86/sse.h	1134;"	d
_mm_cmpistrs	simde/x86/sse4.2.h	231;"	d
_mm_cmpistrs	simde/x86/sse4.2.h	232;"	d
_mm_cmpistrz	simde/x86/sse4.2.h	272;"	d
_mm_cmpistrz	simde/x86/sse4.2.h	273;"	d
_mm_cmple_pd	simde/x86/sse2.h	1978;"	d
_mm_cmple_ps	simde/x86/sse.h	1167;"	d
_mm_cmple_sd	simde/x86/sse2.h	2001;"	d
_mm_cmple_ss	simde/x86/sse.h	1193;"	d
_mm_cmplt_epi16	simde/x86/sse2.h	1858;"	d
_mm_cmplt_epi32	simde/x86/sse2.h	1891;"	d
_mm_cmplt_epi8	simde/x86/sse2.h	1825;"	d
_mm_cmplt_pd	simde/x86/sse2.h	1922;"	d
_mm_cmplt_ps	simde/x86/sse.h	1226;"	d
_mm_cmplt_sd	simde/x86/sse2.h	1945;"	d
_mm_cmplt_ss	simde/x86/sse.h	1252;"	d
_mm_cmpneq_pd	simde/x86/sse2.h	1768;"	d
_mm_cmpneq_ps	simde/x86/sse.h	1293;"	d
_mm_cmpneq_sd	simde/x86/sse2.h	1792;"	d
_mm_cmpneq_ss	simde/x86/sse.h	1319;"	d
_mm_cmpnge_pd	simde/x86/sse2.h	2251;"	d
_mm_cmpnge_ps	simde/x86/sse.h	1328;"	d
_mm_cmpnge_sd	simde/x86/sse2.h	2264;"	d
_mm_cmpnge_ss	simde/x86/sse.h	1337;"	d
_mm_cmpngt_pd	simde/x86/sse2.h	2225;"	d
_mm_cmpngt_ps	simde/x86/sse.h	1346;"	d
_mm_cmpngt_sd	simde/x86/sse2.h	2238;"	d
_mm_cmpngt_ss	simde/x86/sse.h	1355;"	d
_mm_cmpnle_pd	simde/x86/sse2.h	2303;"	d
_mm_cmpnle_ps	simde/x86/sse.h	1364;"	d
_mm_cmpnle_sd	simde/x86/sse2.h	2316;"	d
_mm_cmpnle_ss	simde/x86/sse.h	1373;"	d
_mm_cmpnlt_pd	simde/x86/sse2.h	2277;"	d
_mm_cmpnlt_ps	simde/x86/sse.h	1382;"	d
_mm_cmpnlt_sd	simde/x86/sse2.h	2290;"	d
_mm_cmpnlt_ss	simde/x86/sse.h	1391;"	d
_mm_cmpord_pd	simde/x86/sse2.h	2350;"	d
_mm_cmpord_ps	simde/x86/sse.h	1432;"	d
_mm_cmpord_sd	simde/x86/sse2.h	2395;"	d
_mm_cmpord_ss	simde/x86/sse.h	2254;"	d
_mm_cmpunord_pd	simde/x86/sse2.h	2426;"	d
_mm_cmpunord_ps	simde/x86/sse.h	1474;"	d
_mm_cmpunord_sd	simde/x86/sse2.h	2453;"	d
_mm_cmpunord_ss	simde/x86/sse.h	1504;"	d
_mm_comieq_sd	simde/x86/sse2.h	1325;"	d
_mm_comieq_ss	simde/x86/sse.h	1529;"	d
_mm_comige_sd	simde/x86/sse2.h	1347;"	d
_mm_comige_ss	simde/x86/sse.h	1554;"	d
_mm_comigt_sd	simde/x86/sse2.h	1369;"	d
_mm_comigt_ss	simde/x86/sse.h	1579;"	d
_mm_comile_sd	simde/x86/sse2.h	1391;"	d
_mm_comile_ss	simde/x86/sse.h	1604;"	d
_mm_comilt_sd	simde/x86/sse2.h	1413;"	d
_mm_comilt_ss	simde/x86/sse.h	1629;"	d
_mm_comineq_sd	simde/x86/sse2.h	1435;"	d
_mm_comineq_ss	simde/x86/sse.h	1654;"	d
_mm_cos_pd	simde/x86/svml.h	1892;"	d
_mm_cos_pd	simde/x86/svml.h	1893;"	d
_mm_cos_ps	simde/x86/svml.h	1863;"	d
_mm_cos_ps	simde/x86/svml.h	1864;"	d
_mm_cosd_pd	simde/x86/svml.h	2306;"	d
_mm_cosd_pd	simde/x86/svml.h	2307;"	d
_mm_cosd_ps	simde/x86/svml.h	2277;"	d
_mm_cosd_ps	simde/x86/svml.h	2278;"	d
_mm_cosh_pd	simde/x86/svml.h	2524;"	d
_mm_cosh_pd	simde/x86/svml.h	2525;"	d
_mm_cosh_ps	simde/x86/svml.h	2499;"	d
_mm_cosh_ps	simde/x86/svml.h	2500;"	d
_mm_crc32_u16	simde/x86/sse4.2.h	318;"	d
_mm_crc32_u32	simde/x86/sse4.2.h	338;"	d
_mm_crc32_u64	simde/x86/sse4.2.h	358;"	d
_mm_crc32_u8	simde/x86/sse4.2.h	298;"	d
_mm_csqrt_ps	simde/x86/svml.h	8876;"	d
_mm_csqrt_ps	simde/x86/svml.h	8877;"	d
_mm_cvt_pi2ps	simde/x86/sse.h	1728;"	d
_mm_cvt_ps2pi	simde/x86/sse.h	1759;"	d
_mm_cvt_si2ss	simde/x86/sse.h	1785;"	d
_mm_cvt_ss2si	simde/x86/sse.h	1801;"	d
_mm_cvtepi16_epi32	simde/x86/sse4.1.h	860;"	d
_mm_cvtepi16_epi32	simde/x86/sse4.1.h	861;"	d
_mm_cvtepi16_epi64	simde/x86/sse4.1.h	968;"	d
_mm_cvtepi16_epi64	simde/x86/sse4.1.h	969;"	d
_mm_cvtepi32_epi64	simde/x86/sse4.1.h	1005;"	d
_mm_cvtepi32_epi64	simde/x86/sse4.1.h	1006;"	d
_mm_cvtepi32_pd	simde/x86/sse2.h	2478;"	d
_mm_cvtepi32_ps	simde/x86/sse2.h	2514;"	d
_mm_cvtepi8_epi16	simde/x86/sse4.1.h	625;"	d
_mm_cvtepi8_epi16	simde/x86/sse4.1.h	626;"	d
_mm_cvtepi8_epi32	simde/x86/sse4.1.h	664;"	d
_mm_cvtepi8_epi32	simde/x86/sse4.1.h	665;"	d
_mm_cvtepi8_epi64	simde/x86/sse4.1.h	703;"	d
_mm_cvtepi8_epi64	simde/x86/sse4.1.h	704;"	d
_mm_cvtepu16_epi32	simde/x86/sse4.1.h	895;"	d
_mm_cvtepu16_epi32	simde/x86/sse4.1.h	896;"	d
_mm_cvtepu16_epi64	simde/x86/sse4.1.h	933;"	d
_mm_cvtepu16_epi64	simde/x86/sse4.1.h	934;"	d
_mm_cvtepu32_epi64	simde/x86/sse4.1.h	1039;"	d
_mm_cvtepu32_epi64	simde/x86/sse4.1.h	1040;"	d
_mm_cvtepu8_epi16	simde/x86/sse4.1.h	741;"	d
_mm_cvtepu8_epi16	simde/x86/sse4.1.h	742;"	d
_mm_cvtepu8_epi32	simde/x86/sse4.1.h	784;"	d
_mm_cvtepu8_epi32	simde/x86/sse4.1.h	785;"	d
_mm_cvtepu8_epi64	simde/x86/sse4.1.h	828;"	d
_mm_cvtepu8_epi64	simde/x86/sse4.1.h	829;"	d
_mm_cvtm64_si64	simde/x86/mmx.h	681;"	d
_mm_cvtpd_epi32	simde/x86/sse2.h	2536;"	d
_mm_cvtpd_pi32	simde/x86/sse2.h	2557;"	d
_mm_cvtpd_ps	simde/x86/sse2.h	2586;"	d
_mm_cvtpi16_ps	simde/x86/sse.h	1829;"	d
_mm_cvtpi32_pd	simde/x86/sse2.h	2611;"	d
_mm_cvtpi32_ps	simde/x86/sse.h	1859;"	d
_mm_cvtpi32x2_ps	simde/x86/sse.h	1889;"	d
_mm_cvtpi8_ps	simde/x86/sse.h	1914;"	d
_mm_cvtps_epi32	simde/x86/sse2.h	2645;"	d
_mm_cvtps_pd	simde/x86/sse2.h	2672;"	d
_mm_cvtps_pi16	simde/x86/sse.h	1939;"	d
_mm_cvtps_pi32	simde/x86/sse.h	1964;"	d
_mm_cvtps_pi8	simde/x86/sse.h	2001;"	d
_mm_cvtpu16_ps	simde/x86/sse.h	2028;"	d
_mm_cvtpu8_ps	simde/x86/sse.h	2053;"	d
_mm_cvtsd_f64	simde/x86/sse2.h	2368;"	d
_mm_cvtsd_si32	simde/x86/sse2.h	2686;"	d
_mm_cvtsd_si64	simde/x86/sse2.h	2705;"	d
_mm_cvtsd_si64x	simde/x86/sse2.h	2706;"	d
_mm_cvtsd_ss	simde/x86/sse2.h	2734;"	d
_mm_cvtsepi16_epi8	simde/x86/avx512/cvts.h	62;"	d
_mm_cvtsepi16_epi8	simde/x86/avx512/cvts.h	63;"	d
_mm_cvtsepi32_epi16	simde/x86/avx512/cvts.h	170;"	d
_mm_cvtsepi32_epi16	simde/x86/avx512/cvts.h	171;"	d
_mm_cvtsepi32_epi8	simde/x86/avx512/cvts.h	116;"	d
_mm_cvtsepi32_epi8	simde/x86/avx512/cvts.h	117;"	d
_mm_cvtsepi64_epi8	simde/x86/avx512/cvts.h	224;"	d
_mm_cvtsepi64_epi8	simde/x86/avx512/cvts.h	225;"	d
_mm_cvtsi128_si32	simde/x86/sse2.h	2781;"	d
_mm_cvtsi128_si64	simde/x86/sse2.h	2807;"	d
_mm_cvtsi128_si64x	simde/x86/sse2.h	2808;"	d
_mm_cvtsi32_sd	simde/x86/sse2.h	2831;"	d
_mm_cvtsi32_si128	simde/x86/sse2.h	2880;"	d
_mm_cvtsi32_si64	simde/x86/mmx.h	706;"	d
_mm_cvtsi32_ss	simde/x86/sse.h	2076;"	d
_mm_cvtsi64_m64	simde/x86/mmx.h	729;"	d
_mm_cvtsi64_sd	simde/x86/sse2.h	2909;"	d
_mm_cvtsi64_si128	simde/x86/sse2.h	2939;"	d
_mm_cvtsi64_si32	simde/x86/mmx.h	754;"	d
_mm_cvtsi64_ss	simde/x86/sse.h	2103;"	d
_mm_cvtsi64x_sd	simde/x86/sse2.h	2910;"	d
_mm_cvtsi64x_si128	simde/x86/sse2.h	2940;"	d
_mm_cvtss_f32	simde/x86/sse.h	2121;"	d
_mm_cvtss_sd	simde/x86/sse2.h	2962;"	d
_mm_cvtss_si32	simde/x86/sse.h	2130;"	d
_mm_cvtss_si64	simde/x86/sse.h	2152;"	d
_mm_cvtt_ps2pi	simde/x86/sse.h	2180;"	d
_mm_cvtt_ss2si	simde/x86/sse.h	2201;"	d
_mm_cvttpd_epi32	simde/x86/sse2.h	2983;"	d
_mm_cvttpd_pi32	simde/x86/sse2.h	3007;"	d
_mm_cvttps_epi32	simde/x86/sse2.h	3033;"	d
_mm_cvttps_pi32	simde/x86/sse.h	2181;"	d
_mm_cvttsd_si32	simde/x86/sse2.h	3047;"	d
_mm_cvttsd_si64	simde/x86/sse2.h	3066;"	d
_mm_cvttsd_si64x	simde/x86/sse2.h	3067;"	d
_mm_cvttss_si32	simde/x86/sse.h	2202;"	d
_mm_cvttss_si64	simde/x86/sse.h	2225;"	d
_mm_div_epi16	simde/x86/svml.h	2737;"	d
_mm_div_epi16	simde/x86/svml.h	2738;"	d
_mm_div_epi32	simde/x86/svml.h	2768;"	d
_mm_div_epi32	simde/x86/svml.h	2769;"	d
_mm_div_epi64	simde/x86/svml.h	2800;"	d
_mm_div_epi64	simde/x86/svml.h	2801;"	d
_mm_div_epi8	simde/x86/svml.h	2707;"	d
_mm_div_epi8	simde/x86/svml.h	2708;"	d
_mm_div_epu16	simde/x86/svml.h	2860;"	d
_mm_div_epu16	simde/x86/svml.h	2861;"	d
_mm_div_epu32	simde/x86/svml.h	2891;"	d
_mm_div_epu32	simde/x86/svml.h	2892;"	d
_mm_div_epu64	simde/x86/svml.h	2923;"	d
_mm_div_epu64	simde/x86/svml.h	2924;"	d
_mm_div_epu8	simde/x86/svml.h	2830;"	d
_mm_div_epu8	simde/x86/svml.h	2831;"	d
_mm_div_pd	simde/x86/sse2.h	3098;"	d
_mm_div_ps	simde/x86/sse.h	2291;"	d
_mm_div_sd	simde/x86/sse2.h	3126;"	d
_mm_div_ss	simde/x86/sse.h	2323;"	d
_mm_dp_pd	simde/x86/sse4.1.h	1102;"	d
_mm_dp_pd	simde/x86/sse4.1.h	1103;"	d
_mm_dp_ps	simde/x86/sse4.1.h	1172;"	d
_mm_dp_ps	simde/x86/sse4.1.h	1173;"	d
_mm_empty	simde/x86/mmx.h	768;"	d
_mm_erf_pd	simde/x86/svml.h	3551;"	d
_mm_erf_pd	simde/x86/svml.h	3552;"	d
_mm_erf_ps	simde/x86/svml.h	3526;"	d
_mm_erf_ps	simde/x86/svml.h	3527;"	d
_mm_erfc_pd	simde/x86/svml.h	3754;"	d
_mm_erfc_pd	simde/x86/svml.h	3755;"	d
_mm_erfc_ps	simde/x86/svml.h	3729;"	d
_mm_erfc_ps	simde/x86/svml.h	3730;"	d
_mm_erfcinv_pd	simde/x86/svml.h	7096;"	d
_mm_erfcinv_pd	simde/x86/svml.h	7097;"	d
_mm_erfcinv_ps	simde/x86/svml.h	6952;"	d
_mm_erfcinv_ps	simde/x86/svml.h	6953;"	d
_mm_erfinv_pd	simde/x86/svml.h	6604;"	d
_mm_erfinv_pd	simde/x86/svml.h	6605;"	d
_mm_erfinv_ps	simde/x86/svml.h	6562;"	d
_mm_erfinv_ps	simde/x86/svml.h	6563;"	d
_mm_exp10_pd	simde/x86/svml.h	4566;"	d
_mm_exp10_pd	simde/x86/svml.h	4567;"	d
_mm_exp10_ps	simde/x86/svml.h	4541;"	d
_mm_exp10_ps	simde/x86/svml.h	4542;"	d
_mm_exp2_pd	simde/x86/svml.h	4363;"	d
_mm_exp2_pd	simde/x86/svml.h	4364;"	d
_mm_exp2_ps	simde/x86/svml.h	4338;"	d
_mm_exp2_ps	simde/x86/svml.h	4339;"	d
_mm_exp_pd	simde/x86/svml.h	3957;"	d
_mm_exp_pd	simde/x86/svml.h	3958;"	d
_mm_exp_ps	simde/x86/svml.h	3932;"	d
_mm_exp_ps	simde/x86/svml.h	3933;"	d
_mm_expm1_pd	simde/x86/svml.h	4160;"	d
_mm_expm1_pd	simde/x86/svml.h	4161;"	d
_mm_expm1_ps	simde/x86/svml.h	4135;"	d
_mm_expm1_ps	simde/x86/svml.h	4136;"	d
_mm_extract_epi16	simde/x86/sse2.h	3154;"	d
_mm_extract_epi32	simde/x86/sse4.1.h	1234;"	d
_mm_extract_epi32	simde/x86/sse4.1.h	1235;"	d
_mm_extract_epi64	simde/x86/sse4.1.h	1266;"	d
_mm_extract_epi64	simde/x86/sse4.1.h	1267;"	d
_mm_extract_epi8	simde/x86/sse4.1.h	1202;"	d
_mm_extract_epi8	simde/x86/sse4.1.h	1203;"	d
_mm_extract_pi16	simde/x86/sse.h	2349;"	d
_mm_extract_ps	simde/x86/sse4.1.h	1288;"	d
_mm_extract_ps	simde/x86/sse4.1.h	1289;"	d
_mm_floor_pd	simde/x86/sse4.1.h	1298;"	d
_mm_floor_pd	simde/x86/sse4.1.h	1299;"	d
_mm_floor_ps	simde/x86/sse4.1.h	1308;"	d
_mm_floor_ps	simde/x86/sse4.1.h	1309;"	d
_mm_floor_sd	simde/x86/sse4.1.h	1334;"	d
_mm_floor_sd	simde/x86/sse4.1.h	1335;"	d
_mm_floor_ss	simde/x86/sse4.1.h	1364;"	d
_mm_floor_ss	simde/x86/sse4.1.h	1365;"	d
_mm_fmadd_pd	simde/x86/fma.h	72;"	d
_mm_fmadd_pd	simde/x86/fma.h	73;"	d
_mm_fmadd_ps	simde/x86/fma.h	126;"	d
_mm_fmadd_ps	simde/x86/fma.h	127;"	d
_mm_fmadd_sd	simde/x86/fma.h	166;"	d
_mm_fmadd_sd	simde/x86/fma.h	167;"	d
_mm_fmadd_ss	simde/x86/fma.h	180;"	d
_mm_fmadd_ss	simde/x86/fma.h	181;"	d
_mm_fmaddsub_pd	simde/x86/fma.h	194;"	d
_mm_fmaddsub_pd	simde/x86/fma.h	195;"	d
_mm_fmaddsub_ps	simde/x86/fma.h	222;"	d
_mm_fmaddsub_ps	simde/x86/fma.h	223;"	d
_mm_fmsub_pd	simde/x86/fma.h	250;"	d
_mm_fmsub_pd	simde/x86/fma.h	251;"	d
_mm_fmsub_ps	simde/x86/fma.h	278;"	d
_mm_fmsub_ps	simde/x86/fma.h	279;"	d
_mm_fmsub_sd	simde/x86/fma.h	306;"	d
_mm_fmsub_sd	simde/x86/fma.h	307;"	d
_mm_fmsub_ss	simde/x86/fma.h	320;"	d
_mm_fmsub_ss	simde/x86/fma.h	321;"	d
_mm_fmsubadd_pd	simde/x86/fma.h	346;"	d
_mm_fmsubadd_pd	simde/x86/fma.h	347;"	d
_mm_fmsubadd_ps	simde/x86/fma.h	398;"	d
_mm_fmsubadd_ps	simde/x86/fma.h	399;"	d
_mm_fnmadd_pd	simde/x86/fma.h	449;"	d
_mm_fnmadd_pd	simde/x86/fma.h	450;"	d
_mm_fnmadd_ps	simde/x86/fma.h	499;"	d
_mm_fnmadd_ps	simde/x86/fma.h	500;"	d
_mm_fnmadd_sd	simde/x86/fma.h	547;"	d
_mm_fnmadd_sd	simde/x86/fma.h	548;"	d
_mm_fnmadd_ss	simde/x86/fma.h	570;"	d
_mm_fnmadd_ss	simde/x86/fma.h	571;"	d
_mm_fnmsub_pd	simde/x86/fma.h	595;"	d
_mm_fnmsub_pd	simde/x86/fma.h	596;"	d
_mm_fnmsub_ps	simde/x86/fma.h	645;"	d
_mm_fnmsub_ps	simde/x86/fma.h	646;"	d
_mm_fnmsub_sd	simde/x86/fma.h	693;"	d
_mm_fnmsub_sd	simde/x86/fma.h	694;"	d
_mm_fnmsub_ss	simde/x86/fma.h	716;"	d
_mm_fnmsub_ss	simde/x86/fma.h	717;"	d
_mm_getcsr	simde/x86/sse.h	370;"	d
_mm_gf2p8affine_epi64_epi8	simde/x86/gfni.h	346;"	d
_mm_gf2p8affine_epi64_epi8	simde/x86/gfni.h	347;"	d
_mm_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	448;"	d
_mm_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	449;"	d
_mm_gf2p8mul_epi8	simde/x86/gfni.h	603;"	d
_mm_gf2p8mul_epi8	simde/x86/gfni.h	604;"	d
_mm_hadd_epi16	simde/x86/ssse3.h	379;"	d
_mm_hadd_epi32	simde/x86/ssse3.h	397;"	d
_mm_hadd_pd	simde/x86/sse3.h	312;"	d
_mm_hadd_pi16	simde/x86/ssse3.h	431;"	d
_mm_hadd_pi32	simde/x86/ssse3.h	463;"	d
_mm_hadd_ps	simde/x86/sse3.h	330;"	d
_mm_hadds_epi16	simde/x86/ssse3.h	479;"	d
_mm_hadds_pi16	simde/x86/ssse3.h	509;"	d
_mm_hsub_epi16	simde/x86/ssse3.h	525;"	d
_mm_hsub_epi32	simde/x86/ssse3.h	541;"	d
_mm_hsub_pd	simde/x86/sse3.h	343;"	d
_mm_hsub_pi16	simde/x86/ssse3.h	573;"	d
_mm_hsub_pi32	simde/x86/ssse3.h	603;"	d
_mm_hsub_ps	simde/x86/sse3.h	359;"	d
_mm_hsubs_epi16	simde/x86/ssse3.h	619;"	d
_mm_hsubs_pi16	simde/x86/ssse3.h	647;"	d
_mm_hypot_pd	simde/x86/svml.h	5193;"	d
_mm_hypot_pd	simde/x86/svml.h	5194;"	d
_mm_hypot_ps	simde/x86/svml.h	5163;"	d
_mm_hypot_ps	simde/x86/svml.h	5164;"	d
_mm_i32_gather_epi32	simde/x86/avx2.h	1650;"	d
_mm_i32_gather_epi64	simde/x86/avx2.h	1908;"	d
_mm_i32_gather_pd	simde/x86/avx2.h	2451;"	d
_mm_i32_gather_ps	simde/x86/avx2.h	2191;"	d
_mm_i32gather_epi32	simde/x86/avx2.h	1651;"	d
_mm_i32gather_epi64	simde/x86/avx2.h	1909;"	d
_mm_i32gather_pd	simde/x86/avx2.h	2452;"	d
_mm_i32gather_ps	simde/x86/avx2.h	2192;"	d
_mm_i64_gather_epi32	simde/x86/avx2.h	1776;"	d
_mm_i64_gather_epi64	simde/x86/avx2.h	2052;"	d
_mm_i64_gather_pd	simde/x86/avx2.h	2581;"	d
_mm_i64_gather_ps	simde/x86/avx2.h	2321;"	d
_mm_i64gather_epi32	simde/x86/avx2.h	1777;"	d
_mm_i64gather_epi64	simde/x86/avx2.h	2053;"	d
_mm_i64gather_pd	simde/x86/avx2.h	2582;"	d
_mm_i64gather_ps	simde/x86/avx2.h	2322;"	d
_mm_idiv_epi32	simde/x86/svml.h	2770;"	d
_mm_idiv_epi32	simde/x86/svml.h	2771;"	d
_mm_idivrem_epi32	simde/x86/svml.h	5114;"	d
_mm_idivrem_epi32	simde/x86/svml.h	5115;"	d
_mm_insert_epi16	simde/x86/sse2.h	3171;"	d
_mm_insert_epi32	simde/x86/sse4.1.h	1417;"	d
_mm_insert_epi32	simde/x86/sse4.1.h	1418;"	d
_mm_insert_epi64	simde/x86/sse4.1.h	1454;"	d
_mm_insert_epi64	simde/x86/sse4.1.h	1455;"	d
_mm_insert_epi8	simde/x86/sse4.1.h	1392;"	d
_mm_insert_epi8	simde/x86/sse4.1.h	1393;"	d
_mm_insert_pi16	simde/x86/sse.h	2382;"	d
_mm_insert_ps	simde/x86/sse4.1.h	1481;"	d
_mm_insert_ps	simde/x86/sse4.1.h	1482;"	d
_mm_invcbrt_pd	simde/x86/svml.h	5394;"	d
_mm_invcbrt_pd	simde/x86/svml.h	5395;"	d
_mm_invcbrt_ps	simde/x86/svml.h	5380;"	d
_mm_invcbrt_ps	simde/x86/svml.h	5381;"	d
_mm_invsqrt_pd	simde/x86/svml.h	5450;"	d
_mm_invsqrt_pd	simde/x86/svml.h	5451;"	d
_mm_invsqrt_ps	simde/x86/svml.h	5436;"	d
_mm_invsqrt_ps	simde/x86/svml.h	5437;"	d
_mm_irem_epi32	simde/x86/svml.h	8993;"	d
_mm_irem_epi32	simde/x86/svml.h	8994;"	d
_mm_lddqu_si128	simde/x86/sse3.h	380;"	d
_mm_lfence	simde/x86/sse2.h	6878;"	d
_mm_load1_pd	simde/x86/sse2.h	3213;"	d
_mm_load1_ps	simde/x86/sse.h	2431;"	d
_mm_load_pd	simde/x86/sse2.h	3194;"	d
_mm_load_pd1	simde/x86/sse2.h	3212;"	d
_mm_load_ps	simde/x86/sse.h	2408;"	d
_mm_load_ps1	simde/x86/sse.h	2430;"	d
_mm_load_sd	simde/x86/sse2.h	3235;"	d
_mm_load_si128	simde/x86/sse2.h	3258;"	d
_mm_load_ss	simde/x86/sse.h	2455;"	d
_mm_loaddup_pd	simde/x86/sse3.h	404;"	d
_mm_loadh_pd	simde/x86/sse2.h	3285;"	d
_mm_loadh_pi	simde/x86/sse.h	2482;"	d
_mm_loadl_epi64	simde/x86/sse2.h	3310;"	d
_mm_loadl_pd	simde/x86/sse2.h	3335;"	d
_mm_loadl_pi	simde/x86/sse.h	2520;"	d
_mm_loadr_pd	simde/x86/sse2.h	3365;"	d
_mm_loadr_ps	simde/x86/sse.h	2551;"	d
_mm_loadu_pd	simde/x86/sse2.h	3384;"	d
_mm_loadu_ps	simde/x86/sse.h	2576;"	d
_mm_loadu_si128	simde/x86/sse2.h	3487;"	d
_mm_loadu_si16	simde/x86/sse2.h	4562;"	d
_mm_loadu_si32	simde/x86/sse2.h	4607;"	d
_mm_loadu_si64	simde/x86/sse2.h	4672;"	d
_mm_log10_pd	simde/x86/svml.h	8384;"	d
_mm_log10_pd	simde/x86/svml.h	8385;"	d
_mm_log10_ps	simde/x86/svml.h	8359;"	d
_mm_log10_ps	simde/x86/svml.h	8360;"	d
_mm_log1p_pd	simde/x86/svml.h	8181;"	d
_mm_log1p_pd	simde/x86/svml.h	8182;"	d
_mm_log1p_ps	simde/x86/svml.h	8156;"	d
_mm_log1p_ps	simde/x86/svml.h	8157;"	d
_mm_log2_pd	simde/x86/svml.h	7962;"	d
_mm_log2_pd	simde/x86/svml.h	7963;"	d
_mm_log2_ps	simde/x86/svml.h	7933;"	d
_mm_log2_ps	simde/x86/svml.h	7934;"	d
_mm_log_pd	simde/x86/svml.h	5592;"	d
_mm_log_pd	simde/x86/svml.h	5593;"	d
_mm_log_ps	simde/x86/svml.h	5563;"	d
_mm_log_ps	simde/x86/svml.h	5564;"	d
_mm_logb_pd	simde/x86/svml.h	7759;"	d
_mm_logb_pd	simde/x86/svml.h	7760;"	d
_mm_logb_ps	simde/x86/svml.h	7736;"	d
_mm_logb_ps	simde/x86/svml.h	7737;"	d
_mm_lzcnt_epi32	simde/x86/avx512/lzcnt.h	174;"	d
_mm_lzcnt_epi32	simde/x86/avx512/lzcnt.h	175;"	d
_mm_madd_epi16	simde/x86/sse2.h	3525;"	d
_mm_madd_pi16	simde/x86/mmx.h	799;"	d
_mm_maddubs_epi16	simde/x86/ssse3.h	690;"	d
_mm_maddubs_pi16	simde/x86/ssse3.h	725;"	d
_mm_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	335;"	d
_mm_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	336;"	d
_mm_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	408;"	d
_mm_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	409;"	d
_mm_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	475;"	d
_mm_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	476;"	d
_mm_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	550;"	d
_mm_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	551;"	d
_mm_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	606;"	d
_mm_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	607;"	d
_mm_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	662;"	d
_mm_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	663;"	d
_mm_mask_abs_epi16	simde/x86/avx512/abs.h	77;"	d
_mm_mask_abs_epi16	simde/x86/avx512/abs.h	78;"	d
_mm_mask_abs_epi32	simde/x86/avx512/abs.h	105;"	d
_mm_mask_abs_epi32	simde/x86/avx512/abs.h	106;"	d
_mm_mask_abs_epi64	simde/x86/avx512/abs.h	162;"	d
_mm_mask_abs_epi64	simde/x86/avx512/abs.h	163;"	d
_mm_mask_abs_epi8	simde/x86/avx512/abs.h	49;"	d
_mm_mask_abs_epi8	simde/x86/avx512/abs.h	50;"	d
_mm_mask_add_epi16	simde/x86/avx512/add.h	77;"	d
_mm_mask_add_epi16	simde/x86/avx512/add.h	78;"	d
_mm_mask_add_epi32	simde/x86/avx512/add.h	105;"	d
_mm_mask_add_epi32	simde/x86/avx512/add.h	106;"	d
_mm_mask_add_epi64	simde/x86/avx512/add.h	133;"	d
_mm_mask_add_epi64	simde/x86/avx512/add.h	134;"	d
_mm_mask_add_epi8	simde/x86/avx512/add.h	49;"	d
_mm_mask_add_epi8	simde/x86/avx512/add.h	50;"	d
_mm_mask_add_ss	simde/x86/avx512/add.h	171;"	d
_mm_mask_add_ss	simde/x86/avx512/add.h	172;"	d
_mm_mask_adds_epi16	simde/x86/avx512/adds.h	77;"	d
_mm_mask_adds_epi16	simde/x86/avx512/adds.h	78;"	d
_mm_mask_adds_epi8	simde/x86/avx512/adds.h	49;"	d
_mm_mask_adds_epi8	simde/x86/avx512/adds.h	50;"	d
_mm_mask_avg_epu16	simde/x86/avx512/avg.h	77;"	d
_mm_mask_avg_epu16	simde/x86/avx512/avg.h	78;"	d
_mm_mask_avg_epu8	simde/x86/avx512/avg.h	49;"	d
_mm_mask_avg_epu8	simde/x86/avx512/avg.h	50;"	d
_mm_mask_blend_epi16	simde/x86/avx512/blend.h	62;"	d
_mm_mask_blend_epi16	simde/x86/avx512/blend.h	63;"	d
_mm_mask_blend_epi32	simde/x86/avx512/blend.h	76;"	d
_mm_mask_blend_epi32	simde/x86/avx512/blend.h	77;"	d
_mm_mask_blend_epi64	simde/x86/avx512/blend.h	90;"	d
_mm_mask_blend_epi64	simde/x86/avx512/blend.h	91;"	d
_mm_mask_blend_epi8	simde/x86/avx512/blend.h	48;"	d
_mm_mask_blend_epi8	simde/x86/avx512/blend.h	49;"	d
_mm_mask_blend_pd	simde/x86/avx512/blend.h	118;"	d
_mm_mask_blend_pd	simde/x86/avx512/blend.h	119;"	d
_mm_mask_blend_ps	simde/x86/avx512/blend.h	104;"	d
_mm_mask_blend_ps	simde/x86/avx512/blend.h	105;"	d
_mm_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	384;"	d
_mm_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	385;"	d
_mm_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	486;"	d
_mm_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	487;"	d
_mm_mask_gf2p8mul_epi8	simde/x86/gfni.h	724;"	d
_mm_mask_gf2p8mul_epi8	simde/x86/gfni.h	725;"	d
_mm_mask_i32gather_epi32	simde/x86/avx2.h	1685;"	d
_mm_mask_i32gather_epi32	simde/x86/avx2.h	1686;"	d
_mm_mask_i32gather_epi64	simde/x86/avx2.h	1947;"	d
_mm_mask_i32gather_epi64	simde/x86/avx2.h	1948;"	d
_mm_mask_i32gather_pd	simde/x86/avx2.h	2487;"	d
_mm_mask_i32gather_pd	simde/x86/avx2.h	2488;"	d
_mm_mask_i32gather_ps	simde/x86/avx2.h	2227;"	d
_mm_mask_i32gather_ps	simde/x86/avx2.h	2228;"	d
_mm_mask_i64gather_epi32	simde/x86/avx2.h	1811;"	d
_mm_mask_i64gather_epi32	simde/x86/avx2.h	1812;"	d
_mm_mask_i64gather_epi64	simde/x86/avx2.h	2091;"	d
_mm_mask_i64gather_epi64	simde/x86/avx2.h	2092;"	d
_mm_mask_i64gather_pd	simde/x86/avx2.h	2617;"	d
_mm_mask_i64gather_pd	simde/x86/avx2.h	2618;"	d
_mm_mask_i64gather_ps	simde/x86/avx2.h	2357;"	d
_mm_mask_i64gather_ps	simde/x86/avx2.h	2358;"	d
_mm_mask_lzcnt_epi32	simde/x86/avx512/lzcnt.h	188;"	d
_mm_mask_lzcnt_epi32	simde/x86/avx512/lzcnt.h	189;"	d
_mm_mask_madd_epi16	simde/x86/avx512/madd.h	49;"	d
_mm_mask_madd_epi16	simde/x86/avx512/madd.h	50;"	d
_mm_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	50;"	d
_mm_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	51;"	d
_mm_mask_mov_epi16	simde/x86/avx512/mov.h	83;"	d
_mm_mask_mov_epi16	simde/x86/avx512/mov.h	84;"	d
_mm_mask_mov_epi32	simde/x86/avx512/mov.h	107;"	d
_mm_mask_mov_epi32	simde/x86/avx512/mov.h	108;"	d
_mm_mask_mov_epi64	simde/x86/avx512/mov.h	132;"	d
_mm_mask_mov_epi64	simde/x86/avx512/mov.h	133;"	d
_mm_mask_mov_epi8	simde/x86/avx512/mov.h	59;"	d
_mm_mask_mov_epi8	simde/x86/avx512/mov.h	60;"	d
_mm_mask_mov_pd	simde/x86/avx512/mov.h	146;"	d
_mm_mask_mov_pd	simde/x86/avx512/mov.h	147;"	d
_mm_mask_mov_ps	simde/x86/avx512/mov.h	160;"	d
_mm_mask_mov_ps	simde/x86/avx512/mov.h	161;"	d
_mm_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	321;"	d
_mm_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	322;"	d
_mm_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	394;"	d
_mm_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	395;"	d
_mm_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	461;"	d
_mm_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	462;"	d
_mm_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	536;"	d
_mm_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	537;"	d
_mm_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	592;"	d
_mm_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	593;"	d
_mm_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	648;"	d
_mm_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	649;"	d
_mm_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	110;"	d
_mm_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	111;"	d
_mm_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	178;"	d
_mm_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	179;"	d
_mm_mask_srlv_epi16	simde/x86/avx512/srlv.h	77;"	d
_mm_mask_srlv_epi16	simde/x86/avx512/srlv.h	78;"	d
_mm_mask_srlv_epi32	simde/x86/avx512/srlv.h	105;"	d
_mm_mask_srlv_epi32	simde/x86/avx512/srlv.h	106;"	d
_mm_mask_srlv_epi64	simde/x86/avx512/srlv.h	133;"	d
_mm_mask_srlv_epi64	simde/x86/avx512/srlv.h	134;"	d
_mm_maskload_epi32	simde/x86/avx2.h	2791;"	d
_mm_maskload_epi32	simde/x86/avx2.h	2792;"	d
_mm_maskload_epi64	simde/x86/avx2.h	2842;"	d
_mm_maskload_epi64	simde/x86/avx2.h	2843;"	d
_mm_maskload_pd	simde/x86/avx.h	3985;"	d
_mm_maskload_pd	simde/x86/avx.h	3986;"	d
_mm_maskload_ps	simde/x86/avx.h	4036;"	d
_mm_maskload_ps	simde/x86/avx.h	4037;"	d
_mm_maskmove_si64	simde/x86/sse.h	2597;"	d
_mm_maskmoveu_si128	simde/x86/sse2.h	3546;"	d
_mm_maskstore_epi32	simde/x86/avx2.h	2886;"	d
_mm_maskstore_epi32	simde/x86/avx2.h	2887;"	d
_mm_maskstore_epi64	simde/x86/avx2.h	2928;"	d
_mm_maskstore_epi64	simde/x86/avx2.h	2929;"	d
_mm_maskstore_pd	simde/x86/avx.h	4080;"	d
_mm_maskstore_pd	simde/x86/avx.h	4081;"	d
_mm_maskstore_ps	simde/x86/avx.h	4122;"	d
_mm_maskstore_ps	simde/x86/avx.h	4123;"	d
_mm_maskz_abs_epi16	simde/x86/avx512/abs.h	91;"	d
_mm_maskz_abs_epi16	simde/x86/avx512/abs.h	92;"	d
_mm_maskz_abs_epi32	simde/x86/avx512/abs.h	119;"	d
_mm_maskz_abs_epi32	simde/x86/avx512/abs.h	120;"	d
_mm_maskz_abs_epi64	simde/x86/avx512/abs.h	176;"	d
_mm_maskz_abs_epi64	simde/x86/avx512/abs.h	177;"	d
_mm_maskz_abs_epi8	simde/x86/avx512/abs.h	63;"	d
_mm_maskz_abs_epi8	simde/x86/avx512/abs.h	64;"	d
_mm_maskz_add_epi16	simde/x86/avx512/add.h	91;"	d
_mm_maskz_add_epi16	simde/x86/avx512/add.h	92;"	d
_mm_maskz_add_epi32	simde/x86/avx512/add.h	119;"	d
_mm_maskz_add_epi32	simde/x86/avx512/add.h	120;"	d
_mm_maskz_add_epi64	simde/x86/avx512/add.h	147;"	d
_mm_maskz_add_epi64	simde/x86/avx512/add.h	148;"	d
_mm_maskz_add_epi8	simde/x86/avx512/add.h	63;"	d
_mm_maskz_add_epi8	simde/x86/avx512/add.h	64;"	d
_mm_maskz_add_ss	simde/x86/avx512/add.h	194;"	d
_mm_maskz_add_ss	simde/x86/avx512/add.h	195;"	d
_mm_maskz_adds_epi16	simde/x86/avx512/adds.h	91;"	d
_mm_maskz_adds_epi16	simde/x86/avx512/adds.h	92;"	d
_mm_maskz_adds_epi8	simde/x86/avx512/adds.h	63;"	d
_mm_maskz_adds_epi8	simde/x86/avx512/adds.h	64;"	d
_mm_maskz_avg_epu16	simde/x86/avx512/avg.h	91;"	d
_mm_maskz_avg_epu16	simde/x86/avx512/avg.h	92;"	d
_mm_maskz_avg_epu8	simde/x86/avx512/avg.h	63;"	d
_mm_maskz_avg_epu8	simde/x86/avx512/avg.h	64;"	d
_mm_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	414;"	d
_mm_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	415;"	d
_mm_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	516;"	d
_mm_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	517;"	d
_mm_maskz_gf2p8mul_epi8	simde/x86/gfni.h	766;"	d
_mm_maskz_gf2p8mul_epi8	simde/x86/gfni.h	767;"	d
_mm_maskz_lzcnt_epi32	simde/x86/avx512/lzcnt.h	202;"	d
_mm_maskz_lzcnt_epi32	simde/x86/avx512/lzcnt.h	203;"	d
_mm_maskz_madd_epi16	simde/x86/avx512/madd.h	63;"	d
_mm_maskz_madd_epi16	simde/x86/avx512/madd.h	64;"	d
_mm_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	64;"	d
_mm_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	65;"	d
_mm_maskz_mov_epi16	simde/x86/avx512/mov.h	496;"	d
_mm_maskz_mov_epi16	simde/x86/avx512/mov.h	497;"	d
_mm_maskz_mov_epi32	simde/x86/avx512/mov.h	519;"	d
_mm_maskz_mov_epi32	simde/x86/avx512/mov.h	520;"	d
_mm_maskz_mov_epi64	simde/x86/avx512/mov.h	543;"	d
_mm_maskz_mov_epi64	simde/x86/avx512/mov.h	544;"	d
_mm_maskz_mov_epi8	simde/x86/avx512/mov.h	473;"	d
_mm_maskz_mov_epi8	simde/x86/avx512/mov.h	474;"	d
_mm_maskz_mov_pd	simde/x86/avx512/mov.h	557;"	d
_mm_maskz_mov_pd	simde/x86/avx512/mov.h	558;"	d
_mm_maskz_mov_ps	simde/x86/avx512/mov.h	571;"	d
_mm_maskz_mov_ps	simde/x86/avx512/mov.h	572;"	d
_mm_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	349;"	d
_mm_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	350;"	d
_mm_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	422;"	d
_mm_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	423;"	d
_mm_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	489;"	d
_mm_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	490;"	d
_mm_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	564;"	d
_mm_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	565;"	d
_mm_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	620;"	d
_mm_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	621;"	d
_mm_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	676;"	d
_mm_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	677;"	d
_mm_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	124;"	d
_mm_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	125;"	d
_mm_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	192;"	d
_mm_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	193;"	d
_mm_maskz_srlv_epi16	simde/x86/avx512/srlv.h	91;"	d
_mm_maskz_srlv_epi16	simde/x86/avx512/srlv.h	92;"	d
_mm_maskz_srlv_epi32	simde/x86/avx512/srlv.h	119;"	d
_mm_maskz_srlv_epi32	simde/x86/avx512/srlv.h	120;"	d
_mm_maskz_srlv_epi64	simde/x86/avx512/srlv.h	147;"	d
_mm_maskz_srlv_epi64	simde/x86/avx512/srlv.h	148;"	d
_mm_max_epi16	simde/x86/sse2.h	3882;"	d
_mm_max_epi32	simde/x86/sse4.1.h	1545;"	d
_mm_max_epi32	simde/x86/sse4.1.h	1546;"	d
_mm_max_epi8	simde/x86/sse4.1.h	1513;"	d
_mm_max_epi8	simde/x86/sse4.1.h	1514;"	d
_mm_max_epu16	simde/x86/sse4.1.h	1577;"	d
_mm_max_epu16	simde/x86/sse4.1.h	1578;"	d
_mm_max_epu32	simde/x86/sse4.1.h	1609;"	d
_mm_max_epu32	simde/x86/sse4.1.h	1610;"	d
_mm_max_epu8	simde/x86/sse2.h	3913;"	d
_mm_max_pd	simde/x86/sse2.h	3944;"	d
_mm_max_pi16	simde/x86/sse.h	2626;"	d
_mm_max_ps	simde/x86/sse.h	2664;"	d
_mm_max_pu8	simde/x86/sse.h	2692;"	d
_mm_max_sd	simde/x86/sse2.h	3972;"	d
_mm_max_ss	simde/x86/sse.h	2723;"	d
_mm_mfence	simde/x86/sse2.h	6891;"	d
_mm_min_epi16	simde/x86/sse2.h	3761;"	d
_mm_min_epi32	simde/x86/sse4.1.h	1669;"	d
_mm_min_epi32	simde/x86/sse4.1.h	1670;"	d
_mm_min_epi8	simde/x86/sse4.1.h	1639;"	d
_mm_min_epi8	simde/x86/sse4.1.h	1640;"	d
_mm_min_epu16	simde/x86/sse4.1.h	1699;"	d
_mm_min_epu16	simde/x86/sse4.1.h	1700;"	d
_mm_min_epu32	simde/x86/sse4.1.h	1729;"	d
_mm_min_epu32	simde/x86/sse4.1.h	1730;"	d
_mm_min_epu8	simde/x86/sse2.h	3792;"	d
_mm_min_pd	simde/x86/sse2.h	3823;"	d
_mm_min_pi16	simde/x86/sse.h	2751;"	d
_mm_min_ps	simde/x86/sse.h	2804;"	d
_mm_min_pu8	simde/x86/sse.h	2832;"	d
_mm_min_sd	simde/x86/sse2.h	3851;"	d
_mm_min_ss	simde/x86/sse.h	2863;"	d
_mm_minpos_epu16	simde/x86/sse4.1.h	1755;"	d
_mm_minpos_epu16	simde/x86/sse4.1.h	1756;"	d
_mm_move_epi64	simde/x86/sse2.h	3996;"	d
_mm_move_sd	simde/x86/sse2.h	699;"	d
_mm_move_ss	simde/x86/sse.h	584;"	d
_mm_movedup_pd	simde/x86/sse3.h	432;"	d
_mm_movehdup_ps	simde/x86/sse3.h	462;"	d
_mm_movehl_ps	simde/x86/sse.h	2897;"	d
_mm_moveldup_ps	simde/x86/sse3.h	492;"	d
_mm_movelh_ps	simde/x86/sse.h	2931;"	d
_mm_movemask_epi8	simde/x86/sse2.h	3657;"	d
_mm_movemask_pd	simde/x86/sse2.h	3685;"	d
_mm_movemask_pi8	simde/x86/sse.h	2964;"	d
_mm_movemask_ps	simde/x86/sse.h	3000;"	d
_mm_movepi16_mask	simde/x86/avx512/mov_mask.h	91;"	d
_mm_movepi16_mask	simde/x86/avx512/mov_mask.h	92;"	d
_mm_movepi32_mask	simde/x86/avx512/mov_mask.h	115;"	d
_mm_movepi32_mask	simde/x86/avx512/mov_mask.h	116;"	d
_mm_movepi64_mask	simde/x86/avx512/mov_mask.h	139;"	d
_mm_movepi64_mask	simde/x86/avx512/mov_mask.h	140;"	d
_mm_movepi64_pi64	simde/x86/sse2.h	3707;"	d
_mm_movepi8_mask	simde/x86/avx512/mov_mask.h	60;"	d
_mm_movepi8_mask	simde/x86/avx512/mov_mask.h	61;"	d
_mm_movm_epi16	simde/x86/avx512/movm.h	176;"	d
_mm_movm_epi16	simde/x86/avx512/movm.h	177;"	d
_mm_movm_epi32	simde/x86/avx512/movm.h	283;"	d
_mm_movm_epi32	simde/x86/avx512/movm.h	284;"	d
_mm_movm_epi64	simde/x86/avx512/movm.h	390;"	d
_mm_movm_epi64	simde/x86/avx512/movm.h	391;"	d
_mm_movm_epi8	simde/x86/avx512/movm.h	76;"	d
_mm_movm_epi8	simde/x86/avx512/movm.h	77;"	d
_mm_movpi64_epi64	simde/x86/sse2.h	3730;"	d
_mm_mpsadbw_epu8	simde/x86/sse4.1.h	1789;"	d
_mm_mpsadbw_epu8	simde/x86/sse4.1.h	1790;"	d
_mm_mul_epi32	simde/x86/sse4.1.h	1826;"	d
_mm_mul_epi32	simde/x86/sse4.1.h	1827;"	d
_mm_mul_epu32	simde/x86/sse2.h	4031;"	d
_mm_mul_pd	simde/x86/sse2.h	4104;"	d
_mm_mul_ps	simde/x86/sse.h	3033;"	d
_mm_mul_sd	simde/x86/sse2.h	4132;"	d
_mm_mul_ss	simde/x86/sse.h	3058;"	d
_mm_mul_su32	simde/x86/sse2.h	4156;"	d
_mm_mulhi_epi16	simde/x86/sse2.h	4195;"	d
_mm_mulhi_epu16	simde/x86/sse2.h	4234;"	d
_mm_mulhi_pi16	simde/x86/mmx.h	832;"	d
_mm_mulhi_pu16	simde/x86/sse.h	3089;"	d
_mm_mulhrs_epi16	simde/x86/ssse3.h	764;"	d
_mm_mulhrs_pi16	simde/x86/ssse3.h	799;"	d
_mm_mullo_epi16	simde/x86/sse2.h	4265;"	d
_mm_mullo_epi32	simde/x86/sse4.1.h	1860;"	d
_mm_mullo_epi32	simde/x86/sse4.1.h	1861;"	d
_mm_mullo_pi16	simde/x86/mmx.h	864;"	d
_mm_or_pd	simde/x86/sse2.h	4296;"	d
_mm_or_ps	simde/x86/sse.h	781;"	d
_mm_or_si128	simde/x86/sse2.h	4327;"	d
_mm_or_si64	simde/x86/mmx.h	891;"	d
_mm_packs_epi16	simde/x86/sse2.h	4355;"	d
_mm_packs_epi32	simde/x86/sse2.h	4385;"	d
_mm_packs_pi16	simde/x86/mmx.h	938;"	d
_mm_packs_pi32	simde/x86/mmx.h	985;"	d
_mm_packs_pu16	simde/x86/mmx.h	1047;"	d
_mm_packus_epi16	simde/x86/sse2.h	4415;"	d
_mm_packus_epi32	simde/x86/sse4.1.h	1913;"	d
_mm_packus_epi32	simde/x86/sse4.1.h	1914;"	d
_mm_pause	simde/x86/sse2.h	4426;"	d
_mm_permute_pd	simde/x86/avx.h	4601;"	d
_mm_permute_pd	simde/x86/avx.h	4602;"	d
_mm_permute_ps	simde/x86/avx.h	4577;"	d
_mm_permute_ps	simde/x86/avx.h	4578;"	d
_mm_permutevar_pd	simde/x86/avx.h	4649;"	d
_mm_permutevar_pd	simde/x86/avx.h	4650;"	d
_mm_permutevar_ps	simde/x86/avx.h	4625;"	d
_mm_permutevar_ps	simde/x86/avx.h	4626;"	d
_mm_permutex2var_epi16	simde/x86/avx512/permutex2var.h	307;"	d
_mm_permutex2var_epi16	simde/x86/avx512/permutex2var.h	308;"	d
_mm_permutex2var_epi32	simde/x86/avx512/permutex2var.h	380;"	d
_mm_permutex2var_epi32	simde/x86/avx512/permutex2var.h	381;"	d
_mm_permutex2var_epi64	simde/x86/avx512/permutex2var.h	447;"	d
_mm_permutex2var_epi64	simde/x86/avx512/permutex2var.h	448;"	d
_mm_permutex2var_epi8	simde/x86/avx512/permutex2var.h	522;"	d
_mm_permutex2var_epi8	simde/x86/avx512/permutex2var.h	523;"	d
_mm_permutex2var_pd	simde/x86/avx512/permutex2var.h	578;"	d
_mm_permutex2var_pd	simde/x86/avx512/permutex2var.h	579;"	d
_mm_permutex2var_ps	simde/x86/avx512/permutex2var.h	634;"	d
_mm_permutex2var_ps	simde/x86/avx512/permutex2var.h	635;"	d
_mm_permutexvar_epi16	simde/x86/avx512/permutexvar.h	96;"	d
_mm_permutexvar_epi16	simde/x86/avx512/permutexvar.h	97;"	d
_mm_permutexvar_epi8	simde/x86/avx512/permutexvar.h	164;"	d
_mm_permutexvar_epi8	simde/x86/avx512/permutexvar.h	165;"	d
_mm_pow_pd	simde/x86/svml.h	8663;"	d
_mm_pow_pd	simde/x86/svml.h	8664;"	d
_mm_pow_ps	simde/x86/svml.h	8637;"	d
_mm_pow_ps	simde/x86/svml.h	8638;"	d
_mm_prefetch	simde/x86/sse.h	3162;"	d
_mm_rcp_ps	simde/x86/sse.h	3246;"	d
_mm_rcp_ss	simde/x86/sse.h	3270;"	d
_mm_rem_epi16	simde/x86/svml.h	8962;"	d
_mm_rem_epi16	simde/x86/svml.h	8963;"	d
_mm_rem_epi32	simde/x86/svml.h	8991;"	d
_mm_rem_epi32	simde/x86/svml.h	8992;"	d
_mm_rem_epi64	simde/x86/svml.h	9021;"	d
_mm_rem_epi64	simde/x86/svml.h	9022;"	d
_mm_rem_epi8	simde/x86/svml.h	8934;"	d
_mm_rem_epi8	simde/x86/svml.h	8935;"	d
_mm_rem_epu16	simde/x86/svml.h	9077;"	d
_mm_rem_epu16	simde/x86/svml.h	9078;"	d
_mm_rem_epu32	simde/x86/svml.h	9106;"	d
_mm_rem_epu32	simde/x86/svml.h	9107;"	d
_mm_rem_epu64	simde/x86/svml.h	9136;"	d
_mm_rem_epu64	simde/x86/svml.h	9137;"	d
_mm_rem_epu8	simde/x86/svml.h	9049;"	d
_mm_rem_epu8	simde/x86/svml.h	9050;"	d
_mm_round_pd	simde/x86/sse4.1.h	478;"	d
_mm_round_pd	simde/x86/sse4.1.h	479;"	d
_mm_round_ps	simde/x86/sse.h	498;"	d
_mm_round_sd	simde/x86/sse4.1.h	1963;"	d
_mm_round_sd	simde/x86/sse4.1.h	1964;"	d
_mm_round_ss	simde/x86/sse4.1.h	2013;"	d
_mm_round_ss	simde/x86/sse4.1.h	2014;"	d
_mm_rsqrt_ps	simde/x86/sse.h	3330;"	d
_mm_rsqrt_ss	simde/x86/sse.h	3390;"	d
_mm_sad_epu8	simde/x86/sse2.h	4461;"	d
_mm_sad_pu8	simde/x86/sse.h	3431;"	d
_mm_set1_epi16	simde/x86/sse2.h	4842;"	d
_mm_set1_epi32	simde/x86/sse2.h	4870;"	d
_mm_set1_epi64	simde/x86/sse2.h	4912;"	d
_mm_set1_epi64x	simde/x86/sse2.h	4898;"	d
_mm_set1_epi8	simde/x86/sse2.h	4814;"	d
_mm_set1_pd	simde/x86/sse2.h	403;"	d
_mm_set1_pi16	simde/x86/mmx.h	1266;"	d
_mm_set1_pi32	simde/x86/mmx.h	1283;"	d
_mm_set1_pi8	simde/x86/mmx.h	1249;"	d
_mm_set1_ps	simde/x86/sse.h	545;"	d
_mm_set_epi16	simde/x86/sse2.h	4544;"	d
_mm_set_epi32	simde/x86/sse2.h	4589;"	d
_mm_set_epi64	simde/x86/sse2.h	4629;"	d
_mm_set_epi64x	simde/x86/sse2.h	4654;"	d
_mm_set_epi8	simde/x86/sse2.h	4512;"	d
_mm_set_pd	simde/x86/sse2.h	374;"	d
_mm_set_pd1	simde/x86/sse2.h	404;"	d
_mm_set_pi16	simde/x86/mmx.h	1134;"	d
_mm_set_pi32	simde/x86/mmx.h	1200;"	d
_mm_set_pi8	simde/x86/mmx.h	1077;"	d
_mm_set_ps	simde/x86/sse.h	525;"	d
_mm_set_ps1	simde/x86/sse.h	544;"	d
_mm_set_sd	simde/x86/sse2.h	4786;"	d
_mm_set_ss	simde/x86/sse.h	3447;"	d
_mm_setcsr	simde/x86/sse.h	383;"	d
_mm_setr_epi16	simde/x86/sse2.h	4986;"	d
_mm_setr_epi32	simde/x86/sse2.h	4999;"	d
_mm_setr_epi64	simde/x86/sse2.h	5012;"	d
_mm_setr_epi8	simde/x86/sse2.h	4972;"	d
_mm_setr_pd	simde/x86/sse2.h	5025;"	d
_mm_setr_pi16	simde/x86/mmx.h	1309;"	d
_mm_setr_pi32	simde/x86/mmx.h	1322;"	d
_mm_setr_pi8	simde/x86/mmx.h	1296;"	d
_mm_setr_ps	simde/x86/sse.h	3460;"	d
_mm_setzero_pd	simde/x86/sse2.h	5038;"	d
_mm_setzero_ps	simde/x86/sse.h	3479;"	d
_mm_setzero_si128	simde/x86/sse2.h	1145;"	d
_mm_setzero_si64	simde/x86/mmx.h	1339;"	d
_mm_sfence	simde/x86/sse.h	3541;"	d
_mm_shuffle_epi32	simde/x86/sse2.h	5142;"	d
_mm_shuffle_epi8	simde/x86/ssse3.h	334;"	d
_mm_shuffle_pd	simde/x86/sse2.h	5171;"	d
_mm_shuffle_pi16	simde/x86/sse.h	3588;"	d
_mm_shuffle_pi8	simde/x86/ssse3.h	361;"	d
_mm_shuffle_ps	simde/x86/sse.h	3639;"	d
_mm_shufflehi_epi16	simde/x86/sse2.h	5195;"	d
_mm_shufflehi_epi16	simde/x86/sse2.h	5222;"	d
_mm_shufflelo_epi16	simde/x86/sse2.h	5246;"	d
_mm_shufflelo_epi16	simde/x86/sse2.h	5273;"	d
_mm_sign_epi16	simde/x86/ssse3.h	879;"	d
_mm_sign_epi32	simde/x86/ssse3.h	918;"	d
_mm_sign_epi8	simde/x86/ssse3.h	839;"	d
_mm_sign_pi16	simde/x86/ssse3.h	990;"	d
_mm_sign_pi32	simde/x86/ssse3.h	1025;"	d
_mm_sign_pi8	simde/x86/ssse3.h	954;"	d
_mm_sin_pd	simde/x86/svml.h	9906;"	d
_mm_sin_pd	simde/x86/svml.h	9907;"	d
_mm_sin_ps	simde/x86/svml.h	9877;"	d
_mm_sin_ps	simde/x86/svml.h	9878;"	d
_mm_sincos_pd	simde/x86/svml.h	10135;"	d
_mm_sincos_pd	simde/x86/svml.h	10136;"	d
_mm_sincos_ps	simde/x86/svml.h	10105;"	d
_mm_sincos_ps	simde/x86/svml.h	10106;"	d
_mm_sind_pd	simde/x86/svml.h	10347;"	d
_mm_sind_pd	simde/x86/svml.h	10348;"	d
_mm_sind_ps	simde/x86/svml.h	10318;"	d
_mm_sind_ps	simde/x86/svml.h	10319;"	d
_mm_sinh_pd	simde/x86/svml.h	10566;"	d
_mm_sinh_pd	simde/x86/svml.h	10567;"	d
_mm_sinh_ps	simde/x86/svml.h	10541;"	d
_mm_sinh_ps	simde/x86/svml.h	10542;"	d
_mm_sll_epi16	simde/x86/sse2.h	5307;"	d
_mm_sll_epi32	simde/x86/sse2.h	5341;"	d
_mm_sll_epi64	simde/x86/sse2.h	5376;"	d
_mm_sll_pi16	simde/x86/mmx.h	1417;"	d
_mm_sll_pi32	simde/x86/mmx.h	1457;"	d
_mm_sll_si64	simde/x86/mmx.h	1583;"	d
_mm_slli_epi16	simde/x86/sse2.h	5701;"	d
_mm_slli_epi32	simde/x86/sse2.h	5762;"	d
_mm_slli_epi64	simde/x86/sse2.h	5808;"	d
_mm_slli_pi16	simde/x86/mmx.h	1494;"	d
_mm_slli_pi32	simde/x86/mmx.h	1525;"	d
_mm_slli_si128	simde/x86/sse2.h	1218;"	d
_mm_slli_si64	simde/x86/mmx.h	1551;"	d
_mm_sllv_epi32	simde/x86/avx2.h	4395;"	d
_mm_sllv_epi32	simde/x86/avx2.h	4396;"	d
_mm_sllv_epi64	simde/x86/avx2.h	4455;"	d
_mm_sllv_epi64	simde/x86/avx2.h	4456;"	d
_mm_sqrt_pd	simde/x86/sse2.h	5406;"	d
_mm_sqrt_ps	simde/x86/sse.h	3677;"	d
_mm_sqrt_sd	simde/x86/sse2.h	5433;"	d
_mm_sqrt_ss	simde/x86/sse.h	3709;"	d
_mm_sra_epi16	simde/x86/sse2.h	5619;"	d
_mm_sra_epi32	simde/x86/sse2.h	5650;"	d
_mm_sra_pi16	simde/x86/mmx.h	1871;"	d
_mm_sra_pi32	simde/x86/mmx.h	1902;"	d
_mm_srai_epi16	simde/x86/sse2.h	5557;"	d
_mm_srai_epi32	simde/x86/sse2.h	5588;"	d
_mm_srai_pi16	simde/x86/mmx.h	1809;"	d
_mm_srai_pi32	simde/x86/mmx.h	1840;"	d
_mm_srav_epi32	simde/x86/avx2.h	4662;"	d
_mm_srav_epi32	simde/x86/avx2.h	4663;"	d
_mm_srl_epi16	simde/x86/sse2.h	5462;"	d
_mm_srl_epi32	simde/x86/sse2.h	5493;"	d
_mm_srl_epi64	simde/x86/sse2.h	5526;"	d
_mm_srl_pi16	simde/x86/mmx.h	1623;"	d
_mm_srl_pi32	simde/x86/mmx.h	1658;"	d
_mm_srl_si64	simde/x86/mmx.h	1778;"	d
_mm_srli_epi16	simde/x86/sse2.h	5857;"	d
_mm_srli_epi32	simde/x86/sse2.h	5918;"	d
_mm_srli_epi64	simde/x86/sse2.h	5968;"	d
_mm_srli_pi16	simde/x86/mmx.h	1689;"	d
_mm_srli_pi32	simde/x86/mmx.h	1720;"	d
_mm_srli_si128	simde/x86/sse2.h	1290;"	d
_mm_srli_si64	simde/x86/mmx.h	1746;"	d
_mm_srlv_epi16	simde/x86/avx512/srlv.h	63;"	d
_mm_srlv_epi16	simde/x86/avx512/srlv.h	64;"	d
_mm_srlv_epi32	simde/x86/avx2.h	4982;"	d
_mm_srlv_epi32	simde/x86/avx2.h	4983;"	d
_mm_srlv_epi64	simde/x86/avx2.h	5036;"	d
_mm_srlv_epi64	simde/x86/avx2.h	5037;"	d
_mm_store1_pd	simde/x86/sse2.h	6006;"	d
_mm_store1_ps	simde/x86/sse.h	3766;"	d
_mm_store_pd	simde/x86/sse2.h	5985;"	d
_mm_store_pd1	simde/x86/sse2.h	6007;"	d
_mm_store_ps	simde/x86/sse.h	3732;"	d
_mm_store_ps1	simde/x86/sse.h	3765;"	d
_mm_store_sd	simde/x86/sse2.h	6031;"	d
_mm_store_si128	simde/x86/sse2.h	6050;"	d
_mm_store_ss	simde/x86/sse.h	3785;"	d
_mm_storeh_pd	simde/x86/sse2.h	6069;"	d
_mm_storeh_pi	simde/x86/sse.h	3804;"	d
_mm_storel_epi64	simde/x86/sse2.h	6099;"	d
_mm_storel_pd	simde/x86/sse2.h	6120;"	d
_mm_storel_pi	simde/x86/sse.h	3825;"	d
_mm_storer_pd	simde/x86/sse2.h	6143;"	d
_mm_storer_ps	simde/x86/sse.h	3853;"	d
_mm_storeu_pd	simde/x86/sse2.h	6158;"	d
_mm_storeu_ps	simde/x86/sse.h	3874;"	d
_mm_storeu_si128	simde/x86/sse2.h	6171;"	d
_mm_storeu_si16	simde/x86/sse2.h	6188;"	d
_mm_storeu_si32	simde/x86/sse2.h	6205;"	d
_mm_storeu_si64	simde/x86/sse2.h	6222;"	d
_mm_stream_load_si128	simde/x86/sse4.1.h	2029;"	d
_mm_stream_load_si128	simde/x86/sse4.1.h	2030;"	d
_mm_stream_pd	simde/x86/sse2.h	6235;"	d
_mm_stream_pi	simde/x86/sse.h	4243;"	d
_mm_stream_ps	simde/x86/sse.h	4259;"	d
_mm_stream_si128	simde/x86/sse2.h	6248;"	d
_mm_stream_si32	simde/x86/sse2.h	6261;"	d
_mm_stream_si64	simde/x86/sse2.h	6275;"	d
_mm_stream_si64x	simde/x86/sse2.h	6276;"	d
_mm_sub_epi16	simde/x86/sse2.h	6334;"	d
_mm_sub_epi32	simde/x86/sse2.h	6363;"	d
_mm_sub_epi64	simde/x86/sse2.h	6392;"	d
_mm_sub_epi8	simde/x86/sse2.h	6305;"	d
_mm_sub_pd	simde/x86/sse2.h	6445;"	d
_mm_sub_pi16	simde/x86/mmx.h	1966;"	d
_mm_sub_pi32	simde/x86/mmx.h	1998;"	d
_mm_sub_pi8	simde/x86/mmx.h	1934;"	d
_mm_sub_ps	simde/x86/sse.h	3907;"	d
_mm_sub_sd	simde/x86/sse2.h	6468;"	d
_mm_sub_si64	simde/x86/sse2.h	6494;"	d
_mm_sub_ss	simde/x86/sse.h	3933;"	d
_mm_subs_epi16	simde/x86/sse2.h	6564;"	d
_mm_subs_epi8	simde/x86/sse2.h	6529;"	d
_mm_subs_epu16	simde/x86/sse2.h	6640;"	d
_mm_subs_epu8	simde/x86/sse2.h	6602;"	d
_mm_subs_pi16	simde/x86/mmx.h	2107;"	d
_mm_subs_pi8	simde/x86/mmx.h	2034;"	d
_mm_subs_pu16	simde/x86/mmx.h	2144;"	d
_mm_subs_pu8	simde/x86/mmx.h	2071;"	d
_mm_svml_ceil_pd	simde/x86/svml.h	10751;"	d
_mm_svml_ceil_pd	simde/x86/svml.h	10752;"	d
_mm_svml_ceil_ps	simde/x86/svml.h	10735;"	d
_mm_svml_ceil_ps	simde/x86/svml.h	10736;"	d
_mm_svml_floor_pd	simde/x86/svml.h	10905;"	d
_mm_svml_floor_pd	simde/x86/svml.h	10906;"	d
_mm_svml_floor_ps	simde/x86/svml.h	10889;"	d
_mm_svml_floor_ps	simde/x86/svml.h	10890;"	d
_mm_svml_round_pd	simde/x86/svml.h	11077;"	d
_mm_svml_round_pd	simde/x86/svml.h	11078;"	d
_mm_svml_round_ps	simde/x86/svml.h	11052;"	d
_mm_svml_round_ps	simde/x86/svml.h	11053;"	d
_mm_svml_sqrt_pd	simde/x86/svml.h	11217;"	d
_mm_svml_sqrt_pd	simde/x86/svml.h	11218;"	d
_mm_svml_sqrt_ps	simde/x86/svml.h	11201;"	d
_mm_svml_sqrt_ps	simde/x86/svml.h	11202;"	d
_mm_tan_pd	simde/x86/svml.h	11339;"	d
_mm_tan_pd	simde/x86/svml.h	11340;"	d
_mm_tan_ps	simde/x86/svml.h	11310;"	d
_mm_tan_ps	simde/x86/svml.h	11311;"	d
_mm_tand_pd	simde/x86/svml.h	11566;"	d
_mm_tand_pd	simde/x86/svml.h	11567;"	d
_mm_tand_ps	simde/x86/svml.h	11537;"	d
_mm_tand_ps	simde/x86/svml.h	11538;"	d
_mm_tanh_pd	simde/x86/svml.h	11784;"	d
_mm_tanh_pd	simde/x86/svml.h	11785;"	d
_mm_tanh_ps	simde/x86/svml.h	11759;"	d
_mm_tanh_ps	simde/x86/svml.h	11760;"	d
_mm_test_all_ones	simde/x86/sse4.1.h	2061;"	d
_mm_test_all_ones	simde/x86/sse4.1.h	2062;"	d
_mm_test_all_zeros	simde/x86/sse4.1.h	2093;"	d
_mm_test_all_zeros	simde/x86/sse4.1.h	2094;"	d
_mm_test_mix_ones_zeros	simde/x86/sse4.1.h	2121;"	d
_mm_test_mix_ones_zeros	simde/x86/sse4.1.h	2122;"	d
_mm_testc_pd	simde/x86/avx.h	5809;"	d
_mm_testc_pd	simde/x86/avx.h	5810;"	d
_mm_testc_ps	simde/x86/avx.h	5780;"	d
_mm_testc_ps	simde/x86/avx.h	5781;"	d
_mm_testc_si128	simde/x86/sse4.1.h	2151;"	d
_mm_testc_si128	simde/x86/sse4.1.h	2152;"	d
_mm_testnzc_pd	simde/x86/avx.h	6087;"	d
_mm_testnzc_pd	simde/x86/avx.h	6088;"	d
_mm_testnzc_ps	simde/x86/avx.h	6055;"	d
_mm_testnzc_ps	simde/x86/avx.h	6056;"	d
_mm_testnzc_si128	simde/x86/sse4.1.h	2180;"	d
_mm_testnzc_si128	simde/x86/sse4.1.h	2181;"	d
_mm_testz_pd	simde/x86/avx.h	5941;"	d
_mm_testz_pd	simde/x86/avx.h	5942;"	d
_mm_testz_ps	simde/x86/avx.h	5912;"	d
_mm_testz_ps	simde/x86/avx.h	5913;"	d
_mm_testz_si128	simde/x86/sse4.1.h	2208;"	d
_mm_testz_si128	simde/x86/sse4.1.h	2209;"	d
_mm_trunc_pd	simde/x86/svml.h	11969;"	d
_mm_trunc_pd	simde/x86/svml.h	11970;"	d
_mm_trunc_ps	simde/x86/svml.h	11953;"	d
_mm_trunc_ps	simde/x86/svml.h	11954;"	d
_mm_ucomieq_sd	simde/x86/sse2.h	6676;"	d
_mm_ucomieq_ss	simde/x86/sse.h	3967;"	d
_mm_ucomige_sd	simde/x86/sse2.h	6712;"	d
_mm_ucomige_ss	simde/x86/sse.h	4001;"	d
_mm_ucomigt_sd	simde/x86/sse2.h	6748;"	d
_mm_ucomigt_ss	simde/x86/sse.h	4035;"	d
_mm_ucomile_sd	simde/x86/sse2.h	6784;"	d
_mm_ucomile_ss	simde/x86/sse.h	4069;"	d
_mm_ucomilt_sd	simde/x86/sse2.h	6820;"	d
_mm_ucomilt_ss	simde/x86/sse.h	4103;"	d
_mm_ucomineq_sd	simde/x86/sse2.h	6856;"	d
_mm_ucomineq_ss	simde/x86/sse.h	4137;"	d
_mm_udiv_epi32	simde/x86/svml.h	2893;"	d
_mm_udiv_epi32	simde/x86/svml.h	2894;"	d
_mm_udivrem_epi32	simde/x86/svml.h	12110;"	d
_mm_udivrem_epi32	simde/x86/svml.h	12111;"	d
_mm_undefined_pd	simde/x86/sse2.h	5060;"	d
_mm_undefined_ps	simde/x86/sse.h	3501;"	d
_mm_undefined_si128	simde/x86/sse2.h	5077;"	d
_mm_unpackhi_epi16	simde/x86/sse2.h	6961;"	d
_mm_unpackhi_epi32	simde/x86/sse2.h	6996;"	d
_mm_unpackhi_epi64	simde/x86/sse2.h	7028;"	d
_mm_unpackhi_epi8	simde/x86/sse2.h	6926;"	d
_mm_unpackhi_pd	simde/x86/sse2.h	7062;"	d
_mm_unpackhi_pi16	simde/x86/mmx.h	2212;"	d
_mm_unpackhi_pi32	simde/x86/mmx.h	2242;"	d
_mm_unpackhi_pi8	simde/x86/mmx.h	2180;"	d
_mm_unpackhi_ps	simde/x86/sse.h	4186;"	d
_mm_unpacklo_epi16	simde/x86/sse2.h	7132;"	d
_mm_unpacklo_epi32	simde/x86/sse2.h	7167;"	d
_mm_unpacklo_epi64	simde/x86/sse2.h	7199;"	d
_mm_unpacklo_epi8	simde/x86/sse2.h	7097;"	d
_mm_unpacklo_pd	simde/x86/sse2.h	7231;"	d
_mm_unpacklo_pi16	simde/x86/mmx.h	2310;"	d
_mm_unpacklo_pi32	simde/x86/mmx.h	2340;"	d
_mm_unpacklo_pi8	simde/x86/mmx.h	2278;"	d
_mm_unpacklo_ps	simde/x86/sse.h	4222;"	d
_mm_urem_epi32	simde/x86/svml.h	9108;"	d
_mm_urem_epi32	simde/x86/svml.h	9109;"	d
_mm_xor_pd	simde/x86/sse2.h	1037;"	d
_mm_xor_ps	simde/x86/sse.h	748;"	d
_mm_xor_si128	simde/x86/sse2.h	7292;"	d
_mm_xor_si64	simde/x86/mmx.h	2367;"	d
_next	multipath_alignment.hpp	/^        uint32_t _next;$/;"	m	class:vg::connection_t
_next	multipath_alignment.hpp	/^        vector<uint32_t> _next;$/;"	m	class:vg::subpath_t
_node_id	position.hpp	/^    int64_t _node_id;$/;"	m	class:vg::position_t
_offset	position.hpp	/^    int64_t _offset;$/;"	m	class:vg::position_t
_path	multipath_alignment.hpp	/^        path_t _path;$/;"	m	class:vg::subpath_t
_paths	path.hpp	/^    map<string, list<mapping_t> > _paths;$/;"	m	class:vg::Paths
_position	path.hpp	/^    position_t _position;$/;"	m	class:vg::path_mapping_t
_push_mapping	dozeu_interface.cpp	420;"	d	file:
_push_mapping	dozeu_interface.cpp	564;"	d	file:
_push_op	dozeu_interface.cpp	430;"	d	file:
_push_op	dozeu_interface.cpp	565;"	d	file:
_quality	multipath_alignment.hpp	/^        string _quality;$/;"	m	class:vg::multipath_alignment_t
_score	multipath_alignment.hpp	/^        int32_t _score;$/;"	m	class:vg::connection_t
_score	multipath_alignment.hpp	/^        int32_t _score;$/;"	m	class:vg::subpath_t
_sequence	multipath_alignment.hpp	/^        string _sequence;$/;"	m	class:vg::multipath_alignment_t
_sequence	path.hpp	/^    string _sequence;$/;"	m	class:vg::edit_t
_start	multipath_alignment.hpp	/^        vector<uint32_t> _start;$/;"	m	class:vg::multipath_alignment_t
_subpath	multipath_alignment.hpp	/^        vector<subpath_t> _subpath;$/;"	m	class:vg::multipath_alignment_t
_to_length	path.hpp	/^    int32_t _to_length;$/;"	m	class:vg::edit_t
_transcript_paths	transcriptome.hpp	/^        vector<CompletedTranscriptPath> _transcript_paths;$/;"	m	class:vg::Transcriptome
_wrote_mem_stats_header	multipath_mapper.hpp	/^        bool _wrote_mem_stats_header = false;$/;"	m	class:vg::MultipathMapper
a	incremental_subgraph.hpp	/^        inline bool operator()(const decltype(frontier)::iterator& a,$/;"	m	struct:vg::IncrementalSubgraph::IterFCmp
a	statistics.hpp	/^    T a() const {$/;"	f	class:vg::uniform_int_distribution
a	statistics.hpp	/^    T a() const {$/;"	f	class:vg::uniform_real_distribution
a_star	algorithms/a_star.hpp	/^    vector<handle_t> a_star(const HandleGraph* graph,$/;"	f	namespace:vg::algorithms
absent	recombinator.hpp	/^    enum kmer_presence { absent, heterozygous, present, frequent };$/;"	e	enum:vg::Recombinator::kmer_presence
absent_score	recombinator.hpp	/^        double absent_score = ABSENT_SCORE;$/;"	m	struct:vg::Recombinator::Parameters
accelerate_mem_query	mapper.cpp	/^gcsa::range_type BaseMapper::accelerate_mem_query(string::const_iterator begin,$/;"	f	class:vg::BaseMapper
accelerator	mapper.hpp	/^    MEMAccelerator* accelerator = nullptr;$/;"	m	class:vg::BaseMapper
access_mutex	watchdog.hpp	/^        mutex access_mutex;$/;"	m	struct:vg::Watchdog::thread_state_t
adaptive_diff_exponent	mapper.hpp	/^    double adaptive_diff_exponent = 0.065; \/\/ exponent that describes limiting behavior of adaptive diff algorithm$/;"	m	class:vg::BaseMapper
adaptive_reseed_diff	mapper.hpp	/^    bool adaptive_reseed_diff = true; \/\/ use an adaptive length difference algorithm in reseed algorithm$/;"	m	class:vg::BaseMapper
adaptive_reseed_length_memo	mapper.cpp	/^thread_local vector<size_t> BaseMapper::adaptive_reseed_length_memo;$/;"	m	class:vg::BaseMapper	file:
adaptive_reseed_length_memo	mapper.hpp	/^    thread_local static vector<size_t> adaptive_reseed_length_memo;$/;"	m	class:vg::BaseMapper
add	packer.cpp	/^void Packer::add(const Alignment& aln, int min_mapq, int min_baseq, int trim_ends) {$/;"	f	class:vg::Packer
addArbitraryTelomerePair	cactus.cpp	/^void addArbitraryTelomerePair(vector<stCactusEdgeEnd*> ends, stList *telomeres) {$/;"	f	namespace:vg
add_allele_path_to_info	graph_caller.cpp	/^void VCFOutputCaller::add_allele_path_to_info(vcflib::Variant& v, int allele, const SnarlTraversal& trav,$/;"	f	class:vg::VCFOutputCaller
add_alt_allele	utility.cpp	/^int add_alt_allele(vcflib::Variant& variant, const std::string& allele) {$/;"	f	namespace:vg
add_and_adjust_paths	subcommand/convert_main.cpp	/^void add_and_adjust_paths(const PathHandleGraph* input, MutablePathHandleGraph* output, const std::unordered_set<std::string>& ref_samples, bool drop_haplotypes) {$/;"	f
add_annotations	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::add_annotations(const multipath_alignment_t& mp_aln, bam1_t* bam) const {$/;"	f	class:vg::MultipathAlignmentEmitter
add_bv	vectorizer.cpp	/^void Vectorizer::add_bv(bit_vector v){$/;"	f	class:Vectorizer
add_chain_child	snarls.cpp	/^void NetGraph::add_chain_child(const Chain& chain) {$/;"	f	class:vg::NetGraph
add_connecting_edges_to_subgraph	algorithms/subgraph.cpp	/^void add_connecting_edges_to_subgraph(const HandleGraph& source, MutableHandleGraph& subgraph) {$/;"	f	namespace:vg::algorithms
add_connection	multipath_alignment.hpp	/^    inline connection_t* subpath_t::add_connection() {$/;"	f	class:vg::subpath_t
add_decomposed_tail_alignments	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::add_decomposed_tail_alignments(const Alignment& alignment, const HandleGraph& align_graph,$/;"	f	class:vg::MultipathAlignmentGraph
add_descendants_to_subgraph	snarl_distance_index.cpp	/^void add_descendants_to_subgraph(const SnarlDistanceIndex& distance_index, const net_handle_t& parent, std::unordered_set<nid_t>& subgraph) {$/;"	f	namespace:vg
add_edge	cluster.cpp	/^void MEMClusterer::HitGraph::add_edge(size_t from, size_t to, int32_t weight, int64_t distance) {$/;"	f	class:vg::MEMClusterer::HitGraph
add_edge	explainer.cpp	/^void DiagramExplainer::add_edge(const std::string& a_id, const std::string& b_id, const annotation_t& annotations) {$/;"	f	class:vg::DiagramExplainer
add_edge	vg.cpp	/^void VG::add_edge(const Edge& edge) {$/;"	f	class:vg::VG
add_edges	vg.cpp	/^void VG::add_edges(const set<Edge*>& edges) {$/;"	f	class:vg::VG
add_edges	vg.cpp	/^void VG::add_edges(const vector<Edge*>& edges) {$/;"	f	class:vg::VG
add_edges	vg.cpp	/^void VG::add_edges(const vector<Edge>& edges) {$/;"	f	class:vg::VG
add_edges_only	augment.cpp	/^void add_edges_only(MutableHandleGraph* graph,$/;"	f	namespace:vg
add_edit	path.hpp	/^inline edit_t* path_mapping_t::add_edit() {$/;"	f	class:vg::path_mapping_t
add_edited_transcript_paths	transcriptome.cpp	/^void Transcriptome::add_edited_transcript_paths(const list<EditedTranscriptPath> & edited_transcript_paths) {$/;"	f	class:vg::Transcriptome
add_entry	subcommand/options.hpp	/^    Preset& add_entry(const std::string& option, const T& value) {$/;"	f	struct:vg::subcommand::Preset
add_exon	transcriptome.cpp	/^void Transcriptome::add_exon(Transcript * transcript, const pair<int32_t, int32_t> & exon_pos) const {$/;"	f	class:vg::Transcriptome
add_exon	transcriptome.cpp	/^void Transcriptome::add_exon(Transcript * transcript, const pair<int32_t, int32_t> & exon_pos, const bdsg::PositionOverlay & graph_path_pos_overlay) const {$/;"	f	class:vg::Transcriptome
add_flag	subcommand/options.hpp	/^    void add_flag(const std::string& name, bool Receiver::*dest, bool default_value, const std::string& help, const ValidatorFunction<bool>& validator = [](const bool& ignored) {}) {$/;"	f	struct:vg::subcommand::OptionGroup
add_flag	subcommand/options.hpp	/^    void add_flag(const std::string& name, char short_option, bool Receiver::*dest, bool default_value, const std::string& help, const ValidatorFunction<bool>& validator = [](const bool& ignored) {}) {$/;"	f	struct:vg::subcommand::OptionGroup
add_globals	explainer.cpp	/^void DiagramExplainer::add_globals(const annotation_t& annotations) {$/;"	f	class:vg::DiagramExplainer
add_graph_listeners	algorithms/gfa_to_handle.cpp	/^static void add_graph_listeners(GFAParser& parser, MutableHandleGraph* graph) {$/;"	f	namespace:vg::algorithms
add_group	subcommand/options.hpp	/^    OptionGroup<Receiver>& add_group(const std::string& heading) {$/;"	f	struct:vg::subcommand::GroupedOptionGroup
add_handle	subgraph.cpp	/^    void SubHandleGraph::add_handle(const handle_t& handle) {$/;"	f	class:vg::SubHandleGraph
add_haplotype	phased_genome.hpp	/^    int PhasedGenome::add_haplotype(NodeTraversalIterator first, NodeTraversalIterator last) {$/;"	f	class:vg::PhasedGenome
add_haplotype_transcripts	transcriptome.cpp	/^int32_t Transcriptome::add_haplotype_transcripts(vector<istream *> transcript_streams, const gbwt::GBWT & haplotype_index, const bool proj_emded_paths) {$/;"	f	class:vg::Transcriptome
add_intron_splice_junctions	transcriptome.cpp	/^int32_t Transcriptome::add_intron_splice_junctions(vector<istream *> intron_streams, unique_ptr<gbwt::GBWT> & haplotype_index, const bool update_haplotypes) {$/;"	f	class:vg::Transcriptome
add_log	statistics.hpp	/^inline double add_log(double log_x, double log_y) {$/;"	f	namespace:vg
add_log10	statistics.hpp	/^inline double add_log10(double i, double j) {$/;"	f	namespace:vg
add_mapping	path.hpp	/^inline path_mapping_t* path_t::add_mapping() {$/;"	f	class:vg::path_t
add_name	vectorizer.cpp	/^void Vectorizer::add_name(string n){$/;"	f	class:Vectorizer
add_name_mapping	name_mapper.cpp	/^void NameMapper::add_name_mapping(const string& vcf_name, const string& fasta_name) {$/;"	f	class:vg::NameMapper
add_next	multipath_alignment.hpp	/^    inline void subpath_t::add_next(uint32_t n) {$/;"	f	class:vg::subpath_t
add_node	algorithms/min_cut_graph.hpp	/^            inline void add_node(size_t id, Node node){$/;"	f	struct:vg::algorithms::Graph
add_node	explainer.cpp	/^void DiagramExplainer::add_node(const std::string& id, const annotation_t& annotations) {$/;"	f	class:vg::DiagramExplainer
add_node	vg.cpp	/^void VG::add_node(const Node& node) {$/;"	f	class:vg::VG
add_nodes	vg.cpp	/^void VG::add_nodes(const set<Node*>& nodes) {$/;"	f	class:vg::VG
add_nodes	vg.cpp	/^void VG::add_nodes(const vector<Node>& nodes) {$/;"	f	class:vg::VG
add_nodes_and_edges	augment.cpp	/^Path add_nodes_and_edges(MutableHandleGraph* graph,$/;"	f	namespace:vg
add_option	subcommand/options.hpp	/^    void add_option(const std::string& name, T Receiver::*dest, T default_value, const std::string& help, const ValidatorFunction<T>& validator = [](const T& ignored) {}) {$/;"	f	struct:vg::subcommand::OptionGroup
add_option	subcommand/options.hpp	/^    void add_option(const std::string& name, char short_option, T Receiver::*dest, T default_value, const std::string& help, const ValidatorFunction<T>& validator = [](const T& ignored) {}) {$/;"	f	struct:vg::subcommand::OptionGroup
add_path	recombinator.cpp	/^void add_path(const gbwt::GBWT& source, gbwt::size_type path_id, gbwt::GBWTBuilder& builder, gbwtgraph::MetadataBuilder& metadata) {$/;"	f	namespace:vg
add_path_listeners	algorithms/gfa_to_handle.cpp	/^static void add_path_listeners(GFAParser& parser, MutablePathMutableHandleGraph* graph,$/;"	f	namespace:vg::algorithms
add_path_to_graph	augment.cpp	/^path_handle_t add_path_to_graph(MutablePathHandleGraph* graph, const Path& path) {$/;"	f	namespace:vg
add_points	algorithms/chain_items.cpp	/^TracedScore TracedScore::add_points(int adjustment) const {$/;"	f	class:vg::algorithms::TracedScore
add_range	subcommand/options.hpp	/^    void add_range(const std::string& name, T Receiver::*dest, T default_value, const std::string& help, const ValidatorFunction<T>& validator = [](const T& ignored) {}) {$/;"	f	struct:vg::subcommand::OptionGroup
add_range	subcommand/options.hpp	/^    void add_range(const std::string& name, char short_option, T Receiver::*dest, T default_value, const std::string& help, const ValidatorFunction<T>& validator = [](const T& ignored) {}) {$/;"	f	struct:vg::subcommand::OptionGroup
add_reachability_edges	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::add_reachability_edges(const HandleGraph& graph,$/;"	f	class:vg::MultipathAlignmentGraph
add_reference_transcripts	transcriptome.cpp	/^int32_t Transcriptome::add_reference_transcripts(vector<istream *> transcript_streams, unique_ptr<gbwt::GBWT> & haplotype_index, const bool use_haplotype_paths, const bool update_haplotypes) {$/;"	f	class:vg::Transcriptome
add_seed_to_chain_problem	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::add_seed_to_chain_problem(ClusteringProblem& clustering_problem, SnarlTreeNodeProblem* chain_problem,$/;"	f	class:vg::SnarlDistanceIndexClusterer
add_snarl	snarls.cpp	/^const Snarl* SnarlManager::add_snarl(const Snarl& new_snarl) {$/;"	f	class:vg::SnarlManager
add_snarl_to_chain_problem	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::add_snarl_to_chain_problem(ClusteringProblem& clustering_problem, SnarlTreeNodeProblem* chain_problem,$/;"	f	class:vg::SnarlDistanceIndexClusterer
add_splice_junction_edges	transcriptome.cpp	/^void Transcriptome::add_splice_junction_edges(const list<CompletedTranscriptPath> & completed_transcript_paths) {$/;"	f	class:vg::Transcriptome
add_splice_junction_edges	transcriptome.cpp	/^void Transcriptome::add_splice_junction_edges(const list<EditedTranscriptPath> & edited_transcript_paths) {$/;"	f	class:vg::Transcriptome
add_splice_junction_edges	transcriptome.cpp	/^void Transcriptome::add_splice_junction_edges(const vector<CompletedTranscriptPath> & completed_transcript_paths) {$/;"	f	class:vg::Transcriptome
add_start	multipath_alignment.hpp	/^    inline void multipath_alignment_t::add_start(uint32_t s) {$/;"	f	class:vg::multipath_alignment_t
add_start_end_markers	vg.cpp	/^void VG::add_start_end_markers(int length,$/;"	f	class:vg::VG
add_subpath	multipath_alignment.hpp	/^    inline subpath_t* multipath_alignment_t::add_subpath() {$/;"	f	class:vg::multipath_alignment_t
add_subpaths_to_subgraph	algorithms/subgraph.cpp	/^void add_subpaths_to_subgraph(const PathPositionHandleGraph& source, MutablePathHandleGraph& subgraph,$/;"	f	namespace:vg::algorithms
add_thread_edges_to_set	haplotype_extracter.cpp	/^void add_thread_edges_to_set(thread_t& t, set<pair<int,int> >& edges) {$/;"	f	namespace:vg
add_thread_nodes_to_set	haplotype_extracter.cpp	/^void add_thread_nodes_to_set(thread_t& t, set<int64_t>& nodes) {$/;"	f	namespace:vg
add_to_path	minimizer_mapper.cpp	/^static inline void add_to_path(Path* target, Path* to_append) {$/;"	f	namespace:vg
add_transcripts_to_gbwt	transcriptome.cpp	/^void Transcriptome::add_transcripts_to_gbwt(gbwt::GBWTBuilder * gbwt_builder, const bool add_bidirectional, const bool exclude_reference_transcripts) const {$/;"	f	class:vg::Transcriptome
add_traversals	traversal_finder.cpp	/^void ExhaustiveTraversalFinder::add_traversals(vector<SnarlTraversal>& traversals,$/;"	f	class:vg::ExhaustiveTraversalFinder
add_unary_child	snarls.cpp	/^void NetGraph::add_unary_child(const Snarl* unary) {$/;"	f	class:vg::NetGraph
add_variant	graph_caller.cpp	/^void VCFOutputCaller::add_variant(vcflib::Variant& var) const {$/;"	f	class:vg::VCFOutputCaller
add_variants	variant_adder.cpp	/^void VariantAdder::add_variants(vcflib::VariantCallFile* vcf) {$/;"	f	class:vg::VariantAdder
added_fwd	extra_node_graph.hpp	/^    const handle_t added_fwd = as_handle(0);$/;"	m	class:vg::ExtraNodeGraph
added_id	extra_node_graph.hpp	/^    id_t added_id;$/;"	m	class:vg::ExtraNodeGraph
added_rev	extra_node_graph.hpp	/^    const handle_t added_rev = as_handle(1);$/;"	m	class:vg::ExtraNodeGraph
additional_items	gbwt_extender.cpp	/^        std::shared_ptr<std::vector<uint32_t>> additional_items;$/;"	m	struct:vg::MatchPos::PathList	file:
adjacencies	unittest/three_edge_connected_components.cpp	/^static vector<vector<size_t>> adjacencies;$/;"	m	namespace:vg::unittest	file:
adjacent	vg.cpp	/^bool VG::adjacent(const Position& pos1, const Position& pos2) {$/;"	f	class:vg::VG
adjacent_mappings	path.cpp	/^bool adjacent_mappings(const Mapping& m1, const Mapping& m2) {$/;"	f	namespace:vg
adjacent_positions	mapper.cpp	/^bool Mapper::adjacent_positions(const Position& pos1, const Position& pos2) {$/;"	f	class:vg::Mapper
adjust_alignments_for_base_quality	aligner.hpp	/^        bool adjust_alignments_for_base_quality = false; \/\/ use base quality adjusted alignments$/;"	m	class:vg::AlignerClient
adjust_for_base_quality	banded_global_aligner.hpp	/^        bool adjust_for_base_quality;$/;"	m	class:vg::BandedGlobalAligner
advance	phase_unfolder.cpp	/^    void advance() {$/;"	f	struct:vg::PathBranch
advance	sampler.cpp	/^bool NGSSimulator::advance(int64_t& offset, bool& is_reverse, pos_t& pos, char& graph_char, const string& source_path) {$/;"	f	class:vg::NGSSimulator
advance_by_distance	sampler.cpp	/^bool NGSSimulator::advance_by_distance(int64_t& offset, bool& is_reverse, pos_t& pos, int64_t distance,$/;"	f	class:vg::NGSSimulator
advance_on_graph	sampler.cpp	/^bool NGSSimulator::advance_on_graph(pos_t& pos, char& graph_char) {$/;"	f	class:vg::NGSSimulator
advance_on_graph_by_distance	sampler.cpp	/^bool NGSSimulator::advance_on_graph_by_distance(pos_t& pos, int64_t distance) {$/;"	f	class:vg::NGSSimulator
advance_on_path	sampler.cpp	/^bool NGSSimulator::advance_on_path(int64_t& offset, bool& is_reverse, pos_t& pos, char& graph_char, const string& source_path) {$/;"	f	class:vg::NGSSimulator
advance_on_path_by_distance	sampler.cpp	/^bool NGSSimulator::advance_on_path_by_distance(int64_t& offset, bool& is_reverse, pos_t& pos, int64_t distance,$/;"	f	class:vg::NGSSimulator
advance_split	statistics.hpp	/^bool advance_split(Iter start, Iter end) {$/;"	f	namespace:vg
affinity	genotyper.hpp	/^        double affinity = 0;$/;"	m	struct:vg::Genotyper::Affinity
after	subcommand/haplotypes_main.cpp	/^    enum order { before, overlap, after };$/;"	e	enum:ReferenceInterval::order	file:
agglomerate	multipath_mapper.cpp	/^    void MultipathMapper::agglomerate(size_t idx, multipath_alignment_t& agglomerating, const multipath_alignment_t& multipath_aln,$/;"	f	class:vg::MultipathMapper
agglomerate_alignment_pairs	multipath_mapper.cpp	/^    void MultipathMapper::agglomerate_alignment_pairs(vector<pair<multipath_alignment_t, multipath_alignment_t>>& multipath_aln_pairs_out,$/;"	f	class:vg::MultipathMapper
agglomerate_alignments	multipath_mapper.cpp	/^    void MultipathMapper::agglomerate_alignments(vector<multipath_alignment_t>& multipath_alns_out,$/;"	f	class:vg::MultipathMapper
agglomerate_multipath_alns	multipath_mapper.hpp	/^        bool agglomerate_multipath_alns = false;$/;"	m	class:vg::MultipathMapper
agglomeration_length	minimizer_mapper.hpp	/^        size_t agglomeration_length; \/\/ What is the length in bp of the region of consecutive windows this minimizer instance is minimal in?$/;"	m	struct:vg::MinimizerMapper::Minimizer
agglomeration_start	minimizer_mapper.hpp	/^        size_t agglomeration_start; \/\/ What is the start base of the first window this minimizer instance is minimal in?$/;"	m	struct:vg::MinimizerMapper::Minimizer
agglomeration_window_count	minimizer_mapper.hpp	/^        inline size_t agglomeration_window_count() const {$/;"	f	struct:vg::MinimizerMapper::Minimizer
alg2name	genotyper.hpp	/^    map<TraversalAlg, string> alg2name = {$/;"	m	class:vg::Genotyper
algorithm_auto	subcommand/convert_main.cpp	/^enum algorithm_type { algorithm_auto, algorithm_vg, algorithm_gbwtgraph };$/;"	e	enum:algorithm_type	file:
algorithm_gbwtgraph	subcommand/convert_main.cpp	/^enum algorithm_type { algorithm_auto, algorithm_vg, algorithm_gbwtgraph };$/;"	e	enum:algorithm_type	file:
algorithm_type	subcommand/convert_main.cpp	/^enum algorithm_type { algorithm_auto, algorithm_vg, algorithm_gbwtgraph };$/;"	g	file:
algorithm_vg	subcommand/convert_main.cpp	/^enum algorithm_type { algorithm_auto, algorithm_vg, algorithm_gbwtgraph };$/;"	e	enum:algorithm_type	file:
algorithms	algorithms/a_star.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/alignment_path_offsets.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/alignment_path_offsets.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/approx_path_distance.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/approx_path_distance.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/back_translate.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/back_translate.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/chain_items.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/chain_items.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/component.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/component.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/count_covered.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/coverage_depth.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/coverage_depth.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/dfs.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/dfs.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/disjoint_components.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/disjoint_components.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/distance_to_head.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/distance_to_head.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/distance_to_tail.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/distance_to_tail.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/expand_context.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/expand_context.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/extract_connecting_graph.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/extract_connecting_graph.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/extract_containing_graph.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/extract_containing_graph.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/extract_extending_graph.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/extract_extending_graph.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/find_gbwt.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/find_gbwt.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/find_gbwtgraph.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/find_gbwtgraph.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/find_translation.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/find_translation.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/gfa_to_handle.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/gfa_to_handle.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/id_sort.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/id_sort.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/intersect_path_offsets.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/intersect_path_offsets.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/jump_along_path.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/jump_along_path.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/k_widest_paths.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/k_widest_paths.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/kmer.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/kmer.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/locally_expand_graph.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/locally_expand_graph.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/merge.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/merge.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/min_cut_graph.cpp	/^    namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/min_cut_graph.hpp	/^    namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/nearest_offsets_in_paths.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/nearest_offsets_in_paths.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/next_pos_chars.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/next_pos_chars.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/normalize.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/normalize.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/path_string.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/path_string.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/prune.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/prune.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/prune_to_connecting_graph.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/prune_to_connecting_graph.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/ref_path_distance.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/ref_path_distance.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/shortest_cycle.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/shortest_cycle.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/simplify_siblings.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/simplify_siblings.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/sorted_id_ranges.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/sorted_id_ranges.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/subgraph.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/subgraph.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/three_edge_connected_components.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/three_edge_connected_components.hpp	/^namespace algorithms {$/;"	n	namespace:vg
algorithms	algorithms/walk.cpp	/^namespace algorithms {$/;"	n	namespace:vg	file:
algorithms	algorithms/walk.hpp	/^namespace algorithms {$/;"	n	namespace:vg
align	aligner.cpp	/^void Aligner::align(Alignment& alignment, const HandleGraph& g, bool traceback_aln) const {$/;"	f	class:vg::Aligner
align	aligner.cpp	/^void Aligner::align(Alignment& alignment, const HandleGraph& g,$/;"	f	class:vg::Aligner
align	aligner.cpp	/^void QualAdjAligner::align(Alignment& alignment, const HandleGraph& g, bool traceback_aln) const {$/;"	f	class:vg::QualAdjAligner
align	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::align(int8_t* score_mat, int8_t* nt_table, int8_t gap_open, int8_t gap_extend) {$/;"	f	class:vg::BandedGlobalAligner
align	deletion_aligner.cpp	/^void DeletionAligner::align(Alignment& aln, const HandleGraph& graph) const {$/;"	f	class:vg::DeletionAligner
align	dozeu_interface.cpp	/^void DozeuInterface::align(Alignment& alignment, const HandleGraph& graph, const vector<MaximalExactMatch>& mems,$/;"	f	class:DozeuInterface
align	dozeu_interface.cpp	/^void DozeuInterface::align(Alignment& alignment, const HandleGraph& graph, const vector<handle_t>& order,$/;"	f	class:DozeuInterface
align	mapper.cpp	/^Alignment Mapper::align(const Alignment& aln, int kmer_size, int stride, int max_mem_length, int band_width, int band_overlap, bool xdrop_alignment) {$/;"	f	class:vg::Mapper
align	mapper.cpp	/^Alignment Mapper::align(const string& seq, int kmer_size, int stride, int max_mem_length, int band_width, int band_overlap, bool xdrop_alignment) {$/;"	f	class:vg::Mapper
align	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::align(const Alignment& alignment, const HandleGraph& align_graph, const GSSWAligner* aligner,$/;"	f	class:vg::MultipathAlignmentGraph
align	multipath_alignment_graph.cpp	/^void MultipathAlignmentGraph::align(const Alignment& alignment, const HandleGraph& align_graph, const GSSWAligner* aligner,$/;"	f	class:vg::MultipathAlignmentGraph
align	ssw_aligner.cpp	/^Alignment SSWAligner::align(const string& query, const string& ref) {$/;"	f	class:vg::SSWAligner
align	vg.cpp	/^Alignment VG::align(const Alignment& alignment,$/;"	f	class:vg::VG
align	vg.cpp	/^Alignment VG::align(const string& sequence,$/;"	f	class:vg::VG
align_banded	mapper.cpp	/^vector<Alignment> Mapper::align_banded(const Alignment& read, int kmer_size, int stride, int max_mem_length, int band_width, int band_overlap, bool xdrop_alignment) {$/;"	f	class:vg::Mapper
align_cluster	mapper.cpp	/^Alignment Mapper::align_cluster(const Alignment& aln, const vector<MaximalExactMatch>& mems, bool traceback, bool xdrop_alignment) {$/;"	f	class:vg::Mapper
align_downward	dozeu_interface.cpp	/^void DozeuInterface::align_downward(Alignment& alignment, const OrderedGraph& graph, const vector<graph_pos_s>& head_positions,$/;"	f	class:DozeuInterface
align_from_chains	minimizer_mapper.hpp	/^    bool align_from_chains = default_align_from_chains;$/;"	m	class:vg::MinimizerMapper
align_global_banded	aligner.cpp	/^void Aligner::align_global_banded(Alignment& alignment, const HandleGraph& g,$/;"	f	class:vg::Aligner
align_global_banded	aligner.cpp	/^void QualAdjAligner::align_global_banded(Alignment& alignment, const HandleGraph& g,$/;"	f	class:vg::QualAdjAligner
align_global_banded_multi	aligner.cpp	/^void Aligner::align_global_banded_multi(Alignment& alignment, vector<Alignment>& alt_alignments, const HandleGraph& g,$/;"	f	class:vg::Aligner
align_global_banded_multi	aligner.cpp	/^void QualAdjAligner::align_global_banded_multi(Alignment& alignment, vector<Alignment>& alt_alignments, const HandleGraph& g,$/;"	f	class:vg::QualAdjAligner
align_internal	aligner.cpp	/^void Aligner::align_internal(Alignment& alignment, vector<Alignment>* multi_alignments, const HandleGraph& g,$/;"	f	class:vg::Aligner
align_internal	aligner.cpp	/^void QualAdjAligner::align_internal(Alignment& alignment, vector<Alignment>* multi_alignments, const HandleGraph& g,$/;"	f	class:vg::QualAdjAligner
align_maybe_flip	mapper.cpp	/^Alignment Mapper::align_maybe_flip(const Alignment& base, HandleGraph& graph, bool flip, bool traceback, bool banded_global, bool xdrop_alignment) {$/;"	f	class:vg::Mapper
align_maybe_flip	mapper.cpp	/^Alignment Mapper::align_maybe_flip(const Alignment& base, HandleGraph& graph, const vector<MaximalExactMatch>& mems, bool flip, bool traceback, bool banded_global, bool xdrop_alignment) {$/;"	f	class:vg::Mapper
align_mem_multi	mapper.cpp	/^Mapper::align_mem_multi(const Alignment& aln,$/;"	f	class:vg::Mapper
align_multi	deletion_aligner.cpp	/^void DeletionAligner::align_multi(Alignment& aln, vector<Alignment>& alt_alns,$/;"	f	class:vg::DeletionAligner
align_multi	mapper.cpp	/^vector<Alignment> Mapper::align_multi(const Alignment& aln, int kmer_size, int stride, int max_mem_length, int band_width, int band_overlap, bool xdrop_alignment) {$/;"	f	class:vg::Mapper
align_multi_internal	mapper.cpp	/^vector<Alignment> Mapper::align_multi_internal(bool compute_unpaired_quality,$/;"	f	class:vg::Mapper
align_ns	variant_adder.cpp	/^void VariantAdder::align_ns(vg::VG& graph, Alignment& aln) {$/;"	f	class:vg::VariantAdder
align_paired_multi	mapper.cpp	/^pair<vector<Alignment>, vector<Alignment>> Mapper::align_paired_multi($/;"	f	class:vg::Mapper
align_pinned	aligner.cpp	/^void Aligner::align_pinned(Alignment& alignment, const HandleGraph& g, bool pin_left, bool xdrop,$/;"	f	class:vg::Aligner
align_pinned	aligner.cpp	/^void QualAdjAligner::align_pinned(Alignment& alignment, const HandleGraph& g, bool pin_left, bool xdrop,$/;"	f	class:vg::QualAdjAligner
align_pinned	dozeu_interface.cpp	/^void DozeuInterface::align_pinned(Alignment& alignment, const HandleGraph& g, bool pin_left,$/;"	f	class:DozeuInterface
align_pinned_multi	aligner.cpp	/^void Aligner::align_pinned_multi(Alignment& alignment, vector<Alignment>& alt_alignments, const HandleGraph& g,$/;"	f	class:vg::Aligner
align_pinned_multi	aligner.cpp	/^void QualAdjAligner::align_pinned_multi(Alignment& alignment, vector<Alignment>& alt_alignments, const HandleGraph& g,$/;"	f	class:vg::QualAdjAligner
align_qual_adjusted	vg.cpp	/^Alignment VG::align_qual_adjusted(const Alignment& alignment,$/;"	f	class:vg::VG
align_qual_adjusted	vg.cpp	/^Alignment VG::align_qual_adjusted(const string& sequence,$/;"	f	class:vg::VG
align_sequence_between	minimizer_mapper_from_chains.cpp	/^void MinimizerMapper::align_sequence_between(const pos_t& left_anchor, const pos_t& right_anchor, size_t max_path_length, const HandleGraph* graph, const GSSWAligner* aligner, Alignment& alignment, size_t max_dp_cells) {$/;"	f	class:vg::MinimizerMapper
align_tails	multipath_alignment_graph.cpp	/^    MultipathAlignmentGraph::align_tails(const Alignment& alignment, const HandleGraph& align_graph, const GSSWAligner* aligner,$/;"	f	class:vg::MultipathAlignmentGraph
align_to_cluster_graph_pairs	multipath_mapper.cpp	/^    void MultipathMapper::align_to_cluster_graph_pairs(const Alignment& alignment1, const Alignment& alignment2,$/;"	f	class:vg::MultipathMapper
align_to_cluster_graphs	multipath_mapper.cpp	/^    void MultipathMapper::align_to_cluster_graphs(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
align_to_cluster_graphs_with_rescue	multipath_mapper.cpp	/^    bool MultipathMapper::align_to_cluster_graphs_with_rescue(const Alignment& alignment1, const Alignment& alignment2,$/;"	f	class:vg::MultipathMapper
align_to_graph	mapper.cpp	/^Alignment Mapper::align_to_graph(const Alignment& aln,$/;"	f	class:vg::Mapper
align_to_splice_candidates	multipath_mapper.cpp	/^    void MultipathMapper::align_to_splice_candidates(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
align_xdrop	aligner.cpp	/^void Aligner::align_xdrop(Alignment& alignment, const HandleGraph& g, const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::Aligner
align_xdrop	aligner.cpp	/^void Aligner::align_xdrop(Alignment& alignment, const HandleGraph& g, const vector<handle_t>& order,$/;"	f	class:vg::Aligner
align_xdrop	aligner.cpp	/^void QualAdjAligner::align_xdrop(Alignment& alignment, const HandleGraph& g, const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::QualAdjAligner
align_xdrop	aligner.cpp	/^void QualAdjAligner::align_xdrop(Alignment& alignment, const HandleGraph& g, const vector<handle_t>& order,$/;"	f	class:vg::QualAdjAligner
aligned_interval	multipath_alignment.cpp	/^    pair<int64_t, int64_t> aligned_interval(const multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
aligner	gbwt_extender.hpp	/^    const Aligner*              aligner;$/;"	m	class:vg::GaplessExtender
aligner	gbwt_extender.hpp	/^    const Aligner*              aligner;$/;"	m	class:vg::WFAExtender
aligner	variant_adder.hpp	/^    Aligner aligner;$/;"	m	class:vg::VariantAdder
alignment	banded_global_aligner.hpp	/^        Alignment& alignment;$/;"	m	class:vg::BandedGlobalAligner
alignment	banded_global_aligner.hpp	/^        Alignment& alignment;$/;"	m	class:vg::BandedGlobalAligner::BABuilder
alignment	banded_global_aligner.hpp	/^        Alignment& alignment;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
alignment	minimizer_mapper.cpp	/^    size_t alignment;$/;"	m	struct:vg::alignment_index_t	file:
alignment	minimizer_mapper.cpp	/^    size_t alignment;$/;"	m	struct:vg::read_alignment_index_t	file:
alignment	sampler.cpp	/^Alignment Sampler::alignment(size_t length) {$/;"	f	class:vg::Sampler
alignment_emitter	graph_caller.hpp	/^    AlignmentEmitter* alignment_emitter;$/;"	m	class:vg::FlowCaller
alignment_emitter	graph_caller.hpp	/^    AlignmentEmitter* alignment_emitter;$/;"	m	class:vg::NestedFlowCaller
alignment_emitter_flags_t	hts_alignment_emitter.hpp	/^enum alignment_emitter_flags_t {$/;"	g	namespace:vg
alignment_end	alignment.cpp	/^Position alignment_end(const Alignment& aln) {$/;"	f	namespace:vg
alignment_end_matches	readfilter.hpp	/^int ReadFilter<Read>::alignment_end_matches(const Alignment& aln) const {$/;"	f	class:vg::ReadFilter
alignment_end_position	mapper.cpp	/^Position Mapper::alignment_end_position(const Alignment& aln) {$/;"	f	class:vg::Mapper
alignment_ends	alignment.cpp	/^vector<Alignment> alignment_ends(const Alignment& aln, size_t len1, size_t len2) {$/;"	f	namespace:vg
alignment_from_length	alignment.cpp	/^int alignment_from_length(const Alignment& a) {$/;"	f	namespace:vg
alignment_from_path	path.cpp	/^Alignment alignment_from_path(const HandleGraph& graph, const Path& path) {$/;"	f	namespace:vg
alignment_index_t	minimizer_mapper.cpp	/^struct alignment_index_t {$/;"	s	namespace:vg	file:
alignment_is_valid	alignment.cpp	/^AlignmentValidity alignment_is_valid(const Alignment& aln, const HandleGraph* hgraph) {$/;"	f	namespace:vg
alignment_middle	alignment.cpp	/^Alignment alignment_middle(const Alignment& aln, int len) {$/;"	f	namespace:vg
alignment_overhang	readfilter.hpp	/^int ReadFilter<Read>::alignment_overhang(const Alignment& aln) const {$/;"	f	class:vg::ReadFilter
alignment_pair	sampler.cpp	/^vector<Alignment> Sampler::alignment_pair(size_t read_length, size_t fragment_length, double fragment_std_dev, double base_error, double indel_error) {$/;"	f	class:vg::Sampler
alignment_path_offsets	algorithms/alignment_path_offsets.cpp	/^alignment_path_offsets(const PathPositionHandleGraph& graph,$/;"	f	namespace:vg::algorithms
alignment_qual_score	genotyper.cpp	/^int Genotyper::alignment_qual_score(VG& graph, const Snarl* snarl, const Alignment& alignment) {$/;"	f	class:vg::Genotyper
alignment_quality_per_node	alignment.cpp	/^map<id_t, int> alignment_quality_per_node(const Alignment& aln) {$/;"	f	namespace:vg
alignment_refpos_to_path_offsets	alignment.cpp	/^map<string ,vector<pair<size_t, bool> > > alignment_refpos_to_path_offsets(const Alignment& aln) {$/;"	f	namespace:vg
alignment_score	gbwt_extender.cpp	/^    int32_t alignment_score(const Aligner& aligner) const {$/;"	f	struct:vg::WFAPoint
alignment_score	gbwt_extender.cpp	/^    int32_t alignment_score(const Aligner& aligner, uint32_t final_insertion) const {$/;"	f	struct:vg::WFAPoint
alignment_score_partition_function	aligner.cpp	/^double GSSWAligner::alignment_score_partition_function(double lambda, const int8_t* score_matrix,$/;"	f	class:vg::GSSWAligner
alignment_seq	sampler.cpp	/^string Sampler::alignment_seq(const Alignment& aln) {$/;"	f	class:vg::Sampler
alignment_set_distance_to_correct	alignment.cpp	/^void alignment_set_distance_to_correct(Alignment& aln, const Alignment& base, const unordered_map<string, string>* translation) {$/;"	f	namespace:vg
alignment_set_distance_to_correct	alignment.cpp	/^void alignment_set_distance_to_correct(Alignment& aln, const map<string ,vector<pair<size_t, bool> > >& base_offsets, const unordered_map<string, string>* translation) {$/;"	f	namespace:vg
alignment_start	alignment.cpp	/^Position alignment_start(const Alignment& aln) {$/;"	f	namespace:vg
alignment_to_a_hot	vectorizer.cpp	/^vector<int> Vectorizer::alignment_to_a_hot(Alignment a){$/;"	f	class:Vectorizer
alignment_to_bam	alignment.cpp	/^bam1_t* alignment_to_bam(bam_hdr_t* bam_header,$/;"	f	namespace:vg
alignment_to_bam_internal	alignment.cpp	/^bam1_t* alignment_to_bam_internal(bam_hdr_t* header,$/;"	f	namespace:vg
alignment_to_custom_score	vectorizer.cpp	/^vector<double> Vectorizer::alignment_to_custom_score(Alignment a, std::function<double(Alignment)> lambda ){$/;"	f	class:Vectorizer
alignment_to_graph	sampler.cpp	/^Alignment Sampler::alignment_to_graph(size_t length) {$/;"	f	class:vg::Sampler
alignment_to_identity_hot	vectorizer.cpp	/^vector<double> Vectorizer::alignment_to_identity_hot(Alignment a){$/;"	f	class:Vectorizer
alignment_to_length	alignment.cpp	/^int alignment_to_length(const Alignment& a) {$/;"	f	namespace:vg
alignment_to_onehot	vectorizer.cpp	/^bit_vector Vectorizer::alignment_to_onehot(Alignment a){$/;"	f	class:Vectorizer
alignment_to_path	sampler.cpp	/^Alignment Sampler::alignment_to_path(const string& source_path, size_t length) {$/;"	f	class:vg::Sampler
alignment_to_sam	alignment.cpp	/^string alignment_to_sam(const Alignment& alignment,$/;"	f	namespace:vg
alignment_to_sam_internal	alignment.cpp	/^string alignment_to_sam_internal(const Alignment& alignment,$/;"	f	namespace:vg
alignment_with_error	sampler.cpp	/^Alignment Sampler::alignment_with_error(size_t length,$/;"	f	class:vg::Sampler
alignments	msa_converter.hpp	/^        vector<unordered_map<string, string>> alignments;$/;"	m	class:vg::MSAConverter
alignments_by_edge	genotypekit.hpp	/^    pair_hash_map<pair<NodeSide, NodeSide>, vector<Alignment*>> alignments_by_edge;$/;"	m	struct:vg::AugmentedGraph
alignments_by_node	genotypekit.hpp	/^    unordered_map<id_t, vector<Alignment*>> alignments_by_node;$/;"	m	struct:vg::AugmentedGraph
alignments_consistent	mapper.cpp	/^bool Mapper::alignments_consistent(const map<string, double>& pos1,$/;"	f	class:vg::Mapper
allATGC	utility.cpp	/^bool allATGC(const string& s) {$/;"	f	namespace:vg
allATGCN	utility.cpp	/^bool allATGCN(const string& s) {$/;"	f	namespace:vg
allAmbiguousToN	utility.cpp	/^string allAmbiguousToN(const string& s) {$/;"	f	namespace:vg
all_children_trivial	snarls.cpp	/^bool SnarlManager::all_children_trivial(const Snarl* snarl, const HandleGraph& graph) const {$/;"	f	class:vg::SnarlManager
all_finished	index_registry.cpp	/^bool IndexRegistry::all_finished(const IndexGroup& indexes) const {$/;"	f	class:vg::IndexRegistry
all_finished	index_registry.cpp	/^bool IndexRegistry::all_finished(const vector<const IndexFile*>& inputs) const {$/;"	f	class:vg::IndexRegistry
all_groups	sparse_union_find.cpp	/^    vector<vector<size_t>> SparseUnionFind::all_groups() {$/;"	f	class:vg::SparseUnionFind
all_mapping_qualities_exact	aligner.cpp	/^vector<double> GSSWAligner::all_mapping_qualities_exact(const vector<double>& scaled_scores,$/;"	f	class:vg::GSSWAligner
all_node_problems	snarl_seed_clusterer.hpp	/^            vector<SnarlTreeNodeProblem> all_node_problems;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
all_path_names	path.cpp	/^vector<string> Paths::all_path_names(void) {$/;"	f	class:vg::Paths
all_seeds	snarl_seed_clusterer.hpp	/^            vector<vector<SeedCache>*>* all_seeds; $/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
all_snarls	genotyper.hpp	/^    unordered_set<const Snarl*> all_snarls;$/;"	m	class:vg::Genotyper
allele	haplotypes.cpp	/^alleleValue linear_haplo_structure::SNVvector::allele(size_t i) const {$/;"	f	class:haplo::linear_haplo_structure::SNVvector
allele_ambiguity_log_probs	genotyper.cpp	/^void Genotyper::allele_ambiguity_log_probs(const VG& graph,$/;"	f	class:vg::Genotyper
allele_length_range	graph_caller.hpp	/^    pair<size_t, size_t> allele_length_range;$/;"	m	class:vg::FlowCaller
allele_to_string	genotyper.cpp	/^string allele_to_string(VG& graph, const Path& allele) {$/;"	f	namespace:vg
alleles	haplotypes.hpp	/^    vector<alleleValue> alleles;$/;"	m	struct:haplo::linear_haplo_structure::SNVvector
alleles	vg.hpp	/^        map<long, vector<vcflib::VariantAllele> > alleles;$/;"	m	struct:vg::VG::Plan
allow_duplicates	traversal_finder.hpp	/^    bool allow_duplicates;$/;"	m	class:vg::PathRestrictedTraversalFinder
allowed_vcf_names	constructor.hpp	/^    set<string> allowed_vcf_names;$/;"	m	class:vg::Constructor
allowed_vcf_regions	constructor.hpp	/^    map<string, pair<size_t, size_t>> allowed_vcf_regions;$/;"	m	class:vg::Constructor
aln	mapper.hpp	/^    Alignment* aln;$/;"	m	class:vg::AlignmentChainModelVertex
aln_emitter	readfilter.hpp	/^    unique_ptr<AlignmentEmitter> aln_emitter;$/;"	m	class:vg::ReadFilter
aln_emitters	multipath_alignment_emitter.hpp	/^    vector<unique_ptr<vg::io::ProtobufEmitter<Alignment>>> aln_emitters;$/;"	m	class:vg::MultipathAlignmentEmitter
alphabet	sampler.cpp	/^const string NGSSimulator::alphabet = "ACGT";$/;"	m	class:vg::NGSSimulator	file:
alphabet	sampler.hpp	/^    static const string alphabet;$/;"	m	class:vg::NGSSimulator
also_merge_group	funnel.hpp	/^void Funnel::also_merge_group(Iterator prev_stage_items_begin, Iterator prev_stage_items_end) {$/;"	f	class:vg::Funnel::Funnel
also_merge_group	funnel.hpp	/^void Funnel::also_merge_group(size_t earlier_stage_lookback, Iterator earlier_stage_items_begin, Iterator earlier_stage_items_end) {$/;"	f	class:vg::Funnel::Funnel
also_relevant	funnel.cpp	/^void Funnel::also_relevant(size_t earlier_stage_lookback, size_t earlier_stage_item) {$/;"	f	class:vg::Funnel
alt_alignments	banded_global_aligner.hpp	/^        vector<Alignment>* alt_alignments;$/;"	m	class:vg::BandedGlobalAligner
alt_anchor_max_length_diff	multipath_mapper.hpp	/^        size_t alt_anchor_max_length_diff = 5;$/;"	m	class:vg::MultipathMapper
alt_paths	constructor.hpp	/^    bool alt_paths = false;$/;"	m	class:vg::Constructor
alt_proposal_sample	mcmc_genotyper.cpp	/^    unordered_set<size_t> MCMCGenotyper::alt_proposal_sample(vector<unordered_set<size_t>>& gamma, PhasedGenome& genome ) const{$/;"	f	class:vg::MCMCGenotyper
alt_tracebacks	banded_global_aligner.hpp	/^        list<tuple<vector<Deflection>, IntType, list<int64_t>>> alt_tracebacks;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack
altivec_f32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)              altivec_f32[2];$/;"	m	union:__anon7
altivec_f32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)              altivec_f32[2];$/;"	m	union:__anon8
altivec_f32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)              altivec_f32[2];$/;"	m	union:__anon9
altivec_f32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)              altivec_f32[4];$/;"	m	union:__anon14
altivec_f32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)              altivec_f32[4];$/;"	m	union:__anon15
altivec_f32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)              altivec_f32[4];$/;"	m	union:__anon16
altivec_f32	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)              altivec_f32;$/;"	m	union:__anon12
altivec_f32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)                altivec_f32;$/;"	m	union:__anon10
altivec_f32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(float)                altivec_f32;$/;"	m	union:__anon11
altivec_f64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64[2];$/;"	m	union:__anon7
altivec_f64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64[2];$/;"	m	union:__anon8
altivec_f64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64[2];$/;"	m	union:__anon9
altivec_f64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64[4];$/;"	m	union:__anon14
altivec_f64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64[4];$/;"	m	union:__anon15
altivec_f64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64[4];$/;"	m	union:__anon16
altivec_f64	simde/x86/sse.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64;$/;"	m	union:__anon12
altivec_f64	simde/x86/sse2.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64;$/;"	m	union:__anon10
altivec_f64	simde/x86/sse2.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(double)             altivec_f64;$/;"	m	union:__anon11
altivec_i16	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)       altivec_i16[2];$/;"	m	union:__anon7
altivec_i16	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)       altivec_i16[2];$/;"	m	union:__anon8
altivec_i16	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)       altivec_i16[2];$/;"	m	union:__anon9
altivec_i16	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)       altivec_i16[4];$/;"	m	union:__anon14
altivec_i16	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)       altivec_i16[4];$/;"	m	union:__anon15
altivec_i16	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)       altivec_i16[4];$/;"	m	union:__anon16
altivec_i16	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)       altivec_i16;$/;"	m	union:__anon12
altivec_i16	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)         altivec_i16;$/;"	m	union:__anon10
altivec_i16	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed short)         altivec_i16;$/;"	m	union:__anon11
altivec_i32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(int)                altivec_i32[2];$/;"	m	union:__anon7
altivec_i32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)         altivec_i32[2];$/;"	m	union:__anon8
altivec_i32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)         altivec_i32[2];$/;"	m	union:__anon9
altivec_i32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)         altivec_i32[4];$/;"	m	union:__anon14
altivec_i32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)         altivec_i32[4];$/;"	m	union:__anon15
altivec_i32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)         altivec_i32[4];$/;"	m	union:__anon16
altivec_i32	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)         altivec_i32;$/;"	m	union:__anon12
altivec_i32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)           altivec_i32;$/;"	m	union:__anon10
altivec_i32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)           altivec_i32;$/;"	m	union:__anon11
altivec_i32f	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(__INT_FAST32_TYPE__)  altivec_i32f;$/;"	m	union:__anon10
altivec_i32f	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(__INT_FAST32_TYPE__)  altivec_i32f;$/;"	m	union:__anon11
altivec_i32f	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)           altivec_i32f;$/;"	m	union:__anon10
altivec_i32f	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed int)           altivec_i32f;$/;"	m	union:__anon11
altivec_i64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(long long)          altivec_i64[2];$/;"	m	union:__anon7
altivec_i64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed long long)   altivec_i64[2];$/;"	m	union:__anon8
altivec_i64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed long long)   altivec_i64[2];$/;"	m	union:__anon9
altivec_i64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed long long)   altivec_i64[4];$/;"	m	union:__anon14
altivec_i64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed long long)   altivec_i64[4];$/;"	m	union:__anon15
altivec_i64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed long long)   altivec_i64[4];$/;"	m	union:__anon16
altivec_i64	simde/x86/sse.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed long long)   altivec_i64;$/;"	m	union:__anon12
altivec_i64	simde/x86/sse2.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed long long)   altivec_i64;$/;"	m	union:__anon10
altivec_i64	simde/x86/sse2.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed long long)   altivec_i64;$/;"	m	union:__anon11
altivec_i8	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)        altivec_i8[2];$/;"	m	union:__anon7
altivec_i8	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)        altivec_i8[2];$/;"	m	union:__anon8
altivec_i8	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)        altivec_i8[2];$/;"	m	union:__anon9
altivec_i8	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)        altivec_i8[4];$/;"	m	union:__anon14
altivec_i8	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)        altivec_i8[4];$/;"	m	union:__anon15
altivec_i8	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)        altivec_i8[4];$/;"	m	union:__anon16
altivec_i8	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)        altivec_i8;$/;"	m	union:__anon12
altivec_i8	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)          altivec_i8;$/;"	m	union:__anon10
altivec_i8	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(signed char)          altivec_i8;$/;"	m	union:__anon11
altivec_u16	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)     altivec_u16[2];$/;"	m	union:__anon7
altivec_u16	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)     altivec_u16[2];$/;"	m	union:__anon8
altivec_u16	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)     altivec_u16[2];$/;"	m	union:__anon9
altivec_u16	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)     altivec_u16[4];$/;"	m	union:__anon14
altivec_u16	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)     altivec_u16[4];$/;"	m	union:__anon15
altivec_u16	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)     altivec_u16[4];$/;"	m	union:__anon16
altivec_u16	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)     altivec_u16;$/;"	m	union:__anon12
altivec_u16	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)       altivec_u16;$/;"	m	union:__anon10
altivec_u16	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned short)       altivec_u16;$/;"	m	union:__anon11
altivec_u32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)       altivec_u32[2];$/;"	m	union:__anon7
altivec_u32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)       altivec_u32[2];$/;"	m	union:__anon8
altivec_u32	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)       altivec_u32[2];$/;"	m	union:__anon9
altivec_u32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)       altivec_u32[4];$/;"	m	union:__anon14
altivec_u32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)       altivec_u32[4];$/;"	m	union:__anon15
altivec_u32	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)       altivec_u32[4];$/;"	m	union:__anon16
altivec_u32	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)       altivec_u32;$/;"	m	union:__anon12
altivec_u32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)         altivec_u32;$/;"	m	union:__anon10
altivec_u32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)         altivec_u32;$/;"	m	union:__anon11
altivec_u32f	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(__UINT_FAST32_TYPE__) altivec_u32f;$/;"	m	union:__anon10
altivec_u32f	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(__UINT_FAST32_TYPE__) altivec_u32f;$/;"	m	union:__anon11
altivec_u32f	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)         altivec_u32f;$/;"	m	union:__anon10
altivec_u32f	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned int)         altivec_u32f;$/;"	m	union:__anon11
altivec_u64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64[2];$/;"	m	union:__anon7
altivec_u64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64[2];$/;"	m	union:__anon8
altivec_u64	simde/x86/avx.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64[2];$/;"	m	union:__anon9
altivec_u64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64[4];$/;"	m	union:__anon14
altivec_u64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64[4];$/;"	m	union:__anon15
altivec_u64	simde/x86/avx512/types.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64[4];$/;"	m	union:__anon16
altivec_u64	simde/x86/sse.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64;$/;"	m	union:__anon12
altivec_u64	simde/x86/sse2.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64;$/;"	m	union:__anon10
altivec_u64	simde/x86/sse2.h	/^      SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned long long) altivec_u64;$/;"	m	union:__anon11
altivec_u8	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)      altivec_u8[2];$/;"	m	union:__anon7
altivec_u8	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)      altivec_u8[2];$/;"	m	union:__anon8
altivec_u8	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)      altivec_u8[2];$/;"	m	union:__anon9
altivec_u8	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)      altivec_u8[4];$/;"	m	union:__anon14
altivec_u8	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)      altivec_u8[4];$/;"	m	union:__anon15
altivec_u8	simde/x86/avx512/types.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)      altivec_u8[4];$/;"	m	union:__anon16
altivec_u8	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)      altivec_u8;$/;"	m	union:__anon12
altivec_u8	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)        altivec_u8;$/;"	m	union:__anon10
altivec_u8	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 SIMDE_POWER_ALTIVEC_VECTOR(unsigned char)        altivec_u8;$/;"	m	union:__anon11
alts_as_loci	constructor.hpp	/^    bool alts_as_loci = false;$/;"	m	class:vg::Constructor
always_check_population	multipath_mapper.hpp	/^        bool always_check_population = false;$/;"	m	class:vg::MultipathMapper
always_false	unittest/catch.hpp	/^    struct always_false : std::false_type {};$/;"	s	namespace:Catch
always_rescue	mapper.hpp	/^    bool always_rescue; \/\/ Should rescue be attempted for all imperfect alignments?$/;"	m	class:vg::Mapper
ambiguous_warned_sequences	constructor.hpp	/^    mutable unordered_set<string> ambiguous_warned_sequences;$/;"	m	class:vg::Constructor
anchored_filter	filter.cpp	/^    bool Filter::anchored_filter(Alignment& aln){$/;"	f	class:vg::Filter
anno_type_t	multipath_alignment.hpp	/^        enum anno_type_t {Null = 0, Double = 2, Bool = 3, String = 4};$/;"	g	class:vg::multipath_alignment_t
annotate_mapped_alignment	funnel.cpp	/^void Funnel::annotate_mapped_alignment(Alignment& aln, bool annotate_correctness) const {$/;"	f	class:vg::Funnel
annotate_with_all_path_scores	surjector.hpp	/^        bool annotate_with_all_path_scores = false;$/;"	m	class:vg::Surjector
annotate_with_initial_path_positions	algorithms/alignment_path_offsets.cpp	/^void annotate_with_initial_path_positions(const PathPositionHandleGraph& graph, Alignment& aln, size_t search_limit, const std::function<bool(const path_handle_t&)>* path_filter) {$/;"	f	namespace:vg::algorithms
annotate_with_initial_path_positions	algorithms/alignment_path_offsets.cpp	/^void annotate_with_initial_path_positions(const PathPositionHandleGraph& graph, vector<Alignment>& alns, size_t search_limit, const std::function<bool(const path_handle_t&)>* path_filter) {$/;"	f	namespace:vg::algorithms
annotate_with_minimizer_statistics	minimizer_mapper.cpp	/^void MinimizerMapper::annotate_with_minimizer_statistics(Alignment& target, const VectorView<Minimizer>& minimizers, const std::vector<Seed>& seeds, size_t old_seed_count, size_t new_seed_offset, const Funnel& funnel) const {$/;"	f	class:vg::MinimizerMapper
annotate_with_node_path_positions	algorithms/alignment_path_offsets.cpp	/^void annotate_with_node_path_positions(const PathPositionHandleGraph& graph, Alignment& aln, size_t search_limit, const std::function<bool(const path_handle_t&)>* path_filter) {$/;"	f	namespace:vg::algorithms
annotate_with_path_positions	algorithms/alignment_path_offsets.cpp	/^void annotate_with_path_positions(const PathPositionHandleGraph& graph, Alignment& aln, bool just_min, size_t search_limit, const std::function<bool(const path_handle_t&)>* path_filter) {$/;"	f	namespace:vg::algorithms
annotate_with_path_positions	sampler.cpp	/^void AbstractReadSampler::annotate_with_path_positions(Alignment& aln) {$/;"	f	class:vg::AbstractReadSampler
annotation	readfilter.hpp	/^        proper_pair, unmapped, annotation, incorrectly_mapped, last};$/;"	e	enum:vg::Counts::FilterName
annotation_path_filter	sampler.hpp	/^    std::unique_ptr<std::function<bool(const path_handle_t&)>> annotation_path_filter; $/;"	m	class:vg::AbstractReadSampler
annotation_to_match	readfilter.hpp	/^    string annotation_to_match = "";$/;"	m	class:vg::ReadFilter
append	gbwt_extender.cpp	/^void WFAAlignment::append(Edit edit, uint32_t length) {$/;"	f	class:vg::WFAAlignment
append	genome_state.cpp	/^const vector<pair<handle_t, size_t>>& SnarlState::append(const vector<handle_t>& haplotype, bool backward) {$/;"	f	class:vg::SnarlState
append	path.cpp	/^void Paths::append(const Graph& g, bool warn_on_duplicates, bool rebuild_indexes) {$/;"	f	class:vg::Paths
append	path.cpp	/^void Paths::append(const Paths& paths, bool warn_on_duplicates, bool rebuild_indexes) {$/;"	f	class:vg::Paths
append	vg.cpp	/^void VG::append(VG& g) {$/;"	f	class:vg::VG
append_cigar_operation	alignment.hpp	/^inline void append_cigar_operation(const int length, const char operation, vector<pair<int, char>>& cigar) {$/;"	f	namespace:vg
append_haplotype	genome_state.cpp	/^DeleteHaplotypeCommand GenomeState::append_haplotype(const AppendHaplotypeCommand& c) {$/;"	f	class:vg::GenomeState
append_left	phased_genome.hpp	/^    inline PhasedGenome::HaplotypeNode* PhasedGenome::Haplotype::append_left(NodeTraversal node_traversal) {$/;"	f	class:vg::PhasedGenome::Haplotype
append_mapping	path.cpp	/^void Paths::append_mapping(const string& name, const mapping_t& m, bool warn_on_duplicates) {$/;"	f	class:vg::Paths
append_mapping	path.cpp	/^void Paths::append_mapping(const string& name, id_t id, bool is_reverse, size_t length, size_t rank, bool warn_on_duplicates) {$/;"	f	class:vg::Paths
append_mapping_sequence	algorithms/path_string.cpp	/^void append_mapping_sequence(const Mapping& m, const string& node_seq, string& seq) {$/;"	f	namespace:vg::algorithms
append_multipath_alignment	multipath_alignment.cpp	/^    void append_multipath_alignment(multipath_alignment_t& multipath_aln,$/;"	f	namespace:vg
append_path	path.cpp	/^Path& append_path(Path& a, const Path& b) {$/;"	f	namespace:vg
append_right	phased_genome.hpp	/^    inline PhasedGenome::HaplotypeNode* PhasedGenome::Haplotype::append_right(NodeTraversal node_traversal) {$/;"	f	class:vg::PhasedGenome::Haplotype
append_step	vg.cpp	/^step_handle_t VG::append_step(const path_handle_t& path, const handle_t& to_append) {$/;"	f	class:vg::VG
apply	hash_map.hpp	/^        static void apply(size_t& seed, Tuple const& tuple)$/;"	f	struct:std::__anon1::HashValueImpl
apply	subcommand/options.hpp	/^    virtual void apply(Receiver& receiver) const {$/;"	f	struct:vg::subcommand::ValueArgSpec
apply	subcommand/options.hpp	/^    void apply(BaseOptionGroup& parser) const {$/;"	f	struct:vg::subcommand::Preset
apply	subcommand/options.hpp	/^    void apply(Receiver& receiver) const {$/;"	f	struct:vg::subcommand::OptionGroup
apply	subcommand/options.hpp	/^    void apply(Receiver& receiver) {$/;"	f	struct:vg::subcommand::GroupedOptionGroup
apply_N_mask	sampler.cpp	/^void NGSSimulator::apply_N_mask(string& sequence, const vector<bool>& n_mask) {$/;"	f	class:vg::NGSSimulator
apply_aligned_base	sampler.cpp	/^void NGSSimulator::apply_aligned_base(Alignment& aln, const pos_t& pos, char graph_char,$/;"	f	class:vg::NGSSimulator
apply_deletion	sampler.cpp	/^void NGSSimulator::apply_deletion(Alignment& aln, const pos_t& pos) {$/;"	f	class:vg::NGSSimulator
apply_edit	graph_synchronizer.cpp	/^vector<Translation> GraphSynchronizer::Lock::apply_edit(const Path& path, set<NodeSide>& dangling, size_t max_node_size) {$/;"	f	class:vg::GraphSynchronizer::Lock
apply_edit	graph_synchronizer.cpp	/^vector<Translation> GraphSynchronizer::Lock::apply_edit(const Path& path, size_t max_node_size) {$/;"	f	class:vg::GraphSynchronizer::Lock
apply_full_length_edit	graph_synchronizer.cpp	/^vector<Translation> GraphSynchronizer::Lock::apply_full_length_edit(const Path& path, size_t max_node_size) {$/;"	f	class:vg::GraphSynchronizer::Lock
apply_haplotype_consistency_scores	mapper.cpp	/^void BaseMapper::apply_haplotype_consistency_scores(const vector<Alignment*>& alns) {$/;"	f	class:vg::BaseMapper
apply_insertion	sampler.cpp	/^void NGSSimulator::apply_insertion(Alignment& aln, const pos_t& pos) {$/;"	f	class:vg::NGSSimulator
apply_min_bp_edge_override	traversal_support.cpp	/^void TraversalSupportFinder::apply_min_bp_edge_override(const vector<SnarlTraversal>& traversals,$/;"	f	class:vg::TraversalSupportFinder
apply_ordering	vg.cpp	/^bool VG::apply_ordering(const vector<handle_t>& ordering, bool compact_ids) {$/;"	f	class:vg::VG
apply_orientation	vg.cpp	/^handle_t VG::apply_orientation(const handle_t& handle) {$/;"	f	class:vg::VG
apply_translation	path_index.cpp	/^void PathIndex::apply_translation(const Translation& translation) {$/;"	f	class:vg::PathIndex
apply_translations	path_index.cpp	/^void PathIndex::apply_translations(const vector<Translation>& translations) {$/;"	f	class:vg::PathIndex
approx_alignment_position	mapper.cpp	/^int64_t Mapper::approx_alignment_position(const Alignment& aln) {$/;"	f	class:vg::Mapper
approx_distance	mapper.cpp	/^int64_t Mapper::approx_distance(pos_t pos1, pos_t pos2) {$/;"	f	class:vg::Mapper
approx_fragment_length	mapper.cpp	/^int64_t Mapper::approx_fragment_length(const Alignment& aln1, const Alignment& aln2) {$/;"	f	class:vg::Mapper
approx_gbwt_memory	index_registry.cpp	/^int64_t approx_gbwt_memory(const string& vcf_filename) {$/;"	f	namespace:vg
approx_graph_load_memory	index_registry.cpp	/^int64_t approx_graph_load_memory(const string& graph_filename) {$/;"	f	namespace:vg
approx_graph_memory	index_registry.cpp	/^int64_t approx_graph_memory(const string& fasta_filename, const string& vcf_filename) {$/;"	f	namespace:vg
approx_graph_memory	index_registry.cpp	/^int64_t approx_graph_memory(const string& gfa_filename) {$/;"	f	namespace:vg
approx_graph_memory	index_registry.cpp	/^int64_t approx_graph_memory(const vector<string>& fasta_filenames, const vector<string>& vcf_filenames) {$/;"	f	namespace:vg
approx_num_vars	index_registry.cpp	/^double approx_num_vars(const string& vcf_filename) {$/;"	f	namespace:vg
approx_position	mapper.cpp	/^int64_t Mapper::approx_position(pos_t pos) {$/;"	f	class:vg::Mapper
approximate_jobs	recombinator.hpp	/^        size_t approximate_jobs = APPROXIMATE_JOBS;$/;"	m	struct:vg::HaplotypePartitioner::Parameters
arcSafeRelease	unittest/catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	unittest/catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arch_is_big_endian	endianness.hpp	/^    inline bool endianness<IntType>::arch_is_big_endian() {$/;"	f	class:vg::endianness
are_consecutive_nodes_in_path	path.cpp	/^bool Paths::are_consecutive_nodes_in_path(id_t id1, id_t id2, const string& path_name) {$/;"	f	class:vg::Paths
are_consistent	multipath_mapper.cpp	/^    bool MultipathMapper::are_consistent(const multipath_alignment_t& multipath_aln_1,$/;"	f	class:vg::MultipathMapper
args	subcommand/options.hpp	/^    std::vector<std::unique_ptr<BaseArgSpec<Receiver>>> args;$/;"	m	struct:vg::subcommand::OptionGroup
array_end	explainer.cpp	/^void ProblemDumpExplainer::array_end() {$/;"	f	class:vg::ProblemDumpExplainer
array_start	explainer.cpp	/^void ProblemDumpExplainer::array_start() {$/;"	f	class:vg::ProblemDumpExplainer
as_edge_table	packer.cpp	/^ostream& Packer::as_edge_table(ostream& out, vector<vg::id_t> node_ids) {$/;"	f	class:vg::Packer
as_quality_table	packer.cpp	/^ostream& Packer::as_quality_table(ostream& out, vector<vg::id_t> node_ids) {$/;"	f	class:vg::Packer
as_table	packer.cpp	/^ostream& Packer::as_table(ostream& out, bool show_edits, vector<vg::id_t> node_ids) {$/;"	f	class:vg::Packer
assign_constructed	index_registry.cpp	/^void IndexFile::assign_constructed(const vector<string>& filenames) {$/;"	f	class:vg::IndexFile
assign_new_sequence_id	algorithms/gfa_to_handle.cpp	/^nid_t GFAParser::assign_new_sequence_id(const string& str, GFAIDMapInfo& id_map_info) {$/;"	f	class:vg::algorithms::GFAParser
assume_acyclic	mapper.hpp	/^    bool assume_acyclic; \/\/ the indexed graph is acyclic$/;"	m	class:vg::BaseMapper
at	option.hpp	/^    const typename Value::value_type& at(size_t i) const {$/;"	f	class:vg::Option
at	option.hpp	/^    typename Value::value_type& at(size_t i) {$/;"	f	class:vg::Option
at_dead_end	gbwt_extender.cpp	/^    bool at_dead_end(const MatchPos& pos) const {$/;"	f	class:vg::WFATree	file:
at_last_node	gbwt_extender.cpp	/^    bool at_last_node() const { return this->path.size() == 1; }$/;"	f	struct:vg::MatchPos
at_next_deflection	banded_global_aligner.cpp	/^inline bool BandedGlobalAligner<IntType>::AltTracebackStack::at_next_deflection(int64_t node_id, int64_t row_idx,$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
at_position	path_index.cpp	/^NodeSide PathIndex::at_position(size_t position) const {$/;"	f	class:vg::PathIndex
atomic_header	hts_alignment_emitter.hpp	/^    atomic<bam_hdr_t*> atomic_header;$/;"	m	class:vg::HTSWriter
attempt_rescue	minimizer_mapper.cpp	/^void MinimizerMapper::attempt_rescue(const Alignment& aligned_read, Alignment& rescued_alignment, const VectorView<Minimizer>& minimizers, bool rescue_forward ) {$/;"	f	class:vg::MinimizerMapper
attempt_rescue	multipath_mapper.cpp	/^    bool MultipathMapper::attempt_rescue(const multipath_alignment_t& multipath_aln, const Alignment& other_aln,$/;"	f	class:vg::MultipathMapper
attempt_rescue_for_secondaries	multipath_mapper.cpp	/^    void MultipathMapper::attempt_rescue_for_secondaries(const Alignment& alignment1, const Alignment& alignment2,$/;"	f	class:vg::MultipathMapper
attempt_rescue_for_splice_segment	multipath_mapper.cpp	/^    bool MultipathMapper::attempt_rescue_for_splice_segment(const Alignment& alignment, const pair<int64_t, int64_t>& primary_interval,$/;"	f	class:vg::MultipathMapper
attempt_unpaired_multipath_map_of_pair	multipath_mapper.cpp	/^    bool MultipathMapper::attempt_unpaired_multipath_map_of_pair(const Alignment& alignment1, const Alignment& alignment2,$/;"	f	class:vg::MultipathMapper
attributes	gff_reader.hpp	/^        string attributes;$/;"	m	struct:vg::GFFRecord
aug	traversal_finder.hpp	/^    AugmentedGraph& aug;$/;"	m	class:vg::ReadRestrictedTraversalFinder
aug	traversal_finder.hpp	/^    AugmentedGraph& aug;$/;"	m	class:vg::SupportRestrictedTraversalFinder
augment	augment.cpp	/^void augment(MutablePathMutableHandleGraph* graph,$/;"	f	namespace:vg
augment_from_alignment_edits	genotypekit.cpp	/^void AugmentedGraph::augment_from_alignment_edits(vector<Alignment>& alignments,$/;"	f	class:vg::AugmentedGraph
augment_graph	transcriptome.cpp	/^void Transcriptome::augment_graph(const list<EditedTranscriptPath> & edited_transcript_paths, const bool is_introns, unique_ptr<gbwt::GBWT> & haplotype_index, const bool update_haplotypes, const bool add_reference_transcript_paths) {$/;"	f	class:vg::Transcriptome
augment_impl	augment.cpp	/^void augment_impl(MutablePathMutableHandleGraph* graph,$/;"	f	namespace:vg
augmented	nested_traversal_finder.hpp	/^    SupportAugmentedGraph& augmented;$/;"	m	class:vg::NestedTraversalFinder
available	index_registry.cpp	/^bool IndexRegistry::available(const IndexName& identifier) const {$/;"	f	class:vg::IndexRegistry
available_short_options	option.hpp	/^    set<int> available_short_options;$/;"	m	class:vg::ConfigurableParser
average_node_quality	packer.cpp	/^size_t Packer::average_node_quality(size_t i) const {$/;"	f	class:vg::Packer
average_node_support_switch_threshold	traversal_support.hpp	/^    size_t average_node_support_switch_threshold = 50;$/;"	m	class:vg::TraversalSupportFinder
average_traversal_support_switch_threshold	traversal_support.hpp	/^    size_t average_traversal_support_switch_threshold = 50;$/;"	m	class:vg::TraversalSupportFinder
avg_node_length	mapper.hpp	/^    double avg_node_length = 0;$/;"	m	class:vg::BaseMapper
avg_node_mapq_cache	traversal_support.hpp	/^    mutable vector<LRUCache<nid_t, size_t>*> avg_node_mapq_cache;$/;"	m	class:vg::CachedPackedTraversalSupportFinder
avg_node_support_cache	traversal_support.hpp	/^    mutable vector<LRUCache<nid_t, Support>*> avg_node_support_cache;$/;"	m	class:vg::CachedPackedTraversalSupportFinder
avg_qual_filter	filter.cpp	/^    Alignment Filter::avg_qual_filter(Alignment& aln){$/;"	f	class:vg::Filter
b	statistics.hpp	/^    T b() const {$/;"	f	class:vg::uniform_int_distribution
b	statistics.hpp	/^    T b() const {$/;"	f	class:vg::uniform_real_distribution
back	haplotypes.cpp	/^const gbwt::vector_type::value_type& gbwt_thread_t::back() const {$/;"	f	class:haplo::gbwt_thread_t
back	haplotypes.cpp	/^gbwt::vector_type::value_type& gbwt_thread_t::back() {$/;"	f	class:haplo::gbwt_thread_t
back_translate_alignments_in_place	back_translating_alignment_emitter.cpp	/^void BackTranslatingAlignmentEmitter::back_translate_alignments_in_place(vector<Alignment>& alns) const {$/;"	f	class:vg::BackTranslatingAlignmentEmitter
back_translate_in_place	algorithms/back_translate.cpp	/^void back_translate_in_place(const NamedNodeBackTranslation* translation, Path& path) {$/;"	f	namespace:vg::algorithms
back_translate_in_place	algorithms/back_translate.cpp	/^void back_translate_in_place(const NamedNodeBackTranslation* translation, Snarl& snarl) {$/;"	f	namespace:vg::algorithms
back_translate_in_place	algorithms/back_translate.cpp	/^void back_translate_in_place(const NamedNodeBackTranslation* translation, SnarlTraversal& traversal) {$/;"	f	namespace:vg::algorithms
back_translate_in_place	algorithms/back_translate.cpp	/^void back_translate_in_place(const NamedNodeBackTranslation* translation, Visit& visit) {$/;"	f	namespace:vg::algorithms
backbone	flow_sort.hpp	/^        set<id_t> backbone;$/;"	m	struct:vg::FlowSort::Growth
background_sampler	sampler.hpp	/^    vg::uniform_int_distribution<size_t> background_sampler;$/;"	m	class:vg::NGSSimulator
backing	back_translating_alignment_emitter.hpp	/^    unique_ptr<AlignmentEmitter> backing;$/;"	m	class:vg::BackTranslatingAlignmentEmitter
backing	extra_node_graph.hpp	/^    const HandleGraph* backing;$/;"	m	class:vg::ExtraNodeGraph
backing	source_sink_overlay.hpp	/^    const HandleGraph* backing;$/;"	m	class:vg::SourceSinkOverlay
backing	surjecting_alignment_emitter.hpp	/^    unique_ptr<AlignmentEmitter> backing;$/;"	m	class:vg::SurjectingAlignmentEmitter
backing_files	hts_alignment_emitter.hpp	/^    vector<hFILE*> backing_files;$/;"	m	class:vg::HTSWriter
backing_graph	genome_state.hpp	/^    const HandleGraph* backing_graph;$/;"	m	class:vg::GenomeState
backing_graph	graph_caller.hpp	/^    const HandleGraph* backing_graph;$/;"	m	class:vg::SnarlGraph
backing_graph	subgraph_overlay.hpp	/^    const HandleGraph* backing_graph;$/;"	m	class:vg::SubgraphOverlay
backing_heads	source_sink_overlay.hpp	/^    unordered_set<handle_t> backing_heads;$/;"	m	class:vg::SourceSinkOverlay
backing_index	utility.hpp	/^    inline size_t backing_index(size_t index) const {$/;"	f	struct:vg::VectorView
backing_path_graph	subgraph_overlay.hpp	/^    const PathHandleGraph* backing_path_graph;$/;"	m	class:vg::PathSubgraphOverlay
backing_tails	source_sink_overlay.hpp	/^    unordered_set<handle_t> backing_tails;$/;"	m	class:vg::SourceSinkOverlay
backward	nodetraversal.hpp	/^    bool backward;$/;"	m	class:vg::NodeTraversal
bad_mapping_index	alignment.hpp	/^    size_t bad_mapping_index = 0;$/;"	m	struct:vg::AlignmentValidity
balanced_kmers	mapper.cpp	/^const vector<string> balanced_kmers(const string& seq, const int kmer_size, const int stride) {$/;"	f	namespace:vg
balanced_stride	mapper.cpp	/^const int balanced_stride(int read_length, int kmer_size, int stride) {$/;"	f	namespace:vg
bam_to_alignment	alignment.cpp	/^Alignment bam_to_alignment(const bam1_t *b, const map<string, string>& rg_sample, const map<int, path_handle_t>& tid_path_handle) {$/;"	f	namespace:vg
bam_to_alignment	alignment.cpp	/^Alignment bam_to_alignment(const bam1_t *b,$/;"	f	namespace:vg
band_begin	mapper.hpp	/^    int band_begin;$/;"	m	class:vg::AlignmentChainModelVertex
band_idx	mapper.hpp	/^    int band_idx;$/;"	m	class:vg::AlignmentChainModelVertex
band_multimaps	mapper.hpp	/^    int band_multimaps; \/\/ the number of multimaps for to attempt for each band in a banded alignment$/;"	m	class:vg::Mapper
band_padding_memo	multipath_mapper.hpp	/^        vector<size_t> band_padding_memo;$/;"	m	class:vg::MultipathMapper
band_padding_memo_size	multipath_mapper.hpp	/^        size_t band_padding_memo_size = 2000;$/;"	m	class:vg::MultipathMapper
band_padding_multiplier	multipath_mapper.hpp	/^        double band_padding_multiplier = 1.0;$/;"	m	class:vg::MultipathMapper
banded_global_aligner_hpp	banded_global_aligner.hpp	9;"	d
banded_matrices	banded_global_aligner.hpp	/^        vector<BAMatrix*> banded_matrices;$/;"	m	class:vg::BandedGlobalAligner
base	statistics.hpp	/^    PRNG& base;$/;"	m	class:vg::WideningPRNG
base_edge	genotypekit.cpp	/^pair<const Edge*, bool> AugmentedGraph::base_edge(const Edge* edge) {$/;"	f	class:vg::AugmentedGraph
base_graph	genotypekit.hpp	/^    VG* base_graph = nullptr;$/;"	m	struct:vg::AugmentedGraph
base_locks	packer.hpp	/^    std::mutex* base_locks;$/;"	m	class:vg::Packer
base_mappings	subcommand/gamcompare_main.cpp	/^std::vector<MappingRun> base_mappings(const Alignment& aln) {$/;"	f
baseline_error_large	snarl_caller.hpp	/^    double  baseline_error_large = 0.01;$/;"	m	class:vg::PoissonSupportSnarlCaller
baseline_error_small	snarl_caller.hpp	/^    double  baseline_error_small = 0.005;$/;"	m	class:vg::PoissonSupportSnarlCaller
bases_per_chunk	constructor.hpp	/^    size_t bases_per_chunk = 1024 * 1024;$/;"	m	class:vg::Constructor
batch_file_prefix	haplotype_indexer.hpp	/^    std::string batch_file_prefix = "";$/;"	m	class:vg::HaplotypeIndexer
batch_size	gbwt_helper.hpp	/^    gbwt::size_type batch_size = gbwt::DynamicGBWT::INSERT_BATCH_SIZE;$/;"	m	struct:vg::RebuildParameters
before	subcommand/haplotypes_main.cpp	/^    enum order { before, overlap, after };$/;"	e	enum:ReferenceInterval::order	file:
begin	algorithms/kmer.hpp	/^    pos_t begin;$/;"	m	struct:vg::algorithms::kmer_t
begin	algorithms/prune.cpp	/^    pos_t begin;$/;"	m	struct:vg::algorithms::walk_t	file:
begin	algorithms/walk.hpp	/^    pos_t begin;$/;"	m	struct:vg::algorithms::walk_t
begin	cluster.cpp	/^ShuffledPairs::iterator ShuffledPairs::begin() const {$/;"	f	class:vg::ShuffledPairs
begin	kmer.hpp	/^    pos_t begin;$/;"	m	struct:vg::kmer_t
begin	mem.hpp	/^    string::const_iterator begin;$/;"	m	class:vg::MaximalExactMatch
begin	multipath_alignment_graph.hpp	/^        string::const_iterator begin;$/;"	m	class:vg::PathNode
begin	option.hpp	/^    typename Value::const_iterator begin() const {$/;"	f	class:vg::Option
begin	option.hpp	/^    typename Value::iterator begin() {$/;"	f	class:vg::Option
begin	path_index.cpp	/^PathIndex::iterator PathIndex::begin() const {$/;"	f	class:vg::PathIndex
begin	phased_genome.cpp	/^    PhasedGenome::iterator PhasedGenome::begin(int which_haplotype) {$/;"	f	class:vg::PhasedGenome
begin	unittest/catch.hpp	/^        constexpr const_iterator begin() const { return m_start; }$/;"	f	class:Catch::StringRef
begin	utility.hpp	/^    const_iterator begin() const {$/;"	f	struct:vg::VectorView
bellman_ford_shortest_cycle_length	algorithms/shortest_cycle.cpp	/^    size_t bellman_ford_shortest_cycle_length(const HandleGraph* graph,$/;"	f	namespace:vg::algorithms
benchmark_control	benchmark.cpp	/^void benchmark_control() {$/;"	f	namespace:vg
bfs	flow_sort.cpp	/^bool FlowSort::bfs(set<id_t>& nodes, map<id_t, map<id_t, int>>& edge_weight, id_t s,$/;"	f	class:vg::FlowSort
bfs_left	traversal_finder.cpp	/^RepresentativeTraversalFinder::bfs_left(Visit visit,$/;"	f	class:vg::RepresentativeTraversalFinder
bfs_right	traversal_finder.cpp	/^RepresentativeTraversalFinder::bfs_right(Visit visit, PathIndex& index, bool stop_if_visited,$/;"	f	class:vg::RepresentativeTraversalFinder
bidirectional_haplo_tx_gbwt	index_registry.cpp	/^bool IndexingParameters::bidirectional_haplo_tx_gbwt = false;$/;"	m	class:vg::IndexingParameters	file:
bidirectional_haplo_tx_gbwt	index_registry.hpp	/^    static bool bidirectional_haplo_tx_gbwt;$/;"	m	struct:vg::IndexingParameters
bin_for_position	packer.cpp	/^size_t Packer::bin_for_position(size_t i) const {$/;"	f	class:vg::Packer
bin_size	packer.hpp	/^    size_t bin_size = 0;$/;"	m	class:vg::Packer
bin_to_ranges	stream_index.hpp	/^    unordered_map<bin_t, vector<pair<int64_t, int64_t>>> bin_to_ranges;$/;"	m	class:vg::StreamIndexBase
binned_packed_depth	algorithms/coverage_depth.cpp	/^vector<tuple<size_t, size_t, double, double>> binned_packed_depth(const Packer& packer, const string& path_name, size_t bin_size,$/;"	f	namespace:vg::algorithms
binned_packed_depth_index	algorithms/coverage_depth.cpp	/^BinnedDepthIndex binned_packed_depth_index(const Packer& packer,$/;"	f	namespace:vg::algorithms
binned_path_depth	algorithms/coverage_depth.cpp	/^vector<tuple<size_t, size_t, double, double>> binned_path_depth(const PathHandleGraph& graph,$/;"	f	namespace:vg::algorithms
binomial_cmf_ln	statistics.hpp	/^real_t binomial_cmf_ln(ProbIn success_logprob, size_t trials, size_t successes) {$/;"	f	namespace:vg
bins_by_id_prefix	stream_index.hpp	/^    BitStringTree<bin_t> bins_by_id_prefix;$/;"	m	class:vg::StreamIndexBase
bit_length	stream_index.hpp	/^    uint8_t bit_length;$/;"	m	class:vg::BitString
bits	stream_index.hpp	/^    uint64_t bits;$/;"	m	class:vg::BitString
bool	simde/simde-features.h	351;"	d
bool	simde/simde-features.h	364;"	d
bool	simde/simde-features.h	375;"	d
border	phase_unfolder.hpp	/^    hash_set<vg::id_t>     border;$/;"	m	class:vg::PhaseUnfolder
border_offsets	transcriptome.hpp	/^    pair<uint32_t, uint32_t> border_offsets;$/;"	m	struct:vg::Exon
border_steps	transcriptome.hpp	/^    pair<step_handle_t, step_handle_t> border_steps;$/;"	m	struct:vg::Exon
bottom	haplotypes.hpp	/^  int64_t bottom;$/;"	m	struct:haplo::int_itvl_t
bottom_diag	banded_global_aligner.hpp	/^        int64_t bottom_diag;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
bp_length	traversal_finder.cpp	/^size_t RepresentativeTraversalFinder::bp_length(const structures::ImmutableList<Visit>& path) {$/;"	f	class:vg::RepresentativeTraversalFinder
break_chain	graph_caller.cpp	/^vector<Chain> GraphCaller::break_chain(const HandleGraph& graph, const Chain& chain, size_t max_edges, size_t max_trivial) {$/;"	f	class:vg::GraphCaller
break_cycles	vg.cpp	/^vector<Edge> VG::break_cycles(void) {$/;"	f	class:vg::VG
breakend_filter	filter.cpp	/^    pair<Locus, Locus> Filter::breakend_filter(Alignment& aln_first, Alignment& aln_second){$/;"	f	class:vg::Filter
brute_force_3ecc	unittest/three_edge_connected_components.cpp	/^static structures::UnionFind brute_force_3ecc(size_t count, const function<void(size_t, const function<void(size_t)>&)>& get_connected) {$/;"	f	namespace:vg::unittest
brute_force_alt_traversals	traversal_finder.cpp	/^void VCFTraversalFinder::brute_force_alt_traversals($/;"	f	class:vg::VCFTraversalFinder
buffer	kff.hpp	/^    std::deque<std::pair<kmer_type, size_t>> buffer;$/;"	m	class:vg::ParallelKFFReader
buffer	vcf_buffer.hpp	/^    vcflib::Variant buffer;$/;"	m	class:vg::VcfBuffer
buffer_size	readfilter.hpp	/^    int buffer_size = 512;$/;"	m	class:vg::ReadFilter
buffer_size	recombinator.hpp	/^        gbwt::size_type buffer_size = gbwt::DynamicGBWT::INSERT_BATCH_SIZE;$/;"	m	struct:vg::Recombinator::Parameters
build	subcommand/gbwt_main.cpp	/^    build_mode build = build_none;$/;"	m	struct:GBWTConfig	file:
build_alignments	subcommand/gbwt_main.cpp	/^    enum build_mode { build_none, build_vcf, build_gfa, build_paths, build_alignments, build_gbz, build_gbwtgraph };$/;"	e	enum:GBWTConfig::build_mode	file:
build_edge_indexes	vg.cpp	/^void VG::build_edge_indexes(void) {$/;"	f	class:vg::VG
build_edge_indexes_no_init_size	vg.cpp	/^void VG::build_edge_indexes_no_init_size(void) {$/;"	f	class:vg::VG
build_gbwt	haplotype_indexer.cpp	/^std::unique_ptr<gbwt::DynamicGBWT> HaplotypeIndexer::build_gbwt(const PathHandleGraph& graph) const {$/;"	f	class:vg::HaplotypeIndexer
build_gbwt	haplotype_indexer.cpp	/^std::unique_ptr<gbwt::DynamicGBWT> HaplotypeIndexer::build_gbwt(const PathHandleGraph& graph,$/;"	f	class:vg::HaplotypeIndexer
build_gbwt	haplotype_indexer.cpp	/^std::unique_ptr<gbwt::DynamicGBWT> HaplotypeIndexer::build_gbwt(const std::vector<std::string>& vcf_parse_files,$/;"	f	class:vg::HaplotypeIndexer
build_gbwt_graph	unittest/gbwt_extender.cpp	/^gbwtgraph::GBWTGraph build_gbwt_graph(const gbwt::GBWT& gbwt_index) {$/;"	f	namespace:vg::unittest::__anon3
build_gbwt_index	unittest/gbwt_extender.cpp	/^gbwt::GBWT build_gbwt_index() {$/;"	f	namespace:vg::unittest::__anon3
build_gbwtgraph	subcommand/gbwt_main.cpp	/^    enum build_mode { build_none, build_vcf, build_gfa, build_paths, build_alignments, build_gbz, build_gbwtgraph };$/;"	e	enum:GBWTConfig::build_mode	file:
build_gbz	subcommand/gbwt_main.cpp	/^    enum build_mode { build_none, build_vcf, build_gfa, build_paths, build_alignments, build_gbz, build_gbwtgraph };$/;"	e	enum:GBWTConfig::build_mode	file:
build_gcsa_lcp	build_index.cpp	/^void build_gcsa_lcp(const HandleGraph& graph,$/;"	f	namespace:vg
build_gfa	subcommand/gbwt_main.cpp	/^    enum build_mode { build_none, build_vcf, build_gfa, build_paths, build_alignments, build_gbz, build_gbwtgraph };$/;"	e	enum:GBWTConfig::build_mode	file:
build_indexes	snarls.cpp	/^void SnarlManager::build_indexes() {$/;"	f	class:vg::SnarlManager
build_indexes	vg.cpp	/^void VG::build_indexes(void) {$/;"	f	class:vg::VG
build_indexes_no_init_size	vg.cpp	/^void VG::build_indexes_no_init_size(void) {$/;"	f	class:vg::VG
build_indices	phased_genome.cpp	/^    void PhasedGenome::build_indices() {$/;"	f	class:vg::PhasedGenome
build_jobs	subcommand/gbwt_main.cpp	/^    size_t build_jobs = default_build_jobs();$/;"	m	struct:GBWTConfig	file:
build_mode	subcommand/gbwt_main.cpp	/^    enum build_mode { build_none, build_vcf, build_gfa, build_paths, build_alignments, build_gbz, build_gbwtgraph };$/;"	g	struct:GBWTConfig	file:
build_node_indexes	vg.cpp	/^void VG::build_node_indexes(void) {$/;"	f	class:vg::VG
build_node_indexes_no_init_size	vg.cpp	/^void VG::build_node_indexes_no_init_size(void) {$/;"	f	class:vg::VG
build_none	subcommand/gbwt_main.cpp	/^    enum build_mode { build_none, build_vcf, build_gfa, build_paths, build_alignments, build_gbz, build_gbwtgraph };$/;"	e	enum:GBWTConfig::build_mode	file:
build_paths	subcommand/gbwt_main.cpp	/^    enum build_mode { build_none, build_vcf, build_gfa, build_paths, build_alignments, build_gbz, build_gbwtgraph };$/;"	e	enum:GBWTConfig::build_mode	file:
build_position_table	translator.cpp	/^void Translator::build_position_table(void) {$/;"	f	class:vg::Translator
build_site_indices_internal	phased_genome.cpp	/^    void PhasedGenome::build_site_indices_internal(const Snarl* snarl) {$/;"	f	class:vg::PhasedGenome
build_subchains	recombinator.cpp	/^void HaplotypePartitioner::build_subchains(const gbwtgraph::TopLevelChain& chain, Haplotypes::TopLevelChain& output, const Parameters& parameters) const {$/;"	f	class:vg::HaplotypePartitioner
build_vcf	subcommand/gbwt_main.cpp	/^    enum build_mode { build_none, build_vcf, build_gfa, build_paths, build_alignments, build_gbz, build_gbwtgraph };$/;"	e	enum:GBWTConfig::build_mode	file:
burn_in	mcmc_genotyper.hpp	/^    const int burn_in; \/\/how many iterations we run only original proposal sample dist. $/;"	m	class:vg::MCMCGenotyper
burn_in	unittest/mcmc_genotyper.cpp	/^        const int burn_in = n_iterations\/2;$/;"	m	namespace:vg::unittest	file:
by_id	path_index.hpp	/^    map<int64_t, pair<size_t, bool>> by_id;$/;"	m	struct:vg::PathIndex
by_start	path_index.hpp	/^    map<size_t, NodeSide> by_start;$/;"	m	struct:vg::PathIndex
cache_mutex	indexed_vg.hpp	/^    mutable mutex cache_mutex;$/;"	m	class:vg::IndexedVG
cached_fragment_direction	mapper.hpp	/^    bool cached_fragment_direction = 1;$/;"	m	class:vg::FragmentLengthStatistics
cached_fragment_length_mean	mapper.hpp	/^    double cached_fragment_length_mean = 0;$/;"	m	class:vg::FragmentLengthStatistics
cached_fragment_length_stdev	mapper.hpp	/^    double cached_fragment_length_stdev = 0;$/;"	m	class:vg::FragmentLengthStatistics
cached_fragment_orientation_same	mapper.hpp	/^    bool cached_fragment_orientation_same = 0;$/;"	m	class:vg::FragmentLengthStatistics
cached_genotypes	vcf_buffer.hpp	/^    map<vcflib::Variant*, vector<vector<int>>> cached_genotypes;$/;"	m	class:vg::WindowedVcfBuffer
cactus_to_vg	cactus.cpp	/^VG cactus_to_vg(stCactusGraph* cactus_graph) {$/;"	f	namespace:vg
cactusify	cactus.cpp	/^VG cactusify(VG& graph) {$/;"	f	namespace:vg
calculate_I	haplotypes.cpp	/^void haplo_DP_rectangle::calculate_I(int64_t succ_o_val) {$/;"	f	class:haplo::haplo_DP_rectangle
calculate_and_save_alignment	dozeu_interface.cpp	/^void DozeuInterface::calculate_and_save_alignment(Alignment &alignment, const OrderedGraph& graph, const vector<graph_pos_s>& head_positions,$/;"	f	class:DozeuInterface
calculate_consistency	genotypekit.cpp	/^vector<bool> SimpleConsistencyCalculator::calculate_consistency(const Snarl& site,$/;"	f	class:vg::SimpleConsistencyCalculator
calculate_log_prior	genotypekit.cpp	/^double FixedGenotypePriorCalculator::calculate_log_prior(const Genotype& genotype) {$/;"	f	class:vg::FixedGenotypePriorCalculator
calculate_max_position	dozeu_interface.cpp	/^DozeuInterface::graph_pos_s DozeuInterface::calculate_max_position(const OrderedGraph& graph, const graph_pos_s& seed_pos, size_t max_node_index,$/;"	f	class:DozeuInterface
calculate_seed_position	dozeu_interface.cpp	/^DozeuInterface::graph_pos_s DozeuInterface::calculate_seed_position(const OrderedGraph& graph, const vector<MaximalExactMatch>& mems,$/;"	f	class:DozeuInterface
calculate_supports	genotypekit.cpp	/^vector<Support> SimpleTraversalSupportCalculator::calculate_supports(const Snarl& site,$/;"	f	class:vg::SimpleTraversalSupportCalculator
calibrate_mismapping_detection	multipath_mapper.cpp	/^    void MultipathMapper::calibrate_mismapping_detection(size_t num_simulations, const vector<size_t>& simulated_read_lengths) {$/;"	f	class:vg::MultipathMapper
call_snarl	graph_caller.cpp	/^bool FlowCaller::call_snarl(const Snarl& managed_snarl) {$/;"	f	class:vg::FlowCaller
call_snarl	graph_caller.cpp	/^bool LegacyCaller::call_snarl(const Snarl& snarl) {$/;"	f	class:vg::LegacyCaller
call_snarl	graph_caller.cpp	/^bool NestedFlowCaller::call_snarl(const Snarl& managed_snarl) {$/;"	f	class:vg::NestedFlowCaller
call_snarl	graph_caller.cpp	/^bool VCFGenotyper::call_snarl(const Snarl& snarl) {$/;"	f	class:vg::VCFGenotyper
call_snarl	mcmc_caller.cpp	/^    bool MCMCCaller::call_snarl(const Snarl& snarl){$/;"	f	class:vg::MCMCCaller
call_snarl_recursive	graph_caller.cpp	/^bool NestedFlowCaller::call_snarl_recursive(const Snarl& managed_snarl, int max_ploidy,$/;"	f	class:vg::NestedFlowCaller
call_top_level_chains	graph_caller.cpp	/^void GraphCaller::call_top_level_chains(const HandleGraph& graph, size_t max_edges, size_t max_trivial, RecurseType recurse_type) {$/;"	f	class:vg::GraphCaller
call_top_level_snarls	graph_caller.cpp	/^void GraphCaller::call_top_level_snarls(const HandleGraph& graph, RecurseType recurse_type) {$/;"	f	class:vg::GraphCaller
call_top_level_snarls	mcmc_caller.cpp	/^    void MCMCCaller::call_top_level_snarls(bool recurse_on_fail) {$/;"	f	class:vg::MCMCCaller
candidate_node	gbwt_extender.cpp	/^    uint32_t candidate_node;$/;"	m	class:vg::WFATree	file:
candidate_point	gbwt_extender.cpp	/^    WFAPoint candidate_point;$/;"	m	class:vg::WFATree	file:
candidate_splice_sites	splicing.cpp	/^const vector<tuple<handle_t, size_t, int64_t>>& SpliceRegion::candidate_splice_sites(size_t motif_num) const {$/;"	f	class:vg::SpliceRegion
candidates_per_window	minimizer_mapper.hpp	/^        int32_t candidates_per_window; \/\/ How many minimizers compete to be the best (index's w), or 1 for syncmers.  $/;"	m	struct:vg::MinimizerMapper::Minimizer
canonical_orientation	phase_unfolder.cpp	/^PhaseUnfolder::path_type canonical_orientation(const PhaseUnfolder::path_type& path, bool& from_border, bool& to_border) {$/;"	f	namespace:vg
capturedExpression	unittest/catch.hpp	/^        StringRef capturedExpression;$/;"	m	struct:Catch::AssertionInfo
cat_proto_graphs	subcommand/combine_main.cpp	/^int cat_proto_graphs(int argc, char** argv) {$/;"	f
category	subcommand/subcommand.hpp	/^    CommandCategory category;$/;"	m	class:vg::subcommand::Subcommand
chain	subcommand/options.cpp	/^TickChainLink& GroupedOptionGroup::chain(TickChainLink& next) {$/;"	f	class:vg::subcommand::GroupedOptionGroup
chain	subcommand/options.cpp	/^TickChainLink& TickChainLink::chain(TickChainLink& next) {$/;"	f	class:vg::subcommand::TickChainLink
chain	subcommand/options.hpp	/^    virtual TickChainLink& chain(TickChainLink& next) {$/;"	f	struct:vg::subcommand::OptionGroup
chain	subcommand/options.hpp	/^    virtual TickChainLink& chain(TickChainLink& next) {$/;"	f	struct:vg::subcommand::RangeArgSpec
chain_begin	snarls.cpp	/^ChainIterator chain_begin(const Chain& chain) {$/;"	f	namespace:vg
chain_begin_from	snarls.cpp	/^ChainIterator chain_begin_from(const Chain& chain, const Snarl* start_snarl, bool snarl_orientation) {$/;"	f	namespace:vg
chain_component	snarl_distance_index.hpp	/^    size_t chain_component;$/;"	m	struct:vg::MIPayloadValues
chain_component	snarl_distance_index.hpp	/^    static size_t chain_component (const gbwtgraph::Payload code) { $/;"	f	struct:vg::MIPayload
chain_component	snarl_seed_clusterer.hpp	/^                size_t chain_component;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem::SnarlTreeChild
chain_component	snarl_seed_clusterer.hpp	/^            size_t chain_component = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SeedCache
chain_component_end	snarl_seed_clusterer.hpp	/^            size_t chain_component_end = 0; \/\/of node or end of snarl$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
chain_component_start	snarl_seed_clusterer.hpp	/^            size_t chain_component_start = 0; \/\/of node or start of snarl$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
chain_deletions	constructor.hpp	/^    bool chain_deletions = true;$/;"	m	class:vg::Constructor
chain_end	snarls.cpp	/^ChainIterator chain_end(const Chain& chain) {$/;"	f	namespace:vg
chain_end	snarls.hpp	/^    Chain::const_iterator chain_end;$/;"	m	struct:vg::ChainIterator
chain_end_from	snarls.cpp	/^ChainIterator chain_end_from(const Chain& chain, const Snarl* start_snarl, bool snarl_orientation) {$/;"	f	namespace:vg
chain_end_rewrites	snarls.hpp	/^    unordered_map<handle_t, handle_t> chain_end_rewrites;$/;"	m	class:vg::NetGraph
chain_ends_by_start	snarls.hpp	/^    unordered_map<handle_t, handle_t> chain_ends_by_start;$/;"	m	class:vg::NetGraph
chain_id	subcommand/haplotypes_main.cpp	/^    size_t chain_id = std::numeric_limits<size_t>::max();$/;"	m	struct:HaplotypesConfig	file:
chain_info_to_seed	minimizer_mapper.hpp	/^    inline static Seed chain_info_to_seed(const pos_t& hit, size_t minimizer, const gbwtgraph::Payload& chain_info) {$/;"	f	class:vg::MinimizerMapper
chain_items_dp	algorithms/chain_items.cpp	/^TracedScore chain_items_dp(vector<TracedScore>& best_chain_score,$/;"	f	namespace:vg::algorithms
chain_items_traceback	algorithms/chain_items.cpp	/^vector<size_t> chain_items_traceback(const vector<TracedScore>& best_chain_score,$/;"	f	namespace:vg::algorithms
chain_min_score	minimizer_mapper.hpp	/^    int chain_min_score = default_chain_min_score;$/;"	m	class:vg::MinimizerMapper
chain_of	snarls.cpp	/^const Chain* SnarlManager::chain_of(const Snarl* snarl) const {$/;"	f	class:vg::SnarlManager
chain_orientation_of	snarls.cpp	/^bool SnarlManager::chain_orientation_of(const Snarl* snarl) const { $/;"	f	class:vg::SnarlManager
chain_rank_of	snarls.cpp	/^size_t SnarlManager::chain_rank_of(const Snarl* snarl) const { $/;"	f	class:vg::SnarlManager
chain_rbegin	snarls.cpp	/^ChainIterator chain_rbegin(const Chain& chain) {$/;"	f	namespace:vg
chain_rcbegin	snarls.cpp	/^ChainIterator chain_rcbegin(const Chain& chain) {$/;"	f	namespace:vg
chain_rcend	snarls.cpp	/^ChainIterator chain_rcend(const Chain& chain) {$/;"	f	namespace:vg
chain_rend	snarls.cpp	/^ChainIterator chain_rend(const Chain& chain) {$/;"	f	namespace:vg
chain_score_threshold	minimizer_mapper.hpp	/^    double chain_score_threshold = default_chain_score_threshold;$/;"	m	class:vg::MinimizerMapper
chain_start	snarls.hpp	/^    Chain::const_iterator chain_start;$/;"	m	struct:vg::ChainIterator
chaining_cluster_distance	minimizer_mapper.hpp	/^    size_t chaining_cluster_distance = default_chaining_cluster_distance;$/;"	m	class:vg::MinimizerMapper
chains	recombinator.hpp	/^        size_t chains = 0;$/;"	m	struct:vg::Recombinator::Statistics
chains	recombinator.hpp	/^    std::vector<TopLevelChain> chains;$/;"	m	class:vg::Haplotypes
chains_of	snarls.cpp	/^const deque<Chain>& SnarlManager::chains_of(const Snarl* snarl) const {$/;"	f	class:vg::SnarlManager
char_count	pictographs.hpp	/^    const int char_count = 36;$/;"	m	class:vg::Pictographs
chars	pictographs.hpp	/^    const string chars = "abcdefghijklmnopqrstuvwxyz0123456789";$/;"	m	class:vg::Pictographs
check_alignment	mapper.cpp	/^bool Mapper::check_alignment(const Alignment& aln) {$/;"	f	class:vg::Mapper
check_alignment	unittest/gbwt_extender.cpp	/^void check_alignment(const WFAAlignment& alignment, const std::string& sequence, const gbwtgraph::GBWTGraph& graph, const Aligner& aligner, const pos_t* from, const pos_t* to) {$/;"	f	namespace:vg::unittest::__anon4
check_duplicate_path_names	subcommand/convert_main.cpp	/^std::unordered_map<std::string, std::unordered_set<int64_t>> check_duplicate_path_names(const PathHandleGraph* input, const std::unordered_set<std::string>& ref_samples) {$/;"	f
check_for_read_in	minimizer_mapper.cpp	/^    void check_for_read_in(bool read, NestedArray& a) const {$/;"	f	struct:vg::read_alignment_index_t
check_in	watchdog.cpp	/^void Watchdog::check_in(size_t thread, const string& task) {$/;"	f	class:vg::Watchdog
check_in_graph	augment.cpp	/^static inline bool check_in_graph(const Path& path, HandleGraph* graph) {$/;"	f	namespace:vg
check_in_graph	augment.cpp	/^static inline bool check_in_graph(const Path& path, const unordered_map<id_t, size_t>& node_map) {$/;"	f	namespace:vg
check_lengths	gbwt_extender.cpp	/^void WFAAlignment::check_lengths(const HandleGraph& graph) const {$/;"	f	class:vg::WFAAlignment
check_mapping	unittest/aligner.cpp	/^void check_mapping(const HandleGraph& graph, const Mapping& mapping, const handle_t& handle, size_t offset, size_t length) {$/;"	f	namespace:vg::unittest
check_max_nodes	deconstructor.cpp	/^bool Deconstructor::check_max_nodes(const Snarl* snarl) const  {$/;"	f	class:vg::Deconstructor
check_max_trav_cutoff	traversal_finder.cpp	/^bool VCFTraversalFinder::check_max_trav_cutoff(const vector<vector<int> >& alleles) {$/;"	f	class:vg::VCFTraversalFinder
check_out	watchdog.cpp	/^void Watchdog::check_out(size_t thread) {$/;"	f	class:vg::Watchdog
check_paths	unittest/index_helpers.cpp	/^void check_paths(const gbwt::GBWT& index, const std::vector<gbwt::vector_type>& truth) {$/;"	f	namespace:vg::unittest::__anon2
check_read	subcommand/chunk_main.cpp	/^static void check_read(const Alignment& aln, const HandleGraph* graph) { $/;"	f	file:
check_score	unittest/gbwt_extender.cpp	/^void check_score(const WFAAlignment& alignment, const Aligner& aligner, int32_t matches, int32_t mismatches, int32_t gaps, int32_t gap_length) {$/;"	f	namespace:vg::unittest::__anon4
check_status	viz.cpp	/^void Viz::check_status(const cairo_status_t& status, const std::string& task) {$/;"	f	class:vg::Viz
check_tag_validity	subcommand/gbwt_main.cpp	/^void check_tag_validity(const std::string& key, const std::string& value, const std::unordered_set<char>& prohibited, const std::string& description) {$/;"	f
check_unfolded_edges	unittest/phase_unfolder.cpp	/^void check_unfolded_edges(VG& vg_graph,$/;"	f	namespace:vg::unittest
check_unfolded_nodes	unittest/phase_unfolder.cpp	/^void check_unfolded_nodes(VG& vg_graph,$/;"	f	namespace:vg::unittest
check_unlocalized_insertion	unittest/gbwt_extender.cpp	/^void check_unlocalized_insertion(const WFAAlignment& alignment, const std::string& sequence, const Aligner& aligner) {$/;"	f	namespace:vg::unittest::__anon4
checkin_high_water_kb	watchdog.hpp	/^        size_t checkin_high_water_kb;$/;"	m	struct:vg::Watchdog::thread_state_t
child_support_map	traversal_support.hpp	/^    SupportMap child_support_map;$/;"	m	class:vg::NestedCachedPackedTraversalSupportFinder
children	gbwt_extender.cpp	/^    std::vector<uint32_t> children;$/;"	m	struct:vg::WFANode	file:
children	snarl_seed_clusterer.hpp	/^            vector<SnarlTreeChild> children;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
children	stream_index.hpp	/^        unique_ptr<TreeNode> children[2];$/;"	m	struct:vg::BitStringTree::TreeNode
children	tree_subgraph.hpp	/^        vector<vector<size_t>> children;$/;"	m	class:vg::TreeSubgraph
children	utility.hpp	/^    vector<TreeNode<T>*> children;$/;"	m	struct:vg::TreeNode
children_of	snarls.cpp	/^const vector<const Snarl*>& SnarlManager::children_of(const Snarl* snarl) const {$/;"	f	class:vg::SnarlManager
choose_good_thread_count	utility.cpp	/^void choose_good_thread_count() {$/;"	f	namespace:vg
choose_ln	statistics.hpp	/^inline real_t choose_ln(int n, int k) {$/;"	f	namespace:vg
choose_traversals	deconstructor.cpp	/^pair<vector<int>, bool> Deconstructor::choose_traversals(const string& sample_name,$/;"	f	class:vg::Deconstructor
chop_nodes	transcriptome.cpp	/^void Transcriptome::chop_nodes(const uint32_t max_node_length) {$/;"	f	class:vg::Transcriptome
chrom	transcriptome.hpp	/^    string chrom;$/;"	m	struct:vg::Transcript
chrom_length	transcriptome.hpp	/^    uint32_t chrom_length;$/;"	m	struct:vg::Transcript
chunk_name	subcommand/chunk_main.cpp	/^string chunk_name(const string& out_chunk_prefix, int i, const Region& region, string ext, int gi, bool components) {$/;"	f
chunk_to_emitter	subcommand/paths_main.cpp	/^void chunk_to_emitter(const Path& path, vg::io::ProtobufEmitter<Graph>& graph_emitter) {$/;"	f
cigar_against_path	alignment.cpp	/^vector<pair<int, char>> cigar_against_path(const Alignment& alignment, bool on_reverse_strand, int64_t& pos, size_t path_len, size_t softclip_suppress) {$/;"	f	namespace:vg
cigar_against_path	multipath_alignment.cpp	/^    vector<pair<int, char>> cigar_against_path(const multipath_alignment_t& multipath_aln, const string& path_name,$/;"	f	namespace:vg
cigar_mapping	alignment.cpp	/^int64_t cigar_mapping(const bam1_t *b, Mapping* mapping) {$/;"	f	namespace:vg
cigar_string	alignment.cpp	/^string cigar_string(const vector<pair<int, char> >& cigar) {$/;"	f	namespace:vg
circular	path.hpp	/^    set<string> circular;$/;"	m	class:vg::Paths
circularize	vg.cpp	/^void VG::circularize(nid_t head, nid_t tail) {$/;"	f	class:vg::VG
circularize	vg.cpp	/^void VG::circularize(vector<string> pathnames){$/;"	f	class:vg::VG
classify_kmers	recombinator.cpp	/^std::vector<char> Recombinator::classify_kmers($/;"	f	class:vg::Recombinator
classify_kmers	recombinator.cpp	/^std::vector<std::pair<Recombinator::kmer_presence, double>> classify_kmers($/;"	f	namespace:vg
classify_kmers	subcommand/haplotypes_main.cpp	/^void classify_kmers(const gbwtgraph::GBZ& gbz, const Haplotypes& haplotypes, const HaplotypesConfig& config) {$/;"	f
clear	annotation.hpp	/^void Annotation<T, Enabled>::clear(T* t) {$/;"	f	class:vg::Annotation
clear	gbwt_helper.cpp	/^void GBWTHandler::clear() {$/;"	f	class:vg::GBWTHandler
clear	genotypekit.cpp	/^void AugmentedGraph::clear() {$/;"	f	class:vg::AugmentedGraph
clear	genotypekit.cpp	/^void SupportAugmentedGraph::clear() {$/;"	f	class:vg::SupportAugmentedGraph
clear	packer.cpp	/^void Packer::clear() {$/;"	f	class:vg::Packer
clear	path.cpp	/^void Paths::clear(void) {$/;"	f	class:vg::Paths
clear	small_bitset.hpp	/^        void clear() {$/;"	f	class:vg::SmallBitset
clear	subcommand/gbwt_main.cpp	/^void GraphHandler::clear() {$/;"	f	class:GraphHandler
clear	vg.cpp	/^void VG::clear() {$/;"	f	class:vg::VG
clear_alignment	multipath_alignment.cpp	/^    void clear_alignment(multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
clear_annotation	annotation.hpp	/^inline void clear_annotation(Annotated& annotated, const string& name) {$/;"	f	namespace:vg
clear_annotation	annotation.hpp	/^inline void clear_annotation(Annotated* annotated, const string& name) {$/;"	f	namespace:vg
clear_annotation	multipath_alignment.cpp	/^    void multipath_alignment_t::clear_annotation(const string& annotation_name) {$/;"	f	class:vg::multipath_alignment_t
clear_connection	multipath_alignment.hpp	/^    inline void subpath_t::clear_connection() {$/;"	f	class:vg::subpath_t
clear_crash_context	crash.cpp	/^void clear_crash_context() {$/;"	f	namespace:vg
clear_edge_indexes	vg.cpp	/^void VG::clear_edge_indexes(void) {$/;"	f	class:vg::VG
clear_edge_indexes_no_resize	vg.cpp	/^void VG::clear_edge_indexes_no_resize(void) {$/;"	f	class:vg::VG
clear_indexes	vg.cpp	/^void VG::clear_indexes(void) {$/;"	f	class:vg::VG
clear_indexes_no_resize	vg.cpp	/^void VG::clear_indexes_no_resize(void) {$/;"	f	class:vg::VG
clear_mapping	path.hpp	/^inline void path_t::clear_mapping() {$/;"	f	class:vg::path_t
clear_mapping_ranks	path.cpp	/^void Paths::clear_mapping_ranks(void) {$/;"	f	class:vg::Paths
clear_next	multipath_alignment.hpp	/^    inline void subpath_t::clear_next() {$/;"	f	class:vg::subpath_t
clear_node_indexes	vg.cpp	/^void VG::clear_node_indexes(void) {$/;"	f	class:vg::VG
clear_node_indexes_no_resize	vg.cpp	/^void VG::clear_node_indexes_no_resize(void) {$/;"	f	class:vg::VG
clear_paths	vg.cpp	/^void VG::clear_paths(void) {$/;"	f	class:vg::VG
clear_reachability_edges	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::clear_reachability_edges() {$/;"	f	class:vg::MultipathAlignmentGraph
clear_scores	cluster.cpp	/^void MEMChainModel::clear_scores(void) {$/;"	f	class:vg::MEMChainModel
clear_scores	mapper.cpp	/^void AlignmentChainModel::clear_scores(void) {$/;"	f	class:vg::AlignmentChainModel
clear_start	multipath_alignment.hpp	/^    inline void multipath_alignment_t::clear_start() {$/;"	f	class:vg::multipath_alignment_t
clear_subpath	multipath_alignment.hpp	/^    inline void multipath_alignment_t::clear_subpath() {$/;"	f	class:vg::multipath_alignment_t
clip_contained_low_depth_nodes_and_edges	clip.cpp	/^void clip_contained_low_depth_nodes_and_edges(MutablePathMutableHandleGraph* graph, PathPositionHandleGraph* pp_graph, const vector<Region>& regions,$/;"	f	namespace:vg
clip_contained_snarls	clip.cpp	/^void clip_contained_snarls(MutablePathMutableHandleGraph* graph, PathPositionHandleGraph* pp_graph, const vector<Region>& regions, $/;"	f	namespace:vg
clip_contained_stubs	clip.cpp	/^void clip_contained_stubs(MutablePathMutableHandleGraph* graph, PathPositionHandleGraph* pp_graph, const vector<Region>& regions,$/;"	f	namespace:vg
clip_deletion_edges	clip.cpp	/^void clip_deletion_edges(MutablePathMutableHandleGraph* graph, int64_t max_deletion,$/;"	f	namespace:vg
clip_low_depth_nodes_and_edges	clip.cpp	/^void clip_low_depth_nodes_and_edges(MutablePathMutableHandleGraph* graph, int64_t min_depth, const vector<string>& ref_prefixes,$/;"	f	namespace:vg
clip_low_depth_nodes_and_edges_generic	clip.cpp	/^void clip_low_depth_nodes_and_edges_generic(MutablePathMutableHandleGraph* graph,$/;"	f	namespace:vg
clip_stubs	clip.cpp	/^void clip_stubs(MutablePathMutableHandleGraph* graph, const vector<string>& ref_prefixes, int64_t min_fragment_len, bool verbose) {$/;"	f	namespace:vg
clip_stubs_generic	clip.cpp	/^void clip_stubs_generic(MutablePathMutableHandleGraph* graph,$/;"	f	namespace:vg
close	viz.cpp	/^void Viz::close(void) {$/;"	f	class:vg::Viz
close_edit_tmpfiles	packer.cpp	/^void Packer::close_edit_tmpfiles(void) {$/;"	f	class:vg::Packer
cluster_chain_level	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::cluster_chain_level(ClusteringProblem& clustering_problem, size_t depth) const {$/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_cover	mem.cpp	/^vector<string::const_iterator> cluster_cover(const vector<MaximalExactMatch>& cluster) {$/;"	f	namespace:vg
cluster_coverage	mem.cpp	/^int cluster_coverage(const vector<MaximalExactMatch>& cluster) {$/;"	f	namespace:vg
cluster_coverage_threshold	minimizer_mapper.hpp	/^    double cluster_coverage_threshold = default_cluster_coverage_threshold;$/;"	m	class:vg::MinimizerMapper
cluster_multiplicity	multipath_mapper.cpp	/^    double MultipathMapper::cluster_multiplicity(const memcluster_t& cluster) const {$/;"	f	class:vg::MultipathMapper
cluster_nodes	mem.cpp	/^vector<pos_t> cluster_nodes(const vector<MaximalExactMatch>& cluster) {$/;"	f	namespace:vg
cluster_num	snarl_seed_clusterer.hpp	/^            size_t cluster_num = 0;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusterHead
cluster_one_chain	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::cluster_one_chain(ClusteringProblem& clustering_problem, $/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_one_node	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::cluster_one_node($/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_one_snarl	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::cluster_one_snarl(ClusteringProblem& clustering_problem, SnarlTreeNodeProblem* snarl_problem) const { $/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_root	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::cluster_root(ClusteringProblem& clustering_problem) const { $/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_score_threshold	minimizer_mapper.hpp	/^    double cluster_score_threshold = default_cluster_score_threshold;$/;"	m	class:vg::MinimizerMapper
cluster_seeds	snarl_seed_clusterer.cpp	/^vector<SnarlDistanceIndexClusterer::Cluster> SnarlDistanceIndexClusterer::cluster_seeds (const vector<Seed>& seeds, size_t read_distance_limit) const {$/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_seeds	snarl_seed_clusterer.cpp	/^vector<vector<SnarlDistanceIndexClusterer::Cluster>> SnarlDistanceIndexClusterer::cluster_seeds ($/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_seeds_internal	snarl_seed_clusterer.cpp	/^tuple<vector<structures::UnionFind>, structures::UnionFind> SnarlDistanceIndexClusterer::cluster_seeds_internal ($/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_seeds_on_linear_structure	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::cluster_seeds_on_linear_structure(ClusteringProblem& clustering_problem, SnarlTreeNodeProblem* node_problem, $/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_snarl_level	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::cluster_snarl_level(ClusteringProblem& clustering_problem) const {$/;"	f	class:vg::SnarlDistanceIndexClusterer
cluster_subgraph_containing	cluster.cpp	/^bdsg::HashGraph cluster_subgraph_containing(const HandleGraph& base, const Alignment& aln, const vector<vg::MaximalExactMatch>& cluster, const GSSWAligner* aligner) {$/;"	f	namespace:vg
cluster_subgraph_walk	cluster.cpp	/^bdsg::HashGraph cluster_subgraph_walk(const HandleGraph& base, const Alignment& aln, const vector<vg::MaximalExactMatch>& mems, double expansion) {$/;"	f	namespace:vg
cluster_type	gbwt_extender.hpp	/^    typedef pair_hash_set<seed_type>    cluster_type;$/;"	t	class:vg::GaplessExtender
clusterer	minimizer_mapper.hpp	/^    SnarlDistanceIndexClusterer clusterer;$/;"	m	class:vg::MinimizerMapper
clusters	cluster.cpp	/^vector<MEMClusterer::cluster_t> MEMClusterer::HitGraph::clusters(const Alignment& alignment,$/;"	f	class:vg::MEMClusterer::HitGraph
clusters	cluster.cpp	/^vector<MEMClusterer::cluster_t> MEMClusterer::clusters(const Alignment& alignment,$/;"	f	class:vg::MEMClusterer
clusters_overlap_in_graph	mem.cpp	/^bool clusters_overlap_in_graph(const vector<MaximalExactMatch>& cluster1,$/;"	f	namespace:vg
clusters_overlap_in_read	mem.cpp	/^bool clusters_overlap_in_read(const vector<MaximalExactMatch>& cluster1,$/;"	f	namespace:vg
clusters_overlap_length	mem.cpp	/^int clusters_overlap_length(const vector<MaximalExactMatch>& cluster1,$/;"	f	namespace:vg
clusters_to_drop	mapper.cpp	/^set<const vector<MaximalExactMatch>* > Mapper::clusters_to_drop(const vector<vector<MaximalExactMatch> >& clusters) {$/;"	f	class:vg::Mapper
coalesce	gbwt_extender.cpp	/^    vector<gbwt::SearchState> coalesce(const gbwt::SearchState& start, size_t base_limit = 1024) {$/;"	f	class:vg::WFATree
code_type	snarl_distance_index.hpp	/^    typedef std::uint64_t code_type;$/;"	t	struct:vg::MIPayload
codenames	version.cpp	/^const unordered_map<string, string> Version::codenames = {$/;"	m	class:vg::Version	file:
codenames	version.hpp	/^    const static unordered_map<string, string> codenames;$/;"	m	class:vg::Version
codes_by_option	option.hpp	/^    map<OptionInterface*, int> codes_by_option;$/;"	m	class:vg::ConfigurableParser
cohort	haplotypes.hpp	/^  haplotypeCohort* cohort = nullptr;$/;"	m	struct:haplo::linear_haplo_structure
col_idx	banded_global_aligner.hpp	/^        const int64_t col_idx;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack::Deflection
collapse_order_length_runs	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::collapse_order_length_runs(const HandleGraph& graph, gcsa::GCSA* gcsa,$/;"	f	class:vg::MultipathAlignmentGraph
collect_coverage	packer.cpp	/^void Packer::collect_coverage(const vector<Packer*>& packers) {$/;"	f	class:vg::Packer
collect_subgraph	vg.cpp	/^void VG::collect_subgraph(Node* start_node, set<Node*>& subgraph) {$/;"	f	class:vg::VG
collect_transcribed_nodes	transcriptome.cpp	/^void Transcriptome::collect_transcribed_nodes(spp::sparse_hash_set<nid_t> * transcribed_nodes) const {$/;"	f	class:vg::Transcriptome
colors	colors.hpp	/^    const vector<string> colors = { "\/dark28\/1", "\/dark28\/2", "\/dark28\/3", "\/dark28\/4", "\/dark28\/5", "\/dark28\/6", "\/dark28\/7", "\/dark28\/8" };$/;"	m	class:vg::Colors
column_number	algorithms/gfa_to_handle.hpp	/^    size_t column_number = 0;$/;"	m	struct:vg::algorithms::GFAFormatError
column_of	sampler.hpp	/^        unordered_map<To, size_t> column_of;$/;"	m	class:vg::NGSSimulator::MarkovDistribution
combine	recombinator.cpp	/^void Recombinator::Statistics::combine(const Statistics& another) {$/;"	f	class:vg::Recombinator::Statistics
combine	vg.cpp	/^void VG::combine(VG& g) {$/;"	f	class:vg::VG
combine_and_average_node_coverages	algorithms/coverage_depth.cpp	/^static pair<double, double> combine_and_average_node_coverages(const HandleGraph& graph, vector<unordered_map<nid_t, size_t>>& node_coverages, size_t min_coverage) {$/;"	f	namespace:vg::algorithms
combine_qualities	packer.cpp	/^int Packer::combine_qualities(int map_quality, int base_quality) const {$/;"	f	class:vg::Packer
comma	explainer.hpp	/^    inline void comma() {$/;"	f	class:vg::ProblemDumpExplainer
common_ancestor_next	vg.cpp	/^nid_t VG::common_ancestor_next(nid_t id1, nid_t id2, size_t steps) {$/;"	f	class:vg::VG
common_ancestor_prev	vg.cpp	/^nid_t VG::common_ancestor_prev(nid_t id1, nid_t id2, size_t steps) {$/;"	f	class:vg::VG
comp	dozeu_interface.cpp	/^static inline char comp(char x)$/;"	f	file:
compact_ids	vg.cpp	/^void VG::compact_ids(hash_map<nid_t, nid_t> & new_id) {$/;"	f	class:vg::VG
compact_ids	vg.cpp	/^void VG::compact_ids(void) {$/;"	f	class:vg::VG
compact_ranks	path.cpp	/^void Paths::compact_ranks(void) {$/;"	f	class:vg::Paths
compare	subcommand/haplotypes_main.cpp	/^    order compare(std::pair<size_t, size_t> interval) {$/;"	f	struct:ReferenceInterval
compare_and_combine_cluster_on_child_structures	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::compare_and_combine_cluster_on_child_structures(ClusteringProblem& clustering_problem, SnarlTreeNodeProblem* child_problem1, $/;"	f	class:vg::SnarlDistanceIndexClusterer
compare_and_combine_cluster_on_one_child	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::compare_and_combine_cluster_on_one_child(ClusteringProblem& clustering_problem, SnarlTreeNodeProblem* child_problem) const {$/;"	f	class:vg::SnarlDistanceIndexClusterer
compare_gaf	subcommand/gamsort_main.cpp	/^struct compare_gaf {$/;"	s	file:
complement	reverse_graph.hpp	/^        bool complement = false;$/;"	m	class:vg::ReverseGraph
complement	snarls.hpp	/^    bool complement;$/;"	m	struct:vg::ChainIterator
complement	utility.cpp	/^static const char complement[256] = {'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', \/\/ 8$/;"	m	namespace:vg	file:
complement_components	phase_unfolder.cpp	/^std::list<bdsg::HashGraph> PhaseUnfolder::complement_components(MutableHandleGraph& graph, bool show_progress) {$/;"	f	class:vg::PhaseUnfolder
complement_filter	readfilter.hpp	/^    bool complement_filter = false;$/;"	m	class:vg::ReadFilter
completed_indexes	index_registry.cpp	/^vector<IndexName> IndexRegistry::completed_indexes() const {$/;"	f	class:vg::IndexRegistry
component_callback	unittest/three_edge_connected_components.cpp	/^static void component_callback(const function<void(const function<void(size_t)>&)>& for_each_member) {$/;"	f	namespace:vg::unittest
component_min_dist	multipath_mapper.hpp	/^        bool component_min_dist = false;$/;"	m	class:vg::MultipathMapper
component_params	splicing.hpp	/^    vector<pair<double, double>> component_params;$/;"	m	class:vg::SpliceStats
component_path_set_of_path	path_component_index.hpp	/^        unordered_map<path_handle_t, size_t> component_path_set_of_path;$/;"	m	class:vg::PathComponentIndex
component_path_sets	path_component_index.hpp	/^        vector<unordered_set<path_handle_t>> component_path_sets;$/;"	m	class:vg::PathComponentIndex
component_paths	algorithms/component.cpp	/^vector<unordered_set<path_handle_t>> component_paths(const PathHandleGraph& graph) {$/;"	f	namespace:vg::algorithms
component_paths_parallel	algorithms/component.cpp	/^vector<unordered_set<path_handle_t>> component_paths_parallel(const PathHandleGraph& graph) {$/;"	f	namespace:vg::algorithms
component_sizes	algorithms/component.cpp	/^vector<size_t> component_sizes(const HandleGraph& graph) {$/;"	f	namespace:vg::algorithms
component_topological_order	cluster.cpp	/^void MEMClusterer::HitGraph::component_topological_order(const vector<size_t>& component,$/;"	f	class:vg::MEMClusterer::HitGraph
components	cluster.hpp	/^    UnionFind components;$/;"	m	class:vg::MEMClusterer::HitGraph
components	recombinator.hpp	/^    size_t components() const { return this->header.top_level_chains; }$/;"	f	class:vg::Haplotypes
compose_short_path_name	gbwt_helper.cpp	/^std::string compose_short_path_name(const gbwt::GBWT& gbwt_index, gbwt::size_type id) {$/;"	f	namespace:vg
compressed	gbwt_helper.hpp	/^    gbwt::GBWT compressed;$/;"	m	struct:vg::GBWTHandler
compute_all_mapping_qualities	aligner.cpp	/^vector<int32_t> GSSWAligner::compute_all_mapping_qualities(const vector<double>& scores,$/;"	f	class:vg::GSSWAligner
compute_borders_and_dimensions	viz.cpp	/^void Viz::compute_borders_and_dimensions(void) {$/;"	f	class:vg::Viz
compute_chains	snarls.cpp	/^deque<Chain> SnarlManager::compute_chains(const vector<const Snarl*>& input_snarls) {$/;"	f	class:vg::SnarlManager
compute_cluster_mapping_quality	mapper.cpp	/^double Mapper::compute_cluster_mapping_quality(const vector<vector<MaximalExactMatch> >& clusters,$/;"	f	class:vg::Mapper
compute_first_mapping_quality	aligner.cpp	/^int32_t GSSWAligner::compute_first_mapping_quality(const vector<double>& scores, bool fast_approximation,$/;"	f	class:vg::GSSWAligner
compute_group_mapping_quality	aligner.cpp	/^int32_t GSSWAligner::compute_group_mapping_quality(const vector<double>& scores, const vector<size_t>& group,$/;"	f	class:vg::GSSWAligner
compute_mapping_qualities	mapper.cpp	/^void Mapper::compute_mapping_qualities(pair<vector<Alignment>, vector<Alignment>>& pair_alns, double cluster_mq, double mq_estimate1, double mq_estimate2, double mq_cap1, double mq_cap2) {$/;"	f	class:vg::Mapper
compute_mapping_qualities	mapper.cpp	/^void Mapper::compute_mapping_qualities(vector<Alignment>& alns, double cluster_mq, double mq_estimate, double mq_cap) {$/;"	f	class:vg::Mapper
compute_mapping_quality	aligner.cpp	/^void GSSWAligner::compute_mapping_quality(vector<Alignment>& alignments,$/;"	f	class:vg::GSSWAligner
compute_max_mapping_quality	aligner.cpp	/^int32_t GSSWAligner::compute_max_mapping_quality(const vector<double>& scores, bool fast_approximation,$/;"	f	class:vg::GSSWAligner
compute_min_cut	algorithms/min_cut_graph.cpp	/^        pair<vector<unordered_set<size_t>>, size_t> compute_min_cut(Graph graph, const int seed){$/;"	f	namespace:vg::algorithms
compute_paired_mapping_quality	aligner.cpp	/^void GSSWAligner::compute_paired_mapping_quality(pair<vector<Alignment>, vector<Alignment>>& alignment_pairs,$/;"	f	class:vg::GSSWAligner
compute_path_interval	surjector.cpp	/^    Surjector::compute_path_interval(const PathPositionHandleGraph* graph, const Alignment& source,$/;"	f	class:vg::Surjector
compute_quality	packer.cpp	/^int Packer::compute_quality(const Alignment& aln, size_t position_in_read) const {$/;"	f	class:vg::Packer
compute_raw_mapping_qualities_from_scores	multipath_mapper.cpp	/^    vector<int32_t> MultipathMapper::compute_raw_mapping_qualities_from_scores(const vector<double>& scores, bool have_qualities,$/;"	f	class:vg::MultipathMapper
compute_side_components	cactus.cpp	/^static void compute_side_components(const HandleGraph& graph,$/;"	f	namespace:vg
compute_tail_mem_coverage	cluster.cpp	/^vector<pair<size_t, size_t>> OrientedDistanceClusterer::compute_tail_mem_coverage(const Alignment& alignment,$/;"	f	class:vg::OrientedDistanceClusterer
compute_template_lengths	alignment.cpp	/^pair<int32_t, int32_t> compute_template_lengths(const int64_t& pos1, const vector<pair<int, char>>& cigar1,$/;"	f	namespace:vg
compute_uniqueness	mapper.cpp	/^double Mapper::compute_uniqueness(const Alignment& aln, const vector<MaximalExactMatch>& mems) {$/;"	f	class:vg::Mapper
concat_mappings	path.cpp	/^Mapping concat_mappings(const Mapping& m, const Mapping& n, bool trim_internal_deletions) {$/;"	f	namespace:vg
concat_paths	path.cpp	/^Path concat_paths(const Path& path1, const Path& path2) {$/;"	f	namespace:vg
cond_distrs	sampler.hpp	/^        unordered_map<From, vector<size_t>> cond_distrs;$/;"	m	class:vg::NGSSimulator::MarkovDistribution
condense_edits	constructor.cpp	/^    void Constructor::condense_edits(list<vcflib::VariantAllele>& parsed_allele) {$/;"	f	class:vg::Constructor
configurables	option.hpp	/^    vector<Configurable*> configurables;$/;"	m	class:vg::ConfigurableParser
configure_memory_allocator	config/allocator_config_jemalloc.cpp	/^void configure_memory_allocator() {$/;"	f	namespace:vg
configure_memory_allocator	config/allocator_config_system.cpp	/^void configure_memory_allocator() {$/;"	f	namespace:vg
connect	gbwt_extender.cpp	/^WFAAlignment WFAExtender::connect(std::string sequence, pos_t from, pos_t to) const {$/;"	f	class:vg::WFAExtender
connect	recombinator.cpp	/^void RecombinatorHaplotype::connect(gbwt::node_type until, const gbwtgraph::GBWTGraph& graph) {$/;"	f	class:vg::RecombinatorHaplotype
connect_node_to_nodes	vg.cpp	/^void VG::connect_node_to_nodes(Node* node, vector<Node*>& nodes, bool from_start) {$/;"	f	class:vg::VG
connect_node_to_nodes	vg.cpp	/^void VG::connect_node_to_nodes(NodeTraversal node, vector<NodeTraversal>& nodes) {$/;"	f	class:vg::VG
connect_nodes_to_node	vg.cpp	/^void VG::connect_nodes_to_node(vector<Node*>& nodes, Node* node, bool to_end) {$/;"	f	class:vg::VG
connect_nodes_to_node	vg.cpp	/^void VG::connect_nodes_to_node(vector<NodeTraversal>& nodes, NodeTraversal node) {$/;"	f	class:vg::VG
connect_to_position_file	sampler.cpp	/^void NGSSimulator::connect_to_position_file(const string& filename) {$/;"	f	class:vg::NGSSimulator
connected_components	cluster.cpp	/^void MEMClusterer::HitGraph::connected_components(vector<vector<size_t>>& components_out) const {$/;"	f	class:vg::MEMClusterer::HitGraph
connected_components	multipath_alignment.cpp	/^    vector<vector<int64_t>> connected_components(const multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
connected_components	surjector.cpp	/^    vector<size_t> Surjector::connected_components(const vector<vector<size_t>>& adj, const vector<vector<size_t>>& rev_adj,$/;"	f	class:vg::Surjector
connected_comps_do	multipath_alignment.cpp	/^    void connected_comps_do(const multipath_alignment_t& multipath_aln,$/;"	f	namespace:vg
connection	multipath_alignment.hpp	/^    inline const connection_t& subpath_t::connection(size_t i) const {$/;"	f	class:vg::subpath_t
connection	multipath_alignment.hpp	/^    inline const vector<connection_t>& subpath_t::connection() const {$/;"	f	class:vg::subpath_t
connection_size	multipath_alignment.hpp	/^    inline size_t subpath_t::connection_size() const {$/;"	f	class:vg::subpath_t
connection_t	multipath_alignment.hpp	/^    class connection_t {$/;"	c	namespace:vg
connections	recombinator.hpp	/^        size_t connections = 0;$/;"	m	struct:vg::Recombinator::Statistics
connectivity	snarls.hpp	/^    unordered_map<id_t, tuple<bool, bool, bool>> connectivity;$/;"	m	class:vg::NetGraph
consistent	genotyper.hpp	/^        bool consistent = false;$/;"	m	struct:vg::Genotyper::Affinity
const_iterator	utility.hpp	/^    struct const_iterator {$/;"	s	struct:vg::VectorView
construct	flow_sort.cpp	/^FlowSort::WeightedGraph::construct(FlowSort& fs, const string& ref_name, bool isGrooming)$/;"	f	class:vg::FlowSort::WeightedGraph
construct_chunk	constructor.cpp	/^    ConstructedChunk Constructor::construct_chunk(string reference_sequence, string reference_path_name,$/;"	f	class:vg::Constructor
construct_completed_transcript_paths	transcriptome.cpp	/^list<CompletedTranscriptPath> Transcriptome::construct_completed_transcript_paths(const list<EditedTranscriptPath> & edited_transcript_paths) const {$/;"	f	class:vg::Transcriptome
construct_graph	constructor.cpp	/^    void Constructor::construct_graph(const vector<FastaReference*>& references,$/;"	f	class:vg::Constructor
construct_graph	constructor.cpp	/^    void Constructor::construct_graph(const vector<string>& reference_filenames, const vector<string>& variant_filenames,$/;"	f	class:vg::Constructor
construct_graph	constructor.cpp	/^    void Constructor::construct_graph(string vcf_contig, FastaReference& reference, VcfBuffer& variant_source,$/;"	f	class:vg::Constructor
construct_graph_from_nodes_and_edges	haplotype_extracter.cpp	/^void construct_graph_from_nodes_and_edges(Graph& g, const HandleGraph& source,$/;"	f	namespace:vg
construct_reference_transcript_paths_embedded	transcriptome.cpp	/^list<EditedTranscriptPath> Transcriptome::construct_reference_transcript_paths_embedded(const vector<Transcript> & transcripts, const bdsg::PositionOverlay & graph_path_pos_overlay) const {$/;"	f	class:vg::Transcriptome
construct_reference_transcript_paths_embedded_callback	transcriptome.cpp	/^void Transcriptome::construct_reference_transcript_paths_embedded_callback(list<EditedTranscriptPath> * edited_transcript_paths, spp::sparse_hash_map<handle_t, vector<EditedTranscriptPath *> > * edited_transcript_paths_index, mutex * edited_transcript_paths_mutex, const int32_t thread_idx, const vector<Transcript> & transcripts, const bdsg::PositionOverlay & graph_path_pos_overlay) const {$/;"	f	class:vg::Transcriptome
construct_reference_transcript_paths_gbwt	transcriptome.cpp	/^list<EditedTranscriptPath> Transcriptome::construct_reference_transcript_paths_gbwt(const vector<Transcript> & transcripts, const gbwt::GBWT & haplotype_index) const {$/;"	f	class:vg::Transcriptome
construct_reference_transcript_paths_gbwt_callback	transcriptome.cpp	/^void Transcriptome::construct_reference_transcript_paths_gbwt_callback(list<EditedTranscriptPath> * edited_transcript_paths, spp::sparse_hash_map<handle_t, vector<EditedTranscriptPath *> > * edited_transcript_paths_index, uint32_t * excluded_transcripts, mutex * edited_transcript_paths_mutex, const int32_t thread_idx, const vector<pair<uint32_t, uint32_t> > & chrom_transcript_sets, const vector<Transcript> & transcripts, const gbwt::GBWT & haplotype_index, const spp::sparse_hash_map<string, map<uint32_t, uint32_t> > & haplotype_name_index) const {$/;"	f	class:vg::Transcriptome
construct_test_chunk	unittest/constructor.cpp	/^static ConstructedChunk construct_test_chunk(string ref_sequence, string ref_name, string vcf_data) {$/;"	f	namespace:vg::unittest
construct_test_graph	unittest/constructor.cpp	/^static Graph construct_test_graph(string fasta_data, string vcf_data, size_t max_node_size,$/;"	f	namespace:vg::unittest
construct_test_handle_graph	unittest/constructor.cpp	/^static unique_ptr<PathHandleGraph> construct_test_handle_graph(string fasta_data, string vcf_data, $/;"	f	namespace:vg::unittest
construction_jobs	recombinator.hpp	/^        std::uint64_t construction_jobs = 0;$/;"	m	struct:vg::Haplotypes::Header
containing_net_handle	snarl_seed_clusterer.hpp	/^            net_handle_t containing_net_handle; $/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
contains	gbwt_extender.cpp	/^bool GaplessExtension::contains(const HandleGraph& graph, seed_type seed) const {$/;"	f	class:vg::GaplessExtension
contains	small_bitset.hpp	/^        bool contains(size_t i) const {$/;"	f	class:vg::SmallBitset
contains_connection	multipath_alignment.cpp	/^    bool contains_connection(const multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
contains_match	multipath_alignment.cpp	/^    bool contains_match(const multipath_alignment_t& multipath_aln, const pos_t& pos,$/;"	f	namespace:vg
contains_subsequence	readfilter.hpp	/^bool ReadFilter<Read>::contains_subsequence(const Read& read) const {$/;"	f	class:vg::ReadFilter
content	stream_index.hpp	/^        Item content;$/;"	m	struct:vg::BitStringTree::TreeNode
contents	subgraph.hpp	/^        unordered_set<id_t> contents;$/;"	m	class:vg::SubHandleGraph
context_bases	graph_synchronizer.hpp	/^        size_t context_bases = 0;$/;"	m	class:vg::GraphSynchronizer::Lock
context_jaccard	deconstructor.cpp	/^double Deconstructor::context_jaccard($/;"	f	class:vg::Deconstructor
context_length	subcommand/gbwt_main.cpp	/^    size_t num_paths = default_num_paths(), context_length = default_context_length();$/;"	m	struct:GBWTConfig	file:
contig	filter.hpp	/^    string contig;$/;"	m	struct:vg::BREAKPOINT
contig_name	recombinator.cpp	/^    const std::string& contig_name;$/;"	m	struct:vg::RecombinatorHaplotype	file:
contig_name	recombinator.hpp	/^        std::string contig_name;$/;"	m	struct:vg::Haplotypes::TopLevelChain
contig_prefix	subcommand/haplotypes_main.cpp	/^    std::string contig_prefix;$/;"	m	struct:HaplotypesConfig	file:
contigs	subcommand/gbwt_main.cpp	/^    bool metadata = false, contigs = false, haplotypes = false, samples = false, list_names = false, thread_names = false, tags = false;$/;"	m	struct:GBWTConfig	file:
contract	contracting_graph.cpp	/^    void ContractingGraph::contract(size_t random_node, size_t other_node){$/;"	f	class:vg::ContractingGraph
control_mean	benchmark.hpp	/^    benchtime control_mean;$/;"	m	struct:vg::BenchmarkResult
control_stddev	benchmark.hpp	/^    benchtime control_stddev;$/;"	m	struct:vg::BenchmarkResult
convert	convert.hpp	/^bool convert(const std::string& s, T& r) {$/;"	f	namespace:vg
convert	convert.hpp	/^std::string convert(const T& r) {$/;"	f	namespace:vg
convert	unittest/catch.hpp	/^            convert( const Fake& value ) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^            convert(const Fake& value) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(NSObject* nsObject) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(NSString * nsstring) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(R C::* p) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(U* p) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(char const* str) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(const std::optional<T>& optional) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(const std::pair<T1, T2>& pair) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(signed char const* str) {$/;"	f	struct:Catch::StringMaker
convert	unittest/catch.hpp	/^        static std::string convert(unsigned char const* str) {$/;"	f	struct:Catch::StringMaker
convert	unittest/genotypekit.cpp	/^  static std::string convert(std::set<Item> const& value) {$/;"	f	struct:Catch::StringMaker
convertUnknownEnumToString	unittest/catch.hpp	/^        std::string convertUnknownEnumToString( E e ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	unittest/catch.hpp	/^         std::string>::type convertUnstreamable(T const& ex) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	unittest/catch.hpp	/^        , std::string>::type convertUnstreamable( T const& value ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	unittest/catch.hpp	/^        std::string>::type convertUnstreamable( T const& ) {$/;"	f	namespace:Catch::Detail
convert_Ts_to_Us	alignment.cpp	/^void convert_Ts_to_Us(Alignment& alignment) {$/;"	f	namespace:vg
convert_Ts_to_Us	multipath_alignment.cpp	/^    void convert_Ts_to_Us(multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
convert_Us_to_Ts	alignment.cpp	/^void convert_Us_to_Ts(Alignment& alignment) {$/;"	f	namespace:vg
convert_Us_to_Ts	multipath_alignment.cpp	/^    void convert_Us_to_Ts(multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
convert_alignment	hts_alignment_emitter.cpp	/^void HTSAlignmentEmitter::convert_alignment(const Alignment& aln, vector<pair<int, char>>& cigar, bool& pos_rev, int64_t& pos, string& path_name) const {$/;"	f	class:vg::HTSAlignmentEmitter
convert_alignment	hts_alignment_emitter.cpp	/^void SplicedHTSAlignmentEmitter::convert_alignment(const Alignment& aln, vector<pair<int, char>>& cigar,$/;"	f	class:vg::SplicedHTSAlignmentEmitter
convert_alignment_char	alignment.cpp	/^void convert_alignment_char(Alignment& alignment, char from, char to) {$/;"	f	namespace:vg
convert_multipath_alignment_char	multipath_alignment.cpp	/^    void convert_multipath_alignment_char(multipath_alignment_t& multipath_aln, char from, char to) {$/;"	f	namespace:vg
convert_paired	hts_alignment_emitter.cpp	/^void HTSAlignmentEmitter::convert_paired(Alignment& aln1, Alignment& aln2, bam_hdr_t* header, int64_t tlen_limit,$/;"	f	class:vg::HTSAlignmentEmitter
convert_to_alignment	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::convert_to_alignment(const multipath_alignment_t& mp_aln, Alignment& aln,$/;"	f	class:vg::MultipathAlignmentEmitter
convert_to_hts_paired	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::convert_to_hts_paired(const string& name_1, const string& name_2,$/;"	f	class:vg::MultipathAlignmentEmitter
convert_to_hts_unpaired	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::convert_to_hts_unpaired(const string& name, const multipath_alignment_t& mp_aln,$/;"	f	class:vg::MultipathAlignmentEmitter
convert_unpaired	hts_alignment_emitter.cpp	/^void HTSAlignmentEmitter::convert_unpaired(Alignment& aln, bam_hdr_t* header, vector<bam1_t*>& dest) {$/;"	f	class:vg::HTSAlignmentEmitter
coordinates	transcriptome.hpp	/^    pair<int32_t, int32_t> coordinates;$/;"	m	struct:vg::Exon
copy	small_bitset.hpp	/^        void copy(const SmallBitset& another) {$/;"	f	class:vg::SmallBitset
copy_file	index_registry.cpp	/^void copy_file(const string& from_fp, const string& to_fp) {$/;"	f	namespace:vg
copy_id	transcriptome.hpp	/^    uint32_t copy_id;$/;"	m	struct:vg::TranscriptPath
copy_metadata	gbwt_helper.cpp	/^void copy_metadata(const gbwt::GBWT& source, gbwt::GBWT& target, const std::vector<std::vector<gbwt::size_type>>& jobs, const std::vector<size_t>& job_order) {$/;"	f	namespace:vg
copy_reference_samples	gbwt_helper.cpp	/^void copy_reference_samples(const PathHandleGraph& source, gbwt::GBWT& destination) {$/;"	f	namespace:vg
copy_reference_samples	gbwt_helper.cpp	/^void copy_reference_samples(const gbwt::GBWT& source, gbwt::GBWT& destination) {$/;"	f	namespace:vg
correct_score	unittest/gbwt_extender.cpp	/^void correct_score(const GaplessExtension& extension, const Aligner& aligner) {$/;"	f	namespace:vg::unittest::__anon3
correct_score	unittest/gbwt_extender.cpp	/^void correct_score(const WFAAlignment& alignment, const Aligner& aligner) {$/;"	f	namespace:vg::unittest::__anon3
corresponding_from_length	path.cpp	/^int corresponding_from_length(const path_t& path, int to_length, bool from_end) {$/;"	f	namespace:vg
corresponding_length_internal	path.cpp	/^int corresponding_length_internal(const path_t& path, int given_length, bool is_from_length, bool from_end) {$/;"	f	namespace:vg
corresponding_to_length	path.cpp	/^int corresponding_to_length(const path_t& path, int from_length, bool from_end) {$/;"	f	namespace:vg
count	deconstructor.hpp	/^    size_t &count;$/;"	m	class:vg::count_back_inserter
count	integrated_snarl_finder.cpp	/^    inline bool count(const handle_t& here) const {$/;"	f	class:vg::HandleGraphNodeSet
count	small_bitset.hpp	/^        size_t count() const {$/;"	f	class:vg::SmallBitset
countAlleles	graph_caller.cpp	/^static int countAlleles(vcflib::Variant& var) {$/;"	f	namespace:vg
countAlts	graph_caller.cpp	/^static int countAlts(vcflib::Variant& var, int alleleIndex) {$/;"	f	namespace:vg
countSamplesWithData	graph_caller.cpp	/^static int countSamplesWithData(vcflib::Variant& var) {$/;"	f	namespace:vg
count_Ns	mem.cpp	/^size_t MaximalExactMatch::count_Ns(void) const {$/;"	f	class:vg::MaximalExactMatch
count_back_inserter	deconstructor.hpp	/^    count_back_inserter(size_t &count) : count(count) {};$/;"	f	class:vg::count_back_inserter
count_back_inserter	deconstructor.hpp	/^class count_back_inserter {$/;"	c	namespace:vg
count_covered	algorithms/count_covered.hpp	/^size_t count_covered(Collection& segments) {$/;"	f	namespace:vg::algorithms
count_haplotypes	genome_state.cpp	/^size_t GenomeState::count_haplotypes(const Snarl* snarl) const {$/;"	f	class:vg::GenomeState
count_haplotypes	genome_state.cpp	/^size_t GenomeState::count_haplotypes(const pair<const Snarl*, const Snarl*>& telomere_pair) const {$/;"	f	class:vg::GenomeState
count_of_max	statistics.hpp	/^    size_t count_of_max;$/;"	m	struct:vg::SummaryStatistics
count_reachability_edges	multipath_alignment_graph.cpp	/^    size_t MultipathAlignmentGraph::count_reachability_edges() const {$/;"	f	class:vg::MultipathAlignmentGraph
count_threads	subcommand/gbwt_main.cpp	/^    bool count_threads = false;$/;"	m	struct:GBWTConfig	file:
counts	readfilter.hpp	/^    vector<size_t> counts;$/;"	m	struct:vg::Counts
cov_bin_size	packer.hpp	/^    size_t cov_bin_size;$/;"	m	class:vg::Packer
cover_in_minimizers	unittest/minimizer_mapper.cpp	/^static void cover_in_minimizers(const std::string sequence, int core_width, int flank_width, int stride, std::vector<TestMinimizerMapper::Minimizer>& minimizers, std::vector<size_t>& minimizers_explored) {$/;"	f	namespace:vg::unittest
coverage	recombinator.hpp	/^        size_t coverage = COVERAGE;$/;"	m	struct:vg::Recombinator::Parameters
coverage	snarl_seed_clusterer.hpp	/^            double coverage; \/\/ Fraction of read covered by the seeds.$/;"	m	struct:vg::SnarlDistanceIndexClusterer::Cluster
coverage_at_position	packer.cpp	/^size_t Packer::coverage_at_position(size_t i) const {$/;"	f	class:vg::Packer
coverage_bin_offset	packer.cpp	/^pair<size_t, size_t> Packer::coverage_bin_offset(size_t i) const {$/;"	f	class:vg::Packer
coverage_bin_size	packer.cpp	/^size_t Packer::coverage_bin_size(size_t i) const {$/;"	f	class:vg::Packer
coverage_civ	packer.hpp	/^    dac_vector<> coverage_civ; \/\/ graph coverage (compacted coverage_dynamic)$/;"	m	class:vg::Packer
coverage_dynamic	packer.hpp	/^    vector<gcsa::CounterArray*> coverage_dynamic;$/;"	m	class:vg::Packer
coverage_filter	filter.cpp	/^    Alignment Filter::coverage_filter(Alignment& aln){$/;"	f	class:vg::Filter
coverage_size	packer.cpp	/^size_t Packer::coverage_size(void) const {$/;"	f	class:vg::Packer
covered_intervals	multipath_mapper.cpp	/^    vector<pair<int64_t, int64_t>> MultipathMapper::covered_intervals(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
cr	viz.hpp	/^	cairo_t *cr = nullptr;$/;"	m	class:vg::Viz
crash_unless	crash.hpp	37;"	d
crash_unless_impl	crash.cpp	/^void crash_unless_impl(bool condition, const std::string& condition_string, const std::string& file, int line, const std::string& function) {$/;"	f	namespace:vg
create	utility.cpp	/^string create() {$/;"	f	namespace:vg::temp_file
create	utility.cpp	/^string create(const string& base) {$/;"	f	namespace:vg::temp_file
create_alignment_shim	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::create_alignment_shim(const string& name, const multipath_alignment_t& mp_aln,$/;"	f	class:vg::MultipathAlignmentEmitter
create_directory	utility.cpp	/^string create_directory() {$/;"	f	namespace:vg::temp_file
create_edge	vg.cpp	/^Edge* VG::create_edge(Node* from, Node* to, bool from_start, bool to_end) {$/;"	f	class:vg::VG
create_edge	vg.cpp	/^Edge* VG::create_edge(NodeSide side1, NodeSide side2) {$/;"	f	class:vg::VG
create_edge	vg.cpp	/^Edge* VG::create_edge(NodeTraversal left, NodeTraversal right) {$/;"	f	class:vg::VG
create_edge	vg.cpp	/^Edge* VG::create_edge(nid_t from, nid_t to, bool from_start, bool to_end) {$/;"	f	class:vg::VG
create_edge	vg.cpp	/^void VG::create_edge(const handle_t& left, const handle_t& right) {$/;"	f	class:vg::VG
create_gssw_graph	aligner.cpp	/^gssw_graph* GSSWAligner::create_gssw_graph(const HandleGraph& g) const {$/;"	f	class:vg::GSSWAligner
create_handle	vg.cpp	/^handle_t VG::create_handle(const string& sequence) {$/;"	f	class:vg::VG
create_handle	vg.cpp	/^handle_t VG::create_handle(const string& sequence, const nid_t& id) {$/;"	f	class:vg::VG
create_identity_projection_trans	multipath_alignment_graph.cpp	/^    unordered_map<id_t, pair<id_t, bool>> MultipathAlignmentGraph::create_identity_projection_trans(const HandleGraph& graph) {$/;"	f	class:vg::MultipathAlignmentGraph
create_injection_trans	multipath_alignment_graph.cpp	/^    unordered_multimap<id_t, pair<id_t, bool>> MultipathAlignmentGraph::create_injection_trans(const HandleGraph& graph,$/;"	f	class:vg::MultipathAlignmentGraph
create_injection_trans	multipath_alignment_graph.cpp	/^    unordered_multimap<id_t, pair<id_t, bool>> MultipathAlignmentGraph::create_injection_trans(const unordered_map<id_t, pair<id_t, bool>>& projection_trans) {$/;"	f	class:vg::MultipathAlignmentGraph
create_item	funnel.cpp	/^size_t Funnel::create_item() {$/;"	f	class:vg::Funnel
create_match_nodes	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::create_match_nodes(const HandleGraph& graph, MultipathMapper::memcluster_t& hits,$/;"	f	class:vg::MultipathAlignmentGraph
create_node	vg.cpp	/^Node* VG::create_node(const string& seq) {$/;"	f	class:vg::VG
create_node	vg.cpp	/^Node* VG::create_node(const string& seq, nid_t id) {$/;"	f	class:vg::VG
create_path	path.cpp	/^list<mapping_t>& Paths::create_path(const string& name) {$/;"	f	class:vg::Paths
create_path	vg.cpp	/^Path VG::create_path(const list<NodeTraversal>& nodes) {$/;"	f	class:vg::VG
create_path_chunk_nodes	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::create_path_chunk_nodes(const HandleGraph& graph, const vector<pair<pair<string::const_iterator, string::const_iterator>, Path>>& path_chunks,$/;"	f	class:vg::MultipathAlignmentGraph
create_path_fragment	clip.cpp	/^static path_handle_t create_path_fragment(MutablePathMutableHandleGraph* graph, const string& base_name, step_handle_t first_step,$/;"	f	namespace:vg
create_path_handle	vg.cpp	/^path_handle_t VG::create_path_handle(const string& name, bool is_circular) {$/;"	f	class:vg::VG
create_progress	progressive.cpp	/^void Progressive::create_progress(const string& message, long count) {$/;"	f	class:vg::Progressive
create_progress	progressive.cpp	/^void Progressive::create_progress(long count) {$/;"	f	class:vg::Progressive
create_projector	multipath_alignment_graph.cpp	/^    function<pair<id_t, bool>(id_t)> MultipathAlignmentGraph::create_projector(const unordered_map<id_t, pair<id_t, bool>>& projection_trans) {$/;"	f	class:vg::MultipathAlignmentGraph
create_ref_allele	utility.cpp	/^void create_ref_allele(vcflib::Variant& variant, const std::string& allele) {$/;"	f	namespace:vg
create_state	phase_unfolder.cpp	/^void PhaseUnfolder::create_state(vg::id_t node, bool is_reverse, bool starting) {$/;"	f	class:vg::PhaseUnfolder
create_variant_index	traversal_finder.cpp	/^void VCFTraversalFinder::create_variant_index(vcflib::VariantCallFile& vcf, FastaReference* ref_fasta,$/;"	f	class:vg::VCFTraversalFinder
crossing_edges	phase_unfolder.hpp	/^    pair_hash_set<std::pair<gbwt::node_type, gbwt::node_type>> crossing_edges;$/;"	m	class:vg::PhaseUnfolder
cumul	statistics.hpp	/^    T cumul(T x) const {$/;"	f	class:vg::truncated_normal_distribution
cumulative_seq_len	banded_global_aligner.hpp	/^        int64_t cumulative_seq_len;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
curr	algorithms/kmer.hpp	/^    handle_t curr; \/\/\/ the next handle we extend into$/;"	m	struct:vg::algorithms::kmer_t
curr	algorithms/prune.cpp	/^    handle_t curr; \/\/\/ the next handle we extend into$/;"	m	struct:vg::algorithms::walk_t	file:
curr	algorithms/walk.hpp	/^    handle_t curr; \/\/\/ the next handle we extend into$/;"	m	struct:vg::algorithms::walk_t
curr	kmer.hpp	/^    handle_t curr; \/\/\/ the next handle we extend into$/;"	m	struct:vg::kmer_t
curr	phase_unfolder.cpp	/^    size_t curr;    \/\/ Branch to choose at offset.$/;"	m	struct:vg::PathBranch	file:
curr_deflxn	banded_global_aligner.hpp	/^        typename vector<Deflection>::iterator curr_deflxn;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack
curr_sample_size	mapper.cpp	/^size_t FragmentLengthDistribution::curr_sample_size() const {$/;"	f	class:vg::FragmentLengthDistribution
curr_traceback	banded_global_aligner.hpp	/^        typename list<tuple<vector<Deflection>, IntType, list<int64_t>>>::iterator curr_traceback;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack
current	utility.hpp	/^    size_t current;$/;"	m	struct:vg::IncrementIter
current	vcf_buffer.hpp	/^    unique_ptr<vcflib::Variant> current;$/;"	m	class:vg::WindowedVcfBuffer
current_chains	snarl_seed_clusterer.hpp	/^            vector<net_handle_t>* current_chains;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
current_empty_prefix	banded_global_aligner.cpp	/^inline const list<int64_t>& BandedGlobalAligner<IntType>::AltTracebackStack::current_empty_prefix() {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
current_id	vg.hpp	/^    nid_t current_id;$/;"	m	class:vg::VG
current_node_id	banded_global_aligner.hpp	/^        id_t current_node_id = 0;$/;"	m	class:vg::BandedGlobalAligner::BABuilder
current_node_sequence	banded_global_aligner.hpp	/^        string current_node_sequence = "";$/;"	m	class:vg::BandedGlobalAligner::BABuilder
current_sum	haplotypes.cpp	/^double haplo_DP_column::current_sum() const {$/;"	f	class:haplo::haplo_DP_column
current_traceback_score	banded_global_aligner.cpp	/^inline IntType BandedGlobalAligner<IntType>::AltTracebackStack::current_traceback_score() {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
cursor_pool	indexed_vg.hpp	/^    mutable list<unique_ptr<cursor_t>> cursor_pool;$/;"	m	class:vg::IndexedVG
cursor_pool_mutex	indexed_vg.hpp	/^    mutable mutex cursor_pool_mutex;$/;"	m	class:vg::IndexedVG
cursor_streams	indexed_vg.hpp	/^    mutable list<ifstream> cursor_streams;$/;"	m	class:vg::IndexedVG
cut_anchors	surjector.cpp	/^    void Surjector::cut_anchors(bool rev_strand, vector<path_chunk_t>& path_chunks,$/;"	f	class:vg::Surjector
cut_mapping	path.cpp	/^pair<Mapping, Mapping> cut_mapping(const Mapping& m, const Position& pos) {$/;"	f	namespace:vg
cut_mapping	path.cpp	/^pair<Mapping, Mapping> cut_mapping(const Mapping& m, size_t offset) {$/;"	f	namespace:vg
cut_mapping	path.cpp	/^pair<mapping_t, mapping_t> cut_mapping(const mapping_t& m, const Position& pos) {$/;"	f	namespace:vg
cut_mapping	path.cpp	/^pair<mapping_t, mapping_t> cut_mapping(const mapping_t& m, size_t offset) {$/;"	f	namespace:vg
cut_mapping_offset	path.cpp	/^pair<Mapping, Mapping> cut_mapping_offset(const Mapping& m, size_t offset) {$/;"	f	namespace:vg
cut_mapping_offset	path.cpp	/^pair<mapping_t, mapping_t> cut_mapping_offset(const mapping_t& m, size_t offset) {$/;"	f	namespace:vg
cut_path	path.cpp	/^pair<Path, Path> cut_path(const Path& path, const Position& pos) {$/;"	f	namespace:vg
cut_path	path.cpp	/^pair<Path, Path> cut_path(const Path& path, size_t offset) {$/;"	f	namespace:vg
cycles_in_cactus	integrated_snarl_finder.cpp	/^pair<vector<pair<size_t, handle_t>>, unordered_map<handle_t, handle_t>> IntegratedSnarlFinder::MergedAdjacencyGraph::cycles_in_cactus() const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
dagify	vg.cpp	/^VG VG::dagify(uint32_t expand_scc_steps,$/;"	f	class:vg::VG
dagify_steps	genotyper.hpp	/^    int dagify_steps = 1;$/;"	m	class:vg::Genotyper
data	kff.hpp	/^    uint8_t data[4];$/;"	m	struct:vg::kff_recoding_t
data	small_bitset.hpp	/^        } data;$/;"	m	class:vg::SmallBitset	typeref:union:vg::SmallBitset::__anon20
data_bytes	kff.hpp	/^    size_t data_bytes;$/;"	m	class:vg::ParallelKFFReader
data_size	small_bitset.hpp	/^        size_t data_size() const { return (this->size() + VALUE_BITS - 1) \/ VALUE_BITS; }$/;"	f	class:vg::SmallBitset
data_width	packer.hpp	/^    size_t data_width;$/;"	m	class:vg::Packer
dead_end	gbwt_extender.cpp	/^    bool dead_end;$/;"	m	struct:vg::WFANode	file:
debug	gbwt_extender.cpp	/^    bool debug;$/;"	m	class:vg::WFATree	file:
debug	gbwt_extender.hpp	/^    bool debug = false;$/;"	m	class:vg::WFAExtender
debug	mapper.hpp	/^    bool debug = false;$/;"	m	class:vg::BaseMapper
debug_string	multipath_alignment.cpp	/^    string debug_string(const connection_t& connection) {$/;"	f	namespace:vg
debug_string	multipath_alignment.cpp	/^    string debug_string(const multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
debug_string	multipath_alignment.cpp	/^    string debug_string(const subpath_t& subpath) {$/;"	f	namespace:vg
debug_string	path.cpp	/^string debug_string(const edit_t& edit) {$/;"	f	namespace:vg
debug_string	path.cpp	/^string debug_string(const path_mapping_t& mapping) {$/;"	f	namespace:vg
debug_string	path.cpp	/^string debug_string(const path_t& path) {$/;"	f	namespace:vg
debug_string	position.cpp	/^string debug_string(const position_t& pos) {$/;"	f	namespace:vg
decode	snarl_distance_index.hpp	/^    static MIPayloadValues decode(gbwtgraph::Payload code) {$/;"	f	struct:vg::MIPayload
decode_rgfa_tags	algorithms/gfa_to_handle.cpp	/^bool GFAParser::decode_rgfa_tags(const tag_list_t& tags,$/;"	f	class:vg::algorithms::GFAParser
decompose	path.cpp	/^decompose(const Path& path,$/;"	f	namespace:vg
decompose_alignments	multipath_alignment_graph.cpp	/^    MultipathAlignmentGraph::decompose_alignments(const vector<pair<path_t, int32_t>>& alt_alns,$/;"	f	class:vg::MultipathAlignmentGraph
decompose_genotype_fast	vcf_buffer.cpp	/^vector<int> WindowedVcfBuffer::decompose_genotype_fast(const string& genotype) {$/;"	f	class:vg::WindowedVcfBuffer
deconstruct	deconstructor.cpp	/^void Deconstructor::deconstruct(vector<string> ref_paths, const PathPositionHandleGraph* graph, SnarlManager* snarl_manager,$/;"	f	class:vg::Deconstructor
deconstruct_site	deconstructor.cpp	/^bool Deconstructor::deconstruct_site(const Snarl* snarl) const {$/;"	f	class:vg::Deconstructor
decrement_node_ids	vg.cpp	/^void VG::decrement_node_ids(nid_t decrement) {$/;"	f	class:vg::VG
deduplicate_alt_alns	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::deduplicate_alt_alns(vector<pair<path_t, int32_t>>& alt_alns,$/;"	f	class:vg::MultipathAlignmentGraph
deduplicate_cluster_pairs	cluster.cpp	/^void MEMClusterer::deduplicate_cluster_pairs(vector<pair<pair<size_t, size_t>, int64_t>>& cluster_pairs,$/;"	f	class:vg::MEMClusterer
deep_contents	snarls.cpp	/^pair<unordered_set<id_t>, unordered_set<edge_t> > SnarlManager::deep_contents(const Snarl* snarl, const HandleGraph& graph,$/;"	f	class:vg::SnarlManager
default_align_from_chains	minimizer_mapper.hpp	/^    static constexpr bool default_align_from_chains = false;$/;"	m	class:vg::MinimizerMapper
default_build_jobs	subcommand/gbwt_main.cpp	/^    static size_t default_build_jobs() {$/;"	f	struct:GBWTConfig
default_chain_min_score	minimizer_mapper.hpp	/^    static constexpr int default_chain_min_score = 100;$/;"	m	class:vg::MinimizerMapper
default_chain_score_threshold	minimizer_mapper.hpp	/^    static constexpr double default_chain_score_threshold = 100;$/;"	m	class:vg::MinimizerMapper
default_chaining_cluster_distance	minimizer_mapper.hpp	/^    static constexpr size_t default_chaining_cluster_distance = 100;$/;"	m	class:vg::MinimizerMapper
default_cluster_coverage_threshold	minimizer_mapper.hpp	/^    static constexpr double default_cluster_coverage_threshold = 0.3;$/;"	m	class:vg::MinimizerMapper
default_cluster_score_threshold	minimizer_mapper.hpp	/^    static constexpr double default_cluster_score_threshold = 50;$/;"	m	class:vg::MinimizerMapper
default_context_length	subcommand/gbwt_main.cpp	/^    static constexpr size_t default_context_length() {$/;"	f	struct:GBWTConfig
default_distance_limit	minimizer_mapper.hpp	/^    static constexpr size_t default_distance_limit = 200;$/;"	m	class:vg::MinimizerMapper
default_do_dp	minimizer_mapper.hpp	/^    static constexpr bool default_do_dp = true;$/;"	m	class:vg::MinimizerMapper
default_error_model	gbwt_extender.hpp	/^    static const ErrorModel default_error_model;$/;"	m	class:vg::WFAExtender
default_exclude_overlapping_min	minimizer_mapper.hpp	/^    static constexpr bool default_exclude_overlapping_min = false;$/;"	m	class:vg::MinimizerMapper
default_extension_score_threshold	minimizer_mapper.hpp	/^    static constexpr int default_extension_score_threshold = 1;$/;"	m	class:vg::MinimizerMapper
default_extension_set_min_score	minimizer_mapper.hpp	/^    static constexpr int default_extension_set_min_score = 20;$/;"	m	class:vg::MinimizerMapper
default_extension_set_score_threshold	minimizer_mapper.hpp	/^    static constexpr double default_extension_set_score_threshold = 20;$/;"	m	class:vg::MinimizerMapper
default_full_length_bonus	aligner.hpp	/^    static constexpr int8_t default_full_length_bonus = 5;$/;"	m	namespace:vg
default_gap_extension	aligner.hpp	/^    static constexpr int8_t default_gap_extension = 1;$/;"	m	namespace:vg
default_gap_open	aligner.hpp	/^    static constexpr int8_t default_gap_open = 6;$/;"	m	namespace:vg
default_gc_content	aligner.hpp	/^    static constexpr double default_gc_content = 0.5;$/;"	m	namespace:vg
default_hard_hit_cap	minimizer_mapper.hpp	/^    static constexpr size_t default_hard_hit_cap = 500;$/;"	m	class:vg::MinimizerMapper
default_hit_cap	minimizer_mapper.hpp	/^    static constexpr size_t default_hit_cap = 10;$/;"	m	class:vg::MinimizerMapper
default_initial_lookback_threshold	minimizer_mapper.hpp	/^    static constexpr size_t default_initial_lookback_threshold = 10;$/;"	m	class:vg::MinimizerMapper
default_item_bonus	minimizer_mapper.hpp	/^    static constexpr int default_item_bonus = 0;$/;"	m	class:vg::MinimizerMapper
default_lookback_item_hard_cap	minimizer_mapper.hpp	/^    static constexpr size_t default_lookback_item_hard_cap = 15;$/;"	m	class:vg::MinimizerMapper
default_lookback_scale_factor	minimizer_mapper.hpp	/^    static constexpr double default_lookback_scale_factor = 2.0;$/;"	m	class:vg::MinimizerMapper
default_match	aligner.hpp	/^    static constexpr int8_t default_match = 1;$/;"	m	namespace:vg
default_max_alignments	minimizer_mapper.hpp	/^    static constexpr size_t default_max_alignments = 8;$/;"	m	class:vg::MinimizerMapper
default_max_chain_connection	minimizer_mapper.hpp	/^    static constexpr size_t default_max_chain_connection = 100;$/;"	m	class:vg::MinimizerMapper
default_max_clusters_to_chain	minimizer_mapper.hpp	/^    static constexpr size_t default_max_clusters_to_chain = 20;$/;"	m	class:vg::MinimizerMapper
default_max_dozeu_cells	minimizer_mapper.hpp	/^    static constexpr size_t default_max_dozeu_cells = (size_t)(1.5 * 1024 * 1024);$/;"	m	class:vg::MinimizerMapper
default_max_dp_cells	minimizer_mapper.hpp	/^    static constexpr size_t default_max_dp_cells = 16UL * 1024UL * 1024UL;$/;"	m	class:vg::MinimizerMapper
default_max_extensions	minimizer_mapper.hpp	/^    static constexpr size_t default_max_extensions = 800;$/;"	m	class:vg::MinimizerMapper
default_max_fragment_length	minimizer_mapper.hpp	/^    static constexpr size_t default_max_fragment_length = 2000;$/;"	m	class:vg::MinimizerMapper
default_max_indel_bases	minimizer_mapper.hpp	/^    static constexpr size_t default_max_indel_bases = 50;$/;"	m	class:vg::MinimizerMapper
default_max_local_extensions	minimizer_mapper.hpp	/^    static constexpr size_t default_max_local_extensions = numeric_limits<size_t>::max();$/;"	m	class:vg::MinimizerMapper
default_max_lookback_bases	minimizer_mapper.hpp	/^    static constexpr size_t default_max_lookback_bases = 100;$/;"	m	class:vg::MinimizerMapper
default_max_multimaps	minimizer_mapper.hpp	/^    static constexpr size_t default_max_multimaps = 1;$/;"	m	class:vg::MinimizerMapper
default_max_precluster_connections	minimizer_mapper.hpp	/^    static constexpr size_t default_max_precluster_connections = 50;$/;"	m	class:vg::MinimizerMapper
default_max_rescue_attempts	minimizer_mapper.hpp	/^    static constexpr size_t default_max_rescue_attempts = 15;$/;"	m	class:vg::MinimizerMapper
default_max_tail_length	minimizer_mapper.hpp	/^    static constexpr size_t default_max_tail_length = 100;$/;"	m	class:vg::MinimizerMapper
default_max_unique_min	minimizer_mapper.hpp	/^    static constexpr size_t default_max_unique_min = 500;$/;"	m	class:vg::MinimizerMapper
default_merge_jobs	subcommand/gbwt_main.cpp	/^    static size_t default_merge_jobs() {$/;"	f	struct:GBWTConfig
default_min_chains	minimizer_mapper.hpp	/^    static constexpr int default_min_chains = 1;$/;"	m	class:vg::MinimizerMapper
default_min_clusters_to_chain	minimizer_mapper.hpp	/^    static constexpr size_t default_min_clusters_to_chain = 2;$/;"	m	class:vg::MinimizerMapper
default_min_extension_sets	minimizer_mapper.hpp	/^    static constexpr int default_min_extension_sets = 2;$/;"	m	class:vg::MinimizerMapper
default_min_extensions	minimizer_mapper.hpp	/^    static constexpr size_t default_min_extensions = 2;$/;"	m	class:vg::MinimizerMapper
default_min_good_transition_score_per_base	minimizer_mapper.hpp	/^    static constexpr double default_min_good_transition_score_per_base = -0.1;$/;"	m	class:vg::MinimizerMapper
default_min_lookback_items	minimizer_mapper.hpp	/^    static constexpr size_t default_min_lookback_items = 1;$/;"	m	class:vg::MinimizerMapper
default_min_precluster_connections	minimizer_mapper.hpp	/^    static constexpr size_t default_min_precluster_connections = 10;$/;"	m	class:vg::MinimizerMapper
default_minimizer_score_fraction	minimizer_mapper.hpp	/^    static constexpr double default_minimizer_score_fraction = 0.9;$/;"	m	class:vg::MinimizerMapper
default_mismatch	aligner.hpp	/^    static constexpr int8_t default_mismatch = 4;$/;"	m	namespace:vg
default_num_bp_per_min	minimizer_mapper.hpp	/^    static constexpr size_t default_num_bp_per_min = 1000;$/;"	m	class:vg::MinimizerMapper
default_num_paths	subcommand/gbwt_main.cpp	/^    static constexpr size_t default_num_paths() {$/;"	f	struct:GBWTConfig
default_num_paths_local	subcommand/gbwt_main.cpp	/^    static constexpr size_t default_num_paths_local() {$/;"	f	struct:GBWTConfig
default_pad_cluster_score_threshold	minimizer_mapper.hpp	/^    static constexpr double default_pad_cluster_score_threshold = 20;$/;"	m	class:vg::MinimizerMapper
default_paired_distance_stdevs	minimizer_mapper.hpp	/^    static constexpr double default_paired_distance_stdevs = 2.0;$/;"	m	class:vg::MinimizerMapper
default_paired_rescue_score_limit	minimizer_mapper.hpp	/^    static constexpr double default_paired_rescue_score_limit = 0.9;$/;"	m	class:vg::MinimizerMapper
default_precluster_connection_coverage_threshold	minimizer_mapper.hpp	/^    static constexpr double default_precluster_connection_coverage_threshold = 0.3;$/;"	m	class:vg::MinimizerMapper
default_rescue_seed_limit	minimizer_mapper.hpp	/^    static constexpr size_t default_rescue_seed_limit = 100;$/;"	m	class:vg::MinimizerMapper
default_rescue_subgraph_stdevs	minimizer_mapper.hpp	/^    static constexpr double default_rescue_subgraph_stdevs = 4.0;$/;"	m	class:vg::MinimizerMapper
default_reseed_search_distance	minimizer_mapper.hpp	/^    static constexpr size_t default_reseed_search_distance = 10000;$/;"	m	class:vg::MinimizerMapper
default_score_matrix	aligner.hpp	/^    static constexpr int8_t default_score_matrix[16] = {$/;"	m	namespace:vg
default_sequence_quality	genotyper.hpp	/^    int default_sequence_quality = 15;$/;"	m	class:vg::Genotyper
default_show_work	minimizer_mapper.hpp	/^    static constexpr bool default_show_work = false;$/;"	m	class:vg::MinimizerMapper
default_track_correctness	minimizer_mapper.hpp	/^    static constexpr bool default_track_correctness = false;$/;"	m	class:vg::MinimizerMapper
default_track_provenance	minimizer_mapper.hpp	/^    static constexpr bool default_track_provenance = false;$/;"	m	class:vg::MinimizerMapper
default_value	option.hpp	/^    Value default_value;$/;"	m	class:vg::BaseOption
default_value	subcommand/options.hpp	/^    T default_value;$/;"	m	struct:vg::subcommand::ArgSpec
default_watchdog_timeout	subcommand/giraffe_main.cpp	/^    static constexpr size_t default_watchdog_timeout = 10;$/;"	m	struct:GiraffeMainOptions	file:
default_xdrop_max_gap_length	dozeu_interface.hpp	/^static constexpr uint16_t default_xdrop_max_gap_length = 40;$/;"	m	namespace:vg
defining_path	path_subgraph.hpp	/^        Path defining_path;$/;"	m	class:vg::PathSubgraph
deflect_to_matrix	banded_global_aligner.cpp	/^inline typename BandedGlobalAligner<IntType>::matrix_t BandedGlobalAligner<IntType>::AltTracebackStack::deflect_to_matrix() {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
deflect_to_matrix	banded_global_aligner.cpp	/^inline typename BandedGlobalAligner<IntType>::matrix_t BandedGlobalAligner<IntType>::AltTracebackStack::deflect_to_matrix(int64_t& to_node_id) {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
defray	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
defray_all	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
defray_count	readfilter.hpp	/^    int defray_count = 99999;$/;"	m	class:vg::ReadFilter
defray_length	readfilter.hpp	/^    int defray_length = 0;$/;"	m	class:vg::ReadFilter
del_predecessor	gbwt_extender.cpp	/^    std::pair<MatchPos, WFAAlignment::Edit> del_predecessor(uint32_t node, int32_t score, int32_t diagonal) const {$/;"	f	class:vg::WFATree
delete_haplotype	genome_state.cpp	/^InsertHaplotypeCommand GenomeState::delete_haplotype(const DeleteHaplotypeCommand& c) {$/;"	f	class:vg::GenomeState
delete_nodes_and_chop_paths	clip.cpp	/^void delete_nodes_and_chop_paths(MutablePathMutableHandleGraph* graph, const unordered_set<nid_t>& nodes_to_delete,$/;"	f	namespace:vg
delete_variant_index	traversal_finder.cpp	/^void VCFTraversalFinder::delete_variant_index() {$/;"	f	class:vg::VCFTraversalFinder
deleted_prior_logprob	genotyper.hpp	/^    double deleted_prior_logprob = prob_to_logprob(0.1);$/;"	m	class:vg::Genotyper
deletion	gbwt_extender.hpp	/^    enum Edit { match, mismatch, insertion, deletion };$/;"	e	enum:vg::WFAAlignment::Edit
deletion_aligner	aligner.hpp	/^        DeletionAligner deletion_aligner;$/;"	m	class:vg::GSSWAligner
deletion_filter	filter.cpp	/^    pair<Alignment, Alignment> Filter::deletion_filter(Alignment& aln_first, Alignment& aln_second){$/;"	f	class:vg::Filter
deletions	genome_state.hpp	/^    unordered_map<const Snarl*, vector<size_t>> deletions;$/;"	m	struct:vg::DeleteHaplotypeCommand
deletions	genome_state.hpp	/^    unordered_map<const Snarl*, vector<size_t>> deletions;$/;"	m	struct:vg::ReplaceLocalHaplotypeCommand
delim1	packer.hpp	/^    char delim1 = '\\xff';$/;"	m	class:vg::Packer
delim2	packer.hpp	/^    char delim2 = '\\xfe';$/;"	m	class:vg::Packer
dense_to_sparse	sparse_union_find.hpp	/^        unordered_map<size_t, size_t> dense_to_sparse;\/\/outgoing$/;"	m	class:vg::SparseUnionFind
density	statistics.hpp	/^    T density(T x) const {$/;"	f	class:vg::truncated_normal_distribution
dependency_order	index_registry.cpp	/^vector<IndexGroup> IndexRegistry::dependency_order() const {$/;"	f	class:vg::IndexRegistry
dependents	index_registry.cpp	/^set<RecipeName> IndexingPlan::dependents(const IndexName& identifier) const {$/;"	f	class:vg::IndexingPlan
depth_err	snarl_caller.hpp	/^        double depth_err;$/;"	m	struct:vg::PoissonSupportSnarlCaller::PoissonCallInfo
depth_filter	filter.cpp	/^    Alignment Filter::depth_filter(Alignment& aln){$/;"	f	class:vg::Filter
depth_index	snarl_caller.hpp	/^    const algorithms::BinnedDepthIndex& depth_index;$/;"	m	class:vg::PoissonSupportSnarlCaller
depth_padding_factor	snarl_caller.hpp	/^    double depth_padding_factor = 1.;$/;"	m	class:vg::PoissonSupportSnarlCaller
description	option.hpp	/^    string description;$/;"	m	class:vg::BaseOption
description	subcommand/subcommand.hpp	/^    std::string description;$/;"	m	class:vg::subcommand::Subcommand
deserialize	vg.cpp	/^void VG::deserialize(istream& in) {$/;"	f	class:vg::VG
dest	subcommand/options.hpp	/^    T Receiver::*dest;$/;"	m	class:vg::subcommand::ArgSpec::Receiver
destroy_edge	vg.cpp	/^void VG::destroy_edge(Edge* edge) {$/;"	f	class:vg::VG
destroy_edge	vg.cpp	/^void VG::destroy_edge(const NodeSide& side1, const NodeSide& side2) {$/;"	f	class:vg::VG
destroy_edge	vg.cpp	/^void VG::destroy_edge(const handle_t& left, const handle_t& right) {$/;"	f	class:vg::VG
destroy_edge	vg.cpp	/^void VG::destroy_edge(const pair<NodeSide, NodeSide>& sides) {$/;"	f	class:vg::VG
destroy_handle	vg.cpp	/^void VG::destroy_handle(const handle_t& handle) {$/;"	f	class:vg::VG
destroy_node	vg.cpp	/^void VG::destroy_node(Node* node) {$/;"	f	class:vg::VG
destroy_node	vg.cpp	/^void VG::destroy_node(nid_t id) {$/;"	f	class:vg::VG
destroy_path	vg.cpp	/^void VG::destroy_path(const path_handle_t& path) {$/;"	f	class:vg::VG
destroy_progress	progressive.cpp	/^void Progressive::destroy_progress(void) {$/;"	f	class:vg::Progressive
determine_distance_correlation	multipath_mapper.cpp	/^    void MultipathMapper::determine_distance_correlation() {$/;"	f	class:vg::MultipathMapper
determine_flag	alignment.cpp	/^int32_t determine_flag(const Alignment& alignment,$/;"	f	namespace:vg
determine_jobs	subcommand/gbwt_main.cpp	/^std::vector<job_type> determine_jobs(std::unique_ptr<PathHandleGraph>& graph, const GBWTConfig& config) {$/;"	f
deterministic_beats	utility.hpp	/^bool deterministic_beats(const Number& a, const Number& b, LazyRNG& rng) {$/;"	f	namespace:vg
deterministic_flip	utility.cpp	/^bool deterministic_flip(LazyRNG& rng) {$/;"	f	namespace:vg
deterministic_shuffle	utility.hpp	/^void deterministic_shuffle(RandomIt begin, RandomIt end) {$/;"	f	namespace:vg
deterministic_shuffle	utility.hpp	/^void deterministic_shuffle(RandomIt begin, RandomIt end, LazyRNG& rng) {$/;"	f	namespace:vg
dfs	algorithms/dfs.cpp	/^void dfs($/;"	f	namespace:vg::algorithms
dfs	algorithms/dfs.cpp	/^void dfs(const HandleGraph& graph,$/;"	f	namespace:vg::algorithms
dfs	flow_sort.cpp	/^void FlowSort::dfs(set<id_t>& nodes, id_t s, set<id_t>& visited, $/;"	f	class:vg::FlowSort
dfs	vg.cpp	/^void VG::dfs($/;"	f	class:vg::VG
dfs	vg.cpp	/^void VG::dfs(const function<void(NodeTraversal)>& node_begin_fn,$/;"	f	class:vg::VG
dfs_gbwt	minimizer_mapper.cpp	/^void MinimizerMapper::dfs_gbwt(const Position& from, size_t walk_distance,$/;"	f	class:vg::MinimizerMapper
dfs_gbwt	minimizer_mapper.cpp	/^void MinimizerMapper::dfs_gbwt(const gbwt::SearchState& start_state, size_t from_offset, size_t walk_distance,$/;"	f	class:vg::MinimizerMapper
dfs_gbwt	minimizer_mapper.cpp	/^void MinimizerMapper::dfs_gbwt(handle_t from_handle, size_t from_offset, size_t walk_distance,$/;"	f	class:vg::MinimizerMapper
diagonal	gbwt_extender.cpp	/^    int32_t  diagonal; \/\/ seq_offset - target offset$/;"	m	struct:vg::WFAPoint	file:
difference_type	deconstructor.hpp	/^    typedef void difference_type;$/;"	t	class:vg::count_back_inserter
dijkstra_shortest_cycle_length	algorithms/shortest_cycle.cpp	/^    size_t dijkstra_shortest_cycle_length(const HandleGraph* graph, const handle_t& source) {$/;"	f	namespace:vg::algorithms
dinuc_machine	multipath_mapper.hpp	/^        DinucleotideMachine dinuc_machine;$/;"	m	class:vg::MultipathMapper
diploid_prior_logprob	genotyper.hpp	/^    double diploid_prior_logprob = prob_to_logprob(0.999);$/;"	m	class:vg::Genotyper
diploid_sampling	recombinator.hpp	/^        bool diploid_sampling = false;$/;"	m	struct:vg::Recombinator::Parameters
dirnames	utility.cpp	/^    unordered_set<string> dirnames;$/;"	m	struct:vg::temp_file::Handler	file:
discard_overlaps	haplotype_indexer.hpp	/^    bool discard_overlaps = false;$/;"	m	class:vg::HaplotypeIndexer
discrete_distribution	statistics.hpp	/^    discrete_distribution(InputIt first, InputIt last) : m_weights{first, last} {$/;"	f	class:vg::discrete_distribution
discrete_distribution	statistics.hpp	/^    discrete_distribution(initializer_list<double> weights = {1}) : discrete_distribution(weights.begin(), weights.end()) {$/;"	f	class:vg::discrete_distribution
discrete_distribution	statistics.hpp	/^class discrete_distribution {$/;"	c	namespace:vg
discrete_uniform_sample	snarls.cpp	/^const Snarl* SnarlManager::discrete_uniform_sample(minstd_rand0& random_engine)const{$/;"	f	class:vg::SnarlManager
disjoint	haplotypes.cpp	/^bool int_itvl_t::disjoint(const int_itvl_t& A, const int_itvl_t& B) {$/;"	f	class:haplo::int_itvl_t
disjoint_components	algorithms/disjoint_components.cpp	/^list<bdsg::HashGraph> disjoint_components(const HandleGraph& graph) {$/;"	f	namespace:vg::algorithms
display	cluster.cpp	/^void MEMChainModel::display(ostream& out) {$/;"	f	class:vg::MEMChainModel
display	mapper.cpp	/^void AlignmentChainModel::display(ostream& out) {$/;"	f	class:vg::AlignmentChainModel
display_dot	cluster.cpp	/^void MEMChainModel::display_dot(ostream& out, vector<MEMChainModelVertex*> vertex_trace) {$/;"	f	class:vg::MEMChainModel
display_dot	mapper.cpp	/^void AlignmentChainModel::display_dot(ostream& out, vector<AlignmentChainModelVertex*> vertex_trace) {$/;"	f	class:vg::AlignmentChainModel
distance	cluster.hpp	/^    int64_t distance;$/;"	m	class:vg::MEMClusterer::HitEdge
distance	multipath_mapper.cpp	/^    int64_t MultipathMapper::distance(const pos_t& pos_1, const pos_t& pos_2) const {$/;"	f	class:vg::MultipathMapper
distance_between	minimizer_mapper.cpp	/^int64_t MinimizerMapper::distance_between(const Alignment& aln1, const Alignment& aln2) {$/;"	f	class:vg::MinimizerMapper
distance_between	minimizer_mapper.cpp	/^int64_t MinimizerMapper::distance_between(const pos_t& pos1, const pos_t& pos2) {$/;"	f	class:vg::MinimizerMapper
distance_between	multipath_mapper.cpp	/^    int64_t MultipathMapper::distance_between(const multipath_alignment_t& multipath_aln_1,$/;"	f	class:vg::MultipathMapper
distance_between_positions	filter.cpp	/^    int64_t Filter::distance_between_positions(Position first, Position second){$/;"	f	class:vg::Filter
distance_between_seeds	snarl_seed_clusterer.cpp	/^size_t SnarlDistanceIndexClusterer::distance_between_seeds(const Seed& seed1, const Seed& seed2, bool stop_at_lowest_common_ancestor) const {$/;"	f	class:vg::SnarlDistanceIndexClusterer
distance_end_left	snarl_seed_clusterer.hpp	/^            size_t distance_end_left = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
distance_end_right	snarl_seed_clusterer.hpp	/^            size_t distance_end_right = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
distance_index	cluster.hpp	/^    SnarlDistanceIndex& distance_index;$/;"	m	class:vg::SnarlMinDistance
distance_index	cluster.hpp	/^    SnarlDistanceIndex& distance_index;$/;"	m	class:vg::TipAnchoredMaxDistance
distance_index	cluster.hpp	/^    SnarlDistanceIndex* distance_index = nullptr;$/;"	m	class:vg::SnarlOrientedDistanceMeasurer
distance_index	cluster.hpp	/^    SnarlDistanceIndex* distance_index;$/;"	m	class:vg::MinDistanceClusterer
distance_index	minimizer_mapper.hpp	/^    SnarlDistanceIndex* distance_index;$/;"	m	class:vg::MinimizerMapper
distance_index	multipath_mapper.hpp	/^        SnarlDistanceIndex* distance_index;$/;"	m	class:vg::MultipathMapper
distance_index	recombinator.hpp	/^    const SnarlDistanceIndex& distance_index;$/;"	m	class:vg::HaplotypePartitioner
distance_index	snarl_seed_clusterer.hpp	/^        const SnarlDistanceIndex& distance_index;$/;"	m	class:vg::SnarlDistanceIndexClusterer
distance_left	snarl_seed_clusterer.hpp	/^            size_t distance_left = 0;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusterHead
distance_left	snarl_seed_clusterer.hpp	/^            size_t distance_left = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SeedCache
distance_limit	minimizer_mapper.hpp	/^    size_t distance_limit = default_distance_limit;$/;"	m	class:vg::MinimizerMapper
distance_measurer	cluster.hpp	/^    OrientedDistanceMeasurer& distance_measurer;$/;"	m	class:vg::OrientedDistanceClusterer
distance_name	subcommand/haplotypes_main.cpp	/^    std::string distance_name, r_index_name;$/;"	m	struct:HaplotypesConfig	file:
distance_right	snarl_seed_clusterer.hpp	/^            size_t distance_right = 0;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusterHead
distance_right	snarl_seed_clusterer.hpp	/^            size_t distance_right = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SeedCache
distance_start_left	snarl_seed_clusterer.hpp	/^            size_t distance_start_left = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
distance_start_right	snarl_seed_clusterer.hpp	/^            size_t distance_start_right = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
distance_to_annotation	minimizer_mapper.cpp	/^double MinimizerMapper::distance_to_annotation(int64_t distance) const {$/;"	f	class:vg::MinimizerMapper
distance_to_head	algorithms/distance_to_head.cpp	/^int32_t distance_to_head(handle_t h, int32_t limit, const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
distance_to_head	algorithms/distance_to_head.cpp	/^int32_t distance_to_head(handle_t h, int32_t limit, int32_t dist, unordered_set<handle_t>& seen, const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
distance_to_tail	algorithms/distance_to_tail.cpp	/^int32_t distance_to_tail(handle_t h, int32_t limit, const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
distance_to_tail	algorithms/distance_to_tail.cpp	/^int32_t distance_to_tail(handle_t h, int32_t limit, int32_t dist, unordered_set<handle_t>& seen, const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
divergence	path.cpp	/^double divergence(const Mapping& m) {$/;"	f	namespace:vg
divide_handle	vg.cpp	/^vector<handle_t> VG::divide_handle(const handle_t& handle, const vector<size_t>& offsets) {$/;"	f	class:vg::VG
divide_mapping	path.cpp	/^pair<mapping_t*, mapping_t*> Paths::divide_mapping(mapping_t* m, const Position& pos) {$/;"	f	class:vg::Paths
divide_mapping	path.cpp	/^pair<mapping_t*, mapping_t*> Paths::divide_mapping(mapping_t* m, size_t offset) {$/;"	f	class:vg::Paths
divide_node	vg.cpp	/^void VG::divide_node(Node* node, int pos, Node*& left, Node*& right) {$/;"	f	class:vg::VG
divide_node	vg.cpp	/^void VG::divide_node(Node* node, vector<int>& positions, vector<Node*>& parts) {$/;"	f	class:vg::VG
divide_path	vg.cpp	/^void VG::divide_path(map<long, nid_t>& path, long pos, Node*& left, Node*& right) {$/;"	f	class:vg::VG
do_dp	minimizer_mapper.hpp	/^    bool do_dp = default_do_dp;$/;"	m	class:vg::MinimizerMapper
do_poa	dozeu_interface.cpp	/^size_t DozeuInterface::do_poa(const OrderedGraph& graph, const dz_query_s* packed_query,$/;"	f	class:DozeuInterface
do_remap	filter.hpp	/^        bool do_remap = false;$/;"	m	class:vg::Filter
do_rescue_alignment	multipath_mapper.cpp	/^    bool MultipathMapper::do_rescue_alignment(const multipath_alignment_t& multipath_aln, const Alignment& other_aln,$/;"	f	class:vg::MultipathMapper
do_spliced_alignment	multipath_mapper.hpp	/^        bool do_spliced_alignment = false;$/;"	m	class:vg::MultipathMapper
do_svs	constructor.hpp	/^    bool do_svs = false;$/;"	m	class:vg::Constructor
dominated_path_chunk_diff	surjector.hpp	/^        int64_t dominated_path_chunk_diff = 10;$/;"	m	class:vg::Surjector
double_is_nonnegative	subcommand/options.cpp	/^const ValidatorFunction<double> double_is_nonnegative = [](const double& d) {$/;"	m	namespace:vg::subcommand	file:
double_is_positive	subcommand/options.cpp	/^const ValidatorFunction<double> double_is_positive = [](const double& d) {$/;"	m	namespace:vg::subcommand	file:
doubling_steps	variant_adder.hpp	/^    size_t doubling_steps = 3;$/;"	m	class:vg::VariantAdder
downsample_chunks	surjector.cpp	/^    void Surjector::downsample_chunks(const string& src_sequence,$/;"	f	class:vg::Surjector
downsample_context_length	index_registry.cpp	/^int IndexingParameters::downsample_context_length = gbwtgraph::PATH_COVER_DEFAULT_K;$/;"	m	class:vg::IndexingParameters	file:
downsample_context_length	index_registry.hpp	/^    static int downsample_context_length;$/;"	m	struct:vg::IndexingParameters
downsample_coverage	surjector.hpp	/^        int64_t downsample_coverage = 16;$/;"	m	class:vg::Surjector
downsample_probability	readfilter.hpp	/^    double downsample_probability = 1.0;$/;"	m	class:vg::ReadFilter
downsample_seed_mask	readfilter.hpp	/^    uint32_t downsample_seed_mask = 0;$/;"	m	class:vg::ReadFilter
downsample_threshold	index_registry.cpp	/^int IndexingParameters::downsample_threshold = 3;$/;"	m	class:vg::IndexingParameters	file:
downsample_threshold	index_registry.hpp	/^    static int downsample_threshold;$/;"	m	struct:vg::IndexingParameters
dp_score	cluster.hpp	/^    int32_t dp_score;$/;"	m	class:vg::MEMClusterer::HitNode
draw	viz.cpp	/^void Viz::draw(void) {$/;"	f	class:vg::Viz
draw_br	crash.cpp	/^static void draw_br() {$/;"	f	namespace:vg
draw_graph	viz.cpp	/^void Viz::draw_graph(void) {$/;"	f	class:vg::Viz
drop_chain	mapper.hpp	/^    float drop_chain; \/\/ drop chains shorter than this fraction of the longest overlapping chain$/;"	m	class:vg::Mapper
drop_hairpin_paths	small_snarl_simplifier.hpp	/^    bool drop_hairpin_paths = false;$/;"	m	class:vg::SmallSnarlSimplifier
drop_split	readfilter.hpp	/^    bool drop_split = false;$/;"	m	class:vg::ReadFilter
dry_run	gbwt_helper.hpp	/^    bool dry_run = false;$/;"	m	struct:vg::RebuildParameters
dss_prec_limit	config/allocator_config_jemalloc.cpp	/^    int dss_prec_limit = 3;$/;"	v
dump	genome_state.cpp	/^void GenomeState::dump() const {$/;"	f	class:vg::GenomeState
dump	genome_state.cpp	/^void SnarlState::dump() const {$/;"	f	class:vg::SnarlState
dump_chaining_problem	minimizer_mapper.cpp	/^void MinimizerMapper::dump_chaining_problem(const std::vector<algorithms::Anchor>& anchors, const std::vector<size_t>& cluster_seeds_sorted, const HandleGraph& graph) {$/;"	f	class:vg::MinimizerMapper
dump_debug_clustering	minimizer_mapper.cpp	/^void MinimizerMapper::dump_debug_clustering(const Cluster& cluster, size_t cluster_number, const VectorView<Minimizer>& minimizers, const std::vector<Seed>& seeds) {$/;"	f	class:vg::MinimizerMapper
dump_debug_extension_set	minimizer_mapper.cpp	/^void MinimizerMapper::dump_debug_extension_set(const HandleGraph& graph, const Alignment& aln, const vector<GaplessExtension>& extended_seeds) {$/;"	f	class:vg::MinimizerMapper
dump_debug_minimizers	minimizer_mapper.cpp	/^void MinimizerMapper::dump_debug_minimizers(const VectorView<MinimizerMapper::Minimizer>& minimizers, const string& sequence, const vector<size_t>* to_include, size_t start_offset, size_t length_limit) {$/;"	f	class:vg::MinimizerMapper
dump_debug_query	minimizer_mapper.cpp	/^void MinimizerMapper::dump_debug_query(const Alignment& aln) {$/;"	f	class:vg::MinimizerMapper
dump_debug_query	minimizer_mapper.cpp	/^void MinimizerMapper::dump_debug_query(const Alignment& aln1, const Alignment& aln2) {$/;"	f	class:vg::MinimizerMapper
dump_debug_seeds	minimizer_mapper.cpp	/^void MinimizerMapper::dump_debug_seeds(const VectorView<Minimizer>& minimizers, const std::vector<Seed>& seeds, const std::vector<size_t>& selected_seeds) {$/;"	f	class:vg::MinimizerMapper
dump_debug_sequence	minimizer_mapper.cpp	/^void MinimizerMapper::dump_debug_sequence(ostream& out, const string& sequence, size_t start_offset, size_t length_limit) {$/;"	f	class:vg::MinimizerMapper
duplicated_handles	dozeu_pinning_overlay.hpp	/^    unordered_set<handle_t> duplicated_handles;$/;"	m	class:vg::DozeuPinningOverlay
duplication_filter	filter.cpp	/^    pair<Locus, Locus> Filter::duplication_filter(Alignment& aln_first, Alignment& aln_second) {$/;"	f	class:vg::Filter
duration	funnel.hpp	/^        float duration;$/;"	m	struct:vg::Funnel::State::Stage
dynamic	gbwt_helper.hpp	/^    gbwt::DynamicGBWT dynamic;$/;"	m	struct:vg::GBWTHandler
dynamic_max_alt_alns	multipath_mapper.hpp	/^        bool dynamic_max_alt_alns = false;$/;"	m	class:vg::MultipathMapper
dz	dozeu_interface.hpp	/^    dz_s* dz = nullptr;$/;"	m	class:vg::DozeuInterface
each_approx_graph_memory	index_registry.cpp	/^vector<int64_t> each_approx_graph_memory(const vector<string>& fasta_filenames,$/;"	f	namespace:vg
earlier_stage_items	funnel.hpp	/^        vector<pair<size_t, size_t>> earlier_stage_items = {};$/;"	m	struct:vg::Funnel::State::Item
early_stop_number	cluster.hpp	/^    const int64_t early_stop_number = 2;$/;"	m	class:vg::ComponentMinDistanceClusterer
easy_sort	stream_sorter.hpp	/^void StreamSorter<Message>::easy_sort(istream& stream_in, ostream& stream_out, StreamIndex<Message>* index_to) {$/;"	f	class:vg::StreamSorter
eat_trivial_children	traversal_finder.hpp	/^    bool eat_trivial_children = false;$/;"	m	class:vg::RepresentativeTraversalFinder
edge_allele_labels	genotyper.cpp	/^void Genotyper::edge_allele_labels(const VG& graph,$/;"	f	class:vg::Genotyper
edge_by_sides	vg.hpp	/^    pair_hash_map<pair<NodeSide, NodeSide>, Edge*> edge_by_sides;$/;"	m	class:vg::VG
edge_cache	sampler.hpp	/^    LRUCache<id_t, vector<Edge> > edge_cache;$/;"	m	class:vg::Sampler
edge_count	vg.cpp	/^size_t VG::edge_count(void) const {$/;"	f	class:vg::VG
edge_cov_bin_size	packer.hpp	/^    size_t edge_cov_bin_size;$/;"	m	class:vg::Packer
edge_coverage	packer.cpp	/^size_t Packer::edge_coverage(Edge& e) const {$/;"	f	class:vg::Packer
edge_coverage	packer.cpp	/^size_t Packer::edge_coverage(size_t i) const {$/;"	f	class:vg::Packer
edge_coverage_bin_offset	packer.cpp	/^pair<size_t, size_t> Packer::edge_coverage_bin_offset(size_t i) const {$/;"	f	class:vg::Packer
edge_coverage_bin_size	packer.cpp	/^size_t Packer::edge_coverage_bin_size(size_t i) const {$/;"	f	class:vg::Packer
edge_coverage_civ	packer.hpp	/^    vlc_vector<> edge_coverage_civ; \/\/ edge coverage (compacted edge_coverage_dynamic)$/;"	m	class:vg::Packer
edge_coverage_dynamic	packer.hpp	/^    vector<gcsa::CounterArray*> edge_coverage_dynamic;$/;"	m	class:vg::Packer
edge_index	packer.cpp	/^size_t Packer::edge_index(const Edge& e) const {$/;"	f	class:vg::Packer
edge_index	vg.hpp	/^    hash_map<Edge*, int> edge_index;$/;"	m	class:vg::VG
edge_listeners	algorithms/gfa_to_handle.hpp	/^    vector<std::function<void(nid_t from, bool from_is_reverse, nid_t to, bool to_is_reverse, const chars_t& overlap, const tag_list_t& tags)>> edge_listeners;$/;"	m	class:vg::algorithms::GFAParser
edge_locks	packer.hpp	/^    std::mutex* edge_locks;$/;"	m	class:vg::Packer
edge_max	subcommand/prune_main.cpp	/^    static std::map<PruningMode, int>    edge_max;$/;"	m	struct:PruningParameters	file:
edge_max	variant_adder.hpp	/^    size_t edge_max = 0;$/;"	m	class:vg::VariantAdder
edge_support_cache	traversal_support.hpp	/^    mutable vector<LRUCache<edge_t, Support>*> edge_support_cache;$/;"	m	class:vg::CachedPackedTraversalSupportFinder
edge_supports	genotypekit.hpp	/^    unordered_map<edge_t, Support> edge_supports;$/;"	m	struct:vg::SupportAugmentedGraph
edge_supports	unittest/traversal_support.cpp	/^    const unordered_map<edge_t, double> edge_supports;$/;"	m	class:vg::unittest::TestTraversalSupportFinder	file:
edge_to_snarl_edge	graph_caller.cpp	/^tuple<bool, handle_t, edge_t> SnarlGraph::edge_to_snarl_edge(edge_t edge) const {$/;"	f	class:vg::SnarlGraph
edge_vector_size	packer.cpp	/^size_t Packer::edge_vector_size(void) const{$/;"	f	class:vg::Packer
edge_weight	flow_sort.hpp	/^        map<Edge*, int> edge_weight;$/;"	m	struct:vg::FlowSort::WeightedGraph
edge_weight_callback	traversal_finder.hpp	/^    function<double(edge_t)> edge_weight_callback;$/;"	m	class:vg::FlowTraversalFinder
edges	algorithms/min_cut_graph.hpp	/^            vector<Edge> edges;$/;"	m	struct:vg::algorithms::Node
edges	multipath_alignment_graph.hpp	/^        vector<pair<size_t, size_t>> edges;$/;"	m	class:vg::PathNode
edges_end	vg.cpp	/^vector<pair<nid_t, bool>>& VG::edges_end(Node* node) {$/;"	f	class:vg::VG
edges_end	vg.cpp	/^vector<pair<nid_t, bool>>& VG::edges_end(nid_t id) {$/;"	f	class:vg::VG
edges_from	cluster.hpp	/^    vector<HitEdge> edges_from;$/;"	m	class:vg::MEMClusterer::HitNode
edges_from	vg.cpp	/^vector<Edge*> VG::edges_from(Node* node) {$/;"	f	class:vg::VG
edges_in_nodes	flow_sort.hpp	/^        EdgeMapping edges_in_nodes;$/;"	m	struct:vg::FlowSort::WeightedGraph
edges_of	vg.cpp	/^vector<Edge*> VG::edges_of(Node* node) {$/;"	f	class:vg::VG
edges_of_node	vg.cpp	/^void VG::edges_of_node(Node* node, vector<Edge*>& edges) {$/;"	f	class:vg::VG
edges_of_nodes	vg.cpp	/^void VG::edges_of_nodes(set<Node*>& nodes, set<Edge*>& edges) {$/;"	f	class:vg::VG
edges_on_end	vg.hpp	/^    hash_map<nid_t, vector<pair<nid_t, bool>>> edges_on_end;$/;"	m	class:vg::VG
edges_on_start	vg.hpp	/^    hash_map<nid_t, vector<pair<nid_t, bool>>> edges_on_start;$/;"	m	class:vg::VG
edges_out_nodes	flow_sort.hpp	/^        EdgeMapping edges_out_nodes;$/;"	m	struct:vg::FlowSort::WeightedGraph
edges_start	vg.cpp	/^vector<pair<nid_t, bool>>& VG::edges_start(Node* node) {$/;"	f	class:vg::VG
edges_start	vg.cpp	/^vector<pair<nid_t, bool>>& VG::edges_start(nid_t id) {$/;"	f	class:vg::VG
edges_to	cluster.hpp	/^    vector<HitEdge> edges_to;$/;"	m	class:vg::MEMClusterer::HitNode
edges_to	vg.cpp	/^vector<Edge*> VG::edges_to(Node* node) {$/;"	f	class:vg::VG
edit	path.hpp	/^inline const edit_t& path_mapping_t::edit(size_t i) const {$/;"	f	class:vg::path_mapping_t
edit	path.hpp	/^inline const vector<edit_t>& path_mapping_t::edit() const {$/;"	f	class:vg::path_mapping_t
edit	vg.cpp	/^void VG::edit(const string& paths_to_add_path,$/;"	f	class:vg::VG
edit	vg.cpp	/^void VG::edit(vector<Path>& paths_to_add,$/;"	f	class:vg::VG
edit_count	alignment.cpp	/^int edit_count(const Alignment& alignment) {$/;"	f	namespace:vg
edit_count	packer.hpp	/^    size_t edit_count = 0;$/;"	m	class:vg::Packer
edit_csas	packer.hpp	/^    vector<csa_sada<enc_vector<>, 32, 32, sa_order_sa_sampling<>, isa_sampling<>, succinct_byte_alphabet<> > > edit_csas;$/;"	m	class:vg::Packer
edit_fast	vg.cpp	/^vector<Translation> VG::edit_fast(const Path& path, set<NodeSide>& dangling, size_t max_node_size) {$/;"	f	class:vg::VG
edit_length	banded_global_aligner.hpp	/^        int64_t edit_length = 0;$/;"	m	class:vg::BandedGlobalAligner::BABuilder
edit_length	packer.hpp	/^    size_t edit_length = 0;$/;"	m	class:vg::Packer
edit_read_end_idx	banded_global_aligner.hpp	/^        int64_t edit_read_end_idx = 0;$/;"	m	class:vg::BandedGlobalAligner::BABuilder
edit_size	path.hpp	/^inline size_t path_mapping_t::edit_size() const {$/;"	f	class:vg::path_mapping_t
edit_t	path.hpp	/^class edit_t {$/;"	c	namespace:vg
edit_tmpfile_names	packer.hpp	/^    vector<string> edit_tmpfile_names;$/;"	m	class:vg::Packer
edit_value	packer.cpp	/^string Packer::edit_value(const Edit& edit, bool revcomp) const {$/;"	f	class:vg::Packer
edits	gbwt_extender.hpp	/^    std::vector<std::pair<Edit, uint32_t>> edits;$/;"	m	struct:vg::WFAAlignment
edits_are_compatible	path.cpp	/^bool edits_are_compatible(const Edit& e, const Edit& f) {$/;"	f	namespace:vg
edits_at_position	packer.cpp	/^vector<Edit> Packer::edits_at_position(size_t i) const {$/;"	f	class:vg::Packer
embed_ref_path_snarls	graph_caller.cpp	/^void SnarlGraph::embed_ref_path_snarls(SnarlTraversal& traversal) {$/;"	f	class:vg::SnarlGraph
embed_snarl	graph_caller.cpp	/^void SnarlGraph::embed_snarl(Visit& visit) {$/;"	f	class:vg::SnarlGraph
embed_snarls	graph_caller.cpp	/^void SnarlGraph::embed_snarls(SnarlTraversal& traversal) {$/;"	f	class:vg::SnarlGraph
embed_transcript_paths	transcriptome.cpp	/^void Transcriptome::embed_transcript_paths(const bool add_reference_transcripts, const bool add_haplotype_transcripts) {$/;"	f	class:vg::Transcriptome
embedded_alignments	genotypekit.hpp	/^    vector<Alignment> embedded_alignments;$/;"	m	struct:vg::AugmentedGraph
embedded_path_names	transcriptome.hpp	/^    vector<pair<string, bool> > embedded_path_names;$/;"	m	struct:vg::TranscriptPath
emit	readfilter.hpp	/^inline void ReadFilter<Alignment>::emit(Alignment& aln) {$/;"	f	class:vg::ReadFilter
emit	readfilter.hpp	/^inline void ReadFilter<Alignment>::emit(Alignment& aln1, Alignment& aln2) {$/;"	f	class:vg::ReadFilter
emit	readfilter.hpp	/^inline void ReadFilter<MultipathAlignment>::emit(MultipathAlignment& mp_aln) {$/;"	f	class:vg::ReadFilter
emit	readfilter.hpp	/^inline void ReadFilter<MultipathAlignment>::emit(MultipathAlignment& mp_aln1, MultipathAlignment& mp_aln2) {$/;"	f	class:vg::ReadFilter
emit	vectorizer.cpp	/^void Vectorizer::emit(ostream &out, bool r_format=false, bool annotate=false){$/;"	f	class:Vectorizer
emit_gaf_traversals	graph_caller.cpp	/^void GAFOutputCaller::emit_gaf_traversals(const PathHandleGraph& graph, const string& snarl_name,$/;"	f	class:vg::GAFOutputCaller
emit_gaf_variant	graph_caller.cpp	/^void GAFOutputCaller::emit_gaf_variant(const PathHandleGraph& graph, const string& snarl_name,$/;"	f	class:vg::GAFOutputCaller
emit_mapped_pairs	back_translating_alignment_emitter.cpp	/^void BackTranslatingAlignmentEmitter::emit_mapped_pairs(vector<vector<Alignment>>&& alns1_batch, vector<vector<Alignment>>&& alns2_batch, vector<int64_t>&& tlen_limit_batch) {$/;"	f	class:vg::BackTranslatingAlignmentEmitter
emit_mapped_pairs	hts_alignment_emitter.cpp	/^void HTSAlignmentEmitter::emit_mapped_pairs(vector<vector<Alignment>>&& alns1_batch, $/;"	f	class:vg::HTSAlignmentEmitter
emit_mapped_pairs	surjecting_alignment_emitter.cpp	/^void SurjectingAlignmentEmitter::emit_mapped_pairs(vector<vector<Alignment>>&& alns1_batch, vector<vector<Alignment>>&& alns2_batch, vector<int64_t>&& tlen_limit_batch) {$/;"	f	class:vg::SurjectingAlignmentEmitter
emit_mapped_singles	back_translating_alignment_emitter.cpp	/^void BackTranslatingAlignmentEmitter::emit_mapped_singles(vector<vector<Alignment>>&& alns_batch) {$/;"	f	class:vg::BackTranslatingAlignmentEmitter
emit_mapped_singles	hts_alignment_emitter.cpp	/^void HTSAlignmentEmitter::emit_mapped_singles(vector<vector<Alignment>>&& alns_batch) {$/;"	f	class:vg::HTSAlignmentEmitter
emit_mapped_singles	surjecting_alignment_emitter.cpp	/^void SurjectingAlignmentEmitter::emit_mapped_singles(vector<vector<Alignment>>&& alns_batch) {$/;"	f	class:vg::SurjectingAlignmentEmitter
emit_pairs	back_translating_alignment_emitter.cpp	/^void BackTranslatingAlignmentEmitter::emit_pairs(vector<Alignment>&& aln1_batch, vector<Alignment>&& aln2_batch, vector<int64_t>&& tlen_limit_batch) {$/;"	f	class:vg::BackTranslatingAlignmentEmitter
emit_pairs	hts_alignment_emitter.cpp	/^void HTSAlignmentEmitter::emit_pairs(vector<Alignment>&& aln1_batch,$/;"	f	class:vg::HTSAlignmentEmitter
emit_pairs	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::emit_pairs(const string& name_1, const string& name_2,$/;"	f	class:vg::MultipathAlignmentEmitter
emit_pairs	surjecting_alignment_emitter.cpp	/^void SurjectingAlignmentEmitter::emit_pairs(vector<Alignment>&& aln1_batch, vector<Alignment>&& aln2_batch, vector<int64_t>&& tlen_limit_batch) {$/;"	f	class:vg::SurjectingAlignmentEmitter
emit_singles	back_translating_alignment_emitter.cpp	/^void BackTranslatingAlignmentEmitter::emit_singles(vector<Alignment>&& aln_batch) {$/;"	f	class:vg::BackTranslatingAlignmentEmitter
emit_singles	hts_alignment_emitter.cpp	/^void HTSAlignmentEmitter::emit_singles(vector<Alignment>&& aln_batch) {$/;"	f	class:vg::HTSAlignmentEmitter
emit_singles	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::emit_singles(const string& name, vector<multipath_alignment_t>&& mp_alns,$/;"	f	class:vg::MultipathAlignmentEmitter
emit_singles	surjecting_alignment_emitter.cpp	/^void SurjectingAlignmentEmitter::emit_singles(vector<Alignment>&& aln_batch) {$/;"	f	class:vg::SurjectingAlignmentEmitter
emit_snarl_recursive	graph_caller.cpp	/^bool NestedFlowCaller::emit_snarl_recursive(const Snarl& managed_snarl, int ploidy, CallTable& call_table) {$/;"	f	class:vg::NestedFlowCaller
emit_stacktrace	crash.cpp	/^void emit_stacktrace(int signalNumber, siginfo_t *signalInfo, void *signalContext) {$/;"	f	namespace:vg
emit_tsv	readfilter.hpp	/^inline void ReadFilter<Alignment>::emit_tsv(Alignment& read) {$/;"	f	class:vg::ReadFilter
emit_tsv	readfilter.hpp	/^inline void ReadFilter<MultipathAlignment>::emit_tsv(MultipathAlignment& read) {$/;"	f	class:vg::ReadFilter
emit_variant	graph_caller.cpp	/^void VCFOutputCaller::emit_variant(const PathPositionHandleGraph& graph, SnarlCaller& snarl_caller,$/;"	f	class:vg::VCFOutputCaller
emit_variant	mcmc_caller.cpp	/^    void MCMCCaller::emit_variant(const Snarl& snarl, const vector<int>& genotype, SnarlTraversal ref_trav,$/;"	f	class:vg::MCMCCaller
emitter	graph_caller.hpp	/^    AlignmentEmitter* emitter;$/;"	m	class:vg::GAFOutputCaller
empty	algorithms/gfa_to_handle.hpp	/^    inline static bool empty(const chars_t& range) {$/;"	f	class:vg::algorithms::GFAParser
empty	gbwt_extender.cpp	/^        bool empty() const {$/;"	f	struct:vg::MatchPos::PathList
empty	gbwt_extender.cpp	/^    bool empty() const { return this->path.empty(); }$/;"	f	struct:vg::MatchPos
empty	gbwt_extender.hpp	/^    bool empty() const { return (this->length() == 0); }$/;"	f	struct:vg::GaplessExtension
empty	gbwt_extender.hpp	/^    bool empty() const { return (this->path.empty() && this->edits.empty()); }$/;"	f	struct:vg::WFAAlignment
empty	haplotypes.cpp	/^bool int_itvl_t::empty() const {$/;"	f	class:haplo::int_itvl_t
empty	multipath_alignment_graph.cpp	/^    bool MultipathAlignmentGraph::empty() const {$/;"	f	class:vg::MultipathAlignmentGraph
empty	option.hpp	/^    bool empty() const {$/;"	f	class:vg::Option
empty	path.cpp	/^bool Paths::empty(void) const {$/;"	f	class:vg::Paths
empty	utility.hpp	/^    inline bool empty() const {$/;"	f	struct:vg::VectorView
empty	vg.cpp	/^bool VG::empty(void) const {$/;"	f	class:vg::VG
empty_edge_ends	vg.hpp	/^    vector<pair<nid_t, bool>> empty_edge_ends;$/;"	m	class:vg::VG
empty_full_paths	banded_global_aligner.hpp	/^        list<list<int64_t>> empty_full_paths;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack
empty_gbwtgraph_handle	gbwtgraph_helper.hpp	/^inline handle_t empty_gbwtgraph_handle() {$/;"	f	namespace:vg
empty_ids	vg.hpp	/^    vector<nid_t> empty_ids;$/;"	m	class:vg::VG
empty_path	unittest/index_helpers.cpp	/^gbwt::vector_type empty_path;$/;"	m	namespace:vg::unittest::__anon2	file:
empty_pos_t	types.hpp	/^inline pos_t empty_pos_t() {$/;"	f	namespace:vg
empty_score	banded_global_aligner.hpp	/^        int32_t empty_score;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack
enable_crash_handling	crash.cpp	/^void enable_crash_handling() {$/;"	f	namespace:vg
encode	mem_accelerator.hpp	/^inline int64_t MEMAccelerator::encode(char c) const {$/;"	f	class:vg::MEMAccelerator
encode	snarl_distance_index.hpp	/^    static gbwtgraph::Payload encode(MIPayloadValues info) {$/;"	f	struct:vg::MIPayload
encode_chars	kmer.cpp	/^gcsa::byte_type encode_chars(const vector<char>& chars, const gcsa::Alphabet& alpha) {$/;"	f	namespace:vg
encode_decode	unittest/kff.cpp	/^void encode_decode(const std::string& kmer, const uint8_t* encoding) {$/;"	f	namespace:vg::unittest::__anon5
encoding	kff.hpp	/^    std::uint8_t encoding[4];$/;"	m	class:vg::ParallelKFFReader
end	algorithms/kmer.hpp	/^    pos_t end; \/\/\/ one past the (current) end of the kmer$/;"	m	struct:vg::algorithms::kmer_t
end	algorithms/prune.cpp	/^    pos_t end; \/\/\/ one past the (current) end of the kmer$/;"	m	struct:vg::algorithms::walk_t	file:
end	algorithms/walk.hpp	/^    pos_t end; \/\/\/ one past the (current) end of the walk$/;"	m	struct:vg::algorithms::walk_t
end	cluster.cpp	/^ShuffledPairs::iterator ShuffledPairs::end() const {$/;"	f	class:vg::ShuffledPairs
end	gff_reader.hpp	/^        int64_t end = -1;$/;"	m	struct:vg::GFFRecord
end	kmer.hpp	/^    pos_t end; \/\/\/ one past the (current) end of the kmer$/;"	m	struct:vg::kmer_t
end	mem.hpp	/^    string::const_iterator end;$/;"	m	class:vg::MaximalExactMatch
end	multipath_alignment_graph.hpp	/^        string::const_iterator end;$/;"	m	class:vg::PathNode
end	option.hpp	/^    typename Value::const_iterator end() const {$/;"	f	class:vg::Option
end	option.hpp	/^    typename Value::iterator end() {$/;"	f	class:vg::Option
end	path_index.cpp	/^PathIndex::iterator PathIndex::end() const {$/;"	f	class:vg::PathIndex
end	phased_genome.cpp	/^    PhasedGenome::iterator PhasedGenome::end(int which_haplotype) {$/;"	f	class:vg::PhasedGenome
end	recombinator.hpp	/^        gbwt::node_type start, end;$/;"	m	struct:vg::Haplotypes::Subchain
end	recombinator.hpp	/^        handle_t end;$/;"	m	struct:vg::HaplotypePartitioner::Subchain
end	region.hpp	/^    int64_t end = -1;$/;"	m	struct:vg::Region
end	snarls.hpp	/^    handle_t end;$/;"	m	class:vg::NetGraph
end	subcommand/haplotypes_main.cpp	/^    size_t start, end;$/;"	m	struct:ReferenceInterval	file:
end	subcommand/options.hpp	/^    Number end = 0;$/;"	m	struct:vg::Range
end	unittest/catch.hpp	/^        constexpr const_iterator end() const { return m_start + m_size; }$/;"	f	class:Catch::StringRef
end	utility.hpp	/^    const_iterator end() const {$/;"	f	struct:vg::VectorView
end_backward	snarls.cpp	/^bool end_backward(const Chain& chain) {$/;"	f	namespace:vg
end_degree	vg.cpp	/^int VG::end_degree(Node* node) {$/;"	f	class:vg::VG
end_handle	recombinator.hpp	/^        handle_t end_handle() const { return gbwtgraph::GBWTGraph::node_to_handle(this->end); }$/;"	f	struct:vg::Haplotypes::Subchain
end_in	snarl_seed_clusterer.hpp	/^            net_handle_t end_in;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
endianness	endianness.hpp	/^    struct endianness {$/;"	s	namespace:vg
endpoints	graph_synchronizer.hpp	/^        pair<NodeSide, NodeSide> endpoints;$/;"	m	class:vg::GraphSynchronizer::Lock
ends_with	subcommand/haplotypes_main.cpp	/^bool ends_with(const std::string& str, const std::string& suffix) {$/;"	f
ensure_alignment_is_for_graph	subcommand/surject_main.cpp	/^static void ensure_alignment_is_for_graph(const Alignment& aln, const HandleGraph& graph) {$/;"	f	file:
ensure_breakpoints	augment.cpp	/^map<pos_t, id_t> ensure_breakpoints(MutableHandleGraph* graph,$/;"	f	namespace:vg
ensure_edge	explainer.cpp	/^void DiagramExplainer::ensure_edge(const std::string& a_id, const std::string& b_id, const annotation_t& annotations) {$/;"	f	class:vg::DiagramExplainer
ensure_edit_tmpfiles_open	packer.cpp	/^void Packer::ensure_edit_tmpfiles_open(void) {$/;"	f	class:vg::Packer
ensure_header	hts_alignment_emitter.cpp	/^bam_hdr_t* HTSWriter::ensure_header(const string& read_group,$/;"	f	class:vg::HTSWriter
ensure_node	explainer.cpp	/^void DiagramExplainer::ensure_node(const std::string& id, const annotation_t& annotations) {$/;"	f	class:vg::DiagramExplainer
ensure_parent_directory	utility.cpp	/^    void ensure_parent_directory() {$/;"	f	struct:vg::temp_file::Handler
entries	haplotypes.hpp	/^  vector<shared_ptr<haplo_DP_rectangle>> entries;$/;"	m	struct:haplo::haplo_DP_column
entries	subcommand/options.hpp	/^    std::vector<std::unique_ptr<BaseValuation>> entries;$/;"	m	struct:vg::subcommand::Preset
entropy	entropy.cpp	/^double entropy(const char* st, size_t len) {$/;"	f	namespace:vg
entropy	entropy.cpp	/^double entropy(const string& st) {$/;"	f	namespace:vg
erase	genome_state.cpp	/^vector<pair<handle_t, size_t>> SnarlState::erase(size_t overall_lane) {$/;"	f	class:vg::SnarlState
erase_at	algorithms/back_translate.cpp	/^static void erase_at(RepeatedPtrField* field, const vector<size_t>& sorted_indices_to_remove) {$/;"	f	namespace:vg::algorithms
erase_in_out_edges	flow_sort.cpp	/^void FlowSort::erase_in_out_edges(EdgeMapping& edges_in, EdgeMapping& edges_out, Edge* e)$/;"	f	class:vg::FlowSort
error_model	gbwt_extender.hpp	/^    const ErrorModel*           error_model;$/;"	m	class:vg::WFAExtender
error_on_missing_path	transcriptome.hpp	/^        bool error_on_missing_path = true;$/;"	m	class:vg::Transcriptome
escape_delim	packer.cpp	/^string Packer::escape_delim(const string& s, char d) const {$/;"	f	class:vg::Packer
escape_delims	packer.cpp	/^string Packer::escape_delims(const string& s) const {$/;"	f	class:vg::Packer
estimate_batch_size	packer.cpp	/^size_t Packer::estimate_batch_size(size_t num_threads) {$/;"	f	class:vg::Packer
estimate_bin_count	packer.cpp	/^size_t Packer::estimate_bin_count(size_t num_threads) {$/;"	f	class:vg::Packer
estimate_data_width	packer.cpp	/^size_t Packer::estimate_data_width(size_t expected_coverage) {$/;"	f	class:vg::Packer
estimate_distribution	mapper.cpp	/^void FragmentLengthDistribution::estimate_distribution() {$/;"	f	class:vg::FragmentLengthDistribution
estimate_edge_score	cluster.cpp	/^int32_t MEMClusterer::estimate_edge_score(const MaximalExactMatch* mem_1, const MaximalExactMatch* mem_2,$/;"	f	class:vg::MEMClusterer
estimate_gc_content	mapper.cpp	/^double BaseMapper::estimate_gc_content(const gcsa::GCSA* gcsa) {$/;"	f	class:vg::BaseMapper
estimate_hash_table_size	subcommand/minimizer_main.cpp	/^size_t estimate_hash_table_size(const gbwtgraph::GBZ& gbz, bool progress) {$/;"	f
estimate_max_possible_mapping_quality	aligner.cpp	/^double GSSWAligner::estimate_max_possible_mapping_quality(int length, double min_diffs, double next_min_diffs) const {$/;"	f	class:vg::GSSWAligner
estimate_max_possible_mapping_quality	mapper.cpp	/^double Mapper::estimate_max_possible_mapping_quality(int length, double min_diffs, double next_min_diffs) {$/;"	f	class:vg::Mapper
estimate_missed_rescue_multiplicity	multipath_mapper.cpp	/^    double MultipathMapper::estimate_missed_rescue_multiplicity(size_t which_pair,$/;"	f	class:vg::MultipathMapper
estimate_next_best_score	aligner.cpp	/^double GSSWAligner::estimate_next_best_score(int length, double min_diffs) const {$/;"	f	class:vg::GSSWAligner
evaluate	gbwt_extender.hpp	/^            inline int32_t evaluate(size_t length) const {$/;"	f	struct:vg::WFAExtender::ErrorModel::Event
ewens_af_prob_ln	statistics.hpp	/^inline real_t ewens_af_prob_ln(const vector<int>& a, real_t theta) {$/;"	f	namespace:vg
exact	gbwt_extender.hpp	/^    bool exact() const { return this->mismatch_positions.empty(); }$/;"	f	struct:vg::GaplessExtension
exclude_dist_tree_merges	cluster.cpp	/^void OrientedDistanceClusterer::exclude_dist_tree_merges(const function<pos_t(size_t)>& get_position,$/;"	f	class:vg::OrientedDistanceClusterer
exclude_merges	cluster.cpp	/^vector<pair<size_t, size_t>> PathOrientedDistanceMeasurer::exclude_merges(vector<vector<size_t>>& current_groups,$/;"	f	class:vg::PathOrientedDistanceMeasurer
exclude_merges	cluster.cpp	/^vector<pair<size_t, size_t>> SnarlOrientedDistanceMeasurer::exclude_merges(vector<vector<size_t>>& current_groups,$/;"	f	class:vg::SnarlOrientedDistanceMeasurer
exclude_overlapping_min	minimizer_mapper.hpp	/^    bool exclude_overlapping_min = default_exclude_overlapping_min;$/;"	m	class:vg::MinimizerMapper
exclude_unaligned	mapper.hpp	/^    bool exclude_unaligned = false;$/;"	m	class:vg::BaseMapper
excluded_feature	readfilter.hpp	/^    enum FilterName { read = 0, wrong_name, wrong_refpos, excluded_feature, min_score, min_sec_score, max_overhang,$/;"	e	enum:vg::Counts::FilterName
excluded_features	readfilter.hpp	/^    unordered_set<string> excluded_features;$/;"	m	class:vg::ReadFilter
excluded_refpos_contigs	readfilter.hpp	/^    vector<regex> excluded_refpos_contigs;$/;"	m	class:vg::ReadFilter
excluded_samples	haplotype_indexer.hpp	/^    std::unordered_set<std::string> excluded_samples;$/;"	m	class:vg::HaplotypeIndexer
exec	index_registry.hpp	/^    RecipeFunc exec;$/;"	m	struct:vg::IndexRecipe
execute	genome_state.cpp	/^GenomeStateCommand* AppendHaplotypeCommand::execute(GenomeState& state) const {$/;"	f	class:vg::AppendHaplotypeCommand
execute	genome_state.cpp	/^GenomeStateCommand* DeleteHaplotypeCommand::execute(GenomeState& state) const {$/;"	f	class:vg::DeleteHaplotypeCommand
execute	genome_state.cpp	/^GenomeStateCommand* GenomeState::execute(GenomeStateCommand* command) {$/;"	f	class:vg::GenomeState
execute	genome_state.cpp	/^GenomeStateCommand* InsertHaplotypeCommand::execute(GenomeState& state) const {$/;"	f	class:vg::InsertHaplotypeCommand
execute	genome_state.cpp	/^GenomeStateCommand* ReplaceLocalHaplotypeCommand::execute(GenomeState& state) const {$/;"	f	class:vg::ReplaceLocalHaplotypeCommand
execute	genome_state.cpp	/^GenomeStateCommand* ReplaceSnarlHaplotypeCommand::execute(GenomeState& state) const {$/;"	f	class:vg::ReplaceSnarlHaplotypeCommand
execute	genome_state.cpp	/^GenomeStateCommand* SwapHaplotypesCommand::execute(GenomeState& state) const {$/;"	f	class:vg::SwapHaplotypesCommand
execute	index_registry.cpp	/^vector<vector<string>> IndexRecipe::execute(const IndexingPlan* plan, AliasGraph& alias_graph,$/;"	f	class:vg::IndexRecipe
execute	job_schedule.cpp	/^void JobSchedule::execute(int64_t target_memory_usage) {$/;"	f	class:vg::JobSchedule
execute_in_fork	index_registry.cpp	/^int execute_in_fork(const function<void(void)>& exec) {$/;"	f	namespace:vg
execute_recipe	index_registry.cpp	/^vector<vector<string>> IndexRegistry::execute_recipe(const RecipeName& recipe_name, const IndexingPlan* plan,$/;"	f	class:vg::IndexRegistry
exhaustive_jaccard_warning	deconstructor.hpp	/^    mutable atomic<bool> exhaustive_jaccard_warning;$/;"	m	class:vg::Deconstructor
exon_nodes_t	transcriptome.hpp	/^typedef vector<gbwt::node_type> exon_nodes_t;$/;"	t	namespace:vg
exons	transcriptome.hpp	/^    vector<Exon> exons;$/;"	m	struct:vg::Transcript
exp_overflow_limit	aligner.cpp	/^static const double exp_overflow_limit = log(std::numeric_limits<double>::max());$/;"	m	namespace:vg	file:
exp_rho	haplotypes.hpp	/^    double exp_rho;                          \/\/ lin space recombination penalty$/;"	m	struct:haplo::haploMath::RRMemo
expand	funnel.cpp	/^void Funnel::expand(size_t prev_stage_item, size_t count) {$/;"	f	class:vg::Funnel
expand_context	algorithms/expand_context.cpp	/^    void expand_context(const HandleGraph* source, MutableHandleGraph* subgraph,$/;"	f	namespace:vg::algorithms
expand_context	vg.cpp	/^void VG::expand_context(VG& g, size_t distance, bool add_paths, bool use_steps) {$/;"	f	class:vg::VG
expand_context_by_length	algorithms/expand_context.cpp	/^    void expand_context_by_length(const HandleGraph* source, MutableHandleGraph* subgraph,$/;"	f	namespace:vg::algorithms
expand_context_by_length	vg.cpp	/^void VG::expand_context_by_length(VG& g, size_t length, bool add_paths, bool reflect, const set<NodeSide>& barriers) {$/;"	f	class:vg::VG
expand_context_by_steps	algorithms/expand_context.cpp	/^    void expand_context_by_steps(const HandleGraph* source, MutableHandleGraph* subgraph,$/;"	f	namespace:vg::algorithms
expand_context_by_steps	vg.cpp	/^void VG::expand_context_by_steps(VG& g, size_t steps, bool add_paths) {$/;"	f	class:vg::VG
expand_context_with_paths	algorithms/expand_context.cpp	/^    void expand_context_with_paths(const PathHandleGraph* source,$/;"	f	namespace:vg::algorithms
expand_for_softclips	multipath_mapper.cpp	/^    bool MultipathMapper::expand_for_softclips(clustergraph_t& cluster_graph,$/;"	f	class:vg::MultipathMapper
expand_if_necessary	gbwt_extender.cpp	/^    void expand_if_necessary(const MatchPos& pos) {$/;"	f	class:vg::WFATree	file:
expand_path	vg.cpp	/^void VG::expand_path(const list<NodeTraversal>& path, vector<NodeTraversal>& expanded) {$/;"	f	class:vg::VG
expand_path	vg.cpp	/^void VG::expand_path(list<NodeTraversal>& path, vector<list<NodeTraversal>::iterator>& expanded) {$/;"	f	class:vg::VG
expand_subgraph_by_length	algorithms/subgraph.cpp	/^void expand_subgraph_by_length(const HandleGraph& source, MutableHandleGraph& subgraph, const uint64_t& length, bool forward_only) {$/;"	f	namespace:vg::algorithms
expand_subgraph_by_steps	algorithms/subgraph.cpp	/^void expand_subgraph_by_steps(const HandleGraph& source, MutableHandleGraph& subgraph, const uint64_t& steps, bool forward_only) {$/;"	f	namespace:vg::algorithms
expand_subgraph_to_length	algorithms/subgraph.cpp	/^void expand_subgraph_to_length(const HandleGraph& source, MutableHandleGraph& subgraph, const uint64_t& length, bool forward_only) {$/;"	f	namespace:vg::algorithms
expand_subgraph_to_node_count	algorithms/subgraph.cpp	/^void expand_subgraph_to_node_count(const HandleGraph& source, MutableHandleGraph& subgraph, const uint64_t& node_count, bool forward_only) {$/;"	f	namespace:vg::algorithms
expanded	gbwt_extender.cpp	/^    bool expanded() const { return (!this->children.empty() || this->dead_end); }$/;"	f	struct:vg::WFANode
expanded_subgraph	region_expander.cpp	/^    map<pair<id_t, bool>, pair<uint64_t,uint64_t >> RegionExpander::expanded_subgraph(const GFFRecord& gff_record) {$/;"	f	class:vg::RegionExpander
expected_depth	snarl_caller.hpp	/^        double expected_depth;$/;"	m	struct:vg::PoissonSupportSnarlCaller::PoissonCallInfo
expected_got	subcommand/haplotypes_main.cpp	/^std::string expected_got(T expected, T got) {$/;"	f
expected_separation	cluster.hpp	/^    const int64_t expected_separation = 20;$/;"	m	class:vg::GreedyMinDistanceClusterer
explanation_number	explainer.hpp	/^    size_t explanation_number;$/;"	m	class:vg::Explainer
explicit_exhaustive_traversals	deconstructor.cpp	/^vector<SnarlTraversal> Deconstructor::explicit_exhaustive_traversals(const Snarl* snarl) const {$/;"	f	class:vg::Deconstructor
extend	gbwt_extender.cpp	/^    void extend(int32_t score, pos_t to) {$/;"	f	class:vg::WFATree
extend	gbwt_extender.cpp	/^std::vector<GaplessExtension> GaplessExtender::extend(cluster_type& cluster, std::string sequence, const gbwtgraph::CachedGBWTGraph* cache, size_t max_mismatches, double overlap_threshold) const {$/;"	f	class:vg::GaplessExtender
extend	haplotypes.hpp	/^void haplo_DP_column::extend(accessorType& ga) {$/;"	f	class:haplo::haplo_DP_column
extend	haplotypes.hpp	/^void haplo_DP_rectangle::extend(hDP_gbwt_graph_accessor<GBWTType>& ga) {$/;"	f	class:haplo::haplo_DP_rectangle
extend	incremental_subgraph.cpp	/^handle_t IncrementalSubgraph::extend() {$/;"	f	class:vg::IncrementalSubgraph
extend	path.cpp	/^void Paths::extend(const Path& p, bool warn_on_duplicates, bool rebuild_indexes) {$/;"	f	class:vg::Paths
extend	path.cpp	/^void Paths::extend(const Paths& paths, bool warn_on_duplicates, bool rebuild_indexes) {$/;"	f	class:vg::Paths
extend	path.cpp	/^void Paths::extend(const vector<Path> & paths, bool warn_on_duplicates, bool rebuild_indexes) {$/;"	f	class:vg::Paths
extend	qual_adj_xdrop_aligner.cpp	/^const dz_forefront_s* QualAdjXdropAligner::extend(const dz_query_s* query, const dz_forefront_s** forefronts,$/;"	f	class:QualAdjXdropAligner
extend	recombinator.cpp	/^void RecombinatorHaplotype::extend($/;"	f	class:vg::RecombinatorHaplotype
extend	vg.cpp	/^void VG::extend(const Graph& graph, bool warn_on_duplicates) {$/;"	f	class:vg::VG
extend	vg.cpp	/^void VG::extend(const VG& g, bool warn_on_duplicates) {$/;"	f	class:vg::VG
extend	xdrop_aligner.cpp	/^const dz_forefront_s* XdropAligner::extend(const dz_query_s* query, const dz_forefront_s** forefronts,$/;"	f	class:XdropAligner
extend_alignment	alignment.cpp	/^Alignment& extend_alignment(Alignment& a1, const Alignment& a2, bool debug) {$/;"	f	namespace:vg
extend_cluster	minimizer_mapper.cpp	/^vector<GaplessExtension> MinimizerMapper::extend_cluster(const Cluster& cluster,$/;"	f	class:vg::MinimizerMapper
extend_dist_tree_by_buckets	cluster.cpp	/^void OrientedDistanceClusterer::extend_dist_tree_by_buckets(const function<pos_t(size_t)>& get_position,$/;"	f	class:vg::OrientedDistanceClusterer
extend_dist_tree_by_permutations	cluster.cpp	/^void OrientedDistanceClusterer::extend_dist_tree_by_permutations(const function<pos_t(size_t)>& get_position,$/;"	f	class:vg::OrientedDistanceClusterer
extend_over	gbwt_extender.cpp	/^    void extend_over(int32_t score, int32_t diagonal, pos_t to, const std::vector<uint32_t>& leaves) {$/;"	f	class:vg::WFATree	file:
extend_path	path.cpp	/^Path& extend_path(Path& path1, const Path& path2) {$/;"	f	namespace:vg
extend_path	phase_unfolder.cpp	/^void PhaseUnfolder::extend_path(const path_type& path) {$/;"	f	class:vg::PhaseUnfolder
extend_state	phase_unfolder.cpp	/^bool PhaseUnfolder::extend_state(state_type state, vg::id_t node, bool is_reverse) {$/;"	f	class:vg::PhaseUnfolder
extender	minimizer_mapper.hpp	/^    std::unique_ptr<GaplessExtender> extender;$/;"	m	class:vg::MinimizerMapper
extension_score_threshold	minimizer_mapper.hpp	/^    int extension_score_threshold = default_extension_score_threshold;$/;"	m	class:vg::MinimizerMapper
extension_set_min_score	minimizer_mapper.hpp	/^    int extension_set_min_score = default_extension_set_min_score;$/;"	m	class:vg::MinimizerMapper
extension_set_score_threshold	minimizer_mapper.hpp	/^    double extension_set_score_threshold = default_extension_set_score_threshold;$/;"	m	class:vg::MinimizerMapper
extension_to_alignment	minimizer_mapper.cpp	/^void MinimizerMapper::extension_to_alignment(const GaplessExtension& extension, Alignment& alignment) const {$/;"	f	class:vg::MinimizerMapper
external_id_map	algorithms/gfa_to_handle.hpp	/^    GFAIDMapInfo* external_id_map = nullptr;$/;"	m	class:vg::algorithms::GFAParser
extra_data	feature_set.hpp	/^        vector<string> extra_data;$/;"	m	struct:vg::FeatureSet::Feature
extra_multimaps	mapper.hpp	/^    int extra_multimaps; \/\/ Extra mappings considered$/;"	m	class:vg::Mapper
extract	algorithms/gfa_to_handle.hpp	/^    inline static string extract(const chars_t& range) {$/;"	f	class:vg::algorithms::GFAParser
extract_as_gbwt_path	gbwt_helper.cpp	/^gbwt::vector_type extract_as_gbwt_path(const PathHandleGraph& graph, const std::string& path_name) {$/;"	f	namespace:vg
extract_cluster_graph	multipath_mapper.cpp	/^    pair<unique_ptr<bdsg::HashGraph>, bool> MultipathMapper::extract_cluster_graph(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
extract_component	chunker.cpp	/^void PathChunker::extract_component(const unordered_set<nid_t>& node_ids, MutablePathMutableHandleGraph& subgraph, bool subpath_naming) {$/;"	f	class:vg::PathChunker
extract_connecting_graph	algorithms/extract_connecting_graph.cpp	/^unordered_map<id_t, id_t> extract_connecting_graph(const HandleGraph* source,$/;"	f	namespace:vg::algorithms
extract_containing_graph	algorithms/extract_containing_graph.cpp	/^void extract_containing_graph(const HandleGraph* source, MutableHandleGraph* into, const vector<pos_t>& positions,$/;"	f	namespace:vg::algorithms
extract_containing_graph	algorithms/extract_containing_graph.cpp	/^void extract_containing_graph(const HandleGraph* source,$/;"	f	namespace:vg::algorithms
extract_context	algorithms/subgraph.cpp	/^void extract_context(const HandleGraph& source, MutableHandleGraph& subgraph, const handle_t& handle, const uint64_t& offset, const uint64_t& length, bool fwd, bool rev) {$/;"	f	namespace:vg::algorithms
extract_extending_graph	algorithms/extract_extending_graph.cpp	/^unordered_map<id_t, id_t> extract_extending_graph(const HandleGraph* source, DeletableHandleGraph* into, int64_t max_dist, pos_t pos,$/;"	f	namespace:vg::algorithms
extract_gbwt_path	gbwt_helper.cpp	/^Path extract_gbwt_path(const HandleGraph& graph, const gbwt::GBWT& gbwt_index, gbwt::size_type id) {$/;"	f	namespace:vg
extract_haplotypes	subcommand/haplotypes_main.cpp	/^void extract_haplotypes(const gbwtgraph::GBZ& gbz, const Haplotypes& haplotypes, const HaplotypesConfig& config) {$/;"	f
extract_id_range	algorithms/subgraph.cpp	/^void extract_id_range(const HandleGraph& source, const nid_t& id1, const nid_t& id2, MutableHandleGraph& subgraph) {$/;"	f	namespace:vg::algorithms
extract_id_range	chunker.cpp	/^void PathChunker::extract_id_range(vg::id_t start, vg::id_t end, int64_t context, int64_t length,$/;"	f	class:vg::PathChunker
extract_left	incremental_subgraph.hpp	/^    bool extract_left;$/;"	m	class:vg::IncrementalSubgraph
extract_linearized_path_graph	surjector.cpp	/^    Surjector::extract_linearized_path_graph(const PathPositionHandleGraph* graph, MutableHandleGraph* into,$/;"	f	class:vg::Surjector
extract_maximal_graph	multipath_mapper.cpp	/^    pair<unique_ptr<bdsg::HashGraph>, bool> MultipathMapper::extract_maximal_graph(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
extract_overlapping_paths	surjector.cpp	/^    Surjector::extract_overlapping_paths(const PathPositionHandleGraph* graph, const Alignment& source,$/;"	f	class:vg::Surjector
extract_overlapping_paths	surjector.cpp	/^    Surjector::extract_overlapping_paths(const PathPositionHandleGraph* graph,$/;"	f	class:vg::Surjector
extract_path_component	chunker.cpp	/^void PathChunker::extract_path_component(const string& path_name, MutablePathMutableHandleGraph& subgraph, Region& out_region) {$/;"	f	class:vg::PathChunker
extract_path_metadata	hts_alignment_emitter.cpp	/^pair<vector<pair<string, int64_t>>, unordered_map<string, int64_t>> extract_path_metadata($/;"	f	namespace:vg
extract_path_range	algorithms/subgraph.cpp	/^void extract_path_range(const PathPositionHandleGraph& source, path_handle_t path_handle, int64_t start, int64_t end,$/;"	f	namespace:vg::algorithms
extract_rescue_graph	multipath_mapper.cpp	/^    void MultipathMapper::extract_rescue_graph(const multipath_alignment_t& multipath_aln, const Alignment& other_aln,$/;"	f	class:vg::MultipathMapper
extract_restrained_graph	multipath_mapper.cpp	/^    pair<unique_ptr<bdsg::HashGraph>, bool> MultipathMapper::extract_restrained_graph(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
extract_sequences	recombinator.cpp	/^std::vector<Recombinator::LocalHaplotype> Recombinator::extract_sequences($/;"	f	class:vg::Recombinator
extract_snarls	chunker.cpp	/^void PathChunker::extract_snarls(const Region& region, SnarlManager& snarl_manager, MutablePathMutableHandleGraph& subgraph) {$/;"	f	class:vg::PathChunker
extract_sub_multipath_alignment	multipath_alignment.cpp	/^    void extract_sub_multipath_alignment(const multipath_alignment_t& multipath_aln,$/;"	f	namespace:vg
extract_subgraph	chunker.cpp	/^void PathChunker::extract_subgraph(const Region& region, int64_t context, int64_t length, bool forward_only,$/;"	f	class:vg::PathChunker
extracted	incremental_subgraph.hpp	/^    vector<tuple<handle_t, vector<size_t>, vector<size_t>, int64_t, int64_t>> extracted;$/;"	m	class:vg::IncrementalSubgraph
extracting_left	incremental_subgraph.cpp	/^bool IncrementalSubgraph::extracting_left() const {$/;"	f	class:vg::IncrementalSubgraph
factorial_ln	statistics.hpp	/^inline real_t factorial_ln(int n) {$/;"	f	namespace:vg
fail	funnel.cpp	/^void Funnel::fail(const char* filter, size_t prev_stage_item, double statistic) {$/;"	f	class:vg::Funnel
failed_filter	funnel.hpp	/^        const char* failed_filter = nullptr;$/;"	m	struct:vg::Funnel::State::Item
failed_statistic	funnel.hpp	/^        double failed_statistic = nan("");$/;"	m	struct:vg::Funnel::State::Item
failing	funnel.hpp	/^        size_t failing = 0;$/;"	m	struct:vg::Funnel::State::FilterPerformance
failing_correct	funnel.hpp	/^        size_t failing_correct = 0;$/;"	m	struct:vg::Funnel::State::FilterPerformance
false_extend	haplotypes.hpp	/^void haplo_DP_rectangle::false_extend(accessorType& ga, $/;"	f	class:haplo::haplo_DP_rectangle
false_type	unittest/catch.hpp	/^            static auto test(...)->std::false_type;$/;"	m	class:Catch::Detail::IsStreamInsertable::std
fanout_length_threshold	mapper.hpp	/^    int fanout_length_threshold = 0;$/;"	m	class:vg::BaseMapper
fast_linear_sort	flow_sort.cpp	/^void FlowSort::fast_linear_sort(const string& ref_name, bool isGrooming)$/;"	f	class:vg::FlowSort
fast_reseed	mapper.hpp	/^    bool fast_reseed = true; \/\/ use the fast reseed algorithm$/;"	m	class:vg::BaseMapper
fast_reseed_length_diff	mapper.hpp	/^    double fast_reseed_length_diff = 0.45; \/\/ how much smaller than its parent a sub-MEM can be in the fast reseed algorithm$/;"	m	class:vg::BaseMapper
fasta_to_vcf	name_mapper.cpp	/^string NameMapper::fasta_to_vcf(const string& fasta_name) const {$/;"	f	class:vg::NameMapper
fasta_to_vcf_renames	name_mapper.hpp	/^    map<string, string> fasta_to_vcf_renames;$/;"	m	class:vg::NameMapper
faster_cap	minimizer_mapper.cpp	/^double MinimizerMapper::faster_cap(const VectorView<Minimizer>& minimizers, vector<size_t>& minimizers_explored,$/;"	f	class:vg::MinimizerMapper
fastq_paired_interleaved_for_each	alignment.cpp	/^size_t fastq_paired_interleaved_for_each(const string& filename, function<void(Alignment&, Alignment&)> lambda) {$/;"	f	namespace:vg
fastq_paired_interleaved_for_each_parallel	alignment.cpp	/^size_t fastq_paired_interleaved_for_each_parallel(const string& filename, function<void(Alignment&, Alignment&)> lambda, uint64_t batch_size) {$/;"	f	namespace:vg
fastq_paired_interleaved_for_each_parallel_after_wait	alignment.cpp	/^size_t fastq_paired_interleaved_for_each_parallel_after_wait(const string& filename,$/;"	f	namespace:vg
fastq_paired_two_files_for_each	alignment.cpp	/^size_t fastq_paired_two_files_for_each(const string& file1, const string& file2, function<void(Alignment&, Alignment&)> lambda) {$/;"	f	namespace:vg
fastq_paired_two_files_for_each_parallel	alignment.cpp	/^size_t fastq_paired_two_files_for_each_parallel(const string& file1, const string& file2, function<void(Alignment&, Alignment&)> lambda, uint64_t batch_size) {$/;"	f	namespace:vg
fastq_paired_two_files_for_each_parallel_after_wait	alignment.cpp	/^size_t fastq_paired_two_files_for_each_parallel_after_wait(const string& file1, const string& file2,$/;"	f	namespace:vg
fastq_unpaired_for_each	alignment.cpp	/^size_t fastq_unpaired_for_each(const string& filename, function<void(Alignment&)> lambda) {$/;"	f	namespace:vg
fastq_unpaired_for_each_parallel	alignment.cpp	/^size_t fastq_unpaired_for_each_parallel(const string& filename, function<void(Alignment&)> lambda, uint64_t batch_size) {$/;"	f	namespace:vg
feature_name	feature_set.hpp	/^        string feature_name;$/;"	m	struct:vg::FeatureSet::Feature
feature_type	transcriptome.hpp	/^        string feature_type = "exon";$/;"	m	class:vg::Transcriptome
features	feature_set.hpp	/^    map<string, vector<Feature>> features;$/;"	m	class:vg::FeatureSet
features	small_snarl_simplifier.hpp	/^    FeatureSet* features = nullptr;$/;"	m	class:vg::SmallSnarlSimplifier
file	unittest/catch.hpp	/^        char const* file;$/;"	m	struct:Catch::SourceLineInfo
file	vcf_buffer.hpp	/^    vcflib::VariantCallFile* const file;$/;"	m	class:vg::VcfBuffer::vcflib
file_base_name	utility.cpp	/^string file_base_name(const string& filename) {$/;"	f	namespace:vg
file_exists	utility.cpp	/^bool file_exists(const string& filename) {$/;"	f	namespace:vg
file_i	subcommand/gamsort_main.cpp	/^    int file_i;$/;"	m	struct:GafFile	file:
file_name	algorithms/gfa_to_handle.hpp	/^    string file_name = "";$/;"	m	struct:vg::algorithms::GFAFormatError
filename	gbwt_helper.hpp	/^    std::string filename;$/;"	m	struct:vg::GBWTHandler
filename	subcommand/gbwt_main.cpp	/^    std::string filename;$/;"	m	struct:job_type	file:
filenames	index_registry.hpp	/^    vector<string> filenames;$/;"	m	class:vg::IndexFile
filenames	utility.cpp	/^    unordered_set<string> filenames;$/;"	m	struct:vg::temp_file::Handler	file:
filenames	vg_set.hpp	/^    vector<string> filenames;$/;"	m	class:vg::VGset
fill_buffer	vcf_buffer.cpp	/^void VcfBuffer::fill_buffer() {$/;"	f	class:vg::VcfBuffer
fill_in_distance_index	snarl_distance_index.cpp	/^void fill_in_distance_index(SnarlDistanceIndex* distance_index, const HandleGraph* graph, const HandleGraphSnarlFinder* snarl_finder, size_t size_limit) {$/;"	f	namespace:vg
fill_matrix	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BAMatrix::fill_matrix(const HandleGraph& graph, int8_t* score_mat, int8_t* nt_table,$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
fill_node_to_position	filter.cpp	/^    void Filter::fill_node_to_position(string pathname){$/;"	f	class:vg::Filter
filter	readfilter.hpp	/^inline int ReadFilter<Alignment>::filter(istream* alignment_stream) {$/;"	f	class:vg::ReadFilter
filter	readfilter.hpp	/^inline int ReadFilter<MultipathAlignment>::filter(istream* alignment_stream) {$/;"	f	class:vg::ReadFilter
filter_alignment	readfilter.hpp	/^Counts ReadFilter<Read>::filter_alignment(Read& read) {$/;"	f	class:vg::ReadFilter
filter_and_process_multimaps	mapper.cpp	/^void Mapper::filter_and_process_multimaps(vector<Alignment>& sorted_unique_alignments, int total_multimaps) {$/;"	f	class:vg::Mapper
filter_breakpoints_by_coverage	augment.cpp	/^unordered_map<id_t, set<pos_t>> filter_breakpoints_by_coverage(const Packer& packed_breakpoints, size_t min_bp_coverage) {$/;"	f	namespace:vg
filter_hits_to	mem.cpp	/^size_t MaximalExactMatch::filter_hits_to(int limit) {$/;"	f	class:vg::MaximalExactMatch
filter_internal	readfilter.hpp	/^void ReadFilter<Read>::filter_internal(istream* in) {$/;"	f	class:vg::ReadFilter
filter_local_variants	variant_adder.cpp	/^vector<vcflib::Variant*> VariantAdder::filter_local_variants(const vector<vcflib::Variant*>& before,$/;"	f	class:vg::VariantAdder
filter_matches	filter.hpp	/^        bool filter_matches = false;$/;"	m	class:vg::Filter
filter_on_all	readfilter.hpp	/^    bool filter_on_all = false;$/;"	m	class:vg::ReadFilter
filter_redundant_path_chunks	surjector.cpp	/^    void Surjector::filter_redundant_path_chunks(bool path_rev, vector<path_chunk_t>& path_chunks,$/;"	f	class:vg::Surjector
filter_short_mems	mapper.hpp	/^    bool filter_short_mems = false;$/;"	m	class:vg::BaseMapper
filtered	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
final_offset	gbwt_extender.cpp	/^int64_t WFAAlignment::final_offset(const gbwtgraph::GBWTGraph& graph) const {$/;"	f	class:vg::WFAAlignment
final_position	path.cpp	/^pos_t final_position(const Path& path) {$/;"	f	namespace:vg
final_position	path.cpp	/^pos_t final_position(const path_t& path) {$/;"	f	namespace:vg
finalize	sampler.cpp	/^void NGSSimulator::finalize() {$/;"	f	class:vg::NGSSimulator
finalize	sampler.hpp	/^void NGSSimulator::MarkovDistribution<From, To>::finalize() {$/;"	f	class:vg::NGSSimulator::MarkovDistribution
finalize_alignment	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BABuilder::finalize_alignment(const list<int64_t>& empty_prefix) {$/;"	f	class:vg::BandedGlobalAligner::BABuilder
finalize_fragment_length_distr	minimizer_mapper.hpp	/^    void finalize_fragment_length_distr() {$/;"	f	class:vg::MinimizerMapper
find	indexed_vg.cpp	/^void IndexedVG::find(id_t id, const function<bool(const CacheEntry&)>& iteratee) const {$/;"	f	class:vg::IndexedVG
find	integrated_snarl_finder.cpp	/^handle_t IntegratedSnarlFinder::MergedAdjacencyGraph::find(handle_t into) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
find_allele_traversals	traversal_finder.cpp	/^VCFTraversalFinder::find_allele_traversals(Snarl site) {$/;"	f	class:vg::VCFTraversalFinder
find_backbone	traversal_finder.cpp	/^Path RepresentativeTraversalFinder::find_backbone(const Snarl& site) {$/;"	f	class:vg::RepresentativeTraversalFinder
find_banded_paths	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::find_banded_paths(bool permissive_banding, int64_t band_padding,$/;"	f	class:vg::BandedGlobalAligner
find_best_chain	algorithms/chain_items.cpp	/^pair<int, vector<size_t>> find_best_chain(const VectorView<Anchor>& to_chain,$/;"	f	namespace:vg::algorithms
find_breakpoints	augment.cpp	/^void find_breakpoints(const Path& path, unordered_map<id_t, set<pos_t>>& breakpoints, bool break_ends,$/;"	f	namespace:vg
find_bubble	nested_traversal_finder.cpp	/^pair<Support, vector<Visit>> NestedTraversalFinder::find_bubble(Node* node, Edge* edge, const Snarl* child, const Snarl& site) {$/;"	f	class:vg::NestedTraversalFinder
find_bubble	traversal_finder.cpp	/^pair<Support, vector<Visit>> RepresentativeTraversalFinder::find_bubble(id_t node, const edge_t* edge,$/;"	f	class:vg::RepresentativeTraversalFinder
find_chain_alignment	minimizer_mapper_from_chains.cpp	/^Alignment MinimizerMapper::find_chain_alignment($/;"	f	class:vg::MinimizerMapper
find_constriction_bicliques	surjector.cpp	/^    vector<pair<vector<size_t>, vector<size_t>>> Surjector::find_constriction_bicliques(const vector<vector<size_t>>& adj,$/;"	f	class:vg::Surjector
find_cycle_path_in_cactus	integrated_snarl_finder.cpp	/^vector<handle_t> IntegratedSnarlFinder::MergedAdjacencyGraph::find_cycle_path_in_cactus(const unordered_map<handle_t, handle_t>& next_along_cycle, handle_t start_head, handle_t end_head) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
find_deletion_candidate_edges	clip.cpp	/^static multimap<int64_t, edge_t> find_deletion_candidate_edges(PathHandleGraph* graph, path_handle_t ref_path,$/;"	f	namespace:vg
find_edges_to_prune	algorithms/prune.cpp	/^pair_hash_set<edge_t> find_edges_to_prune(const HandleGraph& graph, size_t k, size_t edge_max) {$/;"	f	namespace:vg::algorithms
find_existing_sequence_id	algorithms/gfa_to_handle.cpp	/^nid_t GFAParser::find_existing_sequence_id(const string& str, GFAIDMapInfo& id_map_info) {$/;"	f	class:vg::algorithms::GFAParser
find_fanout_mems	mapper.cpp	/^vector<MaximalExactMatch> BaseMapper::find_fanout_mems(string::const_iterator seq_begin,$/;"	f	class:vg::BaseMapper
find_gbwt	algorithms/find_gbwt.cpp	/^const gbwt::GBWT* find_gbwt(const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
find_gbwt	algorithms/find_gbwt.cpp	/^const gbwt::GBWT* find_gbwt(const HandleGraph* graph, std::unique_ptr<gbwt::GBWT>& holder, const std::string& filename) {$/;"	f	namespace:vg::algorithms
find_gbwt_traversals	traversal_finder.cpp	/^GBWTTraversalFinder::find_gbwt_traversals(const Snarl& site, bool return_paths) {$/;"	f	class:vg::GBWTTraversalFinder
find_gbwtgraph	algorithms/find_gbwtgraph.cpp	/^const gbwtgraph::GBWTGraph* find_gbwtgraph(const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
find_group	sparse_union_find.cpp	/^    size_t SparseUnionFind::find_group(size_t i){$/;"	f	class:vg::SparseUnionFind
find_in_orientation	path_index.cpp	/^PathIndex::iterator PathIndex::find_in_orientation(int64_t node_id, bool is_reverse) const {$/;"	f	class:vg::PathIndex
find_in_out_web	flow_sort.cpp	/^void FlowSort::find_in_out_web(list<NodeTraversal>& sorted_nodes,$/;"	f	class:vg::FlowSort
find_index	graph_caller.cpp	/^pair<string, PathIndex*> LegacyCaller::find_index(const Snarl& snarl, const vector<PathIndex*> path_indexes) const {$/;"	f	class:vg::LegacyCaller
find_kmer	recombinator.cpp	/^find_kmer(hash_map<Haplotypes::Subchain::kmer_type, size_t>& counts, Haplotypes::Subchain::kmer_type kmer, size_t k) {$/;"	f	namespace:vg
find_mapping	path.cpp	/^list<mapping_t>::iterator Paths::find_mapping(mapping_t* m) {$/;"	f	class:vg::Paths
find_max_node	flow_sort.cpp	/^id_t FlowSort::find_max_node(std::vector<std::set<id_t>> nodes_degree)$/;"	f	class:vg::FlowSort
find_mems	multipath_mapper.cpp	/^    vector<MaximalExactMatch> MultipathMapper::find_mems(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
find_mems_deep	mapper.cpp	/^vector<MaximalExactMatch> BaseMapper::find_mems_deep(string::const_iterator seq_begin,$/;"	f	class:vg::BaseMapper
find_mems_simple	mapper.cpp	/^BaseMapper::find_mems_simple(string::const_iterator seq_begin,$/;"	f	class:vg::BaseMapper
find_minimizers	minimizer_mapper.cpp	/^std::vector<MinimizerMapper::Minimizer> MinimizerMapper::find_minimizers(const std::string& sequence, Funnel& funnel) const {$/;"	f	class:vg::MinimizerMapper
find_mismatches	gbwt_extender.cpp	/^void find_mismatches(const std::string& seq, const gbwtgraph::CachedGBWTGraph& graph, std::vector<GaplessExtension>& result) {$/;"	f	namespace:vg
find_named_traversals	traversal_finder.cpp	/^pair<vector<SnarlTraversal>, vector<string>> PathRestrictedTraversalFinder::find_named_traversals(const Snarl& site) {$/;"	f	class:vg::PathRestrictedTraversalFinder
find_new_node	augment.cpp	/^static nid_t find_new_node(HandleGraph* graph, pos_t old_pos, const map<pos_t, id_t>& node_translation) {$/;"	f	namespace:vg
find_node	unittest/vg_algorithms.cpp	/^Node* find_node(Graph& g, int64_t id) {$/;"	f	namespace:vg::unittest
find_node_by_name_or_add_new	vg.cpp	/^Node* VG::find_node_by_name_or_add_new(string name) {$/;"	f	class:vg::VG
find_optimal_tail_alignments	minimizer_mapper.cpp	/^void MinimizerMapper::find_optimal_tail_alignments(const Alignment& aln, const vector<GaplessExtension>& extended_seeds, LazyRNG& rng, Alignment& best, Alignment& second_best) const {$/;"	f	class:vg::MinimizerMapper
find_overlapping	subcommand/annotate_main.cpp	/^static unordered_set<const string*> find_overlapping(const vector<feature_t>& ranges, pair<size_t, size_t> search_interval) {$/;"	f	file:
find_packed_breakpoints	augment.cpp	/^void find_packed_breakpoints(const Path& path, Packer& packed_breakpoints, bool break_ends,$/;"	f	namespace:vg
find_pareto_frontier	minimizer_mapper.cpp	/^static void find_pareto_frontier(std::vector<pareto_point>& v) {$/;"	f	namespace:vg
find_path_by_suffix	unittest/constructor.cpp	/^static Path find_path_by_suffix(const Graph& g, const std::string& suffix) {$/;"	f	namespace:vg::unittest
find_path_traversals	traversal_finder.cpp	/^pair<vector<SnarlTraversal>, vector<gbwt::size_type>> GBWTTraversalFinder::find_path_traversals(const Snarl& site) {$/;"	f	class:vg::GBWTTraversalFinder
find_path_traversals	traversal_finder.cpp	/^pair<vector<SnarlTraversal>, vector<pair<step_handle_t, step_handle_t> > > PathTraversalFinder::find_path_traversals(const Snarl& site) {$/;"	f	class:vg::PathTraversalFinder
find_pos	gbwt_extender.cpp	/^    MatchPos find_pos(size_t type, int32_t score, int32_t diagonal, const MatchPos::PathList& path) const {$/;"	f	struct:vg::WFANode
find_pos	gbwt_extender.cpp	/^    MatchPos find_pos(size_t type, uint32_t node, int32_t score, int32_t diagonal, bool extendable_seq, bool extendable_graph) const {$/;"	f	class:vg::WFATree	file:
find_position	path_index.cpp	/^PathIndex::iterator PathIndex::find_position(size_t position) const {$/;"	f	class:vg::PathIndex
find_rescuable_spliced_alignments	multipath_mapper.cpp	/^    bool MultipathMapper::find_rescuable_spliced_alignments(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
find_seeds	minimizer_mapper.cpp	/^std::vector<MinimizerMapper::Seed> MinimizerMapper::find_seeds(const VectorView<Minimizer>& minimizers, const Alignment& aln, Funnel& funnel) const {$/;"	f	class:vg::MinimizerMapper
find_snarls	cactus_snarl_finder.cpp	/^SnarlManager CactusSnarlFinder::find_snarls() {$/;"	f	class:vg::CactusSnarlFinder
find_snarls	snarls.cpp	/^SnarlManager HandleGraphSnarlFinder::find_snarls() {$/;"	f	class:vg::HandleGraphSnarlFinder
find_snarls_impl	cactus_snarl_finder.cpp	/^SnarlManager CactusSnarlFinder::find_snarls_impl(bool known_single_component, bool finish_index) {$/;"	f	class:vg::CactusSnarlFinder
find_snarls_parallel	cactus_snarl_finder.cpp	/^SnarlManager CactusSnarlFinder::find_snarls_parallel() {$/;"	f	class:vg::CactusSnarlFinder
find_snarls_parallel	integrated_snarl_finder.cpp	/^SnarlManager IntegratedSnarlFinder::find_snarls_parallel() {$/;"	f	class:vg::IntegratedSnarlFinder
find_snarls_parallel	snarls.cpp	/^SnarlManager SnarlFinder::find_snarls_parallel() {$/;"	f	class:vg::SnarlFinder
find_snarls_unindexed	snarls.cpp	/^SnarlManager HandleGraphSnarlFinder::find_snarls_unindexed() {$/;"	f	class:vg::HandleGraphSnarlFinder
find_spliced_alignments	multipath_mapper.cpp	/^    bool MultipathMapper::find_spliced_alignments(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
find_spliced_alignments	multipath_mapper.cpp	/^    bool MultipathMapper::find_spliced_alignments(const Alignment& alignment1, const Alignment& alignment2,$/;"	f	class:vg::MultipathMapper
find_stripped_matches	mapper.cpp	/^vector<MaximalExactMatch> BaseMapper::find_stripped_matches(string::const_iterator seq_begin,$/;"	f	class:vg::BaseMapper
find_sub_mems	mapper.cpp	/^void BaseMapper::find_sub_mems(const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::BaseMapper
find_sub_mems_fast	mapper.cpp	/^void BaseMapper::find_sub_mems_fast(const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::BaseMapper
find_translation	algorithms/find_translation.cpp	/^const NamedNodeBackTranslation* find_translation(const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
find_traversals	nested_traversal_finder.cpp	/^vector<SnarlTraversal> NestedTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::NestedTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> ExhaustiveTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::ExhaustiveTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> FlowTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::FlowTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> GBWTTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::GBWTTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> PathBasedTraversalFinder::find_traversals(const Snarl& site){$/;"	f	class:vg::PathBasedTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> PathRestrictedTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::PathRestrictedTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> PathTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::PathTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> ReadRestrictedTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::ReadRestrictedTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> RepresentativeTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::RepresentativeTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> TrivialTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::TrivialTraversalFinder
find_traversals	traversal_finder.cpp	/^vector<SnarlTraversal> VCFTraversalFinder::find_traversals(const Snarl& site) {$/;"	f	class:vg::VCFTraversalFinder
find_weighted_traversals	traversal_finder.cpp	/^pair<vector<SnarlTraversal>, vector<double>> FlowTraversalFinder::find_weighted_traversals(const Snarl& site, bool greedy_avg,$/;"	f	class:vg::FlowTraversalFinder
finish	recombinator.cpp	/^void RecombinatorHaplotype::finish(const Recombinator& recombinator, gbwt::GBWTBuilder& builder, gbwtgraph::MetadataBuilder& metadata) {$/;"	f	class:vg::RecombinatorHaplotype
finish	snarls.cpp	/^void SnarlManager::finish() {$/;"	f	class:vg::SnarlManager
finish_current_edit	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BABuilder::finish_current_edit() {$/;"	f	class:vg::BandedGlobalAligner::BABuilder
finish_current_node	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BABuilder::finish_current_node() {$/;"	f	class:vg::BandedGlobalAligner::BABuilder
finish_gbwt_constuction	gbwt_helper.cpp	/^void finish_gbwt_constuction(gbwt::GBWTBuilder& builder,$/;"	f	namespace:vg
first	feature_set.hpp	/^        size_t first;$/;"	m	struct:vg::FeatureSet::Feature
first_mapping_quality_approx	aligner.cpp	/^double GSSWAligner::first_mapping_quality_approx(const vector<double>& scaled_scores,$/;"	f	class:vg::GSSWAligner
first_mapping_quality_exact	aligner.cpp	/^double GSSWAligner::first_mapping_quality_exact(const vector<double>& scaled_scores,$/;"	f	class:vg::GSSWAligner
first_path_position	path.cpp	/^Position first_path_position(const Path& path) {$/;"	f	namespace:vg
fit_fixed_rate_max_exponential	statistics.cpp	/^double fit_fixed_rate_max_exponential(const vector<double>& x, double rate, double tolerance) {$/;"	f	namespace:vg
fit_fixed_shape_max_exponential	statistics.cpp	/^double fit_fixed_shape_max_exponential(const vector<double>& x, double shape, double tolerance) {$/;"	f	namespace:vg
fit_max_exponential	statistics.cpp	/^pair<double, double> fit_max_exponential(const vector<double>& x,$/;"	f	namespace:vg
fit_offset_weibull	statistics.cpp	/^tuple<double, double, double> fit_offset_weibull(const vector<double>& x,$/;"	f	namespace:vg
fit_weibull	statistics.cpp	/^pair<double, double> fit_weibull(const vector<double>& x) {$/;"	f	namespace:vg
fit_zipf	statistics.cpp	/^double fit_zipf(const vector<double>& y) {$/;"	f	namespace:vg
fix_dozeu_end_deletions	minimizer_mapper.cpp	/^void MinimizerMapper::fix_dozeu_end_deletions(Alignment& alignment) const {$/;"	f	class:vg::MinimizerMapper
fix_dozeu_score	minimizer_mapper.cpp	/^void MinimizerMapper::fix_dozeu_score(Alignment& rescued_alignment, const HandleGraph& rescue_graph,$/;"	f	class:vg::MinimizerMapper
fixed_fragment_model	mapper.hpp	/^    bool fixed_fragment_model = true;$/;"	m	class:vg::FragmentLengthStatistics
flank_penalty	minimizer_mapper.cpp	/^static int32_t flank_penalty(size_t length, const std::vector<pareto_point>& frontier, const Aligner* aligner) {$/;"	f	namespace:vg
flank_range	variant_adder.hpp	/^    size_t flank_range = 100;$/;"	m	class:vg::VariantAdder
flat	constructor.hpp	/^    bool flat = false;$/;"	m	class:vg::Constructor
flat_node	haplotypes.hpp	/^  gen_flat_node flat_node;$/;"	m	struct:haplo::haplo_DP_rectangle
flatten_alt_allele	graph_caller.cpp	/^string NestedFlowCaller::flatten_alt_allele(const string& nested_allele, int allele, int ploidy, const CallTable& call_table) const {$/;"	f	class:vg::NestedFlowCaller
flatten_common_allele_ends	graph_caller.cpp	/^void VCFOutputCaller::flatten_common_allele_ends(vcflib::Variant& variant, bool backward, size_t len_override) const {$/;"	f	class:vg::VCFOutputCaller
flatten_common_allele_ends	mcmc_caller.cpp	/^    void MCMCCaller::flatten_common_allele_ends(vcflib::Variant& variant, bool backward) const {$/;"	f	class:vg::MCMCCaller
flatten_distance_tree	cluster.cpp	/^vector<unordered_map<size_t, int64_t>> OrientedDistanceClusterer::flatten_distance_tree(size_t num_items,$/;"	f	class:vg::OrientedDistanceClusterer
flatten_reference_allele	graph_caller.cpp	/^string NestedFlowCaller::flatten_reference_allele(const string& nested_allele, const CallTable& call_table) const {$/;"	f	class:vg::NestedFlowCaller
flip	dagified_graph.cpp	/^    handle_t DagifiedGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::DagifiedGraph
flip	dozeu_pinning_overlay.cpp	/^handle_t DozeuPinningOverlay::flip(const handle_t& handle) const {$/;"	f	class:vg::DozeuPinningOverlay
flip	extra_node_graph.cpp	/^handle_t ExtraNodeGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::ExtraNodeGraph
flip	gbwt_extender.cpp	/^void WFAAlignment::flip(const gbwtgraph::GBWTGraph& graph, const std::string& sequence) {$/;"	f	class:vg::WFAAlignment
flip	genotypekit.cpp	/^Support flip(const Support& to_flip) {$/;"	f	namespace:vg
flip	graph_caller.cpp	/^handle_t SnarlGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::SnarlGraph
flip	identity_overlay.cpp	/^    handle_t IdentityOverlay::flip(const handle_t& handle) const {$/;"	f	class:vg::IdentityOverlay
flip	incremental_subgraph.cpp	/^handle_t IncrementalSubgraph::flip(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
flip	indexed_vg.cpp	/^handle_t IndexedVG::flip(const handle_t& handle) const {$/;"	f	class:vg::IndexedVG
flip	memoizing_graph.cpp	/^    handle_t MemoizingGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::MemoizingGraph
flip	nodeside.hpp	/^    inline NodeSide flip(void) const {$/;"	f	class:vg::NodeSide
flip	null_masking_graph.cpp	/^handle_t NullMaskingGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::NullMaskingGraph
flip	path_subgraph.cpp	/^    handle_t PathSubgraph::flip(const handle_t& handle) const {$/;"	f	class:vg::PathSubgraph
flip	reverse_graph.cpp	/^    handle_t ReverseGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::ReverseGraph
flip	snarls.cpp	/^handle_t NetGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::NetGraph
flip	snarls.cpp	/^void SnarlManager::flip(const Chain* chain) {$/;"	f	class:vg::SnarlManager
flip	snarls.cpp	/^void SnarlManager::flip(const Snarl* snarl) {$/;"	f	class:vg::SnarlManager
flip	source_sink_overlay.cpp	/^handle_t SourceSinkOverlay::flip(const handle_t& handle) const {$/;"	f	class:vg::SourceSinkOverlay
flip	splicing.cpp	/^handle_t JoinedSpliceGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::JoinedSpliceGraph
flip	split_strand_graph.cpp	/^    handle_t StrandSplitGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::StrandSplitGraph
flip	subgraph.cpp	/^    handle_t SubHandleGraph::flip(const handle_t& handle) const {$/;"	f	class:vg::SubHandleGraph
flip	subgraph_overlay.cpp	/^handle_t SubgraphOverlay::flip(const handle_t& handle) const {$/;"	f	class:vg::SubgraphOverlay
flip	tree_subgraph.cpp	/^handle_t TreeSubgraph::flip(const handle_t& handle) const {$/;"	f	class:vg::TreeSubgraph
flip	vg.cpp	/^handle_t VG::flip(const handle_t& handle) const {$/;"	f	class:vg::VG
flip_doubly_reversed_edges	graph.cpp	/^void flip_doubly_reversed_edges(Graph& graph) {$/;"	f	namespace:vg
flip_doubly_reversed_edges	vg.cpp	/^void VG::flip_doubly_reversed_edges(void) {$/;"	f	class:vg::VG
flip_nodes	alignment.cpp	/^void flip_nodes(Alignment& a, const set<int64_t>& ids, const std::function<size_t(int64_t)>& node_length) {$/;"	f	namespace:vg
flip_snarl	graph_caller.cpp	/^static void flip_snarl(Snarl& snarl) {$/;"	f	namespace:vg
float32_t	simde/arm/neon/types.h	/^  typedef   simde_float32_t     float32_t;$/;"	t
float32x2_t	simde/arm/neon/types.h	/^  typedef simde_float32x2_t   float32x2_t;$/;"	t
float32x2x2_t	simde/arm/neon/types.h	/^  typedef simde_float32x2x2_t float32x2x2_t;$/;"	t
float32x2x3_t	simde/arm/neon/types.h	/^  typedef simde_float32x2x3_t float32x2x3_t;$/;"	t
float32x2x4_t	simde/arm/neon/types.h	/^  typedef simde_float32x2x4_t float32x2x4_t;$/;"	t
float32x4_t	simde/arm/neon/types.h	/^  typedef simde_float32x4_t   float32x4_t;$/;"	t
float32x4x2_t	simde/arm/neon/types.h	/^  typedef simde_float32x4x2_t float32x4x2_t;$/;"	t
float32x4x3_t	simde/arm/neon/types.h	/^  typedef simde_float32x4x3_t float32x4x3_t;$/;"	t
float32x4x4_t	simde/arm/neon/types.h	/^  typedef simde_float32x4x4_t float32x4x4_t;$/;"	t
float64_t	simde/arm/neon/types.h	/^  typedef   simde_float64_t     float64_t;$/;"	t
float64x1_t	simde/arm/neon/types.h	/^  typedef simde_float64x1_t   float64x1_t;$/;"	t
float64x1x2_t	simde/arm/neon/types.h	/^  typedef simde_float64x1x2_t float64x1x2_t;$/;"	t
float64x1x3_t	simde/arm/neon/types.h	/^  typedef simde_float64x1x3_t float64x1x3_t;$/;"	t
float64x1x4_t	simde/arm/neon/types.h	/^  typedef simde_float64x1x4_t float64x1x4_t;$/;"	t
float64x2_t	simde/arm/neon/types.h	/^  typedef simde_float64x2_t   float64x2_t;$/;"	t
float64x2x2_t	simde/arm/neon/types.h	/^  typedef simde_float64x2x2_t float64x2x2_t;$/;"	t
float64x2x3_t	simde/arm/neon/types.h	/^  typedef simde_float64x2x3_t float64x2x3_t;$/;"	t
float64x2x4_t	simde/arm/neon/types.h	/^  typedef simde_float64x2x4_t float64x2x4_t;$/;"	t
flow_sort_nodes	flow_sort.cpp	/^void FlowSort::flow_sort_nodes(list<NodeTraversal>& sorted_nodes, $/;"	f	class:vg::FlowSort
flush	qual_adj_xdrop_aligner.cpp	/^void QualAdjXdropAligner::flush() {$/;"	f	class:QualAdjXdropAligner
flush	xdrop_aligner.cpp	/^void XdropAligner::flush() {$/;"	f	class:XdropAligner
follow_edges_impl	dagified_graph.cpp	/^    bool DagifiedGraph::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::DagifiedGraph
follow_edges_impl	dozeu_pinning_overlay.cpp	/^bool DozeuPinningOverlay::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::DozeuPinningOverlay
follow_edges_impl	extra_node_graph.cpp	/^bool ExtraNodeGraph::follow_edges_impl(const handle_t& handle, bool go_left, const function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::ExtraNodeGraph
follow_edges_impl	graph_caller.cpp	/^bool SnarlGraph::follow_edges_impl(const handle_t& handle, bool go_left, const std::function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::SnarlGraph
follow_edges_impl	identity_overlay.cpp	/^    bool IdentityOverlay::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::IdentityOverlay
follow_edges_impl	incremental_subgraph.cpp	/^bool IncrementalSubgraph::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::IncrementalSubgraph
follow_edges_impl	indexed_vg.cpp	/^bool IndexedVG::follow_edges_impl(const handle_t& handle, bool go_left, const function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::IndexedVG
follow_edges_impl	memoizing_graph.cpp	/^    bool MemoizingGraph::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::MemoizingGraph
follow_edges_impl	null_masking_graph.cpp	/^bool NullMaskingGraph::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::NullMaskingGraph
follow_edges_impl	path_subgraph.cpp	/^    bool PathSubgraph::follow_edges_impl(const handle_t& handle, bool go_left, const function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::PathSubgraph
follow_edges_impl	reverse_graph.cpp	/^    bool ReverseGraph::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::ReverseGraph
follow_edges_impl	snarls.cpp	/^bool NetGraph::follow_edges_impl(const handle_t& handle, bool go_left, const function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::NetGraph
follow_edges_impl	source_sink_overlay.cpp	/^bool SourceSinkOverlay::follow_edges_impl(const handle_t& handle, bool go_left, const function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::SourceSinkOverlay
follow_edges_impl	splicing.cpp	/^bool JoinedSpliceGraph::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::JoinedSpliceGraph
follow_edges_impl	split_strand_graph.cpp	/^    bool StrandSplitGraph::follow_edges_impl(const handle_t& handle, bool go_left,$/;"	f	class:vg::StrandSplitGraph
follow_edges_impl	subgraph.cpp	/^    bool SubHandleGraph::follow_edges_impl(const handle_t& handle, bool go_left, const function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::SubHandleGraph
follow_edges_impl	subgraph_overlay.cpp	/^bool SubgraphOverlay::follow_edges_impl(const handle_t& handle, bool go_left, const std::function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::SubgraphOverlay
follow_edges_impl	tree_subgraph.cpp	/^bool TreeSubgraph::follow_edges_impl(const handle_t& handle, bool go_left, const function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::TreeSubgraph
follow_edges_impl	vg.cpp	/^bool VG::follow_edges_impl(const handle_t& handle, bool go_left, const function<bool(const handle_t&)>& iteratee) const {$/;"	f	class:vg::VG
for_each	path.cpp	/^void Paths::for_each(const function<void(const Path&)>& lambda) {$/;"	f	class:vg::Paths
for_each	subcommand/subcommand.cpp	/^void Subcommand::for_each(CommandCategory category, const std::function<void(const Subcommand&)>& lambda) {$/;"	f	class:vg::subcommand::Subcommand
for_each	subcommand/subcommand.cpp	/^void Subcommand::for_each(const std::function<void(const Subcommand&)>& lambda) {$/;"	f	class:vg::subcommand::Subcommand
for_each	vg_set.cpp	/^void VGset::for_each(std::function<void(HandleGraph*)> lambda) {$/;"	f	class:vg::VGset
for_each_agglomeration_interval	minimizer_mapper.cpp	/^void MinimizerMapper::for_each_agglomeration_interval(const VectorView<Minimizer>& minimizers,$/;"	f	class:vg::MinimizerMapper
for_each_annotation	multipath_alignment.cpp	/^    void multipath_alignment_t::for_each_annotation(function<void(const string&, anno_type_t, const void*)> lambda) const {$/;"	f	class:vg::multipath_alignment_t
for_each_basic_annotation	annotation.hpp	/^void for_each_basic_annotation(const Annotated& annotated,$/;"	f	namespace:vg
for_each_chain	snarls.cpp	/^void SnarlManager::for_each_chain(const function<void(const Chain*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_chain_parallel	snarls.cpp	/^void SnarlManager::for_each_chain_parallel(const function<void(const Chain*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_connected_node	unittest/three_edge_connected_components.cpp	/^static void for_each_connected_node(size_t node, const function<void(size_t)>& iteratee) {$/;"	f	namespace:vg::unittest
for_each_connected_node	vg.cpp	/^void VG::for_each_connected_node(Node* node, function<void(Node*)> lambda) {$/;"	f	class:vg::VG
for_each_edge	explainer.cpp	/^void DiagramExplainer::for_each_edge(const std::function<void(const edge_ref_t&)>& iteratee) const {$/;"	f	class:vg::DiagramExplainer
for_each_edge	vg.cpp	/^void VG::for_each_edge(function<void(Edge*)> lambda) {$/;"	f	class:vg::VG
for_each_edge	vg.cpp	/^void VG::for_each_edge(function<void(const Edge*)> lambda) const {$/;"	f	class:vg::VG
for_each_edge_parallel	vg.cpp	/^void VG::for_each_edge_parallel(function<void(Edge*)> lambda) {$/;"	f	class:vg::VG
for_each_filter	funnel.cpp	/^void Funnel::for_each_filter(const function<void(const string&, const string&,$/;"	f	class:vg::Funnel
for_each_gff_record	gff_reader.cpp	/^    void GFFReader::for_each_gff_record(function<void(const GFFRecord&)>& lambda) {$/;"	f	class:vg::GFFReader
for_each_handle_impl	dagified_graph.cpp	/^    bool DagifiedGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee,$/;"	f	class:vg::DagifiedGraph
for_each_handle_impl	dozeu_pinning_overlay.cpp	/^bool DozeuPinningOverlay::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::DozeuPinningOverlay
for_each_handle_impl	extra_node_graph.cpp	/^bool ExtraNodeGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::ExtraNodeGraph
for_each_handle_impl	graph_caller.cpp	/^bool SnarlGraph::for_each_handle_impl(const std::function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::SnarlGraph
for_each_handle_impl	identity_overlay.cpp	/^    bool IdentityOverlay::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee,$/;"	f	class:vg::IdentityOverlay
for_each_handle_impl	incremental_subgraph.cpp	/^bool IncrementalSubgraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee,$/;"	f	class:vg::IncrementalSubgraph
for_each_handle_impl	indexed_vg.cpp	/^bool IndexedVG::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::IndexedVG
for_each_handle_impl	memoizing_graph.cpp	/^    bool MemoizingGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::MemoizingGraph
for_each_handle_impl	null_masking_graph.cpp	/^bool NullMaskingGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::NullMaskingGraph
for_each_handle_impl	path_subgraph.cpp	/^    bool PathSubgraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::PathSubgraph
for_each_handle_impl	reverse_graph.cpp	/^    bool ReverseGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee,$/;"	f	class:vg::ReverseGraph
for_each_handle_impl	snarls.cpp	/^bool NetGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::NetGraph
for_each_handle_impl	source_sink_overlay.cpp	/^bool SourceSinkOverlay::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::SourceSinkOverlay
for_each_handle_impl	splicing.cpp	/^bool JoinedSpliceGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee,$/;"	f	class:vg::JoinedSpliceGraph
for_each_handle_impl	split_strand_graph.cpp	/^    bool StrandSplitGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee,$/;"	f	class:vg::StrandSplitGraph
for_each_handle_impl	subgraph.cpp	/^    bool SubHandleGraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::SubHandleGraph
for_each_handle_impl	subgraph_overlay.cpp	/^bool SubgraphOverlay::for_each_handle_impl(const std::function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::SubgraphOverlay
for_each_handle_impl	tree_subgraph.cpp	/^bool TreeSubgraph::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::TreeSubgraph
for_each_handle_impl	vg.cpp	/^bool VG::for_each_handle_impl(const function<bool(const handle_t&)>& iteratee, bool parallel) const {$/;"	f	class:vg::VG
for_each_head	integrated_snarl_finder.cpp	/^void IntegratedSnarlFinder::MergedAdjacencyGraph::for_each_head(const function<void(handle_t)>& iteratee) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
for_each_kmer	algorithms/kmer.cpp	/^void for_each_kmer(const HandleGraph& graph, size_t k, size_t edge_max,$/;"	f	namespace:vg::algorithms
for_each_kmer	kmer.cpp	/^void for_each_kmer(const HandleGraph& graph, size_t k,$/;"	f	namespace:vg
for_each_kmer_parallel	vg_set.cpp	/^void VGset::for_each_kmer_parallel(size_t kmer_size, const function<void(const kmer_t&)>& lambda) {$/;"	f	class:vg::VGset
for_each_mapping	path.cpp	/^void Paths::for_each_mapping(const function<void(mapping_t&)>& lambda) {$/;"	f	class:vg::Paths
for_each_member	integrated_snarl_finder.cpp	/^void IntegratedSnarlFinder::MergedAdjacencyGraph::for_each_member(handle_t head, const function<void(handle_t)>& iteratee) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
for_each_membership	integrated_snarl_finder.cpp	/^void IntegratedSnarlFinder::MergedAdjacencyGraph::for_each_membership(const function<void(handle_t, handle_t)>& iteratee) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
for_each_name	path.cpp	/^void Paths::for_each_name(const function<void(const string&)>& lambda) const {$/;"	f	class:vg::Paths
for_each_name_stoppable	path.cpp	/^bool Paths::for_each_name_stoppable(const function<bool(const string&)>& lambda) const {$/;"	f	class:vg::Paths
for_each_neighbor	dozeu_interface.cpp	/^void DozeuInterface::OrderedGraph::for_each_neighbor(const size_t i, bool go_left,$/;"	f	class:DozeuInterface::OrderedGraph
for_each_node	vg.cpp	/^void VG::for_each_node(function<void(Node*)> lambda) {$/;"	f	class:vg::VG
for_each_node	vg.cpp	/^void VG::for_each_node(function<void(const Node*)> lambda) const {$/;"	f	class:vg::VG
for_each_node_parallel	vg.cpp	/^void VG::for_each_node_parallel(function<void(Node*)> lambda) {$/;"	f	class:vg::VG
for_each_other_member	integrated_snarl_finder.cpp	/^void IntegratedSnarlFinder::MergedAdjacencyGraph::for_each_other_member(handle_t head, const function<void(handle_t)>& iteratee) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
for_each_path_handle_impl	memoizing_graph.cpp	/^    bool MemoizingGraph::for_each_path_handle_impl(const std::function<bool(const path_handle_t&)>& iteratee) const {$/;"	f	class:vg::MemoizingGraph
for_each_path_handle_impl	subgraph_overlay.cpp	/^bool PathSubgraphOverlay::for_each_path_handle_impl(const std::function<bool(const path_handle_t&)>& iteratee) const {$/;"	f	class:vg::PathSubgraphOverlay
for_each_path_handle_impl	vg.cpp	/^bool VG::for_each_path_handle_impl(const function<bool(const path_handle_t&)>& iteratee) const {$/;"	f	class:vg::VG
for_each_postorder	utility.hpp	/^    void for_each_postorder(function<void(Node*)> lambda) {$/;"	f	struct:vg::Tree
for_each_postorder	utility.hpp	/^    void for_each_postorder(function<void(TreeNode<T>*)> lambda) {$/;"	f	struct:vg::TreeNode
for_each_preorder	utility.hpp	/^    void for_each_preorder(function<void(Node*)> lambda) {$/;"	f	struct:vg::Tree
for_each_preorder	utility.hpp	/^    void for_each_preorder(function<void(TreeNode<T>*)> lambda) {$/;"	f	struct:vg::TreeNode
for_each_random_alignment	unittest/gbwt_extender.cpp	/^void for_each_random_alignment(const HandleGraph& graph, const vector<handle_t>& base_path, const std::function<void(const Path&, const std::string&)> iteratee) {$/;"	f	namespace:vg::unittest::__anon3
for_each_snarl_parallel	snarls.cpp	/^void SnarlManager::for_each_snarl_parallel(const function<void(const Snarl*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_snarl_preorder	snarls.cpp	/^void SnarlManager::for_each_snarl_preorder(const function<void(const Snarl*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_snarl_unindexed	snarls.cpp	/^void SnarlManager::for_each_snarl_unindexed(const function<void(const Snarl*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_stage	funnel.cpp	/^void Funnel::for_each_stage(const function<void(const string&, const vector<size_t>&, const double&)>& callback) const {$/;"	f	class:vg::Funnel
for_each_step_on_handle_impl	memoizing_graph.cpp	/^    bool MemoizingGraph::for_each_step_on_handle_impl(const handle_t& handle,$/;"	f	class:vg::MemoizingGraph
for_each_step_on_handle_impl	subgraph_overlay.cpp	/^bool PathSubgraphOverlay::for_each_step_on_handle_impl(const handle_t& handle,$/;"	f	class:vg::PathSubgraphOverlay
for_each_step_on_handle_impl	vg.cpp	/^bool VG::for_each_step_on_handle_impl(const handle_t& handle, const function<bool(const step_handle_t&)>& iteratee) const {$/;"	f	class:vg::VG
for_each_step_position_on_handle	memoizing_graph.cpp	/^    bool MemoizingGraph::for_each_step_position_on_handle(const handle_t& handle,$/;"	f	class:vg::MemoizingGraph
for_each_stream	path.cpp	/^void Paths::for_each_stream(istream& in, const function<void(Path&)>& lambda) {$/;"	f	class:vg::Paths
for_each_subpath_of	hts_alignment_emitter.cpp	/^static bool for_each_subpath_of(const PathPositionHandleGraph& graph, const string& path_name, const std::function<bool(const path_handle_t& path)>& iteratee) {$/;"	f	namespace:vg
for_each_top_level_chain	snarls.cpp	/^void SnarlManager::for_each_top_level_chain(const function<void(const Chain*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_top_level_chain_parallel	snarls.cpp	/^void SnarlManager::for_each_top_level_chain_parallel(const function<void(const Chain*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_top_level_snarl	snarls.cpp	/^void SnarlManager::for_each_top_level_snarl(const function<void(const Snarl*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_top_level_snarl_parallel	snarls.cpp	/^void SnarlManager::for_each_top_level_snarl_parallel(const function<void(const Snarl*)>& lambda) const {$/;"	f	class:vg::SnarlManager
for_each_walk	algorithms/walk.cpp	/^void for_each_walk(const HandleGraph& graph, size_t k, size_t edge_max,$/;"	f	namespace:vg::algorithms
force_fragment_length_distr	mapper.cpp	/^void PairedEndMapper::force_fragment_length_distr(double mean, double stddev) {$/;"	f	class:vg::PairedEndMapper
force_fragment_length_distr	minimizer_mapper.hpp	/^    void force_fragment_length_distr(double mean, double stdev) {$/;"	f	class:vg::MinimizerMapper
force_haplotype_count	multipath_mapper.hpp	/^        size_t force_haplotype_count = 0;$/;"	m	class:vg::MultipathMapper
force_parameters	mapper.cpp	/^void FragmentLengthDistribution::force_parameters(double mean, double stddev) {$/;"	f	class:vg::FragmentLengthDistribution
force_phasing	haplotype_indexer.hpp	/^    bool force_phasing = false;$/;"	m	class:vg::HaplotypeIndexer
forget	utility.cpp	/^void forget() {$/;"	f	namespace:vg::temp_file
forks	algorithms/kmer.hpp	/^    uint16_t forks; \/\/\/ how many branching edge crossings we took to get here$/;"	m	struct:vg::algorithms::kmer_t
forks	algorithms/prune.cpp	/^    uint16_t forks; \/\/\/ how many branching edge crossings we took to get here$/;"	m	struct:vg::algorithms::walk_t	file:
forks	algorithms/walk.hpp	/^    uint16_t forks; \/\/\/ how many branching edge crossings we took to get here$/;"	m	struct:vg::algorithms::walk_t
format	hts_alignment_emitter.hpp	/^    string format;$/;"	m	class:vg::HTSWriter
format	multipath_alignment_emitter.hpp	/^    output_format_t format;$/;"	m	class:vg::MultipathAlignmentEmitter
format	vectorizer.hpp	/^    template<typename T> string format(T v){$/;"	f	class:Vectorizer
format_multiplier	index_registry.cpp	/^double format_multiplier() {$/;"	f	namespace:vg
forward_graph	reverse_graph.hpp	/^        const HandleGraph* forward_graph = nullptr;$/;"	m	class:vg::ReverseGraph
forward_multiplier	cluster.hpp	/^    const int64_t forward_multiplier = 3;$/;"	m	class:vg::GreedyMinDistanceClusterer
forward_offset	minimizer_mapper.hpp	/^        inline size_t forward_offset() const {$/;"	f	struct:vg::MinimizerMapper::Minimizer
forward_only	sampler.hpp	/^    bool forward_only;$/;"	m	class:vg::Sampler
forward_pos	minimizer_mapper_from_chains.cpp	/^static pos_t forward_pos(const MinimizerMapper::Seed& seed, const VectorView<MinimizerMapper::Minimizer>& minimizers, const HandleGraph& graph) {$/;"	f	namespace:vg
forward_sequence	minimizer_mapper.hpp	/^        inline string forward_sequence() const {$/;"	f	struct:vg::MinimizerMapper::Minimizer
forwardize_breakpoints	augment.cpp	/^unordered_map<id_t, set<pos_t>> forwardize_breakpoints(const HandleGraph* graph,$/;"	f	namespace:vg
frac_score	readfilter.hpp	/^    bool frac_score = false;$/;"	m	class:vg::ReadFilter
frag_stats	mapper.hpp	/^    FragmentLengthStatistics frag_stats;$/;"	m	class:vg::Mapper
fragl_supports	filter.hpp	/^    int fragl_supports = 0;$/;"	m	struct:vg::BREAKPOINT
fragment	mem.hpp	/^    int fragment;$/;"	m	class:vg::MaximalExactMatch
fragment	minimizer_mapper.cpp	/^    size_t fragment;$/;"	m	struct:vg::alignment_index_t	file:
fragment	minimizer_mapper.cpp	/^    size_t fragment;$/;"	m	struct:vg::read_alignment_index_t	file:
fragment	recombinator.cpp	/^    size_t fragment;$/;"	m	struct:vg::RecombinatorHaplotype	file:
fragment	snarl_seed_clusterer.hpp	/^            size_t fragment; \/\/ Fragment id.$/;"	m	struct:vg::SnarlDistanceIndexClusterer::Cluster
fragment_best_left	snarl_seed_clusterer.hpp	/^            size_t fragment_best_left = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
fragment_best_right	snarl_seed_clusterer.hpp	/^            size_t fragment_best_right = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
fragment_direction	mapper.cpp	/^bool FragmentLengthStatistics::fragment_direction(void) {$/;"	f	class:vg::FragmentLengthStatistics
fragment_directions	mapper.hpp	/^    deque<bool> fragment_directions;$/;"	m	class:vg::FragmentLengthStatistics
fragment_distance_limit	snarl_seed_clusterer.hpp	/^            size_t fragment_distance_limit;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
fragment_distr_is_finalized	minimizer_mapper.hpp	/^    bool fragment_distr_is_finalized () {return fragment_length_distr.is_finalized();}$/;"	f	class:vg::MinimizerMapper
fragment_length_cache_size	mapper.hpp	/^    int64_t fragment_length_cache_size = 10000;$/;"	m	class:vg::FragmentLengthStatistics
fragment_length_distr	mapper.hpp	/^    FragmentLengthDistribution fragment_length_distr;$/;"	m	class:vg::PairedEndMapper
fragment_length_distr	minimizer_mapper.hpp	/^    FragmentLengthDistribution fragment_length_distr;$/;"	m	class:vg::MinimizerMapper
fragment_length_log_likelihood	multipath_mapper.cpp	/^    double MultipathMapper::fragment_length_log_likelihood(int64_t length) const {$/;"	f	class:vg::MultipathMapper
fragment_length_mean	mapper.cpp	/^double FragmentLengthStatistics::fragment_length_mean(void) {$/;"	f	class:vg::FragmentLengthStatistics
fragment_length_pdf	mapper.cpp	/^double FragmentLengthStatistics::fragment_length_pdf(double length) {$/;"	f	class:vg::FragmentLengthStatistics
fragment_length_pval	mapper.cpp	/^double FragmentLengthStatistics::fragment_length_pval(double length) {$/;"	f	class:vg::FragmentLengthStatistics
fragment_length_stdev	mapper.cpp	/^double FragmentLengthStatistics::fragment_length_stdev(void) {$/;"	f	class:vg::FragmentLengthStatistics
fragment_length_warning_factor	multipath_mapper.hpp	/^        size_t fragment_length_warning_factor = 0;$/;"	m	class:vg::MultipathMapper
fragment_lengths	mapper.hpp	/^    deque<double> fragment_lengths;$/;"	m	class:vg::FragmentLengthStatistics
fragment_max	mapper.hpp	/^    int64_t fragment_max = 10000; \/\/ the maximum length fragment which we will consider when estimating fragment lengths$/;"	m	class:vg::FragmentLengthStatistics
fragment_mean	sampler.hpp	/^    const double fragment_mean;$/;"	m	class:vg::NGSSimulator
fragment_model_str	mapper.cpp	/^string FragmentLengthStatistics::fragment_model_str(void) {$/;"	f	class:vg::FragmentLengthStatistics
fragment_model_update_interval	mapper.hpp	/^    int64_t fragment_model_update_interval = 100;$/;"	m	class:vg::FragmentLengthStatistics
fragment_orientation	mapper.cpp	/^bool FragmentLengthStatistics::fragment_orientation(void) {$/;"	f	class:vg::FragmentLengthStatistics
fragment_orientations	mapper.hpp	/^    deque<bool> fragment_orientations;$/;"	m	class:vg::FragmentLengthStatistics
fragment_sd	sampler.hpp	/^    const double fragment_sd;$/;"	m	class:vg::NGSSimulator
fragment_sigma	mapper.hpp	/^    double fragment_sigma = 10; \/\/ the number of times the standard deviation above the mean to set the fragment_size$/;"	m	class:vg::FragmentLengthStatistics
fragment_size	mapper.hpp	/^    int64_t fragment_size = 0; \/\/ Used to bound clustering of MEMs during paired end mapping, also acts as sentinel to determine$/;"	m	class:vg::FragmentLengthStatistics
fragment_union_find	snarl_seed_clusterer.hpp	/^            structures::UnionFind fragment_union_find;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
fragments	recombinator.hpp	/^        size_t fragments = 0;$/;"	m	struct:vg::Recombinator::Statistics
frequency	mcmc_genotyper.hpp	/^    const int frequency; \/\/frequency we remake gamma set$/;"	m	class:vg::MCMCGenotyper
frequent	recombinator.hpp	/^    enum kmer_presence { absent, heterozygous, present, frequent };$/;"	e	enum:vg::Recombinator::kmer_presence
from_backing	extra_node_graph.hpp	/^    inline handle_t from_backing(const handle_t& backing_handle) const {$/;"	f	class:vg::ExtraNodeGraph
from_backing	reverse_graph.hpp	/^        inline handle_t from_backing(const handle_t& backing_handle) const {$/;"	f	class:vg::ReverseGraph
from_backing	source_sink_overlay.hpp	/^    inline handle_t from_backing(const handle_t& backing_handle) const {$/;"	f	class:vg::SourceSinkOverlay
from_big_endian	endianness.hpp	/^    inline IntType endianness<IntType>::from_big_endian(IntType value) {$/;"	f	class:vg::endianness
from_extension	gbwt_extender.cpp	/^WFAAlignment WFAAlignment::from_extension(const GaplessExtension& extension) {$/;"	f	class:vg::WFAAlignment
from_handle_graph	graph.cpp	/^void from_handle_graph(const HandleGraph& from, Graph& to) {$/;"	f	namespace:vg
from_hit	splicing.cpp	/^multipath_alignment_t from_hit(const Alignment& alignment, const HandleGraph& graph,$/;"	f	namespace:vg
from_istream	vg.cpp	/^void VG::from_istream(istream& in, bool showp, bool warn_on_duplicates) {$/;"	f	class:vg::VG
from_key_value	gbwt_extender.cpp	/^    static WFAPoint from_key_value(const key_type& key, const value_type& value) {$/;"	f	struct:vg::WFAPoint
from_length	path.cpp	/^int from_length(const Mapping& m) {$/;"	f	namespace:vg
from_length	path.hpp	/^inline int32_t edit_t::from_length() const {$/;"	f	class:vg::edit_t
from_length_after_pos	alignment.cpp	/^size_t from_length_after_pos(const Alignment& aln, const Position& pos) {$/;"	f	namespace:vg
from_length_before_pos	alignment.cpp	/^size_t from_length_before_pos(const Alignment& aln, const Position& pos) {$/;"	f	namespace:vg
from_map_entry	gbwt_extender.cpp	/^    static WFAPoint from_map_entry(const map_entry_type& entry) {$/;"	f	struct:vg::WFAPoint
from_node_id	banded_global_aligner.hpp	/^        const int64_t from_node_id;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack::Deflection
from_path_handle_graph	graph.cpp	/^void from_path_handle_graph(const PathHandleGraph& from, Graph& to) {$/;"	f	namespace:vg
from_proto_edit	path.cpp	/^void from_proto_edit(const Edit& proto_edit, edit_t& edit) {$/;"	f	namespace:vg
from_proto_mapping	path.cpp	/^void from_proto_mapping(const Mapping& proto_mapping, path_mapping_t& mapping) {$/;"	f	namespace:vg
from_proto_multipath_alignment	multipath_alignment.cpp	/^    void from_proto_multipath_alignment(const MultipathAlignment& proto_multipath_aln,$/;"	f	namespace:vg
from_proto_path	path.cpp	/^void from_proto_path(const Path& proto_path, path_t& path) {$/;"	f	namespace:vg
from_proto_position	position.cpp	/^void from_proto_position(const Position& from, position_t& to) {$/;"	f	namespace:vg
from_simple_reverse	flow_sort.cpp	/^id_t FlowSort::from_simple_reverse(Edge* &e)$/;"	f	class:vg::FlowSort
from_simple_reverse_orientation	flow_sort.cpp	/^id_t FlowSort::from_simple_reverse_orientation(Edge* &e)$/;"	f	class:vg::FlowSort
from_turtle	vg.cpp	/^void VG::from_turtle(string filename, string base_uri, bool showp) {$/;"	f	class:vg::VG
frontier	incremental_subgraph.hpp	/^    set<tuple<int64_t, handle_t, unordered_set<handle_t>*, vector<size_t>*>, FCmp> frontier;$/;"	m	class:vg::IncrementalSubgraph
frontier_copy_limit	incremental_subgraph.hpp	/^    size_t frontier_copy_limit;$/;"	m	class:vg::IncrementalSubgraph
frontier_count	incremental_subgraph.hpp	/^    unordered_map<handle_t, size_t> frontier_count;$/;"	m	class:vg::IncrementalSubgraph
frontier_index	incremental_subgraph.hpp	/^    unordered_map<handle_t, unordered_map<handle_t, set<decltype(frontier)::iterator, IterFCmp>>> frontier_index;$/;"	m	class:vg::IncrementalSubgraph
full	gbwt_extender.hpp	/^    bool full() const { return (this->left_full & this->right_full); }$/;"	f	struct:vg::GaplessExtension
fullTrace	crash.cpp	/^bool fullTrace = false;$/;"	m	namespace:vg	file:
full_haplotype	recombinator.hpp	/^            full_haplotype = 3$/;"	m	struct:vg::Haplotypes::Subchain	typeref:enum:vg::Haplotypes::Subchain::
full_haplotypes	recombinator.hpp	/^        size_t full_haplotypes = 0;$/;"	m	struct:vg::Recombinator::Statistics
full_length_bonus	aligner.hpp	/^        int8_t full_length_bonus;$/;"	m	class:vg::GSSWAligner
full_length_bonus	subcommand/giraffe_main.cpp	/^    int8_t full_length_bonus = default_full_length_bonus;$/;"	m	struct:ScoringOptions	file:
full_length_extensions	gbwt_extender.cpp	/^bool GaplessExtender::full_length_extensions(const std::vector<GaplessExtension>& result, size_t max_mismatches) {$/;"	f	class:vg::GaplessExtender
full_length_match	unittest/gbwt_extender.cpp	/^void full_length_match(const std::vector<std::pair<pos_t, size_t>>& seeds, const std::string& read, const std::vector<std::pair<pos_t, std::string>>& correct_alignment, const GaplessExtender& extender, size_t error_bound, bool check_seeds) {$/;"	f	namespace:vg::unittest::__anon3
full_length_matches	unittest/gbwt_extender.cpp	/^void full_length_matches(const std::vector<std::pair<pos_t, size_t>>& seeds, const std::string& read, const std::vector<std::vector<std::pair<pos_t, std::string>>>& correct_alignments, const GaplessExtender& extender, size_t error_bound, double overlap_threshold) {$/;"	f	namespace:vg::unittest::__anon3
fuse_spliced_alignments	splicing.cpp	/^multipath_alignment_t&& fuse_spliced_alignments(const Alignment& alignment,$/;"	f	namespace:vg
gaf	subcommand/gamsort_main.cpp	/^    gafkluge::GafRecord gaf;$/;"	m	struct:GafFile	file:
gaf_output	graph_caller.hpp	/^    bool gaf_output;$/;"	m	class:vg::FlowCaller
gaf_output	graph_caller.hpp	/^    bool gaf_output;$/;"	m	class:vg::NestedFlowCaller
gaf_output	graph_caller.hpp	/^    bool gaf_output;$/;"	m	class:vg::VCFGenotyper
gaf_sample_name	graph_caller.hpp	/^    string gaf_sample_name;$/;"	m	class:vg::GAFOutputCaller
gam_format	subcommand/gbwt_main.cpp	/^    bool gam_format = false, inputs_as_jobs = false, parse_only = false;$/;"	m	struct:GBWTConfig	file:
gamma_freq	unittest/mcmc_genotyper.cpp	/^        const int gamma_freq = 50;$/;"	m	namespace:vg::unittest	file:
gamma_ln	statistics.hpp	/^inline real_t gamma_ln(real_t x) {$/;"	f	namespace:vg
gap_extend	gbwt_extender.cpp	/^    int32_t mismatch, gap_open, gap_extend;$/;"	m	class:vg::WFATree	file:
gap_extend	subcommand/giraffe_main.cpp	/^    int8_t gap_extend = default_gap_extension;$/;"	m	struct:ScoringOptions	file:
gap_extend_penalty	gbwt_extender.cpp	/^    int32_t gap_extend_penalty(uint32_t length) const {$/;"	f	class:vg::WFATree
gap_extension	aligner.hpp	/^        int8_t gap_extension;$/;"	m	class:vg::GSSWAligner
gap_extension	deletion_aligner.hpp	/^    int32_t gap_extension;$/;"	m	class:vg::DeletionAligner
gap_extension	ssw_aligner.hpp	/^    uint8_t gap_extension;$/;"	m	class:vg::SSWAligner
gap_length	gbwt_extender.hpp	/^        Event gap_length;$/;"	m	struct:vg::WFAExtender::ErrorModel
gap_memo_max_size	multipath_mapper.cpp	/^    const size_t MultipathMapper::gap_memo_max_size = 1000;$/;"	m	class:vg::MultipathMapper	file:
gap_memo_max_size	multipath_mapper.hpp	/^        static const size_t gap_memo_max_size;$/;"	m	class:vg::MultipathMapper
gap_open	aligner.hpp	/^        int8_t gap_open;$/;"	m	class:vg::GSSWAligner
gap_open	deletion_aligner.hpp	/^    int32_t gap_open;$/;"	m	class:vg::DeletionAligner
gap_open	gbwt_extender.cpp	/^    int32_t mismatch, gap_open, gap_extend;$/;"	m	class:vg::WFATree	file:
gap_open	ssw_aligner.hpp	/^    uint8_t gap_open;$/;"	m	class:vg::SSWAligner
gap_open	subcommand/giraffe_main.cpp	/^    int8_t gap_open = default_gap_open;$/;"	m	struct:ScoringOptions	file:
gap_penalty	gbwt_extender.cpp	/^    int32_t gap_penalty(uint32_t length) const {$/;"	f	class:vg::WFATree
gap_penalty	minimizer_mapper.cpp	/^static int32_t gap_penalty(size_t length, const Aligner* aligner) {$/;"	f	namespace:vg
gap_penalty	minimizer_mapper.cpp	/^static int32_t gap_penalty(size_t start, size_t limit, const Aligner* aligner) {$/;"	f	namespace:vg
gapless_extender_graph	unittest/gbwt_extender.cpp	/^const std::string gapless_extender_graph = R"($/;"	m	namespace:vg::unittest::__anon3	file:
gaps	gbwt_extender.hpp	/^        Event gaps;$/;"	m	struct:vg::WFAExtender::ErrorModel
gbwt	traversal_finder.hpp	/^    const gbwt::GBWT& gbwt;$/;"	m	class:vg::GBWTTraversalFinder
gbwt_buffer_size	haplotype_indexer.hpp	/^    size_t gbwt_buffer_size = gbwt::DynamicGBWT::INSERT_BATCH_SIZE \/ gbwt::MILLION;$/;"	m	class:vg::HaplotypeIndexer
gbwt_graph	minimizer_mapper.hpp	/^    const gbwtgraph::GBWTGraph& gbwt_graph;$/;"	m	class:vg::MinimizerMapper
gbwt_graph	subcommand/gbwt_main.cpp	/^    std::unique_ptr<gbwtgraph::GBWTGraph> gbwt_graph = nullptr;$/;"	m	struct:GraphHandler	file:
gbwt_index	phase_unfolder.hpp	/^    const gbwt::GBWT& gbwt_index;$/;"	m	class:vg::PhaseUnfolder
gbwt_insert_batch_size	index_registry.cpp	/^int64_t IndexingParameters::gbwt_insert_batch_size = gbwt::DynamicGBWT::INSERT_BATCH_SIZE;$/;"	m	class:vg::IndexingParameters	file:
gbwt_insert_batch_size	index_registry.hpp	/^    static int64_t gbwt_insert_batch_size;$/;"	m	struct:vg::IndexingParameters
gbwt_insert_batch_size_increase_factor	index_registry.cpp	/^int IndexingParameters::gbwt_insert_batch_size_increase_factor = 10;$/;"	m	class:vg::IndexingParameters	file:
gbwt_insert_batch_size_increase_factor	index_registry.hpp	/^    static int gbwt_insert_batch_size_increase_factor;$/;"	m	struct:vg::IndexingParameters
gbwt_name	subcommand/gbwt_main.cpp	/^    std::string gbwt_name; \/\/ There is a single input GBWT to load.$/;"	m	struct:GBWTConfig	file:
gbwt_node_width	gbwt_helper.cpp	/^gbwt::size_type gbwt_node_width(const HandleGraph& graph) {$/;"	f	namespace:vg
gbwt_output	subcommand/gbwt_main.cpp	/^    std::string gbwt_output; \/\/ Output GBWT.$/;"	m	struct:GBWTConfig	file:
gbwt_reference_samples	deconstructor.hpp	/^    unordered_set<string> gbwt_reference_samples;$/;"	m	class:vg::Deconstructor
gbwt_sample_to_phase_range	deconstructor.hpp	/^    unordered_map<string, pair<int, int>> gbwt_sample_to_phase_range;$/;"	m	class:vg::Deconstructor
gbwt_sampling_interval	index_registry.cpp	/^int IndexingParameters::gbwt_sampling_interval = gbwt::DynamicGBWT::SAMPLE_INTERVAL;$/;"	m	class:vg::IndexingParameters	file:
gbwt_sampling_interval	index_registry.hpp	/^    static int gbwt_sampling_interval;$/;"	m	struct:vg::IndexingParameters
gbwt_thread_t	haplotypes.cpp	/^gbwt_thread_t::gbwt_thread_t() {$/;"	f	class:haplo::gbwt_thread_t
gbwt_thread_t	haplotypes.cpp	/^gbwt_thread_t::gbwt_thread_t(const gbwt::vector_type& nodes, const vector<size_t>& node_lengths) : nodes(nodes), node_lengths(node_lengths) {$/;"	f	class:haplo::gbwt_thread_t
gbwt_thread_t	haplotypes.hpp	/^struct gbwt_thread_t {$/;"	s	namespace:haplo
gbwt_to_handle	gbwt_helper.hpp	/^inline handle_t gbwt_to_handle(const HandleGraph& graph, gbwt::node_type node) {$/;"	f	namespace:vg
gbwt_to_pos	gbwt_helper.hpp	/^inline pos_t gbwt_to_pos(gbwt::node_type node, size_t offset) {$/;"	f	namespace:vg
gbwt_trav_finder	deconstructor.hpp	/^    unique_ptr<GBWTTraversalFinder> gbwt_trav_finder;$/;"	m	class:vg::Deconstructor
gbwtgraph_name	subcommand/gbwt_main.cpp	/^    std::string gbwtgraph_name;$/;"	m	struct:GBWTConfig	file:
gbz	gbzgraph.hpp	/^    gbwtgraph::GBZ gbz;$/;"	m	class:vg::GBZGraph
gbz	recombinator.hpp	/^    const gbwtgraph::GBZ& gbz;$/;"	m	class:vg::HaplotypePartitioner
gbz	recombinator.hpp	/^    const gbwtgraph::GBZ& gbz;$/;"	m	class:vg::Recombinator
gbz_format	subcommand/gbwt_main.cpp	/^    bool gbz_format = false;$/;"	m	struct:GBWTConfig	file:
gbz_output	subcommand/haplotypes_main.cpp	/^    std::string gbz_output, haplotype_output, score_output, kmer_output;$/;"	m	struct:HaplotypesConfig	file:
gc_content_estimate	aligner.hpp	/^        double gc_content_estimate;$/;"	m	class:vg::AlignerClient
gcsa	mapper.hpp	/^    gcsa::GCSA* gcsa = nullptr;$/;"	m	class:vg::BaseMapper
gcsa_doubling_steps	index_registry.cpp	/^int IndexingParameters::gcsa_doubling_steps = gcsa::ConstructionParameters::DOUBLING_STEPS;$/;"	m	class:vg::IndexingParameters	file:
gcsa_doubling_steps	index_registry.hpp	/^    static int gcsa_doubling_steps;$/;"	m	struct:vg::IndexingParameters
gcsa_ind	filter.hpp	/^        gcsa::GCSA* gcsa_ind;$/;"	m	class:vg::Filter
gcsa_initial_kmer_length	index_registry.cpp	/^int IndexingParameters::gcsa_initial_kmer_length = gcsa::Key::MAX_LENGTH;$/;"	m	class:vg::IndexingParameters	file:
gcsa_initial_kmer_length	index_registry.hpp	/^    static int gcsa_initial_kmer_length;$/;"	m	struct:vg::IndexingParameters
gcsa_nodes_to_positions	mapper.cpp	/^set<pos_t> gcsa_nodes_to_positions(const vector<gcsa::node_type>& nodes) {$/;"	f	namespace:vg
gcsa_size_limit	index_registry.cpp	/^int64_t IndexingParameters::gcsa_size_limit = 2ll * 1024ll * 1024ll * 1024ll * 1024ll;$/;"	m	class:vg::IndexingParameters	file:
gcsa_size_limit	index_registry.hpp	/^    static int64_t gcsa_size_limit;$/;"	m	struct:vg::IndexingParameters
gen_flat_node	haplotypes.hpp	/^  typedef size_t gen_flat_node;$/;"	t	struct:haplo::haplo_DP_rectangle
gen_range_t	haplotypes.hpp	/^  typedef pair<size_t, size_t> gen_range_t;$/;"	t	struct:haplo::haplo_DP_rectangle
generalizations	index_registry.hpp	/^    map<RecipeName, RecipeName> generalizations;$/;"	m	class:vg::IndexRegistry
generate_continuous_uniform	mcmc_genotyper.cpp	/^    double MCMCGenotyper::generate_continuous_uniform(const double a, const double b)const{$/;"	f	class:vg::MCMCGenotyper
generate_discrete_uniform	mcmc_genotyper.cpp	/^    int MCMCGenotyper::generate_discrete_uniform(minstd_rand0& random_engine, int lower_bound , int upper_bound) const{$/;"	f	class:vg::MCMCGenotyper
generate_from_wide_generator	statistics.hpp	/^    T generate_from_wide_generator(Generator &_g) {$/;"	f	class:vg::uniform_int_distribution
generate_haplotype	recombinator.cpp	/^std::string generate_haplotype(gbwt::edge_type pos, handle_t end, size_t start_max, size_t end_max, const gbwtgraph::GBWTGraph& graph) {$/;"	f	namespace:vg
generate_haplotypes	recombinator.cpp	/^Recombinator::Statistics Recombinator::generate_haplotypes(const Haplotypes::TopLevelChain& chain,$/;"	f	class:vg::Recombinator
generate_haplotypes	recombinator.cpp	/^gbwt::GBWT Recombinator::generate_haplotypes(const Haplotypes& haplotypes, const std::string& kff_file, const Parameters& parameters) const {$/;"	f	class:vg::Recombinator
generate_initial_guess	mcmc_genotyper.cpp	/^    unique_ptr<PhasedGenome> MCMCGenotyper::generate_initial_guess()const{$/;"	f	class:vg::MCMCGenotyper
generate_paths	phase_unfolder.cpp	/^void PhaseUnfolder::generate_paths(MutableHandleGraph& component, vg::id_t from) {$/;"	f	class:vg::PhaseUnfolder
generate_threads	phase_unfolder.cpp	/^void PhaseUnfolder::generate_threads(MutableHandleGraph& component, vg::id_t from) {$/;"	f	class:vg::PhaseUnfolder
genome	mcmc_caller.hpp	/^        PhasedGenome& genome;$/;"	m	class:vg::MCMCCaller
genotype	snarl_caller.cpp	/^pair<vector<int>, unique_ptr<SnarlCaller::CallInfo>> PoissonSupportSnarlCaller::genotype(const Snarl& snarl,$/;"	f	class:vg::PoissonSupportSnarlCaller
genotype	snarl_caller.cpp	/^pair<vector<int>, unique_ptr<SnarlCaller::CallInfo>> RatioSupportSnarlCaller::genotype(const Snarl& snarl,$/;"	f	class:vg::RatioSupportSnarlCaller
genotype_by_ploidy	graph_caller.hpp	/^        vector<pair<vector<int>, unique_ptr<SnarlCaller::CallInfo>>> genotype_by_ploidy;$/;"	m	struct:vg::NestedFlowCaller::CallRecord
genotype_likelihood	snarl_caller.cpp	/^double PoissonSupportSnarlCaller::genotype_likelihood(const vector<int>& genotype,$/;"	f	class:vg::PoissonSupportSnarlCaller
genotype_snarl	genotyper.cpp	/^Locus Genotyper::genotype_snarl(VG& graph,$/;"	f	class:vg::Genotyper
genotype_snarls	graph_caller.hpp	/^    bool genotype_snarls;$/;"	m	class:vg::FlowCaller
genotype_snarls	graph_caller.hpp	/^    bool genotype_snarls;$/;"	m	class:vg::NestedFlowCaller
genotype_svs	variant_recall.cpp	/^void genotype_svs(VG* graph,$/;"	f	namespace:vg
geometric_sampling_prob_ln	statistics.hpp	/^real_t geometric_sampling_prob_ln(ProbIn success_logprob, size_t trials) {$/;"	f	namespace:vg
get	annotation.hpp	/^const google::protobuf::Struct& Annotation<T, Enabled>::get(const T& t) {$/;"	f	class:vg::Annotation
get	gbzgraph.hpp	/^    inline const gbwtgraph::GBWTGraph* get() const {$/;"	f	class:vg::GBZGraph
get	gbzgraph.hpp	/^    inline gbwtgraph::GBWTGraph* get() {$/;"	f	class:vg::GBZGraph
get	subcommand/subcommand.cpp	/^const Subcommand* Subcommand::get(int argc, char** argv) {$/;"	f	class:vg::subcommand::Subcommand
get	vcf_buffer.cpp	/^tuple<vector<vcflib::Variant*>, vcflib::Variant*, vector<vcflib::Variant*>> WindowedVcfBuffer::get() {$/;"	f	class:vg::WindowedVcfBuffer
get	vcf_buffer.cpp	/^vcflib::Variant* VcfBuffer::get() {$/;"	f	class:vg::VcfBuffer
getReachableBridges	cactus.cpp	/^void getReachableBridges(stCactusEdgeEnd *edgeEnd1, stList *bridgeEnds) {$/;"	f	namespace:vg
getReachableBridges2	cactus.cpp	/^void getReachableBridges2(stCactusEdgeEnd *edgeEnd1,$/;"	f	namespace:vg
get_SNP_ref_position	haplotypes.cpp	/^int64_t linear_haplo_structure::get_SNP_ref_position(size_t node_id) const {$/;"	f	class:haplo::linear_haplo_structure
get_SNV_allele	haplotypes.cpp	/^alleleValue linear_haplo_structure::get_SNV_allele(int64_t node_id) const {$/;"	f	class:haplo::linear_haplo_structure
get_adaptive_min_reseed_length	mapper.cpp	/^size_t BaseMapper::get_adaptive_min_reseed_length(size_t parent_mem_length) {$/;"	f	class:vg::BaseMapper
get_affinities	genotyper.cpp	/^    Genotyper::get_affinities(AugmentedGraph& aug,$/;"	f	class:vg::Genotyper
get_affinities_fast	genotyper.cpp	/^Genotyper::get_affinities_fast(AugmentedGraph& aug,$/;"	f	class:vg::Genotyper
get_aligner	aligner.cpp	/^const GSSWAligner* AlignerClient::get_aligner(bool have_qualities) const {$/;"	f	class:vg::AlignerClient
get_alignment	unittest/gbwt_extender.cpp	/^Alignment get_alignment(const std::vector<std::pair<pos_t, std::string>>& mappings, const std::string& sequence) {$/;"	f	namespace:vg::unittest::__anon3
get_alignment_emitter	hts_alignment_emitter.cpp	/^unique_ptr<AlignmentEmitter> get_alignment_emitter(const string& filename, const string& format,$/;"	f	namespace:vg
get_alignment_start	banded_global_aligner.cpp	/^inline void BandedGlobalAligner<IntType>::AltTracebackStack::get_alignment_start(int64_t& node_id, matrix_t& matrix) {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
get_alignments	genotypekit.cpp	/^vector<const Alignment*> AugmentedGraph::get_alignments() const {$/;"	f	class:vg::AugmentedGraph
get_alignments	genotypekit.cpp	/^vector<const Alignment*> AugmentedGraph::get_alignments(id_t node_id) const {$/;"	f	class:vg::AugmentedGraph
get_alignments	genotypekit.cpp	/^vector<const Alignment*> AugmentedGraph::get_alignments(pair<NodeSide, NodeSide> edge) const {$/;"	f	class:vg::AugmentedGraph
get_allele	phased_genome.cpp	/^    vector<NodeTraversal> PhasedGenome::get_allele(const Snarl& site, int which_haplotype) {$/;"	f	class:vg::PhasedGenome
get_alleles	deconstructor.cpp	/^vector<int> Deconstructor::get_alleles(vcflib::Variant& v,$/;"	f	class:vg::Deconstructor
get_alt_path	traversal_finder.cpp	/^pair<SnarlTraversal, vector<edge_t>> VCFTraversalFinder::get_alt_path(vcflib::Variant* var, int allele,$/;"	f	class:vg::VCFTraversalFinder
get_alt_traversal	traversal_finder.cpp	/^pair <SnarlTraversal, bool> VCFTraversalFinder::get_alt_traversal(const Snarl& site,$/;"	f	class:vg::VCFTraversalFinder
get_annotation	annotation.hpp	/^inline AnnotationType get_annotation(Annotated* annotated, const string& name) {$/;"	f	namespace:vg
get_annotation	annotation.hpp	/^inline AnnotationType get_annotation(const Annotated& annotated, const string& name) {$/;"	f	namespace:vg
get_annotation	multipath_alignment.cpp	/^    multipath_alignment_t::get_annotation(const string& annotation_name) const {$/;"	f	class:vg::multipath_alignment_t
get_any_graph	subcommand/gbwt_main.cpp	/^const PathHandleGraph* GraphHandler::get_any_graph(const GBWTConfig& config) {$/;"	f	class:GraphHandler
get_average_traversal_support_switch_threshold	traversal_support.cpp	/^size_t TraversalSupportFinder::get_average_traversal_support_switch_threshold() const {$/;"	f	class:vg::TraversalSupportFinder
get_avg_baseq	augment.cpp	/^double get_avg_baseq(const Edit& edit, const string& base_quals, size_t position_in_read) {$/;"	f	namespace:vg
get_avg_node_mapq	traversal_support.cpp	/^size_t CachedPackedTraversalSupportFinder::get_avg_node_mapq(id_t node) const {$/;"	f	class:vg::CachedPackedTraversalSupportFinder
get_avg_node_mapq	traversal_support.cpp	/^size_t PackedTraversalSupportFinder::get_avg_node_mapq(id_t node) const {$/;"	f	class:vg::PackedTraversalSupportFinder
get_avg_node_mapq	unittest/traversal_support.cpp	/^    virtual size_t get_avg_node_mapq(id_t node) const {$/;"	f	class:vg::unittest::TestTraversalSupportFinder
get_avg_node_support	traversal_support.cpp	/^Support CachedPackedTraversalSupportFinder::get_avg_node_support(id_t node) const {$/;"	f	class:vg::CachedPackedTraversalSupportFinder
get_avg_node_support	traversal_support.cpp	/^Support PackedTraversalSupportFinder::get_avg_node_support(id_t node) const {$/;"	f	class:vg::PackedTraversalSupportFinder
get_avg_node_support	unittest/traversal_support.cpp	/^    virtual Support get_avg_node_support(id_t node) const {$/;"	f	class:vg::unittest::TestTraversalSupportFinder
get_back_graph_node_name	algorithms/gfa_to_handle.cpp	/^std::string GFAIDMapInfo::get_back_graph_node_name(const nid_t& back_node_id) const {$/;"	f	class:vg::algorithms::GFAIDMapInfo
get_back_graph_node_name	flat_file_back_translation.cpp	/^std::string FlatFileBackTranslation::get_back_graph_node_name(const nid_t& back_node_id) const {$/;"	f	class:vg::FlatFileBackTranslation
get_back_graph_node_name	unittest/back_translate.cpp	/^    std::string get_back_graph_node_name(const nid_t& back_node_id) const {$/;"	f	class:vg::unittest::MockBackTranslation
get_base	incremental_subgraph.cpp	/^char IncrementalSubgraph::get_base(const handle_t& handle, size_t index) const {$/;"	f	class:vg::IncrementalSubgraph
get_base	splicing.cpp	/^char JoinedSpliceGraph::get_base(const handle_t& handle, size_t index) const {$/;"	f	class:vg::JoinedSpliceGraph
get_base	vg.cpp	/^char VG::get_base(const handle_t& handle, size_t index) const {$/;"	f	class:vg::VG
get_base_gbwt_path_name	transcriptome.cpp	/^string Transcriptome::get_base_gbwt_path_name(const gbwt::GBWT & haplotype_index, const size_t path_id, const unordered_set<string> & gbwt_reference_samples) const {$/;"	f	class:vg::Transcriptome
get_best_alignment_against_any_tree	minimizer_mapper.cpp	/^pair<Path, size_t> MinimizerMapper::get_best_alignment_against_any_tree(const vector<TreeSubgraph>& trees,$/;"	f	class:vg::MinimizerMapper
get_best_gbwtgraph_gfa_parsing_parameters	gbwtgraph_helper.cpp	/^gbwtgraph::GFAParsingParameters get_best_gbwtgraph_gfa_parsing_parameters() {$/;"	f	namespace:vg
get_best_support	snarl_caller.cpp	/^int SupportBasedSnarlCaller::get_best_support(const vector<Support>& supports, const vector<int>& skips) {$/;"	f	class:vg::SupportBasedSnarlCaller
get_bias	snarl_caller.cpp	/^double RatioSupportSnarlCaller::get_bias(const vector<int>& traversal_sizes, int best_trav,$/;"	f	class:vg::RatioSupportSnarlCaller
get_bin_size	packer.cpp	/^size_t Packer::get_bin_size(void) const {$/;"	f	class:vg::Packer
get_bounds	constructor.cpp	/^    pair<int64_t, int64_t> Constructor::get_bounds(const vector<list<vcflib::VariantAllele>>& trimmed_variant) {$/;"	f	class:vg::Constructor
get_buckets	cluster.cpp	/^vector<vector<size_t>> PathOrientedDistanceMeasurer::get_buckets(const function<pos_t(size_t)>& get_position, size_t num_items) {$/;"	f	class:vg::PathOrientedDistanceMeasurer
get_buckets	cluster.cpp	/^vector<vector<size_t>> SnarlOrientedDistanceMeasurer::get_buckets(const function<pos_t(size_t)>& get_position, size_t num_items) {$/;"	f	class:vg::SnarlOrientedDistanceMeasurer
get_category	subcommand/subcommand.cpp	/^const CommandCategory& Subcommand::get_category() const {$/;"	f	class:vg::subcommand::Subcommand
get_cc_in_wg	flow_sort.cpp	/^vector<set<id_t>> FlowSort::get_cc_in_wg(EdgeMapping& edges_in,EdgeMapping& edges_out,$/;"	f	class:vg::FlowSort
get_center	variant_adder.cpp	/^size_t VariantAdder::get_center(const vcflib::Variant& variant) {$/;"	f	class:vg::VariantAdder
get_center_and_radius	variant_adder.cpp	/^pair<size_t, size_t> VariantAdder::get_center_and_radius(const vector<vcflib::Variant*>& variants) {$/;"	f	class:vg::VariantAdder
get_child_support	traversal_support.cpp	/^tuple<Support, Support, int> NestedCachedPackedTraversalSupportFinder::get_child_support(const Snarl& snarl) const {$/;"	f	class:vg::NestedCachedPackedTraversalSupportFinder
get_child_support	traversal_support.cpp	/^tuple<Support, Support, int> TraversalSupportFinder::get_child_support(const Snarl& snarl) const {$/;"	f	class:vg::TraversalSupportFinder
get_clipped_position	filter.cpp	/^    Position Filter::get_clipped_position(Alignment& a){$/;"	f	class:vg::Filter
get_clipped_ref_position	filter.cpp	/^    int64_t Filter::get_clipped_ref_position(Alignment& a){$/;"	f	class:vg::Filter
get_clipped_seq	filter.cpp	/^    string Filter::get_clipped_seq(Alignment& a){$/;"	f	class:vg::Filter
get_cluster_pairs	multipath_mapper.cpp	/^    vector<pair<pair<size_t, size_t>, int64_t>> MultipathMapper::get_cluster_pairs(const Alignment& alignment1,$/;"	f	class:vg::MultipathMapper
get_clusters	multipath_mapper.cpp	/^    vector<MultipathMapper::memcluster_t> MultipathMapper::get_clusters(const Alignment& alignment, const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::MultipathMapper
get_codename	version.cpp	/^string Version::get_codename() {$/;"	f	class:vg::Version
get_connected_components	multipath_alignment_graph.cpp	/^    vector<vector<id_t>> MultipathAlignmentGraph::get_connected_components() const {$/;"	f	class:vg::MultipathAlignmentGraph
get_contained_orientations	path_index.cpp	/^pair<bool, bool> PathIndex::get_contained_orientations(int64_t node_id) const {$/;"	f	class:vg::PathIndex
get_containing_region	clip.cpp	/^static tuple<const Region*, step_handle_t, step_handle_t, int64_t, int64_t, bool> get_containing_region(const PathPositionHandleGraph* graph,$/;"	f	namespace:vg
get_context	deconstructor.cpp	/^vector<nid_t> Deconstructor::get_context($/;"	f	class:vg::Deconstructor
get_create_path	path.cpp	/^list<mapping_t>& Paths::get_create_path(const string& name) {$/;"	f	class:vg::Paths
get_created_handle	extra_node_graph.cpp	/^handle_t ExtraNodeGraph::get_created_handle() const {$/;"	f	class:vg::ExtraNodeGraph
get_current_column	haplotypes.cpp	/^haplo_DP_column* haplo_DP::get_current_column() {$/;"	f	class:haplo::haplo_DP
get_current_vmem_kb	memusage.cpp	/^size_t get_current_vmem_kb() {$/;"	f	namespace:vg
get_cut_segments	multipath_alignment_graph.cpp	/^    vector<pair<size_t, size_t>> MultipathAlignmentGraph::get_cut_segments(path_t& path,$/;"	f	class:vg::MultipathAlignmentGraph
get_default_giraffe_indexes	index_registry.cpp	/^vector<IndexName> VGIndexes::get_default_giraffe_indexes() {$/;"	f	class:vg::VGIndexes
get_default_map_indexes	index_registry.cpp	/^vector<IndexName> VGIndexes::get_default_map_indexes() {$/;"	f	class:vg::VGIndexes
get_default_mpmap_indexes	index_registry.cpp	/^vector<IndexName> VGIndexes::get_default_mpmap_indexes() {$/;"	f	class:vg::VGIndexes
get_default_rpvg_indexes	index_registry.cpp	/^vector<IndexName> VGIndexes::get_default_rpvg_indexes() {$/;"	f	class:vg::VGIndexes
get_default_threads	subcommand/minimizer_main.cpp	/^int get_default_threads() {$/;"	f
get_default_value	option.hpp	/^    virtual string get_default_value() const {$/;"	f	class:vg::BaseOption
get_degree	extra_node_graph.cpp	/^size_t ExtraNodeGraph::get_degree(const handle_t& handle, bool go_left) const {$/;"	f	class:vg::ExtraNodeGraph
get_degree	incremental_subgraph.cpp	/^size_t IncrementalSubgraph::get_degree(const handle_t& handle, bool go_left) const {$/;"	f	class:vg::IncrementalSubgraph
get_degree	source_sink_overlay.cpp	/^size_t SourceSinkOverlay::get_degree(const handle_t& handle, bool go_left) const {$/;"	f	class:vg::SourceSinkOverlay
get_degree	vg.cpp	/^size_t VG::get_degree(const handle_t& handle, bool go_left) const {$/;"	f	class:vg::VG
get_depth_from_index	algorithms/coverage_depth.cpp	/^pair<float, float> get_depth_from_index(const BinnedDepthIndex& depth_index, const string& path_name, size_t start_offset, size_t end_offset) {$/;"	f	namespace:vg::algorithms
get_description	option.hpp	/^    virtual const string& get_description() const {$/;"	f	class:vg::BaseOption
get_description	subcommand/subcommand.cpp	/^const std::string& Subcommand::get_description() const {$/;"	f	class:vg::subcommand::Subcommand
get_diagonals	gbwt_extender.cpp	/^    std::pair<int32_t, int32_t> get_diagonals(int32_t score) {$/;"	f	class:vg::WFATree	file:
get_dir	utility.cpp	/^string get_dir() {$/;"	f	namespace:vg::temp_file
get_disjoint_sets	contracting_graph.cpp	/^    vector<vector<size_t>> ContractingGraph::get_disjoint_sets(){$/;"	f	class:vg::ContractingGraph
get_distance	recombinator.cpp	/^size_t HaplotypePartitioner::get_distance(handle_t from, handle_t to) const {$/;"	f	class:vg::HaplotypePartitioner
get_distance_limit	minimizer_mapper.hpp	/^    size_t get_distance_limit(size_t read_length) const {$/;"	f	class:vg::MinimizerMapper
get_distance_measurer	multipath_mapper.cpp	/^    unique_ptr<OrientedDistanceMeasurer> MultipathMapper::get_distance_measurer(MemoizingGraph& memoizing_graph) const {$/;"	f	class:vg::MultipathMapper
get_duplicate_handle	dozeu_pinning_overlay.cpp	/^handle_t DozeuPinningOverlay::get_duplicate_handle(const handle_t& handle) const {$/;"	f	class:vg::DozeuPinningOverlay
get_edge	vg.cpp	/^Edge* VG::get_edge(const NodeSide& side1, const NodeSide& side2) {$/;"	f	class:vg::VG
get_edge	vg.cpp	/^Edge* VG::get_edge(const NodeTraversal& left, const NodeTraversal& right) {$/;"	f	class:vg::VG
get_edge	vg.cpp	/^Edge* VG::get_edge(const pair<NodeSide, NodeSide>& sides) {$/;"	f	class:vg::VG
get_edge_count	incremental_subgraph.cpp	/^size_t IncrementalSubgraph::get_edge_count() const {$/;"	f	class:vg::IncrementalSubgraph
get_edge_count	vg.cpp	/^size_t VG::get_edge_count() const {$/;"	f	class:vg::VG
get_edge_length	traversal_support.cpp	/^int64_t TraversalSupportFinder::get_edge_length(const edge_t& edge, const unordered_map<id_t, size_t>& ref_offsets) const {$/;"	f	class:vg::TraversalSupportFinder
get_edge_support	traversal_finder.hpp	/^    function<Support(edge_t)> get_edge_support;$/;"	m	class:vg::RepresentativeTraversalFinder
get_edge_support	traversal_support.cpp	/^Support CachedPackedTraversalSupportFinder::get_edge_support(id_t from, bool from_reverse,$/;"	f	class:vg::CachedPackedTraversalSupportFinder
get_edge_support	traversal_support.cpp	/^Support PackedTraversalSupportFinder::get_edge_support(const edge_t& edge) const {$/;"	f	class:vg::PackedTraversalSupportFinder
get_edge_support	traversal_support.cpp	/^Support PackedTraversalSupportFinder::get_edge_support(id_t from, bool from_reverse,$/;"	f	class:vg::PackedTraversalSupportFinder
get_edge_support	unittest/traversal_support.cpp	/^    Support get_edge_support(const edge_t& edge) const {$/;"	f	class:vg::unittest::TestTraversalSupportFinder
get_edge_support	unittest/traversal_support.cpp	/^    Support get_edge_support(id_t from, bool from_reverse, id_t to, bool to_reverse) const {$/;"	f	class:vg::unittest::TestTraversalSupportFinder
get_edges	contracting_graph.cpp	/^    unordered_map<size_t, size_t> ContractingGraph::get_edges(size_t group_num){$/;"	f	class:vg::ContractingGraph
get_end	snarls.cpp	/^const handle_t& NetGraph::get_end() const {$/;"	f	class:vg::NetGraph
get_end_matches	readfilter.hpp	/^inline int ReadFilter<Alignment>::get_end_matches(const Alignment& read) const {$/;"	f	class:vg::ReadFilter
get_end_matches	readfilter.hpp	/^inline int ReadFilter<MultipathAlignment>::get_end_matches(const MultipathAlignment& read) const {$/;"	f	class:vg::ReadFilter
get_end_of	snarls.cpp	/^Visit get_end_of(const Chain& chain) {$/;"	f	namespace:vg
get_endpoints	graph_synchronizer.cpp	/^pair<NodeSide, NodeSide> GraphSynchronizer::Lock::get_endpoints() const {$/;"	f	class:vg::GraphSynchronizer::Lock
get_exon_haplotypes	transcriptome.cpp	/^vector<pair<exon_nodes_t, thread_ids_t> > Transcriptome::get_exon_haplotypes(const vg::id_t start_node, const vg::id_t end_node, const gbwt::GBWT & haplotype_index, const unordered_set<string>& reference_samples, const int32_t expected_length) const {$/;"	f	class:vg::Transcriptome
get_features	feature_set.cpp	/^const vector<FeatureSet::Feature>& FeatureSet::get_features(const string& path) const {$/;"	f	class:vg::FeatureSet
get_file_size	index_registry.cpp	/^int64_t get_file_size(const string& filename) {$/;"	f	namespace:vg
get_filenames	index_registry.cpp	/^const vector<string>& IndexFile::get_filenames() const {$/;"	f	class:vg::IndexFile
get_first_node_handle	transcriptome.cpp	/^handle_t CompletedTranscriptPath::get_first_node_handle(const HandleGraph & graph) const {$/;"	f	class:vg::CompletedTranscriptPath
get_first_node_handle	transcriptome.cpp	/^handle_t EditedTranscriptPath::get_first_node_handle(const HandleGraph & graph) const {$/;"	f	class:vg::EditedTranscriptPath
get_fraction_of_ns	utility.cpp	/^double get_fraction_of_ns(const string& seq) {$/;"	f	namespace:vg
get_fragment_length_mean	minimizer_mapper.hpp	/^    double get_fragment_length_mean() const { return fragment_length_distr.mean(); }$/;"	f	class:vg::MinimizerMapper
get_fragment_length_sample_size	minimizer_mapper.hpp	/^    size_t get_fragment_length_sample_size() const { return fragment_length_distr.curr_sample_size(); }$/;"	f	class:vg::MinimizerMapper
get_fragment_length_stdev	minimizer_mapper.hpp	/^    double get_fragment_length_stdev() const {return fragment_length_distr.std_dev(); }$/;"	f	class:vg::MinimizerMapper
get_gbwt	gbwt_helper.cpp	/^gbwt::GBWT get_gbwt(const std::vector<gbwt::vector_type>& paths) {$/;"	f	namespace:vg
get_gbwt	traversal_finder.hpp	/^    const gbwt::GBWT& get_gbwt() { return gbwt; }$/;"	f	class:vg::GBWTTraversalFinder
get_genotype_log_likelihood	genotyper.cpp	/^double Genotyper::get_genotype_log_likelihood(VG& graph, const Snarl* snarl, const vector<int>& genotype, const vector<pair<const Alignment*, vector<Affinity>>>& alignment_consistency) {$/;"	f	class:vg::Genotyper
get_genotype_log_prior	genotyper.cpp	/^double Genotyper::get_genotype_log_prior(const vector<int>& genotype) {$/;"	f	class:vg::Genotyper
get_genotypes	deconstructor.cpp	/^void Deconstructor::get_genotypes(vcflib::Variant& v, const vector<string>& names,$/;"	f	class:vg::Deconstructor
get_graph	packer.cpp	/^const HandleGraph* Packer::get_graph() const {$/;"	f	class:vg::Packer
get_graph	subcommand/gbwt_main.cpp	/^void GraphHandler::get_graph(const GBWTConfig& config) {$/;"	f	class:GraphHandler
get_graph	variant_adder.cpp	/^const VG& VariantAdder::get_graph() const {$/;"	f	class:vg::VariantAdder
get_graph_distance	algorithms/chain_items.cpp	/^size_t get_graph_distance(const Anchor& from, const Anchor& to, const SnarlDistanceIndex& distance_index, const HandleGraph& graph) {$/;"	f	namespace:vg::algorithms
get_handle	dagified_graph.cpp	/^    handle_t DagifiedGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::DagifiedGraph
get_handle	dozeu_pinning_overlay.cpp	/^handle_t DozeuPinningOverlay::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::DozeuPinningOverlay
get_handle	extra_node_graph.cpp	/^handle_t ExtraNodeGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::ExtraNodeGraph
get_handle	gbwt_extender.hpp	/^    static handle_t get_handle(seed_type seed) {$/;"	f	class:vg::GaplessExtender
get_handle	graph_caller.cpp	/^handle_t SnarlGraph::get_handle(const nid_t& node_id, bool is_reverse) const {$/;"	f	class:vg::SnarlGraph
get_handle	identity_overlay.cpp	/^    handle_t IdentityOverlay::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::IdentityOverlay
get_handle	incremental_subgraph.cpp	/^handle_t IncrementalSubgraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::IncrementalSubgraph
get_handle	indexed_vg.cpp	/^handle_t IndexedVG::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::IndexedVG
get_handle	memoizing_graph.cpp	/^    handle_t MemoizingGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::MemoizingGraph
get_handle	null_masking_graph.cpp	/^handle_t NullMaskingGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::NullMaskingGraph
get_handle	path_subgraph.cpp	/^    handle_t PathSubgraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::PathSubgraph
get_handle	reverse_graph.cpp	/^    handle_t ReverseGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::ReverseGraph
get_handle	snarls.cpp	/^handle_t NetGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::NetGraph
get_handle	source_sink_overlay.cpp	/^handle_t SourceSinkOverlay::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::SourceSinkOverlay
get_handle	splicing.cpp	/^handle_t JoinedSpliceGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::JoinedSpliceGraph
get_handle	split_strand_graph.cpp	/^    handle_t StrandSplitGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::StrandSplitGraph
get_handle	subgraph.cpp	/^    handle_t SubHandleGraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::SubHandleGraph
get_handle	subgraph_overlay.cpp	/^handle_t SubgraphOverlay::get_handle(const nid_t& node_id, bool is_reverse) const {$/;"	f	class:vg::SubgraphOverlay
get_handle	tree_subgraph.cpp	/^handle_t TreeSubgraph::get_handle(const id_t& node_id, bool is_reverse) const {$/;"	f	class:vg::TreeSubgraph
get_handle	vg.cpp	/^handle_t VG::get_handle(const nid_t& node_id, bool is_reverse) const {$/;"	f	class:vg::VG
get_handle_from_inward_backing_handle	snarls.cpp	/^handle_t NetGraph::get_handle_from_inward_backing_handle(const handle_t& backing_handle) const {$/;"	f	class:vg::NetGraph
get_handle_memo	memoizing_graph.hpp	/^        unordered_map<id_t, handle_t> get_handle_memo;$/;"	m	class:vg::MemoizingGraph
get_handle_of_step	memoizing_graph.cpp	/^    handle_t MemoizingGraph::get_handle_of_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::MemoizingGraph
get_handle_of_step	subgraph_overlay.cpp	/^handle_t PathSubgraphOverlay::get_handle_of_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
get_handle_of_step	vg.cpp	/^handle_t VG::get_handle_of_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::VG
get_handles	unittest/chain_items.cpp	/^static vector<handle_t> get_handles(const HandleGraph& graph) {$/;"	f	namespace:vg::unittest
get_haplotype	subcommand/haplotypes_main.cpp	/^std::string get_haplotype(const gbwtgraph::GBWTGraph& graph, Haplotypes::sequence_type sequence,$/;"	f
get_haplotype_alt_contents	traversal_finder.cpp	/^VCFTraversalFinder::get_haplotype_alt_contents($/;"	f	class:vg::VCFTraversalFinder
get_haplotype_count	haplotypes.cpp	/^int64_t ScoreProvider::get_haplotype_count() const {$/;"	f	class:haplo::ScoreProvider
get_haplotype_count	haplotypes.hpp	/^int64_t GBWTScoreProvider<GBWTType>::get_haplotype_count() const {$/;"	f	class:haplo::GBWTScoreProvider
get_haplotypes_with_snarl	phased_genome.cpp	/^    vector<id_t> PhasedGenome::get_haplotypes_with_snarl(const Snarl* snarl_to_find){$/;"	f	class:vg::PhasedGenome
get_help	subcommand/options.cpp	/^std::vector<std::pair<std::string, std::string>> GroupedOptionGroup::get_help() const {$/;"	f	class:vg::subcommand::GroupedOptionGroup
get_help	subcommand/options.hpp	/^    virtual std::vector<std::pair<std::string, std::string>> get_help() const {$/;"	f	struct:vg::subcommand::OptionGroup
get_id	dagified_graph.cpp	/^    id_t DagifiedGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::DagifiedGraph
get_id	dozeu_pinning_overlay.cpp	/^id_t DozeuPinningOverlay::get_id(const handle_t& handle) const {$/;"	f	class:vg::DozeuPinningOverlay
get_id	extra_node_graph.cpp	/^id_t ExtraNodeGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::ExtraNodeGraph
get_id	graph_caller.cpp	/^nid_t SnarlGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::SnarlGraph
get_id	identity_overlay.cpp	/^    id_t IdentityOverlay::get_id(const handle_t& handle) const {$/;"	f	class:vg::IdentityOverlay
get_id	incremental_subgraph.cpp	/^id_t IncrementalSubgraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
get_id	indexed_vg.cpp	/^id_t IndexedVG::get_id(const handle_t& handle) const {$/;"	f	class:vg::IndexedVG
get_id	memoizing_graph.cpp	/^    id_t MemoizingGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::MemoizingGraph
get_id	null_masking_graph.cpp	/^id_t NullMaskingGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::NullMaskingGraph
get_id	path_subgraph.cpp	/^    id_t PathSubgraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::PathSubgraph
get_id	reverse_graph.cpp	/^    id_t ReverseGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::ReverseGraph
get_id	snarls.cpp	/^id_t NetGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::NetGraph
get_id	source_sink_overlay.cpp	/^id_t SourceSinkOverlay::get_id(const handle_t& handle) const {$/;"	f	class:vg::SourceSinkOverlay
get_id	splicing.cpp	/^id_t JoinedSpliceGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::JoinedSpliceGraph
get_id	split_strand_graph.cpp	/^    id_t StrandSplitGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::StrandSplitGraph
get_id	subgraph.cpp	/^    id_t SubHandleGraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::SubHandleGraph
get_id	subgraph_overlay.cpp	/^nid_t SubgraphOverlay::get_id(const handle_t& handle) const {$/;"	f	class:vg::SubgraphOverlay
get_id	tree_subgraph.cpp	/^id_t TreeSubgraph::get_id(const handle_t& handle) const {$/;"	f	class:vg::TreeSubgraph
get_id	types.hpp	/^inline id_t& get_id(pos_t& pos) {$/;"	f	namespace:vg
get_id	vg.cpp	/^nid_t VG::get_id(const handle_t& handle) const {$/;"	f	class:vg::VG
get_identifier	index_registry.cpp	/^const IndexName& IndexFile::get_identifier() const {$/;"	f	class:vg::IndexFile
get_index	index_registry.cpp	/^IndexFile* IndexRegistry::get_index(const IndexName& identifier) {$/;"	f	class:vg::IndexRegistry
get_index	index_registry.cpp	/^const IndexFile* IndexRegistry::get_index(const IndexName& identifier) const {$/;"	f	class:vg::IndexRegistry
get_index	traversal_finder.hpp	/^    function<PathIndex*(const Snarl&)> get_index;$/;"	m	class:vg::RepresentativeTraversalFinder
get_input_file	utility.cpp	/^void get_input_file(const string& file_name, function<void(istream&)> callback) {$/;"	f	namespace:vg
get_input_file	utility.cpp	/^void get_input_file(int& optind, int argc, char** argv, function<void(istream&)> callback) {$/;"	f	namespace:vg
get_input_file_name	utility.cpp	/^string get_input_file_name(int& optind, int argc, char** argv, bool test_open) {$/;"	f	namespace:vg
get_inward_backing_handle	snarls.cpp	/^handle_t NetGraph::get_inward_backing_handle(const handle_t& child_handle) const {$/;"	f	class:vg::NetGraph
get_is_circular	memoizing_graph.cpp	/^    bool MemoizingGraph::get_is_circular(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
get_is_circular	subgraph_overlay.cpp	/^bool PathSubgraphOverlay::get_is_circular(const path_handle_t& path_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
get_is_circular	vg.cpp	/^bool VG::get_is_circular(const path_handle_t& path_handle) const {$/;"	f	class:vg::VG
get_is_paired	readfilter.hpp	/^inline bool ReadFilter<Alignment>::get_is_paired(const Alignment& aln) const {$/;"	f	class:vg::ReadFilter
get_is_paired	readfilter.hpp	/^inline bool ReadFilter<MultipathAlignment>::get_is_paired(const MultipathAlignment& mp_aln) const {$/;"	f	class:vg::ReadFilter
get_is_rev	types.hpp	/^inline bool& get_is_rev(pos_t& pos) {$/;"	f	namespace:vg
get_is_reverse	dagified_graph.cpp	/^    bool DagifiedGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::DagifiedGraph
get_is_reverse	dozeu_pinning_overlay.cpp	/^bool DozeuPinningOverlay::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::DozeuPinningOverlay
get_is_reverse	extra_node_graph.cpp	/^bool ExtraNodeGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::ExtraNodeGraph
get_is_reverse	graph_caller.cpp	/^bool SnarlGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::SnarlGraph
get_is_reverse	identity_overlay.cpp	/^    bool IdentityOverlay::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::IdentityOverlay
get_is_reverse	incremental_subgraph.cpp	/^bool IncrementalSubgraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
get_is_reverse	indexed_vg.cpp	/^bool IndexedVG::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::IndexedVG
get_is_reverse	memoizing_graph.cpp	/^    bool MemoizingGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::MemoizingGraph
get_is_reverse	null_masking_graph.cpp	/^bool NullMaskingGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::NullMaskingGraph
get_is_reverse	path_subgraph.cpp	/^    bool PathSubgraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::PathSubgraph
get_is_reverse	reverse_graph.cpp	/^    bool ReverseGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::ReverseGraph
get_is_reverse	snarls.cpp	/^bool NetGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::NetGraph
get_is_reverse	source_sink_overlay.cpp	/^bool SourceSinkOverlay::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::SourceSinkOverlay
get_is_reverse	splicing.cpp	/^bool JoinedSpliceGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::JoinedSpliceGraph
get_is_reverse	split_strand_graph.cpp	/^    bool StrandSplitGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::StrandSplitGraph
get_is_reverse	subgraph.cpp	/^    bool SubHandleGraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::SubHandleGraph
get_is_reverse	subgraph_overlay.cpp	/^bool SubgraphOverlay::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::SubgraphOverlay
get_is_reverse	tree_subgraph.cpp	/^bool TreeSubgraph::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::TreeSubgraph
get_is_reverse	vg.cpp	/^bool VG::get_is_reverse(const handle_t& handle) const {$/;"	f	class:vg::VG
get_item	funnel.cpp	/^Funnel::Item& Funnel::get_item(size_t index) {$/;"	f	class:vg::Funnel
get_iterator	subcommand/options.cpp	/^std::function<void(const std::function<void(void)>&)> TickChainLink::get_iterator() {$/;"	f	class:vg::subcommand::TickChainLink
get_leaves	gbwt_extender.cpp	/^    std::vector<uint32_t> get_leaves() const {$/;"	f	class:vg::WFATree	file:
get_length	dagified_graph.cpp	/^    size_t DagifiedGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::DagifiedGraph
get_length	dozeu_pinning_overlay.cpp	/^size_t DozeuPinningOverlay::get_length(const handle_t& handle) const {$/;"	f	class:vg::DozeuPinningOverlay
get_length	extra_node_graph.cpp	/^size_t ExtraNodeGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::ExtraNodeGraph
get_length	graph_caller.cpp	/^size_t SnarlGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::SnarlGraph
get_length	identity_overlay.cpp	/^    size_t IdentityOverlay::get_length(const handle_t& handle) const {$/;"	f	class:vg::IdentityOverlay
get_length	incremental_subgraph.cpp	/^size_t IncrementalSubgraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
get_length	indexed_vg.cpp	/^size_t IndexedVG::get_length(const handle_t& handle) const {$/;"	f	class:vg::IndexedVG
get_length	memoizing_graph.cpp	/^    size_t MemoizingGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::MemoizingGraph
get_length	null_masking_graph.cpp	/^size_t NullMaskingGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::NullMaskingGraph
get_length	path_subgraph.cpp	/^    size_t PathSubgraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::PathSubgraph
get_length	reverse_graph.cpp	/^    size_t ReverseGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::ReverseGraph
get_length	snarls.cpp	/^size_t NetGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::NetGraph
get_length	source_sink_overlay.cpp	/^size_t SourceSinkOverlay::get_length(const handle_t& handle) const {$/;"	f	class:vg::SourceSinkOverlay
get_length	splicing.cpp	/^size_t JoinedSpliceGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::JoinedSpliceGraph
get_length	split_strand_graph.cpp	/^    size_t StrandSplitGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::StrandSplitGraph
get_length	subgraph.cpp	/^    size_t SubHandleGraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::SubHandleGraph
get_length	subgraph_overlay.cpp	/^size_t SubgraphOverlay::get_length(const handle_t& handle) const {$/;"	f	class:vg::SubgraphOverlay
get_length	tree_subgraph.cpp	/^size_t TreeSubgraph::get_length(const handle_t& handle) const {$/;"	f	class:vg::TreeSubgraph
get_length	vg.cpp	/^size_t VG::get_length(const handle_t& handle) const {$/;"	f	class:vg::VG
get_log10_prob_of_disruption_in_interval	minimizer_mapper.cpp	/^double MinimizerMapper::get_log10_prob_of_disruption_in_interval(const VectorView<Minimizer>& minimizers,$/;"	f	class:vg::MinimizerMapper
get_long	version.cpp	/^string Version::get_long() {$/;"	f	class:vg::Version
get_long_option	option.hpp	/^    virtual const string& get_long_option() const {$/;"	f	class:vg::BaseOption
get_mapping	phase_unfolder.cpp	/^vg::id_t PhaseUnfolder::get_mapping(vg::id_t node) const {$/;"	f	class:vg::PhaseUnfolder
get_mapq	readfilter.hpp	/^int ReadFilter<Read>::get_mapq(const Read& read) const {$/;"	f	class:vg::ReadFilter
get_max_deletion	clip.cpp	/^static int64_t get_max_deletion(const PathHandleGraph* graph, $/;"	f	namespace:vg
get_max_rss_kb	memusage.cpp	/^size_t get_max_rss_kb() {$/;"	f	namespace:vg
get_max_vmem_kb	memusage.cpp	/^size_t get_max_vmem_kb() {$/;"	f	namespace:vg
get_metavar	subcommand/options.cpp	/^const char* get_metavar<bool>() {$/;"	f	namespace:vg::subcommand
get_metavar	subcommand/options.cpp	/^const char* get_metavar<double>() {$/;"	f	namespace:vg::subcommand
get_metavar	subcommand/options.cpp	/^const char* get_metavar<int8_t>() {$/;"	f	namespace:vg::subcommand
get_metavar	subcommand/options.cpp	/^const char* get_metavar<int>() {$/;"	f	namespace:vg::subcommand
get_metavar	subcommand/options.cpp	/^const char* get_metavar<size_t>() {$/;"	f	namespace:vg::subcommand
get_metavar	subcommand/options.cpp	/^const char* get_metavar<std::string>() {$/;"	f	namespace:vg::subcommand
get_min_base_qual_fraction	readfilter.hpp	/^double ReadFilter<Read>::get_min_base_qual_fraction(const Read& read) const {$/;"	f	class:vg::ReadFilter
get_min_node_support	traversal_support.cpp	/^Support CachedPackedTraversalSupportFinder::get_min_node_support(id_t node) const {$/;"	f	class:vg::CachedPackedTraversalSupportFinder
get_min_node_support	traversal_support.cpp	/^Support PackedTraversalSupportFinder::get_min_node_support(id_t node) const {$/;"	f	class:vg::PackedTraversalSupportFinder
get_min_node_support	unittest/traversal_support.cpp	/^    virtual Support get_min_node_support(id_t node) const {$/;"	f	class:vg::unittest::TestTraversalSupportFinder
get_min_position	stream_sorter.hpp	/^Position StreamSorter<Message>::get_min_position(const Message& msg) const {$/;"	f	class:vg::StreamSorter
get_min_total_support_for_call	snarl_caller.cpp	/^int SupportBasedSnarlCaller::get_min_total_support_for_call() const {$/;"	f	class:vg::SupportBasedSnarlCaller
get_minimizer_distances	snarl_distance_index.cpp	/^MIPayloadValues get_minimizer_distances (const SnarlDistanceIndex& distance_index,pos_t pos) {$/;"	f	namespace:vg
get_mutable	annotation.hpp	/^google::protobuf::Struct* Annotation<T, Enabled>::get_mutable(T* t) {$/;"	f	class:vg::Annotation
get_n_bins	packer.cpp	/^size_t Packer::get_n_bins(void) const {$/;"	f	class:vg::Packer
get_name	option.cpp	/^string Configurable::get_name() {$/;"	f	class:vg::Configurable
get_name	subcommand/haplotypes_main.cpp	/^std::string get_name(const std::string& graph_name, const std::string& extension) {$/;"	f
get_name	subcommand/subcommand.cpp	/^const std::string& Subcommand::get_name() const {$/;"	f	class:vg::subcommand::Subcommand
get_name	transcriptome.cpp	/^string TranscriptPath::get_name() const {$/;"	f	class:vg::TranscriptPath
get_net_graph	genome_state.cpp	/^const NetGraph* GenomeState::get_net_graph(const Snarl* snarl) {$/;"	f	class:vg::GenomeState
get_next_alignment_from_fastq	alignment.cpp	/^bool get_next_alignment_from_fastq(gzFile fp, char* buffer, size_t len, Alignment& alignment) {$/;"	f	namespace:vg
get_next_alignment_pair_from_fastqs	alignment.cpp	/^bool get_next_alignment_pair_from_fastqs(gzFile fp1, gzFile fp2, char* buffer, size_t len, Alignment& mate1, Alignment& mate2) {$/;"	f	namespace:vg
get_next_interleaved_alignment_pair_from_fastq	alignment.cpp	/^bool get_next_interleaved_alignment_pair_from_fastq(gzFile fp, char* buffer, size_t len, Alignment& mate1, Alignment& mate2) {$/;"	f	namespace:vg
get_next_node_recalc_degrees	flow_sort.cpp	/^id_t FlowSort::get_next_node_recalc_degrees(WeightedGraph& wg, std::vector<std::set<id_t>>& degrees,std::set<id_t> &sources,$/;"	f	class:vg::FlowSort
get_next_rank	path.cpp	/^size_t Paths::get_next_rank(const string& name) {$/;"	f	class:vg::Paths
get_next_step	memoizing_graph.cpp	/^    step_handle_t MemoizingGraph::get_next_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::MemoizingGraph
get_next_step	subgraph_overlay.cpp	/^step_handle_t PathSubgraphOverlay::get_next_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
get_next_step	vg.cpp	/^step_handle_t VG::get_next_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::VG
get_node	vg.cpp	/^Node* VG::get_node(nid_t id) {$/;"	f	class:vg::VG
get_node	vg.cpp	/^const Node* VG::get_node(nid_t id) const {$/;"	f	class:vg::VG
get_node_at_nucleotide	vg.cpp	/^nid_t VG::get_node_at_nucleotide(string pathname, int nuc){$/;"	f	class:vg::VG
get_node_by_id	algorithms/min_cut_graph.hpp	/^            inline Node& get_node_by_id(size_t node_id){$/;"	f	struct:vg::algorithms::Graph
get_node_count	dagified_graph.cpp	/^    size_t DagifiedGraph::get_node_count() const {$/;"	f	class:vg::DagifiedGraph
get_node_count	dozeu_pinning_overlay.cpp	/^size_t DozeuPinningOverlay::get_node_count() const {$/;"	f	class:vg::DozeuPinningOverlay
get_node_count	extra_node_graph.cpp	/^size_t ExtraNodeGraph::get_node_count() const {$/;"	f	class:vg::ExtraNodeGraph
get_node_count	graph_caller.cpp	/^size_t SnarlGraph::get_node_count() const {$/;"	f	class:vg::SnarlGraph
get_node_count	identity_overlay.cpp	/^    size_t IdentityOverlay::get_node_count() const {$/;"	f	class:vg::IdentityOverlay
get_node_count	incremental_subgraph.cpp	/^size_t IncrementalSubgraph::get_node_count() const {$/;"	f	class:vg::IncrementalSubgraph
get_node_count	indexed_vg.cpp	/^size_t IndexedVG::get_node_count() const {$/;"	f	class:vg::IndexedVG
get_node_count	memoizing_graph.cpp	/^    size_t MemoizingGraph::get_node_count() const {$/;"	f	class:vg::MemoizingGraph
get_node_count	null_masking_graph.cpp	/^size_t NullMaskingGraph::get_node_count() const {$/;"	f	class:vg::NullMaskingGraph
get_node_count	path_subgraph.cpp	/^    size_t PathSubgraph::get_node_count() const {$/;"	f	class:vg::PathSubgraph
get_node_count	reverse_graph.cpp	/^    size_t ReverseGraph::get_node_count() const {$/;"	f	class:vg::ReverseGraph
get_node_count	snarls.cpp	/^size_t NetGraph::get_node_count() const {$/;"	f	class:vg::NetGraph
get_node_count	source_sink_overlay.cpp	/^size_t SourceSinkOverlay::get_node_count() const {$/;"	f	class:vg::SourceSinkOverlay
get_node_count	splicing.cpp	/^size_t JoinedSpliceGraph::get_node_count() const {$/;"	f	class:vg::JoinedSpliceGraph
get_node_count	split_strand_graph.cpp	/^    size_t StrandSplitGraph::get_node_count() const {$/;"	f	class:vg::StrandSplitGraph
get_node_count	subgraph.cpp	/^    size_t SubHandleGraph::get_node_count() const {$/;"	f	class:vg::SubHandleGraph
get_node_count	subgraph_overlay.cpp	/^size_t SubgraphOverlay::get_node_count() const {$/;"	f	class:vg::SubgraphOverlay
get_node_count	tree_subgraph.cpp	/^size_t TreeSubgraph::get_node_count() const {$/;"	f	class:vg::TreeSubgraph
get_node_count	vg.cpp	/^size_t VG::get_node_count() const {$/;"	f	class:vg::VG
get_node_degree	flow_sort.cpp	/^int FlowSort::get_node_degree(FlowSort::WeightedGraph& wg, id_t node_id)$/;"	f	class:vg::FlowSort
get_node_ids	algorithms/min_cut_graph.hpp	/^            inline vector<size_t> get_node_ids(){$/;"	f	struct:vg::algorithms::Graph
get_node_length	mapper.cpp	/^int64_t Mapper::get_node_length(int64_t node_id) {$/;"	f	class:vg::Mapper
get_node_mapping	path.cpp	/^const map<int64_t, set<mapping_t*>>& Paths::get_node_mapping(id_t id) const {$/;"	f	class:vg::Paths
get_node_mapping	path.cpp	/^map<int64_t, set<mapping_t*>>& Paths::get_node_mapping(Node* n) {$/;"	f	class:vg::Paths
get_node_mapping	path.cpp	/^map<int64_t, set<mapping_t*>>& Paths::get_node_mapping(id_t id) {$/;"	f	class:vg::Paths
get_node_mapping_by_path_name	path.cpp	/^map<string, set<mapping_t*>> Paths::get_node_mapping_by_path_name(Node* n) {$/;"	f	class:vg::Paths
get_node_mapping_by_path_name	path.cpp	/^map<string, set<mapping_t*>> Paths::get_node_mapping_by_path_name(id_t id) {$/;"	f	class:vg::Paths
get_node_mapping_copies_by_rank	path.cpp	/^map<string, map<int, mapping_t>> Paths::get_node_mapping_copies_by_rank(id_t id) {$/;"	f	class:vg::Paths
get_node_mappings_by_rank	path.cpp	/^map<string, map<int, mapping_t*>> Paths::get_node_mappings_by_rank(id_t id) {$/;"	f	class:vg::Paths
get_node_nid_to_variant	vg.cpp	/^map<nid_t, vcflib::Variant> VG::get_node_nid_to_variant(vcflib::VariantCallFile vfile){$/;"	f	class:vg::VG
get_node_offset	gbwt_extender.hpp	/^    static size_t get_node_offset(seed_type seed) {$/;"	f	class:vg::GaplessExtender
get_node_support	traversal_finder.hpp	/^    function<Support(id_t)> get_node_support;$/;"	m	class:vg::RepresentativeTraversalFinder
get_nodes	contracting_graph.cpp	/^    vector<size_t> ContractingGraph::get_nodes(){$/;"	f	class:vg::ContractingGraph
get_nodes	snarl_seed_clusterer.cpp	/^void SnarlDistanceIndexClusterer::get_nodes( ClusteringProblem& clustering_problem, vector<vector<net_handle_t>>& chains_by_level) const {$/;"	f	class:vg::SnarlDistanceIndexClusterer
get_nonoverlapping	vcf_buffer.cpp	/^tuple<vector<vcflib::Variant*>, vcflib::Variant*, vector<vcflib::Variant*>> WindowedVcfBuffer::get_nonoverlapping() {$/;"	f	class:vg::WindowedVcfBuffer
get_num_samples	index_registry.cpp	/^int64_t get_num_samples(const string& vcf_filename) {$/;"	f	namespace:vg
get_offset	types.hpp	/^inline offset_t& get_offset(pos_t& pos) {$/;"	f	namespace:vg
get_on_strand_distance_tree	cluster.cpp	/^unordered_map<pair<size_t, size_t>, int64_t> OrientedDistanceClusterer::get_on_strand_distance_tree(size_t num_items,$/;"	f	class:vg::OrientedDistanceClusterer
get_option_id	subcommand/options.cpp	/^int get_option_id() {$/;"	f	namespace:vg::subcommand
get_option_struct	subcommand/options.hpp	/^    virtual struct option get_option_struct() const {$/;"	f	struct:vg::subcommand::FlagArgSpec
get_option_struct	subcommand/options.hpp	/^    virtual struct option get_option_struct() const {$/;"	f	struct:vg::subcommand::ValueArgSpec
get_option_value	subcommand/options.hpp	/^    T get_option_value(const std::string& option) const {$/;"	f	struct:vg::subcommand::BaseOptionGroup
get_options	option.cpp	/^vector<OptionInterface*> Configurable::get_options() {$/;"	f	class:vg::Configurable
get_options	subcommand/giraffe_main.cpp	/^static GroupedOptionGroup get_options() {$/;"	f	file:
get_or_estimate_coverage	recombinator.cpp	/^double get_or_estimate_coverage($/;"	f	namespace:vg
get_or_make_variant_id	utility.cpp	/^string get_or_make_variant_id(const vcflib::Variant& variant) {$/;"	f	namespace:vg
get_output_file_name	utility.cpp	/^string get_output_file_name(int& optind, int argc, char** argv) {$/;"	f	namespace:vg
get_overhang	readfilter.hpp	/^inline int ReadFilter<Alignment>::get_overhang(const Alignment& aln) const {$/;"	f	class:vg::ReadFilter
get_overhang	readfilter.hpp	/^inline int ReadFilter<MultipathAlignment>::get_overhang(const MultipathAlignment& mp_aln) const {$/;"	f	class:vg::ReadFilter
get_overlay_handle	split_strand_graph.cpp	/^    handle_t StrandSplitGraph::get_overlay_handle(const handle_t& underlying_handle) const {$/;"	f	class:vg::StrandSplitGraph
get_parsed_genotypes	vcf_buffer.cpp	/^const vector<vector<int>>& WindowedVcfBuffer::get_parsed_genotypes(vcflib::Variant* variant) {$/;"	f	class:vg::WindowedVcfBuffer
get_path	gbwt_extender.cpp	/^std::vector<handle_t> get_path(const std::vector<handle_t>& first, gbwt::node_type second) {$/;"	f	namespace:vg
get_path	gbwt_extender.cpp	/^std::vector<handle_t> get_path(const std::vector<handle_t>& first, handle_t second) {$/;"	f	namespace:vg
get_path	gbwt_extender.cpp	/^std::vector<handle_t> get_path(gbwt::node_type reverse_first, const std::vector<handle_t>& second) {$/;"	f	namespace:vg
get_path	gbwt_extender.cpp	/^std::vector<handle_t> get_path(handle_t first, const std::vector<handle_t>& second) {$/;"	f	namespace:vg
get_path	path.cpp	/^list<mapping_t>& Paths::get_path(const string& name) {$/;"	f	class:vg::Paths
get_path	unittest/gbwt_extender.cpp	/^Path get_path(const std::vector<std::pair<pos_t, std::string>>& mappings) {$/;"	f	namespace:vg::unittest::__anon3
get_path_base_name	hts_alignment_emitter.cpp	/^static string get_path_base_name(const PathPositionHandleGraph& graph, const path_handle_t& path) {$/;"	f	namespace:vg
get_path_count	memoizing_graph.cpp	/^    size_t MemoizingGraph::get_path_count() const {$/;"	f	class:vg::MemoizingGraph
get_path_count	subgraph_overlay.cpp	/^size_t PathSubgraphOverlay::get_path_count() const {$/;"	f	class:vg::PathSubgraphOverlay
get_path_count	vg.cpp	/^size_t VG::get_path_count() const {$/;"	f	class:vg::VG
get_path_edge_index	chunker.cpp	/^set<pair<pair<id_t, bool>, pair<id_t, bool>>> PathChunker::get_path_edge_index(step_handle_t start_step,$/;"	f	class:vg::PathChunker
get_path_edges	vg.cpp	/^set<Edge*> VG::get_path_edges(void) {$/;"	f	class:vg::VG
get_path_handle	memoizing_graph.cpp	/^    path_handle_t MemoizingGraph::get_path_handle(const std::string& path_name) const {$/;"	f	class:vg::MemoizingGraph
get_path_handle	subgraph_overlay.cpp	/^path_handle_t PathSubgraphOverlay::get_path_handle(const std::string& path_name) const {$/;"	f	class:vg::PathSubgraphOverlay
get_path_handle	vg.cpp	/^path_handle_t VG::get_path_handle(const string& path_name) const {$/;"	f	class:vg::VG
get_path_handle_of_step	memoizing_graph.cpp	/^    path_handle_t MemoizingGraph::get_path_handle_of_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::MemoizingGraph
get_path_handle_of_step	subgraph_overlay.cpp	/^path_handle_t PathSubgraphOverlay::get_path_handle_of_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
get_path_handle_of_step	vg.cpp	/^path_handle_t VG::get_path_handle_of_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::VG
get_path_id	path.cpp	/^int64_t Paths::get_path_id(const string& name) const {$/;"	f	class:vg::Paths
get_path_index	graph_synchronizer.cpp	/^PathIndex& GraphSynchronizer::get_path_index(const string& path_name) {$/;"	f	class:vg::GraphSynchronizer
get_path_length	memoizing_graph.cpp	/^    size_t MemoizingGraph::get_path_length(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
get_path_name	memoizing_graph.cpp	/^    std::string MemoizingGraph::get_path_name(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
get_path_name	path.cpp	/^const string& Paths::get_path_name(int64_t id) const {$/;"	f	class:vg::Paths
get_path_name	subgraph_overlay.cpp	/^std::string PathSubgraphOverlay::get_path_name(const path_handle_t& path_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
get_path_name	vg.cpp	/^string VG::get_path_name(const path_handle_t& path_handle) const {$/;"	f	class:vg::VG
get_path_sequence	graph_synchronizer.cpp	/^const string& GraphSynchronizer::get_path_sequence(const string& path_name) {$/;"	f	class:vg::GraphSynchronizer
get_peripheral_attachments	graph_synchronizer.cpp	/^set<NodeSide> GraphSynchronizer::Lock::get_peripheral_attachments(NodeSide graph_side) {$/;"	f	class:vg::GraphSynchronizer::Lock
get_pos	gbwt_extender.hpp	/^    static pos_t get_pos(seed_type seed) {$/;"	f	class:vg::GaplessExtender
get_position_of_step	memoizing_graph.cpp	/^    size_t MemoizingGraph::get_position_of_step(const step_handle_t& step) const {$/;"	f	class:vg::MemoizingGraph
get_prefix	index_registry.cpp	/^string IndexRegistry::get_prefix() const {$/;"	f	class:vg::IndexRegistry
get_prefix	phase_unfolder.cpp	/^gbwt::node_type PhaseUnfolder::get_prefix(gbwt::node_type from, gbwt::node_type node) {$/;"	f	class:vg::PhaseUnfolder
get_previous_step	memoizing_graph.cpp	/^    step_handle_t MemoizingGraph::get_previous_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::MemoizingGraph
get_previous_step	subgraph_overlay.cpp	/^step_handle_t PathSubgraphOverlay::get_previous_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
get_previous_step	vg.cpp	/^step_handle_t VG::get_previous_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::VG
get_priority	subcommand/subcommand.cpp	/^const int& Subcommand::get_priority() const {$/;"	f	class:vg::subcommand::Subcommand
get_prob_of_disruption_in_column	minimizer_mapper.cpp	/^double MinimizerMapper::get_prob_of_disruption_in_column(const VectorView<Minimizer>& minimizers,$/;"	f	class:vg::MinimizerMapper
get_proc_status_value	memusage.cpp	/^string get_proc_status_value(const string& name) {$/;"	f	namespace:vg
get_pruned_alt_alleles	traversal_finder.cpp	/^vector<vector<int>> VCFTraversalFinder::get_pruned_alt_alleles($/;"	f	class:vg::VCFTraversalFinder
get_qual_adj_aligner	aligner.cpp	/^const QualAdjAligner* AlignerClient::get_qual_adj_aligner() const {$/;"	f	class:vg::AlignerClient
get_qualities_in_snarl	genotyper.cpp	/^string Genotyper::get_qualities_in_snarl(VG& graph, const Snarl* snarl, const Alignment& alignment) {$/;"	f	class:vg::Genotyper
get_radius	variant_adder.cpp	/^size_t VariantAdder::get_radius(const vcflib::Variant& variant) {$/;"	f	class:vg::VariantAdder
get_read_distance	algorithms/chain_items.cpp	/^size_t get_read_distance(const Anchor& from, const Anchor& to) {$/;"	f	namespace:vg::algorithms
get_read_fn	io/json_stream_helper.hpp	/^inline std::function<bool(T&)> JSONStreamHelper<T>::get_read_fn() {$/;"	f	class:vg::io::JSONStreamHelper
get_read_name	sampler.cpp	/^string NGSSimulator::get_read_name() {$/;"	f	class:vg::NGSSimulator
get_read_offset	gbwt_extender.hpp	/^    static size_t get_read_offset(seed_type seed) {$/;"	f	class:vg::GaplessExtender
get_recipe	index_registry.cpp	/^const IndexRecipe& IndexRegistry::get_recipe(const RecipeName& recipe_name) const {$/;"	f	class:vg::IndexRegistry
get_ref_following	haplotypes.cpp	/^int64_t linear_haplo_structure::get_ref_following(int64_t node_id) const {$/;"	f	class:haplo::linear_haplo_structure
get_ref_interval	graph_caller.cpp	/^tuple<int64_t, int64_t, bool, step_handle_t, step_handle_t> VCFOutputCaller::get_ref_interval($/;"	f	class:vg::VCFOutputCaller
get_ref_offsets	traversal_support.cpp	/^unordered_map<id_t, size_t> TraversalSupportFinder::get_ref_offsets(const SnarlTraversal& ref_trav) const {$/;"	f	class:vg::TraversalSupportFinder
get_ref_position	graph_caller.cpp	/^pair<string, int64_t> VCFOutputCaller::get_ref_position(const PathPositionHandleGraph& graph, const Snarl& snarl, const string& ref_path_name,$/;"	f	class:vg::VCFOutputCaller
get_ref_position	mcmc_caller.cpp	/^    pair<size_t, bool> MCMCCaller::get_ref_position(const Snarl& snarl, const string& ref_path_name) const {$/;"	f	class:vg::MCMCCaller
get_ref_positions	graph_caller.cpp	/^tuple<string, size_t, size_t> VCFGenotyper::get_ref_positions(const vector<vcflib::Variant*>& variants) const {$/;"	f	class:vg::VCFGenotyper
get_reference_traversal	graph_caller.cpp	/^SnarlTraversal LegacyCaller::get_reference_traversal(const Snarl& snarl, TraversalFinder& trav_finder) const {$/;"	f	class:vg::LegacyCaller
get_registry	subcommand/subcommand.cpp	/^std::map<std::string, Subcommand*>& Subcommand::get_registry() {$/;"	f	class:vg::subcommand::Subcommand
get_regular_aligner	aligner.cpp	/^const Aligner* AlignerClient::get_regular_aligner() const {$/;"	f	class:vg::AlignerClient
get_release	version.cpp	/^string Version::get_release() {$/;"	f	class:vg::Version
get_rescue_graph_from_paths	multipath_mapper.hpp	/^        bool get_rescue_graph_from_paths = true;$/;"	m	class:vg::MultipathMapper
get_root	tree_subgraph.cpp	/^handle_t TreeSubgraph::get_root() const {$/;"	f	class:vg::TreeSubgraph
get_rr_memo	multipath_mapper.cpp	/^    haploMath::RRMemo& MultipathMapper::get_rr_memo(double recombination_penalty, size_t population_size) const {$/;"	f	class:vg::MultipathMapper
get_score	readfilter.hpp	/^inline double ReadFilter<Alignment>::get_score(const Alignment& aln) const {$/;"	f	class:vg::ReadFilter
get_score	readfilter.hpp	/^inline double ReadFilter<MultipathAlignment>::get_score(const MultipathAlignment& read) const {$/;"	f	class:vg::ReadFilter
get_score	surjector.cpp	/^    int32_t Surjector::get_score(const Alignment& aln) {$/;"	f	class:vg::Surjector
get_score	surjector.cpp	/^    int32_t Surjector::get_score(const multipath_alignment_t& mp_aln) {$/;"	f	class:vg::Surjector
get_scores	haplotypes.cpp	/^vector<double> haplo_DP_column::get_scores() const {$/;"	f	class:haplo::haplo_DP_column
get_seed	utility.hpp	/^    std::function<string(void)> get_seed;$/;"	m	class:vg::LazyRNG
get_seed_pos	splicing.cpp	/^const pair<handle_t, size_t>& SpliceRegion::get_seed_pos() const {$/;"	f	class:vg::SpliceRegion
get_sequence	dagified_graph.cpp	/^    string DagifiedGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::DagifiedGraph
get_sequence	dozeu_pinning_overlay.cpp	/^string DozeuPinningOverlay::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::DozeuPinningOverlay
get_sequence	extra_node_graph.cpp	/^string ExtraNodeGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::ExtraNodeGraph
get_sequence	graph_caller.cpp	/^std::string SnarlGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::SnarlGraph
get_sequence	identity_overlay.cpp	/^    string IdentityOverlay::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::IdentityOverlay
get_sequence	incremental_subgraph.cpp	/^string IncrementalSubgraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
get_sequence	indexed_vg.cpp	/^string IndexedVG::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::IndexedVG
get_sequence	memoizing_graph.cpp	/^    string MemoizingGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::MemoizingGraph
get_sequence	null_masking_graph.cpp	/^string NullMaskingGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::NullMaskingGraph
get_sequence	path_subgraph.cpp	/^    string PathSubgraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::PathSubgraph
get_sequence	reverse_graph.cpp	/^    string ReverseGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::ReverseGraph
get_sequence	snarls.cpp	/^string NetGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::NetGraph
get_sequence	source_sink_overlay.cpp	/^string SourceSinkOverlay::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::SourceSinkOverlay
get_sequence	splicing.cpp	/^string JoinedSpliceGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::JoinedSpliceGraph
get_sequence	split_strand_graph.cpp	/^    string StrandSplitGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::StrandSplitGraph
get_sequence	subgraph.cpp	/^    string SubHandleGraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::SubHandleGraph
get_sequence	subgraph_overlay.cpp	/^std::string SubgraphOverlay::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::SubgraphOverlay
get_sequence	tree_subgraph.cpp	/^string TreeSubgraph::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::TreeSubgraph
get_sequence	vg.cpp	/^string VG::get_sequence(const handle_t& handle) const {$/;"	f	class:vg::VG
get_sequence_dictionary	hts_alignment_emitter.cpp	/^vector<tuple<path_handle_t, size_t, size_t>> get_sequence_dictionary(const string& filename, const vector<string>& path_names, const PathPositionHandleGraph& graph) {$/;"	f	namespace:vg
get_sequence_visits	recombinator.cpp	/^std::vector<HaplotypePartitioner::sequence_type> HaplotypePartitioner::get_sequence_visits(handle_t handle) const {$/;"	f	class:vg::HaplotypePartitioner
get_sequences	recombinator.cpp	/^std::vector<HaplotypePartitioner::sequence_type> HaplotypePartitioner::get_sequences(Subchain subchain) const {$/;"	f	class:vg::HaplotypePartitioner
get_sequences	recombinator.cpp	/^std::vector<HaplotypePartitioner::sequence_type> HaplotypePartitioner::get_sequences(handle_t handle) const {$/;"	f	class:vg::HaplotypePartitioner
get_short	version.cpp	/^string Version::get_short() {$/;"	f	class:vg::Version
get_short_options	option.hpp	/^    virtual const string& get_short_options() const {$/;"	f	class:vg::BaseOption
get_sink_handle	source_sink_overlay.cpp	/^handle_t SourceSinkOverlay::get_sink_handle() const {$/;"	f	class:vg::SourceSinkOverlay
get_size	algorithms/min_cut_graph.hpp	/^            inline size_t get_size(){$/;"	f	struct:vg::algorithms::Graph
get_sizes	haplotypes.cpp	/^vector<int64_t> haplo_DP_column::get_sizes() const {$/;"	f	class:haplo::haplo_DP_column
get_skip_allele_fn	snarl_caller.cpp	/^function<bool(const SnarlTraversal&, int)> SnarlCaller::get_skip_allele_fn() const {$/;"	f	class:vg::SnarlCaller
get_skip_allele_fn	snarl_caller.cpp	/^function<bool(const SnarlTraversal&, int)> SupportBasedSnarlCaller::get_skip_allele_fn() const {$/;"	f	class:vg::SupportBasedSnarlCaller
get_snarl_reference_bounds	genotyper.cpp	/^pair<pair<int64_t, int64_t>, bool> Genotyper::get_snarl_reference_bounds(const Snarl* snarl, const PathIndex& index,$/;"	f	class:vg::Genotyper
get_snarl_traversals	genotyper.cpp	/^vector<SnarlTraversal> Genotyper::get_snarl_traversals(AugmentedGraph& augmented_graph, SnarlManager& manager,$/;"	f	class:vg::Genotyper
get_source_handle	source_sink_overlay.cpp	/^handle_t SourceSinkOverlay::get_source_handle() const {$/;"	f	class:vg::SourceSinkOverlay
get_start	snarls.cpp	/^const handle_t& NetGraph::get_start() const {$/;"	f	class:vg::NetGraph
get_start_of	snarls.cpp	/^Visit get_start_of(const Chain& chain) {$/;"	f	namespace:vg
get_step_at_position	memoizing_graph.cpp	/^    step_handle_t MemoizingGraph::get_step_at_position(const path_handle_t& path,$/;"	f	class:vg::MemoizingGraph
get_step_count	memoizing_graph.cpp	/^    size_t MemoizingGraph::get_step_count(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
get_step_count	subgraph_overlay.cpp	/^size_t PathSubgraphOverlay::get_step_count(const path_handle_t& path_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
get_step_count	vg.cpp	/^size_t VG::get_step_count(const path_handle_t& path_handle) const {$/;"	f	class:vg::VG
get_steps	index_registry.cpp	/^const vector<RecipeName>& IndexingPlan::get_steps() const {$/;"	f	class:vg::IndexingPlan
get_subchains	recombinator.cpp	/^HaplotypePartitioner::get_subchains(const gbwtgraph::TopLevelChain& chain, const Parameters& parameters) const {$/;"	f	class:vg::HaplotypePartitioner
get_subgraph	graph_synchronizer.cpp	/^VG& GraphSynchronizer::Lock::get_subgraph() {$/;"	f	class:vg::GraphSynchronizer::Lock
get_subgraph	splicing.cpp	/^const IncrementalSubgraph& SpliceRegion::get_subgraph() const {$/;"	f	class:vg::SpliceRegion
get_subsequence	incremental_subgraph.cpp	/^string IncrementalSubgraph::get_subsequence(const handle_t& handle, size_t index, size_t size) const {$/;"	f	class:vg::IncrementalSubgraph
get_subsequence	splicing.cpp	/^string JoinedSpliceGraph::get_subsequence(const handle_t& handle, size_t index, size_t size) const {$/;"	f	class:vg::JoinedSpliceGraph
get_subsequence	vg.cpp	/^string VG::get_subsequence(const handle_t& handle, size_t index, size_t size) const {$/;"	f	class:vg::VG
get_suffix	index_registry.cpp	/^const string& IndexFile::get_suffix() const {$/;"	f	class:vg::IndexFile
get_suffix	phase_unfolder.cpp	/^gbwt::node_type PhaseUnfolder::get_suffix(gbwt::node_type node, gbwt::node_type to) {$/;"	f	class:vg::PhaseUnfolder
get_support	genotypekit.cpp	/^Support AugmentedGraph::get_support(edge_t edge) {$/;"	f	class:vg::AugmentedGraph
get_support	genotypekit.cpp	/^Support AugmentedGraph::get_support(id_t node) {$/;"	f	class:vg::AugmentedGraph
get_support	genotypekit.cpp	/^Support SupportAugmentedGraph::get_support(edge_t edge) {$/;"	f	class:vg::SupportAugmentedGraph
get_support	genotypekit.cpp	/^Support SupportAugmentedGraph::get_support(id_t node) {$/;"	f	class:vg::SupportAugmentedGraph
get_support_finder	snarl_caller.cpp	/^TraversalSupportFinder& SupportBasedSnarlCaller::get_support_finder() const {$/;"	f	class:vg::SupportBasedSnarlCaller
get_symbolic_bounds	constructor.cpp	/^    pair<int64_t, int64_t> Constructor::get_symbolic_bounds(vcflib::Variant var) {$/;"	f	class:vg::Constructor
get_system_memory	index_registry.cpp	/^int64_t IndexRegistry::get_system_memory() {$/;"	f	class:vg::IndexRegistry
get_tail_forest	minimizer_mapper.cpp	/^vector<TreeSubgraph> MinimizerMapper::get_tail_forest(const GaplessExtension& extended_seed,$/;"	f	class:vg::MinimizerMapper
get_target_memory_usage	index_registry.cpp	/^int64_t IndexRegistry::get_target_memory_usage() const {$/;"	f	class:vg::IndexRegistry
get_thread_count	utility.cpp	/^int get_thread_count(void) {$/;"	f	namespace:vg
get_topological_order	path_subgraph.cpp	/^    vector<handle_t> PathSubgraph::get_topological_order() const {$/;"	f	class:vg::PathSubgraph
get_topological_order	tree_subgraph.cpp	/^vector<handle_t> TreeSubgraph::get_topological_order() const {$/;"	f	class:vg::TreeSubgraph
get_translation	translator.cpp	/^Translation Translator::get_translation(const Position& position) {$/;"	f	class:vg::Translator
get_traversal_genotype_support	traversal_support.cpp	/^vector<Support> TraversalSupportFinder::get_traversal_genotype_support(const vector<SnarlTraversal>& traversals,$/;"	f	class:vg::TraversalSupportFinder
get_traversal_mapqs	traversal_support.cpp	/^vector<double> TraversalSupportFinder::get_traversal_mapqs(const vector<SnarlTraversal>& traversals) const {$/;"	f	class:vg::TraversalSupportFinder
get_traversal_of_snarl	genotypekit.cpp	/^SnarlTraversal get_traversal_of_snarl(VG& graph, const Snarl* snarl, const SnarlManager& manager, const Path& path) {$/;"	f	namespace:vg
get_traversal_set_support	traversal_support.cpp	/^vector<Support> TraversalSupportFinder::get_traversal_set_support(const vector<SnarlTraversal>& traversals,$/;"	f	class:vg::TraversalSupportFinder
get_traversal_sizes	traversal_support.cpp	/^vector<int> TraversalSupportFinder::get_traversal_sizes(const vector<SnarlTraversal>& traversals) const {$/;"	f	class:vg::TraversalSupportFinder
get_traversal_support	traversal_support.cpp	/^Support TraversalSupportFinder::get_traversal_support(const SnarlTraversal& traversal) const {$/;"	f	class:vg::TraversalSupportFinder
get_type	haplotypes.cpp	/^linear_haplo_structure::nodeType linear_haplo_structure::get_type(int64_t node_id) const {$/;"	f	class:haplo::linear_haplo_structure
get_underlying_handle	dagified_graph.cpp	/^    handle_t DagifiedGraph::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::DagifiedGraph
get_underlying_handle	dozeu_pinning_overlay.cpp	/^handle_t DozeuPinningOverlay::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::DozeuPinningOverlay
get_underlying_handle	identity_overlay.cpp	/^    handle_t IdentityOverlay::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::IdentityOverlay
get_underlying_handle	incremental_subgraph.cpp	/^handle_t IncrementalSubgraph::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
get_underlying_handle	null_masking_graph.cpp	/^handle_t NullMaskingGraph::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::NullMaskingGraph
get_underlying_handle	path_subgraph.cpp	/^    handle_t PathSubgraph::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::PathSubgraph
get_underlying_handle	reverse_graph.cpp	/^    handle_t ReverseGraph::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::ReverseGraph
get_underlying_handle	source_sink_overlay.cpp	/^handle_t SourceSinkOverlay::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::SourceSinkOverlay
get_underlying_handle	split_strand_graph.cpp	/^    handle_t StrandSplitGraph::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::StrandSplitGraph
get_underlying_handle	subgraph.cpp	/^    handle_t SubHandleGraph::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::SubHandleGraph
get_underlying_handle	tree_subgraph.cpp	/^handle_t TreeSubgraph::get_underlying_handle(const handle_t& handle) const {$/;"	f	class:vg::TreeSubgraph
get_underlying_id	dagified_graph.cpp	/^    id_t DagifiedGraph::get_underlying_id(const id_t& node_id) const {$/;"	f	class:vg::DagifiedGraph
get_underlying_id	dozeu_pinning_overlay.cpp	/^id_t DozeuPinningOverlay::get_underlying_id(const id_t& node_id) const {$/;"	f	class:vg::DozeuPinningOverlay
get_unique_haplotypes	variant_adder.cpp	/^set<vector<int>> VariantAdder::get_unique_haplotypes(const vector<vcflib::Variant*>& variants, WindowedVcfBuffer* cache) const {$/;"	f	class:vg::VariantAdder
get_value	subcommand/options.hpp	/^    virtual T get_value() const {$/;"	f	struct:vg::subcommand::ValueArgSpec
get_variants_in_site	traversal_finder.cpp	/^vector<vcflib::Variant*> VCFTraversalFinder::get_variants_in_site(const Snarl& site) {$/;"	f	class:vg::VCFTraversalFinder
get_version	version.cpp	/^string Version::get_version() {$/;"	f	class:vg::Version
get_vg_index_registry	index_registry.cpp	/^IndexRegistry VGIndexes::get_vg_index_registry() {$/;"	f	class:vg::VGIndexes
get_weight_using_other	algorithms/min_cut_graph.hpp	/^            inline size_t get_weight_using_other(Node prev_node, size_t other){$/;"	f	struct:vg::algorithms::Graph
get_work_dir	index_registry.cpp	/^string IndexRegistry::get_work_dir() {$/;"	f	class:vg::IndexRegistry
gfa_has_haplotypes	index_registry.cpp	/^bool IndexRegistry::gfa_has_haplotypes(const string& filepath) {$/;"	f	class:vg::IndexRegistry
gfa_id_space	io/save_handle_graph.hpp	/^   vg::algorithms::GFAIDMapInfo gfa_id_space;$/;"	m	class:vg::GFAHandleGraph
gfa_parameters	subcommand/gbwt_main.cpp	/^    gbwtgraph::GFAParsingParameters gfa_parameters = get_best_gbwtgraph_gfa_parsing_parameters();$/;"	m	struct:GBWTConfig	file:
gfa_to_handle_graph	algorithms/gfa_to_handle.cpp	/^void gfa_to_handle_graph(const string& filename, MutableHandleGraph* graph,$/;"	f	namespace:vg::algorithms
gfa_to_handle_graph	algorithms/gfa_to_handle.cpp	/^void gfa_to_handle_graph(istream& in, MutableHandleGraph* graph,$/;"	f	namespace:vg::algorithms
gfa_to_path_handle_graph	algorithms/gfa_to_handle.cpp	/^void gfa_to_path_handle_graph(const string& filename, MutablePathMutableHandleGraph* graph,$/;"	f	namespace:vg::algorithms
gfa_to_path_handle_graph	algorithms/gfa_to_handle.cpp	/^void gfa_to_path_handle_graph(istream& in,$/;"	f	namespace:vg::algorithms
gff_feature_name	index_registry.cpp	/^string IndexingParameters::gff_feature_name = "exon";$/;"	m	class:vg::IndexingParameters	file:
gff_feature_name	index_registry.hpp	/^    static string gff_feature_name;$/;"	m	struct:vg::IndexingParameters
gff_transcript_tag	index_registry.cpp	/^string IndexingParameters::gff_transcript_tag = "transcript_id";$/;"	m	class:vg::IndexingParameters	file:
gff_transcript_tag	index_registry.hpp	/^    static string gff_transcript_tag;$/;"	m	struct:vg::IndexingParameters
giraffe_gbwt_downsample	index_registry.cpp	/^int IndexingParameters::giraffe_gbwt_downsample = gbwtgraph::LOCAL_HAPLOTYPES_DEFAULT_N;$/;"	m	class:vg::IndexingParameters	file:
giraffe_gbwt_downsample	index_registry.hpp	/^    static int giraffe_gbwt_downsample;$/;"	m	struct:vg::IndexingParameters
globals	explainer.hpp	/^    annotation_t globals;$/;"	m	class:vg::DiagramExplainer
go_left	snarls.hpp	/^    bool go_left;$/;"	m	struct:vg::ChainIterator
golden_section_search	statistics.cpp	/^double golden_section_search(const function<double(double)>& f, double x_min, double x_max,$/;"	f	namespace:vg
gq	snarl_caller.hpp	/^        double gq;$/;"	m	struct:vg::PoissonSupportSnarlCaller::PoissonCallInfo
grandparent_net_handle	snarl_seed_clusterer.hpp	/^            net_handle_t grandparent_net_handle;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
graph	banded_global_aligner.hpp	/^        const HandleGraph& graph;$/;"	m	class:vg::BandedGlobalAligner
graph	banded_global_aligner.hpp	/^        const HandleGraph& graph;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack
graph	cactus_snarl_finder.hpp	/^    const PathHandleGraph* graph;$/;"	m	class:vg::CactusSnarlFinder
graph	chunker.hpp	/^    const PathPositionHandleGraph* graph;$/;"	m	class:vg::PathChunker
graph	cluster.hpp	/^    const PathPositionHandleGraph* graph = nullptr;$/;"	m	class:vg::PathOrientedDistanceMeasurer
graph	constructor.hpp	/^    Graph graph;$/;"	m	struct:vg::ConstructedChunk
graph	contracting_graph.hpp	/^    Graph graph;$/;"	m	class:vg::ContractingGraph
graph	dagified_graph.hpp	/^        const HandleGraph* graph = nullptr;$/;"	m	class:vg::DagifiedGraph
graph	deconstructor.hpp	/^    const PathPositionHandleGraph* graph;$/;"	m	class:vg::Deconstructor
graph	dozeu_interface.hpp	/^        const HandleGraph& graph;$/;"	m	struct:vg::DozeuInterface::OrderedGraph
graph	dozeu_pinning_overlay.hpp	/^    const HandleGraph* graph = nullptr;$/;"	m	class:vg::DozeuPinningOverlay
graph	gbwt_extender.cpp	/^    const gbwtgraph::GBWTGraph& graph;$/;"	m	class:vg::WFATree	file:
graph	gbwt_extender.hpp	/^    const gbwtgraph::GBWTGraph* graph;$/;"	m	class:vg::GaplessExtender
graph	gbwt_extender.hpp	/^    const gbwtgraph::GBWTGraph* graph;$/;"	m	class:vg::WFAExtender
graph	genome_state.hpp	/^    const NetGraph* graph;$/;"	m	class:vg::SnarlState
graph	genotypekit.hpp	/^    VG graph;$/;"	m	struct:vg::AugmentedGraph
graph	graph_caller.hpp	/^    const PathHandleGraph& graph;$/;"	m	class:vg::VCFGenotyper
graph	graph_caller.hpp	/^    const PathPositionHandleGraph& graph;$/;"	m	class:vg::FlowCaller
graph	graph_caller.hpp	/^    const PathPositionHandleGraph& graph;$/;"	m	class:vg::LegacyCaller
graph	graph_caller.hpp	/^    const PathPositionHandleGraph& graph;$/;"	m	class:vg::NestedFlowCaller
graph	graph_synchronizer.hpp	/^    VG& graph;$/;"	m	class:vg::GraphSynchronizer
graph	haplotypes.hpp	/^  const GBWTType& graph;$/;"	m	class:haplo::hDP_gbwt_graph_accessor
graph	haplotypes.hpp	/^  const vg::PathPositionHandleGraph& graph;$/;"	m	struct:haplo::linear_haplo_structure
graph	hts_alignment_emitter.hpp	/^    const PathPositionHandleGraph& graph;$/;"	m	class:vg::SplicedHTSAlignmentEmitter
graph	identity_overlay.hpp	/^        const HandleGraph* graph = nullptr;$/;"	m	class:vg::IdentityOverlay
graph	incremental_subgraph.hpp	/^    const HandleGraph* graph = nullptr;$/;"	m	class:vg::IncrementalSubgraph
graph	index_registry.hpp	/^    unordered_map<IndexName, vector<IndexName>> graph;$/;"	m	class:vg::AliasGraph
graph	integrated_snarl_finder.cpp	/^    const HandleGraph* graph;$/;"	m	class:vg::HandleGraphNodeSet	file:
graph	integrated_snarl_finder.cpp	/^    const RankedHandleGraph* graph;$/;"	m	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph	file:
graph	mcmc_genotyper.hpp	/^    VG& graph;$/;"	m	class:vg::MCMCGenotyper
graph	memoizing_graph.hpp	/^        const PathPositionHandleGraph* graph = nullptr;$/;"	m	class:vg::MemoizingGraph
graph	multipath_alignment_emitter.hpp	/^    const PathPositionHandleGraph* graph;$/;"	m	class:vg::MultipathAlignmentEmitter
graph	null_masking_graph.hpp	/^    const HandleGraph* graph = nullptr;$/;"	m	class:vg::NullMaskingGraph
graph	packer.hpp	/^    const HandleGraph* graph;$/;"	m	class:vg::Packer
graph	rare_variant_simplifier.hpp	/^    MutablePathDeletableHandleGraph& graph;$/;"	m	class:vg::RareVariantSimplifier
graph	readfilter.hpp	/^    const HandleGraph* graph = nullptr;$/;"	m	class:vg::ReadFilter
graph	region_expander.hpp	/^        const PathPositionHandleGraph* graph = nullptr;$/;"	m	class:vg::RegionExpander
graph	sampler.hpp	/^    PathPositionHandleGraph& graph;$/;"	m	class:vg::AbstractReadSampler
graph	small_snarl_simplifier.hpp	/^    VG& graph;$/;"	m	class:vg::SmallSnarlSimplifier
graph	snarl_caller.hpp	/^    const PathHandleGraph& graph;$/;"	m	class:vg::SupportBasedSnarlCaller
graph	snarl_seed_clusterer.hpp	/^        const HandleGraph* graph;$/;"	m	class:vg::SnarlDistanceIndexClusterer
graph	snarls.hpp	/^    const HandleGraph* graph;$/;"	m	class:vg::HandleGraphSnarlFinder
graph	snarls.hpp	/^    const HandleGraph* graph;$/;"	m	class:vg::NetGraph
graph	split_strand_graph.hpp	/^        const HandleGraph* graph = nullptr;$/;"	m	class:vg::StrandSplitGraph
graph	surjector.hpp	/^        const PathPositionHandleGraph* graph = nullptr;$/;"	m	class:vg::Surjector
graph	transcriptome.cpp	/^const MutablePathDeletableHandleGraph & Transcriptome::graph() const {$/;"	f	class:vg::Transcriptome
graph	traversal_finder.hpp	/^    VG& graph;$/;"	m	class:vg::PathRestrictedTraversalFinder
graph	traversal_finder.hpp	/^    const HandleGraph& graph;$/;"	m	class:vg::ExhaustiveTraversalFinder
graph	traversal_finder.hpp	/^    const HandleGraph& graph;$/;"	m	class:vg::FlowTraversalFinder
graph	traversal_finder.hpp	/^    const HandleGraph& graph;$/;"	m	class:vg::GBWTTraversalFinder
graph	traversal_finder.hpp	/^    const HandleGraph& graph;$/;"	m	class:vg::TrivialTraversalFinder
graph	traversal_finder.hpp	/^    const PathHandleGraph& graph;$/;"	m	class:vg::PathBasedTraversalFinder
graph	traversal_finder.hpp	/^    const PathHandleGraph& graph;$/;"	m	class:vg::PathTraversalFinder
graph	traversal_finder.hpp	/^    const PathHandleGraph& graph;$/;"	m	class:vg::RepresentativeTraversalFinder
graph	traversal_finder.hpp	/^    const PathHandleGraph& graph;$/;"	m	class:vg::VCFTraversalFinder
graph	traversal_support.hpp	/^    const HandleGraph& graph;$/;"	m	class:vg::TraversalSupportFinder
graph	unittest/vg_algorithms.cpp	/^    const HandleGraph* graph;$/;"	m	struct:vg::unittest::TestDistHeuristic	file:
graph	variant_adder.hpp	/^    VG& graph;$/;"	m	class:vg::VariantAdder
graph	vg.hpp	/^        VG* graph;$/;"	m	struct:vg::VG::Plan
graph	vg.hpp	/^    Graph graph;$/;"	m	class:vg::VG
graph_cigar	aligner.cpp	/^string GSSWAligner::graph_cigar(gssw_graph_mapping* gm) const {$/;"	f	class:vg::GSSWAligner
graph_end	algorithms/chain_items.hpp	/^    inline pos_t graph_end() const {$/;"	f	class:vg::algorithms::Anchor
graph_gbwtgraph	subcommand/gbwt_main.cpp	/^    enum graph_type { graph_none, graph_path, graph_source, graph_gbz, graph_gbwtgraph };$/;"	e	enum:GraphHandler::graph_type	file:
graph_gbz	subcommand/gbwt_main.cpp	/^    enum graph_type { graph_none, graph_path, graph_source, graph_gbz, graph_gbwtgraph };$/;"	e	enum:GraphHandler::graph_type	file:
graph_mixed_distance_estimate	mapper.cpp	/^int64_t Mapper::graph_mixed_distance_estimate(pos_t pos1, pos_t pos2, int64_t maximum) {$/;"	f	class:vg::Mapper
graph_name	subcommand/gbwt_main.cpp	/^    std::string graph_name;$/;"	m	struct:GBWTConfig	file:
graph_name	subcommand/haplotypes_main.cpp	/^    std::string graph_name;$/;"	m	struct:HaplotypesConfig	file:
graph_none	subcommand/gbwt_main.cpp	/^    enum graph_type { graph_none, graph_path, graph_source, graph_gbz, graph_gbwtgraph };$/;"	e	enum:GraphHandler::graph_type	file:
graph_output	subcommand/gbwt_main.cpp	/^    std::string graph_output; \/\/ Output GBWTGraph.$/;"	m	struct:GBWTConfig	file:
graph_path	subcommand/gbwt_main.cpp	/^    enum graph_type { graph_none, graph_path, graph_source, graph_gbz, graph_gbwtgraph };$/;"	e	enum:GraphHandler::graph_type	file:
graph_pos_s	dozeu_interface.hpp	/^    struct graph_pos_s {$/;"	s	class:vg::DozeuInterface
graph_source	subcommand/gbwt_main.cpp	/^    enum graph_type { graph_none, graph_path, graph_source, graph_gbz, graph_gbwtgraph };$/;"	e	enum:GraphHandler::graph_type	file:
graph_start	algorithms/chain_items.hpp	/^    inline const pos_t& graph_start() const {$/;"	f	class:vg::algorithms::Anchor
graph_to_gfa	gfa.cpp	/^void graph_to_gfa(const PathHandleGraph* graph, ostream& out, const set<string>& rgfa_paths,$/;"	f	namespace:vg
graph_to_xg_adjusting_paths	subcommand/convert_main.cpp	/^void graph_to_xg_adjusting_paths(const PathHandleGraph* input, xg::XG* output, const std::unordered_set<std::string>& ref_samples, bool drop_haplotypes) {$/;"	f
graph_type	subcommand/gbwt_main.cpp	/^    enum graph_type { graph_none, graph_path, graph_source, graph_gbz, graph_gbwtgraph };$/;"	g	struct:GraphHandler	file:
greater_gaffile	subcommand/gamsort_main.cpp	/^struct greater_gaffile {$/;"	s	file:
greedy_min_dist	multipath_mapper.hpp	/^        bool greedy_min_dist = false;$/;"	m	class:vg::MultipathMapper
greedy_pieces	constructor.hpp	/^    bool greedy_pieces = false;$/;"	m	class:vg::Constructor
greedy_restart_assume_substitution	mapper.hpp	/^    bool greedy_restart_assume_substitution = false;$/;"	m	class:vg::BaseMapper
greedy_restart_max_count	mapper.hpp	/^    int greedy_restart_max_count = 2;$/;"	m	class:vg::BaseMapper
greedy_restart_max_lcp	mapper.hpp	/^    int greedy_restart_max_lcp = 0; \/\/ 0 for no max$/;"	m	class:vg::BaseMapper
greedy_restart_min_length	mapper.hpp	/^    int greedy_restart_min_length = 40;$/;"	m	class:vg::BaseMapper
groom_components	flow_sort.cpp	/^void FlowSort::groom_components(EdgeMapping& edges_in, EdgeMapping& edges_out, set<id_t>& isolated_nodes, set<id_t>& main_nodes,$/;"	f	class:vg::FlowSort
group	sparse_union_find.cpp	/^    vector<size_t> SparseUnionFind::group(size_t i) {$/;"	f	class:vg::SparseUnionFind
group_cache	indexed_vg.hpp	/^    mutable LRUCache<int64_t, shared_ptr<CacheEntry>> group_cache;$/;"	m	class:vg::IndexedVG
group_mapping_quality_exact	aligner.cpp	/^double GSSWAligner::group_mapping_quality_exact(const vector<double>& scaled_scores, const vector<size_t>& group,$/;"	f	class:vg::GSSWAligner
group_size	funnel.hpp	/^        size_t group_size = 0;$/;"	m	struct:vg::Funnel::State::Item
group_size	sparse_union_find.cpp	/^    size_t SparseUnionFind::group_size(size_t i) {$/;"	f	class:vg::SparseUnionFind
gssw_mapping_to_alignment	aligner.cpp	/^void GSSWAligner::gssw_mapping_to_alignment(gssw_graph* graph,$/;"	f	class:vg::GSSWAligner
guess_parallel_gbwt_jobs	index_registry.cpp	/^size_t guess_parallel_gbwt_jobs(size_t node_count, size_t haplotype_count, size_t available_memory, size_t batch_size) {$/;"	f	namespace:vg
hDP_gbwt_graph_accessor	haplotypes.hpp	/^class hDP_gbwt_graph_accessor {$/;"	c	namespace:haplo
hDP_gbwt_graph_accessor	haplotypes.hpp	/^hDP_gbwt_graph_accessor<GBWTType>::hDP_gbwt_graph_accessor(GBWTType& graph, $/;"	f	class:haplo::hDP_gbwt_graph_accessor
handle_at_order	incremental_subgraph.cpp	/^handle_t IncrementalSubgraph::handle_at_order(size_t i) const {$/;"	f	class:vg::IncrementalSubgraph
handle_base_option	option.hpp	/^    function<void(int)> handle_base_option;$/;"	m	class:vg::ConfigurableParser
handle_buffer	vcf_buffer.cpp	/^void VcfBuffer::handle_buffer() {$/;"	f	class:vg::VcfBuffer
handle_full_length	gbwt_extender.cpp	/^void handle_full_length(const HandleGraph& graph, std::vector<GaplessExtension>& result, double overlap_threshold) {$/;"	f	namespace:vg
handle_graph	cluster.hpp	/^    const HandleGraph& handle_graph;$/;"	m	class:vg::TargetValueSearch
handle_graph	cluster.hpp	/^    const HandleGraph* handle_graph;$/;"	m	class:vg::MinDistanceClusterer
handle_graph_to_cactus	cactus.cpp	/^pair<stCactusGraph*, stList*> handle_graph_to_cactus(const PathHandleGraph& graph, const unordered_set<string>& hint_paths,$/;"	f	namespace:vg
handle_idxs	splicing.hpp	/^    vector<size_t> handle_idxs;$/;"	m	class:vg::JoinedSpliceGraph
handle_to_gbwt	gbwt_helper.hpp	/^inline gbwt::node_type handle_to_gbwt(const HandleGraph& graph, handle_t handle) {$/;"	f	namespace:vg
handle_val_range	dagified_graph.hpp	/^        uint64_t handle_val_range = 0;$/;"	m	class:vg::DagifiedGraph
handle_val_range	dozeu_pinning_overlay.hpp	/^    uint64_t handle_val_range = 0;$/;"	m	class:vg::DozeuPinningOverlay
handler	utility.cpp	/^static Handler handler;$/;"	m	namespace:vg::temp_file	file:
haplo	haplotypes.cpp	/^namespace haplo {$/;"	n	file:
haplo	haplotypes.hpp	/^namespace haplo {$/;"	n
haplo	multipath_alignment.hpp	/^namespace haplo {$/;"	n
haploMath	haplotypes.cpp	/^namespace haploMath {$/;"	n	namespace:haplo	file:
haploMath	haplotypes.hpp	/^namespace haploMath{$/;"	n	namespace:haplo
haplo_DP	haplotypes.hpp	/^haplo_DP::haplo_DP(accessorType& ga) : DP_column(ga) {$/;"	f	class:haplo::haplo_DP
haplo_DP	haplotypes.hpp	/^struct haplo_DP {$/;"	s	namespace:haplo
haplo_DP_column	haplotypes.hpp	/^haplo_DP_column::haplo_DP_column(accessorType& ga) {$/;"	f	class:haplo::haplo_DP_column
haplo_DP_column	haplotypes.hpp	/^struct haplo_DP_column {$/;"	s	namespace:haplo
haplo_DP_rectangle	haplotypes.cpp	/^haplo_DP_rectangle::haplo_DP_rectangle() {$/;"	f	class:haplo::haplo_DP_rectangle
haplo_DP_rectangle	haplotypes.cpp	/^haplo_DP_rectangle::haplo_DP_rectangle(bool inclusive_interval) : int_is_inc(inclusive_interval) {$/;"	f	class:haplo::haplo_DP_rectangle
haplo_DP_rectangle	haplotypes.hpp	/^struct haplo_DP_rectangle{$/;"	s	namespace:haplo
haplo_node	phased_genome.hpp	/^        HaplotypeNode* haplo_node;$/;"	m	class:vg::PhasedGenome::iterator
haplo_score_provider	mapper.hpp	/^    haplo::ScoreProvider* haplo_score_provider = nullptr;$/;"	m	class:vg::BaseMapper
haplo_score_type	haplotypes.hpp	/^typedef pair<double, bool> haplo_score_type;$/;"	t	namespace:haplo
haploid_prior_logprob	genotyper.hpp	/^    double haploid_prior_logprob = prob_to_logprob(0.5);$/;"	m	class:vg::Genotyper
haplotype	genome_state.hpp	/^    vector<handle_t> haplotype;$/;"	m	struct:vg::AppendHaplotypeCommand
haplotype	genome_state.hpp	/^    vector<handle_t> haplotype;$/;"	m	struct:vg::ReplaceSnarlHaplotypeCommand
haplotype_consistency_exponent	mapper.hpp	/^    double haplotype_consistency_exponent = 1;$/;"	m	class:vg::BaseMapper
haplotype_consistent_alignments	multipath_alignment.cpp	/^    vector<Alignment> haplotype_consistent_alignments(const multipath_alignment_t& multipath_aln, const haplo::ScoreProvider& score_provider,$/;"	f	namespace:vg
haplotype_gbwt_ids	transcriptome.hpp	/^    vector<pair<gbwt::size_type, bool> > haplotype_gbwt_ids;$/;"	m	struct:vg::TranscriptPath
haplotype_indexer	subcommand/gbwt_main.cpp	/^    HaplotypeIndexer haplotype_indexer;$/;"	m	struct:GBWTConfig	file:
haplotype_input	subcommand/haplotypes_main.cpp	/^    std::string haplotype_input, kmer_input, vcf_input;$/;"	m	struct:HaplotypesConfig	file:
haplotype_number	phased_genome.hpp	/^        int haplotype_number;$/;"	m	class:vg::PhasedGenome::iterator
haplotype_output	subcommand/haplotypes_main.cpp	/^    std::string gbz_output, haplotype_output, score_output, kmer_output;$/;"	m	struct:HaplotypesConfig	file:
haplotype_to_string	variant_adder.cpp	/^string VariantAdder::haplotype_to_string(const vector<int>& haplotype, const vector<vcflib::Variant*>& variants) {$/;"	f	class:vg::VariantAdder
haplotype_transcript_paths	transcriptome.cpp	/^vector<CompletedTranscriptPath> Transcriptome::haplotype_transcript_paths() const {$/;"	f	class:vg::Transcriptome
haplotypes	genome_state.hpp	/^    vector<vector<pair<handle_t, size_t>>> haplotypes;$/;"	m	class:vg::SnarlState
haplotypes	phased_genome.hpp	/^        vector<Haplotype*> haplotypes;$/;"	m	class:vg::PhasedGenome
haplotypes	recombinator.hpp	/^        size_t haplotypes = 0;$/;"	m	struct:vg::Recombinator::Statistics
haplotypes	subcommand/gbwt_main.cpp	/^    bool metadata = false, contigs = false, haplotypes = false, samples = false, list_names = false, thread_names = false, tags = false;$/;"	m	struct:GBWTConfig	file:
haplotypes_default_absent	subcommand/haplotypes_main.cpp	/^constexpr double haplotypes_default_absent() {$/;"	f
haplotypes_default_adjustment	subcommand/haplotypes_main.cpp	/^constexpr double haplotypes_default_adjustment() {$/;"	f
haplotypes_default_candidates	subcommand/haplotypes_main.cpp	/^constexpr size_t haplotypes_default_candidates() {$/;"	f
haplotypes_default_coverage	subcommand/haplotypes_main.cpp	/^constexpr size_t haplotypes_default_coverage() {$/;"	f
haplotypes_default_discount	subcommand/haplotypes_main.cpp	/^constexpr double haplotypes_default_discount() {$/;"	f
haplotypes_default_k	subcommand/haplotypes_main.cpp	/^constexpr size_t haplotypes_default_k() {$/;"	f
haplotypes_default_n	subcommand/haplotypes_main.cpp	/^constexpr size_t haplotypes_default_n() {$/;"	f
haplotypes_default_subchain_length	subcommand/haplotypes_main.cpp	/^constexpr size_t haplotypes_default_subchain_length() {$/;"	f
haplotypes_default_threads	subcommand/haplotypes_main.cpp	/^size_t haplotypes_default_threads() {$/;"	f
haplotypes_default_w	subcommand/haplotypes_main.cpp	/^constexpr size_t haplotypes_default_w() {$/;"	f
hard_hit_cap	minimizer_mapper.hpp	/^    size_t hard_hit_cap = default_hard_hit_cap;$/;"	m	class:vg::MinimizerMapper
hard_hit_max	mapper.hpp	/^    int hard_hit_max = 0; \/\/ don't query any hits for MEMs with this many occurrences or more (0 for no limit)$/;"	m	class:vg::BaseMapper
has_annotation	annotation.hpp	/^inline bool has_annotation(const Annotated& annotated, const string& name) {$/;"	f	namespace:vg
has_annotation	multipath_alignment.cpp	/^    bool multipath_alignment_t::has_annotation(const string& annotation_name) const {$/;"	f	class:vg::multipath_alignment_t
has_argument	option.hpp	/^    static bool has_argument() {$/;"	f	class:vg::OptionValueParser
has_argument	option.hpp	/^    virtual bool has_argument() const {$/;"	f	class:vg::BaseOption
has_argument	option.hpp	/^inline bool OptionValueParser<bool>::has_argument() {$/;"	f	class:vg::OptionValueParser
has_base_graph	genotypekit.hpp	/^    bool has_base_graph() const {$/;"	f	struct:vg::AugmentedGraph
has_buffer	vcf_buffer.hpp	/^    bool has_buffer = false;$/;"	m	class:vg::VcfBuffer
has_chain_values	snarl_seed_clusterer.hpp	/^                bool has_chain_values;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem::SnarlTreeChild
has_connection	multipath_alignment.hpp	/^    inline bool subpath_t::has_connection() const {$/;"	f	class:vg::subpath_t
has_content	stream_index.hpp	/^        bool has_content = false;$/;"	m	struct:vg::BitStringTree::TreeNode
has_edge	haplotypes.hpp	/^bool hDP_gbwt_graph_accessor<GBWTType>::has_edge() const {$/;"	f	class:haplo::hDP_gbwt_graph_accessor
has_edge	vg.cpp	/^bool VG::has_edge(Edge* edge) const {$/;"	f	class:vg::VG
has_edge	vg.cpp	/^bool VG::has_edge(const Edge& edge) const {$/;"	f	class:vg::VG
has_edge	vg.cpp	/^bool VG::has_edge(const NodeSide& side1, const NodeSide& side2) const {$/;"	f	class:vg::VG
has_edge	vg.cpp	/^bool VG::has_edge(const handle_t& left, const handle_t& right) const {$/;"	f	class:vg::VG
has_edge	vg.cpp	/^bool VG::has_edge(const pair<NodeSide, NodeSide>& sides) const {$/;"	f	class:vg::VG
has_end	recombinator.hpp	/^        bool has_end() const { return (this->type == Haplotypes::Subchain::normal || this->type == Haplotypes::Subchain::prefix); }$/;"	f	struct:vg::HaplotypePartitioner::Subchain
has_end	recombinator.hpp	/^        bool has_end() const { return (this->type == normal || this->type == prefix); }$/;"	f	struct:vg::Haplotypes::Subchain
has_excluded_refpos	readfilter.hpp	/^inline bool ReadFilter<Alignment>::has_excluded_refpos(const Alignment& aln) const {$/;"	f	class:vg::ReadFilter
has_excluded_refpos	readfilter.hpp	/^inline bool ReadFilter<MultipathAlignment>::has_excluded_refpos(const MultipathAlignment& read) const {$/;"	f	class:vg::ReadFilter
has_excuded_feature	readfilter.hpp	/^bool ReadFilter<Read>::has_excuded_feature(const Read& read) const {$/;"	f	class:vg::ReadFilter
has_fixed_fragment_length_distr	mapper.cpp	/^bool PairedEndMapper::has_fixed_fragment_length_distr() {$/;"	f	class:vg::PairedEndMapper
has_grandparent_handle	snarl_seed_clusterer.hpp	/^            bool has_grandparent_handle = false;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
has_incremental_search	haplotypes.cpp	/^bool ScoreProvider::has_incremental_search() const {$/;"	f	class:haplo::ScoreProvider
has_incremental_search	haplotypes.hpp	/^bool GBWTScoreProvider<GBWTType>::has_incremental_search() const {$/;"	f	class:haplo::GBWTScoreProvider
has_inversion	graph.cpp	/^bool has_inversion(const Graph& graph) {$/;"	f	namespace:vg
has_inverting_edge	vg.cpp	/^bool VG::has_inverting_edge(Node* n) {$/;"	f	class:vg::VG
has_inverting_edge_from	vg.cpp	/^bool VG::has_inverting_edge_from(Node* n) {$/;"	f	class:vg::VG
has_inverting_edge_to	vg.cpp	/^bool VG::has_inverting_edge_to(Node* n) {$/;"	f	class:vg::VG
has_inverting_edges	vg.cpp	/^bool VG::has_inverting_edges(void) {$/;"	f	class:vg::VG
has_mapping	path.cpp	/^bool Paths::has_mapping(const string& name, int32_t rank) {$/;"	f	class:vg::Paths
has_next	banded_global_aligner.cpp	/^inline bool BandedGlobalAligner<IntType>::AltTracebackStack::has_next() {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
has_next	multipath_alignment.hpp	/^    inline bool subpath_t::has_next() const {$/;"	f	class:vg::subpath_t
has_next_step	memoizing_graph.cpp	/^    bool MemoizingGraph::has_next_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::MemoizingGraph
has_next_step	subgraph_overlay.cpp	/^bool PathSubgraphOverlay::has_next_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
has_next_step	vg.cpp	/^bool VG::has_next_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::VG
has_node	dagified_graph.cpp	/^    bool DagifiedGraph::has_node(id_t node_id) const {$/;"	f	class:vg::DagifiedGraph
has_node	dozeu_pinning_overlay.cpp	/^bool DozeuPinningOverlay::has_node(id_t node_id) const {$/;"	f	class:vg::DozeuPinningOverlay
has_node	extra_node_graph.cpp	/^bool ExtraNodeGraph::has_node(id_t node_id) const {$/;"	f	class:vg::ExtraNodeGraph
has_node	graph_caller.cpp	/^bool SnarlGraph::has_node(nid_t node_id) const {$/;"	f	class:vg::SnarlGraph
has_node	identity_overlay.cpp	/^    bool IdentityOverlay::has_node(id_t node_id) const {$/;"	f	class:vg::IdentityOverlay
has_node	incremental_subgraph.cpp	/^bool IncrementalSubgraph::has_node(id_t node_id) const {$/;"	f	class:vg::IncrementalSubgraph
has_node	indexed_vg.cpp	/^bool IndexedVG::has_node(id_t node_id) const {$/;"	f	class:vg::IndexedVG
has_node	memoizing_graph.cpp	/^    bool MemoizingGraph::has_node(id_t node_id) const {$/;"	f	class:vg::MemoizingGraph
has_node	null_masking_graph.cpp	/^bool NullMaskingGraph::has_node(id_t node_id) const {$/;"	f	class:vg::NullMaskingGraph
has_node	path_subgraph.cpp	/^    bool PathSubgraph::has_node(id_t node_id) const {$/;"	f	class:vg::PathSubgraph
has_node	reverse_graph.cpp	/^    bool ReverseGraph::has_node(id_t node_id) const {$/;"	f	class:vg::ReverseGraph
has_node	snarls.cpp	/^bool NetGraph::has_node(id_t node_id) const {$/;"	f	class:vg::NetGraph
has_node	source_sink_overlay.cpp	/^bool SourceSinkOverlay::has_node(id_t node_id) const {$/;"	f	class:vg::SourceSinkOverlay
has_node	splicing.cpp	/^bool JoinedSpliceGraph::has_node(id_t node_id) const {$/;"	f	class:vg::JoinedSpliceGraph
has_node	split_strand_graph.cpp	/^    bool StrandSplitGraph::has_node(id_t node_id) const {$/;"	f	class:vg::StrandSplitGraph
has_node	subgraph.cpp	/^    bool SubHandleGraph::has_node(id_t node_id) const {$/;"	f	class:vg::SubHandleGraph
has_node	subgraph_overlay.cpp	/^bool SubgraphOverlay::has_node(nid_t node_id) const {$/;"	f	class:vg::SubgraphOverlay
has_node	tree_subgraph.cpp	/^bool TreeSubgraph::has_node(id_t node_id) const {$/;"	f	class:vg::TreeSubgraph
has_node	vg.cpp	/^bool VG::has_node(const Node& node) const {$/;"	f	class:vg::VG
has_node	vg.cpp	/^bool VG::has_node(const Node* node) const {$/;"	f	class:vg::VG
has_node	vg.cpp	/^bool VG::has_node(nid_t id) const {$/;"	f	class:vg::VG
has_node_mapping	path.cpp	/^bool Paths::has_node_mapping(Node* n) const {$/;"	f	class:vg::Paths
has_node_mapping	path.cpp	/^bool Paths::has_node_mapping(id_t id) const {$/;"	f	class:vg::Paths
has_novel_exon_boundaries	transcriptome.cpp	/^bool Transcriptome::has_novel_exon_boundaries(const list<EditedTranscriptPath> & edited_transcript_paths, const bool include_transcript_ends) const {$/;"	f	class:vg::Transcriptome
has_overlapping_exons	transcriptome.cpp	/^bool Transcriptome::has_overlapping_exons(const vector<Exon> & exons) const {$/;"	f	class:vg::Transcriptome
has_overlay_node_for	split_strand_graph.cpp	/^    bool StrandSplitGraph::has_overlay_node_for(const nid_t& underlying_id) const {$/;"	f	class:vg::StrandSplitGraph
has_parent_handle	snarl_seed_clusterer.hpp	/^            bool has_parent_handle = false;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
has_path	memoizing_graph.cpp	/^    bool MemoizingGraph::has_path(const std::string& path_name) const {$/;"	f	class:vg::MemoizingGraph
has_path	multipath_alignment.hpp	/^    inline bool subpath_t::has_path() const {$/;"	f	class:vg::subpath_t
has_path	path.cpp	/^bool Paths::has_path(const string& name) const {$/;"	f	class:vg::Paths
has_path	subgraph_overlay.cpp	/^bool PathSubgraphOverlay::has_path(const std::string& path_name) const {$/;"	f	class:vg::PathSubgraphOverlay
has_path	vg.cpp	/^bool VG::has_path(const string& path_name) const {$/;"	f	class:vg::VG
has_position	algorithms/gfa_to_handle.hpp	/^    bool has_position = false;$/;"	m	struct:vg::algorithms::GFAFormatError
has_previous_step	memoizing_graph.cpp	/^    bool MemoizingGraph::has_previous_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::MemoizingGraph
has_previous_step	subgraph_overlay.cpp	/^bool PathSubgraphOverlay::has_previous_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
has_previous_step	vg.cpp	/^bool VG::has_previous_step(const step_handle_t& step_handle) const {$/;"	f	class:vg::VG
has_qualities	packer.cpp	/^bool Packer::has_qualities() const {$/;"	f	class:vg::Packer
has_reachability_edges	multipath_alignment_graph.hpp	/^        bool has_reachability_edges = false;$/;"	m	class:vg::MultipathAlignmentGraph
has_repeat	readfilter.hpp	/^bool ReadFilter<Read>::has_repeat(const Read& read, int k) const {$/;"	f	class:vg::ReadFilter
has_start	multipath_alignment.hpp	/^    inline bool multipath_alignment_t::has_start() const {$/;"	f	class:vg::multipath_alignment_t
has_start	recombinator.hpp	/^        bool has_start() const { return (this->type == Haplotypes::Subchain::normal || this->type == Haplotypes::Subchain::suffix); }$/;"	f	struct:vg::HaplotypePartitioner::Subchain
has_start	recombinator.hpp	/^        bool has_start() const { return (this->type == normal || this->type == suffix); }$/;"	f	struct:vg::Haplotypes::Subchain
has_supports	genotypekit.cpp	/^bool AugmentedGraph::has_supports() const {$/;"	f	class:vg::AugmentedGraph
has_supports	genotypekit.cpp	/^bool SupportAugmentedGraph::has_supports() const {$/;"	f	class:vg::SupportAugmentedGraph
has_supports	traversal_finder.hpp	/^    bool has_supports = false;$/;"	m	class:vg::RepresentativeTraversalFinder
has_tabix	vcf_buffer.cpp	/^bool VcfBuffer::has_tabix() const {$/;"	f	class:vg::VcfBuffer
has_tabix	vcf_buffer.cpp	/^bool WindowedVcfBuffer::has_tabix() const {$/;"	f	class:vg::WindowedVcfBuffer
has_translation	translator.cpp	/^bool Translator::has_translation(const Position& position, bool ignore_strand) {$/;"	f	class:vg::Translator
hash	hash_map.hpp	/^struct hash<pair<A,B> > {$/;"	s	namespace:std
hash	hash_map.hpp	/^struct hash<std::tuple<TT...>>$/;"	s	namespace:std
hash	nodeside.hpp	/^template <> struct hash<vg::NodeSide>$/;"	s	namespace:std
hash	nodetraversal.hpp	/^    struct hash<vg::NodeTraversal> {$/;"	s	namespace:std
hash	snarls.hpp	/^struct hash<const vg::Snarl> {$/;"	s	namespace:std
hash	vg.cpp	/^const string VG::hash(void) {$/;"	f	class:vg::VG
hash_alignment	alignment.cpp	/^const string hash_alignment(const Alignment& aln) {$/;"	f	namespace:vg
hash_ambiguous_allele_set	genotyper.hpp	/^    struct hash_ambiguous_allele_set {$/;"	s	class:vg::Genotyper
hash_combine	hash_map.hpp	/^    inline void hash_combine(size_t& seed, T const& v)$/;"	f	namespace:std::__anon1
hash_map	hash_map.hpp	/^    hash_map() {$/;"	f	class:vg::hash_map
hash_map	hash_map.hpp	/^class hash_map : public google::dense_hash_map<K, V, wang_hash<K>>$/;"	c	namespace:vg
hash_map	hash_map.hpp	/^class hash_map<K*, V> : public google::dense_hash_map<K*, V, wang_hash<K*>>$/;"	c	namespace:vg
hash_node_traversal	genotyper.hpp	/^    struct hash_node_traversal {$/;"	s	class:vg::Genotyper
hash_oriented_edge	genotyper.hpp	/^    struct hash_oriented_edge {$/;"	s	class:vg::Genotyper
hash_set	hash_map.hpp	/^    hash_set() {$/;"	f	class:vg::hash_set
hash_set	hash_map.hpp	/^class hash_set : public google::dense_hash_set<K, wang_hash<K>>$/;"	c	namespace:vg
hash_set	hash_map.hpp	/^class hash_set<K*> : public google::dense_hash_set<K*, wang_hash<K*>>$/;"	c	namespace:vg
hash_to_rgb	viz.cpp	/^tuple<double, double, double> hash_to_rgb(const string& str, double min_sum) {$/;"	f	namespace:vg
hashed	colors.hpp	/^    string hashed(const string& str) {$/;"	f	class:vg::Colors
hashed	pictographs.hpp	/^    string hashed(const string& str) {$/;"	f	class:vg::Pictographs
hashed_char	pictographs.hpp	/^    string hashed_char(const string& str) {$/;"	f	class:vg::Pictographs
have_input_file	utility.cpp	/^bool have_input_file(int& optind, int argc, char** argv) {$/;"	f	namespace:vg
head_nodes	vg.cpp	/^vector<Node*> VG::head_nodes(void) {$/;"	f	class:vg::VG
head_nodes	vg.cpp	/^void VG::head_nodes(vector<Node*>& nodes) {$/;"	f	class:vg::VG
head_tail_nodes	path.hpp	/^    set<id_t> head_tail_nodes;$/;"	m	class:vg::Paths
header	recombinator.hpp	/^    Header header;$/;"	m	class:vg::Haplotypes
header_listeners	algorithms/gfa_to_handle.hpp	/^    vector<std::function<void(const tag_list_t& tags)>> header_listeners;$/;"	m	class:vg::algorithms::GFAParser
header_mutex	hts_alignment_emitter.hpp	/^    mutex header_mutex;$/;"	m	class:vg::HTSWriter
heading	subcommand/options.hpp	/^    std::string heading;$/;"	m	struct:vg::subcommand::OptionGroup
help	subcommand/options.hpp	/^    std::string help;$/;"	m	struct:vg::subcommand::BaseArgSpec
help_add	subcommand/add_main.cpp	/^void help_add(char** argv) {$/;"	f
help_align	subcommand/align_main.cpp	/^void help_align(char** argv) {$/;"	f
help_annotate	subcommand/annotate_main.cpp	/^void help_annotate(char** argv) {$/;"	f
help_augment	subcommand/augment_main.cpp	/^void help_augment(char** argv, ConfigurableParser& parser) {$/;"	f
help_autoindex	subcommand/autoindex_main.cpp	/^void help_autoindex(char** argv) {$/;"	f
help_benchmark	subcommand/benchmark_main.cpp	/^void help_benchmark(char** argv) {$/;"	f
help_call	subcommand/call_main.cpp	/^void help_call(char** argv) {$/;"	f
help_chain	subcommand/chain_main.cpp	/^void help_chain(char** argv) {$/;"	f
help_chunk	subcommand/chunk_main.cpp	/^void help_chunk(char** argv) {$/;"	f
help_circularize	subcommand/circularize_main.cpp	/^void help_circularize(char** argv){$/;"	f
help_clip	subcommand/clip_main.cpp	/^void help_clip(char** argv) {$/;"	f
help_cluster	subcommand/cluster_main.cpp	/^void help_cluster(char** argv) {$/;"	f
help_combine	subcommand/combine_main.cpp	/^void help_combine(char** argv) {$/;"	f
help_concat	subcommand/concat_main.cpp	/^void help_concat(char** argv) {$/;"	f
help_construct	subcommand/construct_main.cpp	/^void help_construct(char** argv) {$/;"	f
help_convert	subcommand/convert_main.cpp	/^void help_convert(char** argv) {$/;"	f
help_deconstruct	subcommand/deconstruct_main.cpp	/^void help_deconstruct(char** argv){$/;"	f
help_depth	subcommand/depth_main.cpp	/^void help_depth(char** argv) {$/;"	f
help_dotplot	subcommand/dotplot_main.cpp	/^void help_dotplot(char** argv) {$/;"	f
help_explode	subcommand/explode_main.cpp	/^void help_explode(char** argv) {$/;"	f
help_filter	subcommand/filter_main.cpp	/^void help_filter(char** argv) {$/;"	f
help_find	subcommand/find_main.cpp	/^void help_find(char** argv) {$/;"	f
help_gamcompare	subcommand/gamcompare_main.cpp	/^void help_gamcompare(char** argv) {$/;"	f
help_gampcompare	subcommand/gampcompare_main.cpp	/^void help_gampcompare(char** argv) {$/;"	f
help_gamsort	subcommand/gamsort_main.cpp	/^void help_gamsort(char **argv)$/;"	f
help_gbwt	subcommand/gbwt_main.cpp	/^void help_gbwt(char** argv) {$/;"	f
help_genotype	subcommand/genotype_main.cpp	/^void help_genotype(char** argv) {$/;"	f
help_giraffe	subcommand/giraffe_main.cpp	/^void help_giraffe(char** argv, const BaseOptionGroup& parser, bool full_help) {$/;"	f
help_haplotypes	subcommand/haplotypes_main.cpp	/^void help_haplotypes(char** argv, bool developer_options) {$/;"	f
help_help	subcommand/help_main.cpp	/^void help_help(char** argv){$/;"	f
help_ids	subcommand/ids_main.cpp	/^void help_ids(char** argv) {$/;"	f
help_index	subcommand/index_main.cpp	/^void help_index(char** argv) {$/;"	f
help_inject	subcommand/inject_main.cpp	/^void help_inject(char** argv) {$/;"	f
help_join	subcommand/join_main.cpp	/^void help_join(char** argv) {$/;"	f
help_kmers	subcommand/kmers_main.cpp	/^void help_kmers(char** argv) {$/;"	f
help_map	subcommand/map_main.cpp	/^void help_map(char** argv) {$/;"	f
help_mcmc	subcommand/mcmc_main.cpp	/^void help_mcmc(char** argv) {$/;"	f
help_minimizer	subcommand/minimizer_main.cpp	/^void help_minimizer(char** argv) {$/;"	f
help_mod	subcommand/mod_main.cpp	/^void help_mod(char** argv) {$/;"	f
help_mpmap	subcommand/mpmap_main.cpp	/^void help_mpmap(char** argv) {$/;"	f
help_msga	subcommand/msga_main.cpp	/^void help_msga(char** argv) {$/;"	f
help_pack	subcommand/pack_main.cpp	/^void help_pack(char** argv) {$/;"	f
help_paths	subcommand/paths_main.cpp	/^void help_paths(char** argv) {$/;"	f
help_prune	subcommand/prune_main.cpp	/^void help_prune(char** argv) {$/;"	f
help_rna	subcommand/rna_main.cpp	/^void help_rna(char** argv) {$/;"	f
help_sift	subcommand/sift_main.cpp	/^void help_sift(char** argv){$/;"	f
help_sim	subcommand/sim_main.cpp	/^void help_sim(char** argv) {$/;"	f
help_simplify	subcommand/simplify_main.cpp	/^void help_simplify(char** argv) {$/;"	f
help_snarl	subcommand/snarls_main.cpp	/^void help_snarl(char** argv) {$/;"	f
help_sort	subcommand/sort_main.cpp	/^void help_sort(char** argv){$/;"	f
help_stats	subcommand/stats_main.cpp	/^void help_stats(char** argv) {$/;"	f
help_surject	subcommand/surject_main.cpp	/^void help_surject(char** argv) {$/;"	f
help_trace	subcommand/trace_main.cpp	/^void help_trace(char** argv) {$/;"	f
help_translate	subcommand/translate_main.cpp	/^void help_translate(char** argv) {$/;"	f
help_validate	subcommand/validate_main.cpp	/^void help_validate(char** argv) {$/;"	f
help_vectorize	subcommand/vectorize_main.cpp	/^void help_vectorize(char** argv){$/;"	f
help_version	subcommand/version_main.cpp	/^void help_version(char** argv){$/;"	f
help_view	subcommand/view_main.cpp	/^void help_view(char** argv) {$/;"	f
help_viz	subcommand/viz_main.cpp	/^void help_viz(char** argv) {$/;"	f
here	subcommand/options.hpp	/^    Number here = 0;$/;"	m	struct:vg::Range
het_adjustment	recombinator.hpp	/^        double het_adjustment = HET_ADJUSTMENT;$/;"	m	struct:vg::Recombinator::Parameters
het_prior_logprob	genotyper.hpp	/^    double het_prior_logprob = prob_to_logprob(0.1);$/;"	m	class:vg::Genotyper
heterozygous	recombinator.hpp	/^    enum kmer_presence { absent, heterozygous, present, frequent };$/;"	e	enum:vg::Recombinator::kmer_presence
heterozygous_prior_ln	genotypekit.hpp	/^    double heterozygous_prior_ln = prob_to_logprob(0.001);$/;"	m	class:vg::FixedGenotypePriorCalculator
heuristic_values	unittest/vg_algorithms.cpp	/^    unordered_map<handle_t, int64_t> heuristic_values;$/;"	m	struct:vg::unittest::TestDistHeuristic	file:
hint_paths	cactus_snarl_finder.hpp	/^    unordered_set<string> hint_paths;$/;"	m	class:vg::CactusSnarlFinder
hit_cap	minimizer_mapper.hpp	/^    size_t hit_cap = default_hit_cap;$/;"	m	class:vg::MinimizerMapper
hit_max	mapper.hpp	/^    int hit_max = 0;       \/\/ only query at most this many hits for a MEM (0 for no limit)$/;"	m	class:vg::BaseMapper
hits	minimizer_mapper.hpp	/^        size_t hits; \/\/ How many hits does the minimizer have?$/;"	m	struct:vg::MinimizerMapper::Minimizer
homozygous_prior_ln	genotypekit.hpp	/^    double homozygous_prior_ln = prob_to_logprob(0.999);$/;"	m	class:vg::FixedGenotypePriorCalculator
hts_file_header	alignment.cpp	/^bam_hdr_t* hts_file_header(string& filename, string& header) {$/;"	f	namespace:vg
hts_for_each	alignment.cpp	/^int hts_for_each(string& filename, function<void(Alignment&)> lambda) {$/;"	f	namespace:vg
hts_for_each	alignment.cpp	/^int hts_for_each(string& filename, function<void(Alignment&)> lambda, const PathPositionHandleGraph* graph) {$/;"	f	namespace:vg
hts_for_each_parallel	alignment.cpp	/^int hts_for_each_parallel(string& filename, function<void(Alignment&)> lambda) {$/;"	f	namespace:vg
hts_for_each_parallel	alignment.cpp	/^int hts_for_each_parallel(string& filename, function<void(Alignment&)> lambda,$/;"	f	namespace:vg
hts_mode	hts_alignment_emitter.hpp	/^    string hts_mode;$/;"	m	class:vg::HTSWriter
hts_string_header	alignment.cpp	/^bam_hdr_t* hts_string_header(string& header,$/;"	f	namespace:vg
id	recombinator.cpp	/^    size_t id;$/;"	m	struct:vg::RecombinatorHaplotype	file:
id	subcommand/haplotypes_main.cpp	/^    size_t id;$/;"	m	struct:ReferenceInterval	file:
id	types.hpp	/^inline id_t id(const pos_t& pos) {$/;"	f	namespace:vg
id_interval	haplotype_indexer.hpp	/^    size_t id_interval = gbwt::DynamicGBWT::SAMPLE_INTERVAL;$/;"	m	class:vg::HaplotypeIndexer
id_map	algorithms/gfa_to_handle.cpp	/^GFAIDMapInfo& GFAParser::id_map() {$/;"	f	class:vg::algorithms::GFAParser
id_order	algorithms/id_sort.cpp	/^vector<handle_t> id_order(const HandleGraph* g) {$/;"	f	namespace:vg::algorithms
id_rank_map	viz.hpp	/^    unordered_map<nid_t, uint64_t> id_rank_map;$/;"	m	class:vg::Viz
id_sort	vg.cpp	/^void VG::id_sort() {$/;"	f	class:vg::VG
id_t	types.hpp	/^typedef handlegraph::nid_t id_t;$/;"	t	namespace:vg
id_to_edge_indices	indexed_vg.hpp	/^        unordered_map<id_t, vector<size_t>> id_to_edge_indices;$/;"	m	struct:vg::IndexedVG::CacheEntry
id_to_index	subcommand/options.hpp	/^    std::unordered_map<int, size_t> id_to_index;$/;"	m	struct:vg::subcommand::OptionGroup
id_to_name	algorithms/gfa_to_handle.hpp	/^    unique_ptr<unordered_map<nid_t, const std::string*>> id_to_name;$/;"	m	struct:vg::algorithms::GFAIDMapInfo
id_to_name	path.hpp	/^    mutable map<int64_t, string> id_to_name;$/;"	m	class:vg::Paths
id_to_node_index	indexed_vg.hpp	/^        unordered_map<id_t, size_t> id_to_node_index;$/;"	m	struct:vg::IndexedVG::CacheEntry
id_to_rank	vectorizer.hpp	/^    unordered_map<vg::id_t, size_t> id_to_rank;$/;"	m	class:Vectorizer
id_to_rank	viz.cpp	/^uint64_t Viz::id_to_rank(nid_t id) {$/;"	f	class:vg::Viz
identifier	index_registry.hpp	/^    IndexName identifier;$/;"	m	class:vg::IndexFile
identify_aligned_splice_candidates	multipath_mapper.cpp	/^    void MultipathMapper::identify_aligned_splice_candidates(const Alignment& alignment, bool read_1, bool search_left,$/;"	f	class:vg::MultipathMapper
identify_aligned_splice_candidates	multipath_mapper.cpp	/^    void MultipathMapper::identify_aligned_splice_candidates(const Alignment& alignment, bool search_left,$/;"	f	class:vg::MultipathMapper
identify_pinning_points	aligner.cpp	/^unordered_set<vg::id_t> GSSWAligner::identify_pinning_points(const HandleGraph& graph) const {$/;"	f	class:vg::GSSWAligner
identify_sources_and_sinks	cluster.cpp	/^void MEMClusterer::HitGraph::identify_sources_and_sinks(vector<size_t>& sources_out,$/;"	f	class:vg::MEMClusterer::HitGraph
identify_start_subpaths	multipath_alignment.cpp	/^    void identify_start_subpaths(multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
identify_unaligned_splice_candidates	multipath_mapper.cpp	/^    void MultipathMapper::identify_unaligned_splice_candidates(const Alignment& alignment, bool search_left,$/;"	f	class:vg::MultipathMapper
identity	path.cpp	/^double identity(const Path& path) {$/;"	f	namespace:vg
identity_translation	vg.cpp	/^void VG::identity_translation(unordered_map<nid_t, pair<nid_t, bool>>& node_translation) {$/;"	f	class:vg::VG
identity_weight	mapper.hpp	/^    double identity_weight; \/\/ scale mapping quality by the alignment score identity to this power$/;"	m	class:vg::Mapper
ignore_missing_contigs	variant_adder.hpp	/^    bool ignore_missing_contigs = false;$/;"	m	class:vg::VariantAdder
image_height	viz.hpp	/^    int image_height = 0;$/;"	m	class:vg::Viz
image_width	viz.hpp	/^    int image_width = 0;$/;"	m	class:vg::Viz
immutable_path_from_length	minimizer_mapper.cpp	/^size_t MinimizerMapper::immutable_path_from_length(const ImmutablePath& path) {$/;"	f	class:vg::MinimizerMapper
imperfect_pairs_to_retry	mapper.hpp	/^    vector<pair<Alignment, Alignment> > imperfect_pairs_to_retry;$/;"	m	class:vg::Mapper
in	gff_reader.hpp	/^        istream& in;$/;"	m	class:vg::GFFReader
in_from	extra_node_graph.hpp	/^    unordered_set<handle_t> in_from;$/;"	m	class:vg::ExtraNodeGraph
in_nontrivial_chain	snarls.cpp	/^bool SnarlManager::in_nontrivial_chain(const Snarl* here) const {$/;"	f	class:vg::SnarlManager
in_place_subvector	gbwt_extender.cpp	/^void in_place_subvector(std::vector<Element>& vec, size_t head, size_t tail) {$/;"	f	namespace:vg
in_use	gbwt_helper.hpp	/^    index_type in_use = index_none;$/;"	m	struct:vg::GBWTHandler
in_use	subcommand/gbwt_main.cpp	/^    graph_type in_use = graph_none;$/;"	m	struct:GraphHandler	file:
include	vg.cpp	/^void VG::include(const Path& path) {$/;"	f	class:vg::VG
include_children	sparse_union_find.hpp	/^        bool include_children;$/;"	m	class:vg::SparseUnionFind
include_endpoints	traversal_finder.hpp	/^    bool include_endpoints = true;$/;"	m	class:vg::VCFTraversalFinder
include_full_length_bonuses	mapper.hpp	/^    bool include_full_length_bonuses;$/;"	m	class:vg::Mapper
include_named_paths	subcommand/gbwt_main.cpp	/^    bool include_named_paths = false;$/;"	m	struct:GBWTConfig	file:
include_nested	graph_caller.hpp	/^    bool include_nested;$/;"	m	class:vg::VCFOutputCaller
include_reference	recombinator.hpp	/^        bool include_reference = false;$/;"	m	struct:vg::Recombinator::Parameters
include_reversing_traversals	traversal_finder.hpp	/^    bool include_reversing_traversals;$/;"	m	class:vg::ExhaustiveTraversalFinder
inclusive_interval	haplotypes.hpp	/^  bool inclusive_interval() const { return true; }$/;"	f	class:haplo::hDP_gbwt_graph_accessor
incorrectly_mapped	readfilter.hpp	/^        proper_pair, unmapped, annotation, incorrectly_mapped, last};$/;"	e	enum:vg::Counts::FilterName
increment_coverage	packer.cpp	/^void Packer::increment_coverage(size_t i) {$/;"	f	class:vg::Packer
increment_coverage	packer.cpp	/^void Packer::increment_coverage(size_t i, size_t v) {$/;"	f	class:vg::Packer
increment_edge_coverage	packer.cpp	/^void Packer::increment_edge_coverage(size_t i) {$/;"	f	class:vg::Packer
increment_edge_coverage	packer.cpp	/^void Packer::increment_edge_coverage(size_t i, size_t v) {$/;"	f	class:vg::Packer
increment_node_ids	path.cpp	/^void Paths::increment_node_ids(id_t inc) {$/;"	f	class:vg::Paths
increment_node_ids	vg.cpp	/^void VG::increment_node_ids(nid_t increment) {$/;"	f	class:vg::VG
increment_node_quality	packer.cpp	/^void Packer::increment_node_quality(size_t i, size_t v) {$/;"	f	class:vg::Packer
increment_progress	progressive.cpp	/^void Progressive::increment_progress() {$/;"	f	class:vg::Progressive
incremental_extend	haplotypes.cpp	/^IncrementalSearchState ScoreProvider::incremental_extend(const IncrementalSearchState& state, const vg::Position& pos) const {$/;"	f	class:haplo::ScoreProvider
incremental_extend	haplotypes.hpp	/^IncrementalSearchState GBWTScoreProvider<GBWTType>::incremental_extend(const IncrementalSearchState& state, const vg::Position& pos) const {$/;"	f	class:haplo::GBWTScoreProvider
incremental_find	haplotypes.cpp	/^IncrementalSearchState ScoreProvider::incremental_find(const vg::Position& pos) const {$/;"	f	class:haplo::ScoreProvider
incremental_find	haplotypes.hpp	/^IncrementalSearchState GBWTScoreProvider<GBWTType>::incremental_find(const vg::Position& pos) const {$/;"	f	class:haplo::GBWTScoreProvider
indel_error_prop	sampler.hpp	/^    const double indel_error_prop;$/;"	m	class:vg::NGSSimulator
indel_poly_rate	sampler.hpp	/^    const double indel_poly_rate;$/;"	m	class:vg::NGSSimulator
index	haplotypes.hpp	/^  GBWTType& index;$/;"	m	class:haplo::GBWTScoreProvider
index	haplotypes.hpp	/^  const linear_haplo_structure& index;$/;"	m	class:haplo::LinearScoreProvider
index	haplotypes.hpp	/^  siteIndex* index = nullptr;$/;"	m	struct:haplo::linear_haplo_structure
index	indexed_vg.hpp	/^    StreamIndex<Graph> index;$/;"	m	class:vg::IndexedVG
index_compressed	gbwt_helper.hpp	/^    enum index_type { index_none, index_compressed, index_dynamic };$/;"	e	enum:vg::GBWTHandler::index_type
index_dynamic	gbwt_helper.hpp	/^    enum index_type { index_none, index_compressed, index_dynamic };$/;"	e	enum:vg::GBWTHandler::index_type
index_edge_by_node_sides	vg.cpp	/^void VG::index_edge_by_node_sides(Edge* edge) {$/;"	f	class:vg::VG
index_none	gbwt_helper.hpp	/^    enum index_type { index_none, index_compressed, index_dynamic };$/;"	e	enum:vg::GBWTHandler::index_type
index_of	dozeu_interface.hpp	/^        unordered_map<handle_t, size_t> index_of;$/;"	m	struct:vg::DozeuInterface::OrderedGraph
index_registry	index_registry.hpp	/^    map<IndexName, unique_ptr<IndexFile>> index_registry;$/;"	m	class:vg::IndexRegistry
index_to_node	packer.cpp	/^nid_t Packer::index_to_node(size_t i) const {$/;"	f	class:vg::Packer
index_type	gbwt_helper.hpp	/^    enum index_type { index_none, index_compressed, index_dynamic };$/;"	g	struct:vg::GBWTHandler
indexes	graph_synchronizer.hpp	/^    map<string, PathIndex> indexes;$/;"	m	class:vg::GraphSynchronizer
indexes	index_registry.cpp	/^RewindPlanException::RewindPlanException(const string& msg, const IndexGroup& rewind_to) noexcept : msg(msg), indexes(rewind_to) {$/;"	f	namespace:vg
indexes	index_registry.hpp	/^    IndexGroup indexes;$/;"	m	class:vg::RewindPlanException
indexes	utility.hpp	/^    const vector<size_t>* indexes;$/;"	m	struct:vg::VectorView
init	splicing.cpp	/^void SpliceStats::init(const vector<tuple<string, string, double>>& motifs,$/;"	f	class:vg::SpliceStats
init	vg.cpp	/^void VG::init(void) {$/;"	f	class:vg::VG
init	viz.cpp	/^void Viz::init(PathHandleGraph* x, vector<Packer>* p, const vector<string>& n, const string& o, int w, int h, bool c, bool d, bool t) {$/;"	f	class:vg::Viz
init_band_padding_memo	multipath_mapper.cpp	/^    void MultipathMapper::init_band_padding_memo() {$/;"	f	class:vg::MultipathMapper
init_coverage_bin	packer.cpp	/^void Packer::init_coverage_bin(size_t i) {$/;"	f	class:vg::Packer
init_edge_coverage_bin	packer.cpp	/^void Packer::init_edge_coverage_bin(size_t i) {$/;"	f	class:vg::Packer
init_in	index_registry.cpp	/^static void init_in(ifstream& in, const string& name) {$/;"	f	namespace:vg
init_in_out	index_registry.cpp	/^static void init_in_out(fstream& strm, const string& name) {$/;"	f	namespace:vg
init_mapper	filter.cpp	/^    void Filter::init_mapper(){$/;"	f	class:vg::Filter
init_node_quality_bin	packer.cpp	/^void Packer::init_node_quality_bin(size_t i) {$/;"	f	class:vg::Packer
init_out	index_registry.cpp	/^static void init_out(ofstream& out, const string& name) {$/;"	f	namespace:vg
init_state	dinucleotide_machine.cpp	/^uint32_t DinucleotideMachine::init_state() const {$/;"	f	class:vg::DinucleotideMachine
init_traceback_indexes	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BAMatrix::init_traceback_indexes(const HandleGraph& graph, int64_t& i, int64_t& j) {$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
initial_lookback_threshold	minimizer_mapper.hpp	/^    size_t initial_lookback_threshold = default_initial_lookback_threshold;$/;"	m	class:vg::MinimizerMapper
initial_position	path.cpp	/^pos_t initial_position(const Path& path) {$/;"	f	namespace:vg
initial_position	path.cpp	/^pos_t initial_position(const path_t& path) {$/;"	f	namespace:vg
initialize_sam_file	hts_alignment_emitter.cpp	/^void HTSWriter::initialize_sam_file(bam_hdr_t* header, size_t thread_number, bool keep_header) {$/;"	f	class:vg::HTSWriter
inline_items	gbwt_extender.cpp	/^        uint32_t inline_items[NUM_INLINE];$/;"	m	struct:vg::MatchPos::PathList	file:
inner_value	haplotypes.hpp	/^  int64_t inner_value;$/;"	m	struct:haplo::haplo_DP_rectangle
input_filenames	subcommand/gbwt_main.cpp	/^    std::vector<std::string> input_filenames;$/;"	m	struct:GBWTConfig	file:
input_gaf	subcommand/convert_main.cpp	/^enum input_type { input_handlegraph, input_gam, input_gaf, input_gfa, input_gbwtgraph };$/;"	e	enum:input_type	file:
input_gam	subcommand/convert_main.cpp	/^enum input_type { input_handlegraph, input_gam, input_gaf, input_gfa, input_gbwtgraph };$/;"	e	enum:input_type	file:
input_gbwtgraph	subcommand/convert_main.cpp	/^enum input_type { input_handlegraph, input_gam, input_gaf, input_gfa, input_gbwtgraph };$/;"	e	enum:input_type	file:
input_gfa	subcommand/convert_main.cpp	/^enum input_type { input_handlegraph, input_gam, input_gaf, input_gfa, input_gbwtgraph };$/;"	e	enum:input_type	file:
input_group	index_registry.cpp	/^IndexGroup IndexRecipe::input_group() const {$/;"	f	class:vg::IndexRecipe
input_handlegraph	subcommand/convert_main.cpp	/^enum input_type { input_handlegraph, input_gam, input_gaf, input_gfa, input_gbwtgraph };$/;"	e	enum:input_type	file:
input_in_progress	funnel.hpp	/^    size_t input_in_progress = numeric_limits<size_t>::max();$/;"	m	class:vg::Funnel::State
input_type	subcommand/convert_main.cpp	/^enum input_type { input_handlegraph, input_gam, input_gaf, input_gfa, input_gbwtgraph };$/;"	g	file:
input_vcf	graph_caller.hpp	/^    vcflib::VariantCallFile& input_vcf;$/;"	m	class:vg::VCFGenotyper
inputs	index_registry.cpp	/^    runtime_error("Insufficient input to create " + target), target(target), inputs(registry.completed_indexes())$/;"	f	namespace:vg
inputs	index_registry.hpp	/^    vector<IndexName> inputs;$/;"	m	class:vg::InsufficientInputException
inputs	index_registry.hpp	/^    vector<const IndexFile*> inputs;$/;"	m	struct:vg::IndexRecipe
inputs_as_jobs	subcommand/gbwt_main.cpp	/^    bool gam_format = false, inputs_as_jobs = false, parse_only = false;$/;"	m	struct:GBWTConfig	file:
ins_predecessor	gbwt_extender.cpp	/^    std::pair<MatchPos, WFAAlignment::Edit> ins_predecessor(uint32_t node, int32_t score, int32_t diagonal) const {$/;"	f	class:vg::WFATree
insert	genome_state.cpp	/^const vector<pair<handle_t, size_t>>& SnarlState::insert(size_t overall_lane, const vector<handle_t>& haplotype, bool backward) {$/;"	f	class:vg::SnarlState
insert	genome_state.cpp	/^void SnarlState::insert(const vector<pair<handle_t, size_t>>& haplotype) {$/;"	f	class:vg::SnarlState
insert	integrated_snarl_finder.cpp	/^    inline void insert(const handle_t& here) {$/;"	f	class:vg::HandleGraphNodeSet
insert	recombinator.cpp	/^void RecombinatorHaplotype::insert(gbwt::GBWTBuilder& builder, gbwtgraph::MetadataBuilder& metadata) {$/;"	f	class:vg::RecombinatorHaplotype
insert	small_bitset.hpp	/^        void insert(size_t i) {$/;"	f	class:vg::SmallBitset
insert	stream_index.hpp	/^void BitStringTree<Item>::TreeNode::insert(const BitString& key, const Item& value) {$/;"	f	class:vg::BitStringTree::TreeNode
insert	stream_index.hpp	/^void BitStringTree<Item>::insert(const BitString& key, const Item& value) {$/;"	f	class:vg::BitStringTree
insert	subcommand/gbwt_main.cpp	/^    void insert(path_type path) {$/;"	f	struct:job_type
insert_col	banded_global_aligner.hpp	/^        IntType* insert_col;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
insert_gbwt_path	gbwt_helper.cpp	/^std::string insert_gbwt_path(MutablePathHandleGraph& graph, const gbwt::GBWT& gbwt_index, gbwt::size_type id, std::string path_name) {$/;"	f	namespace:vg
insert_handles	genome_state.cpp	/^void GenomeState::insert_handles(const vector<handle_t>& to_add,$/;"	f	class:vg::GenomeState
insert_haplotype	genome_state.cpp	/^DeleteHaplotypeCommand GenomeState::insert_haplotype(const InsertHaplotypeCommand& c) {$/;"	f	class:vg::GenomeState
insert_left	phased_genome.hpp	/^    inline void PhasedGenome::insert_left(NodeTraversal node_traversal, HaplotypeNode* haplo_node) {$/;"	f	class:vg::PhasedGenome
insert_mapping	path.cpp	/^list<mapping_t>::iterator Paths::insert_mapping(list<mapping_t>::iterator w, const string& path_name, const mapping_t& m) {$/;"	f	class:vg::Paths
insert_mean	filter.hpp	/^        float insert_mean = 1000;$/;"	m	class:vg::Filter
insert_path	phase_unfolder.cpp	/^void PhaseUnfolder::insert_path(const path_type& path, bool from_border, bool to_border) {$/;"	f	class:vg::PhaseUnfolder
insert_right	phased_genome.hpp	/^    inline void PhasedGenome::insert_right(NodeTraversal node_traversal, HaplotypeNode* haplo_node) {$/;"	f	class:vg::PhasedGenome
insert_row	banded_global_aligner.hpp	/^        IntType* insert_row;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
insert_sd	filter.hpp	/^        float insert_sd = 100;$/;"	m	class:vg::Filter
insert_size_filter	filter.cpp	/^    bool Filter::insert_size_filter(Alignment& aln_first, Alignment& aln_second){$/;"	f	class:vg::Filter
insert_traceback	banded_global_aligner.cpp	/^inline void BandedGlobalAligner<IntType>::AltTracebackStack::insert_traceback(const vector<Deflection>& traceback_prefix,$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
insertion	gbwt_extender.hpp	/^    enum Edit { match, mismatch, insertion, deletion };$/;"	e	enum:vg::WFAAlignment::Edit
insertion_bias_large	snarl_caller.hpp	/^    double insertion_bias_large = 1.;$/;"	m	class:vg::PoissonSupportSnarlCaller
insertion_bias_small	snarl_caller.hpp	/^    double insertion_bias_small = 1.;$/;"	m	class:vg::PoissonSupportSnarlCaller
insertion_filter	filter.cpp	/^    pair<Locus, Locus> Filter::insertion_filter(Alignment& aln_first, Alignment& aln_second) {$/;"	f	class:vg::Filter
insertion_threshold	snarl_caller.hpp	/^    double insertion_threshold = 5.;$/;"	m	class:vg::PoissonSupportSnarlCaller
insertions	genome_state.hpp	/^    unordered_map<const Snarl*, vector<vector<pair<handle_t, size_t>>>> insertions;$/;"	m	struct:vg::InsertHaplotypeCommand
insertions	genome_state.hpp	/^    unordered_map<const Snarl*, vector<vector<pair<handle_t, size_t>>>> insertions;$/;"	m	struct:vg::ReplaceLocalHaplotypeCommand
int16x4_t	simde/arm/neon/types.h	/^  typedef   simde_int16x4_t     int16x4_t;$/;"	t
int16x4x2_t	simde/arm/neon/types.h	/^  typedef simde_int16x4x2_t   int16x4x2_t;$/;"	t
int16x4x3_t	simde/arm/neon/types.h	/^  typedef simde_int16x4x3_t   int16x4x3_t;$/;"	t
int16x4x4_t	simde/arm/neon/types.h	/^  typedef simde_int16x4x4_t   int16x4x4_t;$/;"	t
int16x8_t	simde/arm/neon/types.h	/^  typedef   simde_int16x8_t     int16x8_t;$/;"	t
int16x8x2_t	simde/arm/neon/types.h	/^  typedef simde_int16x8x2_t   int16x8x2_t;$/;"	t
int16x8x3_t	simde/arm/neon/types.h	/^  typedef simde_int16x8x3_t   int16x8x3_t;$/;"	t
int16x8x4_t	simde/arm/neon/types.h	/^  typedef simde_int16x8x4_t   int16x8x4_t;$/;"	t
int32x2_t	simde/arm/neon/types.h	/^  typedef   simde_int32x2_t     int32x2_t;$/;"	t
int32x2x2_t	simde/arm/neon/types.h	/^  typedef simde_int32x2x2_t   int32x2x2_t;$/;"	t
int32x2x3_t	simde/arm/neon/types.h	/^  typedef simde_int32x2x3_t   int32x2x3_t;$/;"	t
int32x2x4_t	simde/arm/neon/types.h	/^  typedef simde_int32x2x4_t   int32x2x4_t;$/;"	t
int32x4_t	simde/arm/neon/types.h	/^  typedef   simde_int32x4_t     int32x4_t;$/;"	t
int32x4x2_t	simde/arm/neon/types.h	/^  typedef simde_int32x4x2_t   int32x4x2_t;$/;"	t
int32x4x3_t	simde/arm/neon/types.h	/^  typedef simde_int32x4x3_t   int32x4x3_t;$/;"	t
int32x4x4_t	simde/arm/neon/types.h	/^  typedef simde_int32x4x4_t   int32x4x4_t;$/;"	t
int64x1_t	simde/arm/neon/types.h	/^  typedef   simde_int64x1_t     int64x1_t;$/;"	t
int64x1x2_t	simde/arm/neon/types.h	/^  typedef simde_int64x1x2_t   int64x1x2_t;$/;"	t
int64x1x3_t	simde/arm/neon/types.h	/^  typedef simde_int64x1x3_t   int64x1x3_t;$/;"	t
int64x1x4_t	simde/arm/neon/types.h	/^  typedef simde_int64x1x4_t   int64x1x4_t;$/;"	t
int64x2_t	simde/arm/neon/types.h	/^  typedef   simde_int64x2_t     int64x2_t;$/;"	t
int64x2x2_t	simde/arm/neon/types.h	/^  typedef simde_int64x2x2_t   int64x2x2_t;$/;"	t
int64x2x3_t	simde/arm/neon/types.h	/^  typedef simde_int64x2x3_t   int64x2x3_t;$/;"	t
int64x2x4_t	simde/arm/neon/types.h	/^  typedef simde_int64x2x4_t   int64x2x4_t;$/;"	t
int8x16_t	simde/arm/neon/types.h	/^  typedef   simde_int8x16_t     int8x16_t;$/;"	t
int8x16x2_t	simde/arm/neon/types.h	/^  typedef simde_int8x16x2_t   int8x16x2_t;$/;"	t
int8x16x3_t	simde/arm/neon/types.h	/^  typedef simde_int8x16x3_t   int8x16x3_t;$/;"	t
int8x16x4_t	simde/arm/neon/types.h	/^  typedef simde_int8x16x4_t   int8x16x4_t;$/;"	t
int8x8_t	simde/arm/neon/types.h	/^  typedef    simde_int8x8_t      int8x8_t;$/;"	t
int8x8x2_t	simde/arm/neon/types.h	/^  typedef  simde_int8x8x2_t    int8x8x2_t;$/;"	t
int8x8x3_t	simde/arm/neon/types.h	/^  typedef  simde_int8x8x3_t    int8x8x3_t;$/;"	t
int8x8x4_t	simde/arm/neon/types.h	/^  typedef  simde_int8x8x4_t    int8x8x4_t;$/;"	t
int_is_inc	haplotypes.hpp	/^  bool int_is_inc;$/;"	m	struct:haplo::haplo_DP_rectangle
int_is_nonnegative	subcommand/options.cpp	/^const ValidatorFunction<int> int_is_nonnegative = [](const int& i) {$/;"	m	namespace:vg::subcommand	file:
int_itvl_t	haplotypes.hpp	/^struct int_itvl_t{$/;"	s	namespace:haplo
int_weighted_sum	haplotypes.cpp	/^double int_weighted_sum(double* values, int64_t* counts, size_t n_values) {$/;"	f	namespace:haplo::haploMath
int_weighted_sum	haplotypes.cpp	/^double int_weighted_sum(vector<double> values, vector<int64_t> counts) {$/;"	f	namespace:haplo::haploMath
integer_power	utility.cpp	/^size_t integer_power(uint64_t base, uint64_t exponent) {$/;"	f	namespace:vg
interchromosomal_filter	filter.cpp	/^    bool Filter::interchromosomal_filter(Alignment& aln_first, Alignment& aln_second){$/;"	f	class:vg::Filter
interleaved	readfilter.hpp	/^    bool interleaved = false;$/;"	m	class:vg::ReadFilter
internal_id_map	algorithms/gfa_to_handle.hpp	/^    unique_ptr<GFAIDMapInfo> internal_id_map;$/;"	m	class:vg::algorithms::GFAParser
internal_score	gbwt_extender.hpp	/^    uint32_t                  internal_score; \/\/ Total number of mismatches.$/;"	m	struct:vg::GaplessExtension
intersect_path_offsets	algorithms/intersect_path_offsets.cpp	/^bool intersect_path_offsets(const path_offset_collection_t& a_offsets,$/;"	f	namespace:vg::algorithms
intersection	haplotypes.cpp	/^int_itvl_t int_itvl_t::intersection(const int_itvl_t& A, const int_itvl_t& B) {$/;"	f	class:haplo::int_itvl_t
interval_length	gbwt_extender.cpp	/^size_t interval_length(std::pair<size_t, size_t> interval) {$/;"	f	namespace:vg
interval_size	haplotypes.cpp	/^int64_t haplo_DP_rectangle::interval_size() const {$/;"	f	class:haplo::haplo_DP_rectangle
into_cutting_snarl	multipath_alignment_graph.cpp	/^    bool MultipathAlignmentGraph::into_cutting_snarl(id_t node_id, bool is_rev,$/;"	f	class:vg::MultipathAlignmentGraph
into_which_snarl	snarls.cpp	/^const Snarl* SnarlManager::into_which_snarl(const Visit& visit) const {$/;"	f	class:vg::SnarlManager
into_which_snarl	snarls.cpp	/^const Snarl* SnarlManager::into_which_snarl(int64_t id, bool reverse) const {$/;"	f	class:vg::SnarlManager
introduce	funnel.cpp	/^void Funnel::introduce(size_t count) {$/;"	f	class:vg::Funnel
intron_length_log_likelihood	splicing.cpp	/^double SpliceStats::intron_length_log_likelihood(int64_t length) const {$/;"	f	class:vg::SpliceStats
intron_length_score	splicing.cpp	/^int32_t SpliceStats::intron_length_score(int64_t length) const {$/;"	f	class:vg::SpliceStats
invalid	haplotypes.hpp	/^    invalid$/;"	e	enum:haplo::linear_haplo_structure::nodeType
inverse	filter.hpp	/^        bool inverse = false;$/;"	m	class:vg::Filter
inverse	utility.hpp	/^    vector<size_t> inverse;$/;"	m	class:vg::VectorViewInverse
inversion_filter	filter.cpp	/^    bool Filter::inversion_filter(Alignment& aln_first, Alignment& aln_second){$/;"	f	class:vg::Filter
invert_translation	algorithms/gfa_to_handle.cpp	/^void GFAIDMapInfo::invert_translation() {$/;"	f	class:vg::algorithms::GFAIDMapInfo
io	io/converted_hash_graph.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/json_stream_helper.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/load_proto_to_graph.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/load_proto_to_graph.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_libvg_io.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_libvg_io.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_distance_index.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_distance_index.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_gbwt.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_gbwt.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_gbwtgraph.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_gbwtgraph.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_gbz.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_gbz.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_gbzgraph.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_gbzgraph.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_gcsa.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_gcsa.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_gfa.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_gfa.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_hash_graph.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_hash_graph.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_lcp.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_lcp.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_minimizer.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_minimizer.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_packed_graph.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_packed_graph.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_r_index.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_r_index.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_snarl_manager.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_snarl_manager.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_vg.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_vg.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/register_loader_saver_xg.cpp	/^namespace io {$/;"	n	namespace:vg	file:
io	io/register_loader_saver_xg.hpp	/^namespace io {$/;"	n	namespace:vg
io	io/save_handle_graph.hpp	/^namespace io {$/;"	n	namespace:vg
isATGC	utility.cpp	/^bool isATGC(const char& b) {$/;"	f	namespace:vg
isFalseTest	unittest/catch.hpp	/^    inline bool isFalseTest( int flags ) { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
isForward	filter.hpp	/^    bool isForward;$/;"	m	struct:vg::BREAKPOINT
is_a_duplicate_handle	dozeu_pinning_overlay.cpp	/^bool DozeuPinningOverlay::is_a_duplicate_handle(const handle_t& handle) const {$/;"	f	class:vg::DozeuPinningOverlay
is_a_duplicate_id	dozeu_pinning_overlay.cpp	/^bool DozeuPinningOverlay::is_a_duplicate_id(const id_t& node_id) const {$/;"	f	class:vg::DozeuPinningOverlay
is_all_n	utility.cpp	/^bool is_all_n(const string& seq) {$/;"	f	namespace:vg
is_alt	path.cpp	/^const std::function<bool(const string&)> Paths::is_alt = [](const string& path_name) {$/;"	m	class:vg::Paths	file:
is_alt	path.hpp	/^    const static function<bool(const string&)> is_alt;$/;"	m	class:vg::Paths
is_ancestor_next	vg.cpp	/^bool VG::is_ancestor_next(nid_t node_id, nid_t candidate_id) {$/;"	f	class:vg::VG
is_ancestor_next	vg.cpp	/^bool VG::is_ancestor_next(nid_t node_id, nid_t candidate_id, set<nid_t>& seen, size_t steps) {$/;"	f	class:vg::VG
is_ancestor_prev	vg.cpp	/^bool VG::is_ancestor_prev(nid_t node_id, nid_t candidate_id) {$/;"	f	class:vg::VG
is_ancestor_prev	vg.cpp	/^bool VG::is_ancestor_prev(nid_t node_id, nid_t candidate_id, set<nid_t>& seen, size_t steps) {$/;"	f	class:vg::VG
is_any_painted	funnel.cpp	/^bool Funnel::PaintableSpace::is_any_painted(size_t start, size_t length) const {$/;"	f	class:vg::Funnel::PaintableSpace
is_callable	unittest/catch.hpp	/^    struct is_callable<Fun(Args...)> : decltype(is_callable_tester::test<Fun, Args...>(0)) {};$/;"	s	namespace:Catch
is_callable_tester	unittest/catch.hpp	/^    struct is_callable_tester {$/;"	s	namespace:Catch
is_checked_in	watchdog.hpp	/^        bool is_checked_in = false;$/;"	m	struct:vg::Watchdog::thread_state_t
is_child	snarls.cpp	/^bool NetGraph::is_child(const handle_t& handle) const {$/;"	f	class:vg::NetGraph
is_compacted	packer.hpp	/^    bool is_compacted = false;$/;"	m	class:vg::Packer
is_consistent	multipath_mapper.cpp	/^    bool MultipathMapper::is_consistent(int64_t distance) const {$/;"	f	class:vg::MultipathMapper
is_correct	funnel.cpp	/^bool Funnel::is_correct(size_t item) const {$/;"	f	class:vg::Funnel
is_correctly_mapped	readfilter.hpp	/^inline bool ReadFilter<Alignment>::is_correctly_mapped(const Alignment& alignment) const {$/;"	f	class:vg::ReadFilter
is_correctly_mapped	readfilter.hpp	/^inline bool ReadFilter<MultipathAlignment>::is_correctly_mapped(const MultipathAlignment& alignment) const {$/;"	f	class:vg::ReadFilter
is_dynamic	packer.cpp	/^bool Packer::is_dynamic(void) const {$/;"	f	class:vg::Packer
is_empty	haplotypes.cpp	/^bool haplo_DP_column::is_empty() const {$/;"	f	class:haplo::haplo_DP_column
is_empty	memoizing_graph.cpp	/^    bool MemoizingGraph::is_empty(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
is_empty	types.hpp	/^inline bool is_empty(const pos_t& pos) {$/;"	f	namespace:vg
is_end	cactus.hpp	/^    bool is_end;$/;"	m	struct:vg::CactusSide
is_end	nodeside.hpp	/^    bool is_end;$/;"	m	class:vg::NodeSide
is_extendable	incremental_subgraph.cpp	/^bool IncrementalSubgraph::is_extendable() const {$/;"	f	class:vg::IncrementalSubgraph
is_finalized	mapper.cpp	/^bool FragmentLengthDistribution::is_finalized() const {$/;"	f	class:vg::FragmentLengthDistribution
is_finished	index_registry.cpp	/^bool IndexFile::is_finished() const {$/;"	f	class:vg::IndexFile
is_fixed	mapper.hpp	/^    bool is_fixed = false;$/;"	m	class:vg::FragmentLengthDistribution
is_gzipped	index_registry.cpp	/^bool is_gzipped(const string& filename) {$/;"	f	namespace:vg
is_haplotype	transcriptome.hpp	/^    bool is_haplotype;$/;"	m	struct:vg::TranscriptPath
is_head_node	algorithms/distance_to_head.cpp	/^bool is_head_node(handle_t h, const HandleGraph* g) {$/;"	f	namespace:vg::algorithms
is_head_node	vg.cpp	/^bool VG::is_head_node(Node* node) {$/;"	f	class:vg::VG
is_head_node	vg.cpp	/^bool VG::is_head_node(nid_t id) {$/;"	f	class:vg::VG
is_head_or_tail_node	path.cpp	/^bool Paths::is_head_or_tail_node(id_t id) {$/;"	f	class:vg::Paths
is_id_sortable	graph.cpp	/^bool is_id_sortable(const Graph& graph) {$/;"	f	namespace:vg
is_instantiation_of	subcommand/options.hpp	/^struct is_instantiation_of : std::false_type {$/;"	s	namespace:vg
is_instantiation_of	subcommand/options.hpp	/^struct is_instantiation_of<Predicate<PredicateArgs...>, Predicate> : std::true_type {$/;"	s	namespace:vg
is_intermediate	index_registry.cpp	/^bool IndexingPlan::is_intermediate(const IndexName& identifier) const {$/;"	f	class:vg::IndexingPlan
is_leaf	gbwt_extender.cpp	/^    bool is_leaf() const { return (this->children.empty() || this->dead_end); }$/;"	f	struct:vg::WFANode
is_leaf	snarls.cpp	/^bool SnarlManager::is_leaf(const Snarl* snarl) const {$/;"	f	class:vg::SnarlManager
is_left_clipped	filter.cpp	/^    bool Filter::is_left_clipped(Alignment& a){$/;"	f	class:vg::Filter
is_looping_chain	snarl_seed_clusterer.hpp	/^            bool is_looping_chain = false;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
is_mapped	readfilter.cpp	/^bool ReadFilter<Alignment>::is_mapped(const Alignment& alignment) const {$/;"	f	class:vg::ReadFilter
is_mapped	readfilter.cpp	/^bool ReadFilter<MultipathAlignment>::is_mapped(const MultipathAlignment& mp_alignment) const {$/;"	f	class:vg::ReadFilter
is_match	translator.cpp	/^bool is_match(const Translation& translation) {$/;"	f	namespace:vg
is_new	haplotypes.cpp	/^bool haplo_DP_rectangle::is_new() const {$/;"	f	class:haplo::haplo_DP_rectangle
is_novel_edge	genotypekit.hpp	/^    bool is_novel_edge(const Edge* augmented_edge) {$/;"	f	struct:vg::AugmentedGraph
is_novel_node	genotypekit.hpp	/^    bool is_novel_node(const Node* augmented_node) {$/;"	f	struct:vg::AugmentedGraph
is_number	utility.cpp	/^bool is_number(const std::string& s) {$/;"	f	namespace:vg
is_ours	extra_node_graph.hpp	/^    inline bool is_ours(const handle_t& our_handle) const {$/;"	f	class:vg::ExtraNodeGraph
is_ours	source_sink_overlay.hpp	/^    inline bool is_ours(const handle_t& our_handle) const {$/;"	f	class:vg::SourceSinkOverlay
is_proper_pair	readfilter.hpp	/^bool ReadFilter<Read>::is_proper_pair(const Read& read) const {$/;"	f	class:vg::ReadFilter
is_reference	transcriptome.hpp	/^    bool is_reference;$/;"	m	struct:vg::TranscriptPath
is_rend	snarls.hpp	/^    bool is_rend;$/;"	m	struct:vg::ChainIterator
is_rev	types.hpp	/^inline bool is_rev(const pos_t& pos) {$/;"	f	namespace:vg
is_reverse	genotyper.hpp	/^        bool is_reverse = false;$/;"	m	struct:vg::Genotyper::Affinity
is_reverse	path.cpp	/^bool mapping_t::is_reverse(void) const {$/;"	f	class:vg::mapping_t
is_reverse	position.hpp	/^inline bool position_t::is_reverse() const {$/;"	f	class:vg::position_t
is_reverse	transcriptome.hpp	/^    bool is_reverse;$/;"	m	struct:vg::Transcript
is_reversed	snarl_distance_index.hpp	/^    bool is_reversed;$/;"	m	struct:vg::MIPayloadValues
is_reversed	snarl_distance_index.hpp	/^    static bool is_reversed(const gbwtgraph::Payload code) {$/;"	f	struct:vg::MIPayload
is_reversed_in_parent	snarl_seed_clusterer.hpp	/^            bool is_reversed_in_parent = false;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
is_root	gbwt_extender.cpp	/^    static bool is_root(uint32_t node) { return (node == 0); }$/;"	f	class:vg::WFATree
is_root	snarls.cpp	/^bool SnarlManager::is_root(const Snarl* snarl) const {$/;"	f	class:vg::SnarlManager
is_secondary	readfilter.hpp	/^inline bool ReadFilter<Alignment>::is_secondary(const Alignment& aln) const {$/;"	f	class:vg::ReadFilter
is_secondary	readfilter.hpp	/^inline bool ReadFilter<MultipathAlignment>::is_secondary(const MultipathAlignment& mp_aln) const {$/;"	f	class:vg::ReadFilter
is_seed	snarl_seed_clusterer.hpp	/^                bool is_seed;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem::SnarlTreeChild
is_self_looping	vg.cpp	/^bool VG::is_self_looping(Node* node) {$/;"	f	class:vg::VG
is_snarl_smaller_than_reads	genotyper.cpp	/^bool Genotyper::is_snarl_smaller_than_reads(AugmentedGraph& augmented_graph,$/;"	f	class:vg::Genotyper
is_snv	haplotypes.cpp	/^bool linear_haplo_structure::is_snv(int64_t node_id) const {$/;"	f	class:haplo::linear_haplo_structure
is_solitary_ref	haplotypes.cpp	/^bool linear_haplo_structure::is_solitary_ref(int64_t node_id) const {$/;"	f	class:haplo::linear_haplo_structure
is_split	readfilter.hpp	/^inline bool ReadFilter<Alignment>::is_split(const Alignment& alignment) const {$/;"	f	class:vg::ReadFilter
is_split	readfilter.hpp	/^inline bool ReadFilter<MultipathAlignment>::is_split(const MultipathAlignment& mp_aln) const {$/;"	f	class:vg::ReadFilter
is_tail_node	algorithms/distance_to_tail.cpp	/^bool is_tail_node(handle_t h, const HandleGraph* g) {$/;"	f	namespace:vg::algorithms
is_tail_node	vg.cpp	/^bool VG::is_tail_node(Node* node) {$/;"	f	class:vg::VG
is_tail_node	vg.cpp	/^bool VG::is_tail_node(nid_t id) {$/;"	f	class:vg::VG
is_traversable	graph_caller.cpp	/^bool LegacyCaller::is_traversable(const Snarl& snarl) {$/;"	f	class:vg::LegacyCaller
is_traversable	mcmc_caller.cpp	/^    bool MCMCCaller::is_traversable(const Snarl& snarl) {$/;"	f	class:vg::MCMCCaller
is_trivial	snarls.cpp	/^bool SnarlManager::is_trivial(const Snarl* snarl, const HandleGraph& graph) const {$/;"	f	class:vg::SnarlManager
is_trivial_chain	snarl_distance_index.hpp	/^    bool is_trivial_chain;$/;"	m	struct:vg::MIPayloadValues
is_trivial_chain	snarl_distance_index.hpp	/^    static bool is_trivial_chain (const gbwtgraph::Payload code) { $/;"	f	struct:vg::MIPayload
is_trivial_chain	snarl_seed_clusterer.hpp	/^            bool is_trivial_chain = false;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
is_valid	sampler.cpp	/^bool Sampler::is_valid(const Alignment& aln) {$/;"	f	class:vg::Sampler
is_valid	subcommand/options.hpp	/^    inline bool is_valid() {$/;"	f	struct:vg::Range
is_valid	vg.cpp	/^bool VG::is_valid(bool check_nodes,$/;"	f	class:vg::VG
is_vg	graph_caller.hpp	/^    bool is_vg;$/;"	m	class:vg::LegacyCaller
item_bonus	minimizer_mapper.hpp	/^    int item_bonus = default_item_bonus;$/;"	m	class:vg::MinimizerMapper
item_count	gbwt_extender.cpp	/^        size_t item_count = 0;$/;"	m	struct:vg::MatchPos::PathList	file:
items	funnel.hpp	/^        vector<Item> items;$/;"	m	struct:vg::Funnel::State::Stage
items	utility.hpp	/^    const vector<Item>* items;$/;"	m	struct:vg::VectorView
iteratee	cluster.hpp	/^        const ShuffledPairs& iteratee;$/;"	m	class:vg::ShuffledPairs::iterator
iterator	cluster.cpp	/^ShuffledPairs::iterator::iterator(const ShuffledPairs& iteratee, size_t start_at) : iteratee(iteratee), permutation_idx(start_at), permuted(1) {$/;"	f	class:vg::ShuffledPairs::iterator
iterator	cluster.hpp	/^    class iterator {$/;"	c	class:vg::ShuffledPairs
iterator	phased_genome.cpp	/^    PhasedGenome::iterator::iterator() : rank(0), haplotype_number(-1), haplo_node(nullptr) {$/;"	f	class:vg::PhasedGenome::iterator
iterator	phased_genome.cpp	/^    PhasedGenome::iterator::iterator(const iterator& other) : rank(other.rank),$/;"	f	class:vg::PhasedGenome::iterator
iterator	phased_genome.cpp	/^    PhasedGenome::iterator::iterator(size_t rank, int haplotype_number, HaplotypeNode* haplo_node) :$/;"	f	class:vg::PhasedGenome::iterator
iterator	phased_genome.hpp	/^    class PhasedGenome::iterator {$/;"	c	class:vg::PhasedGenome
iterator_category	deconstructor.hpp	/^    typedef std::output_iterator_tag iterator_category;$/;"	t	class:vg::count_back_inserter
iterator_traits	phased_genome.hpp	/^    struct iterator_traits<vg::PhasedGenome::iterator>{$/;"	s	namespace:std
jitter_homopolymer_ends	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::jitter_homopolymer_ends(const HandleGraph& graph,$/;"	f	class:vg::MultipathAlignmentGraph
job_func	job_schedule.hpp	/^    function<void(int64_t)> job_func;$/;"	m	class:vg::JobSchedule
job_id	recombinator.hpp	/^        size_t job_id;$/;"	m	struct:vg::Haplotypes::TopLevelChain
job_type	subcommand/gbwt_main.cpp	/^struct job_type {$/;"	s	file:
jobs	recombinator.hpp	/^    size_t jobs() const { return this->header.construction_jobs; }$/;"	f	class:vg::Haplotypes
jobs_for_cached_paths	recombinator.hpp	/^    std::vector<size_t> jobs_for_cached_paths;$/;"	m	class:vg::Haplotypes
join	gbwt_extender.cpp	/^void WFAAlignment::join(const WFAAlignment& second) {$/;"	f	class:vg::WFAAlignment
join_heads	vg.cpp	/^Node* VG::join_heads(void) {$/;"	f	class:vg::VG
join_heads	vg.cpp	/^void VG::join_heads(Node* node, bool from_start) {$/;"	f	class:vg::VG
join_tails	vg.cpp	/^void VG::join_tails(Node* node, bool to_end) {$/;"	f	class:vg::VG
joint_initial_distr	sampler.hpp	/^    MarkovDistribution<pair<uint8_t, bool>, pair<pair<uint8_t, bool>, pair<uint8_t, bool>>> joint_initial_distr;$/;"	m	class:vg::NGSSimulator
jump_along_closest_path	algorithms/jump_along_path.cpp	/^    vector<pos_t> jump_along_closest_path(const PathPositionHandleGraph* graph,$/;"	f	namespace:vg::algorithms
k	kff.hpp	/^    size_t k;$/;"	m	class:vg::ParallelKFFReader
k	mem_accelerator.hpp	/^    const int64_t k = 1;$/;"	m	class:vg::MEMAccelerator
k	recombinator.hpp	/^        std::uint64_t k = DEFAULT_K;$/;"	m	struct:vg::Haplotypes::Header
k	recombinator.hpp	/^    size_t k() const { return this->header.k; }$/;"	f	class:vg::Haplotypes
k	subcommand/haplotypes_main.cpp	/^    size_t k = haplotypes_default_k(), w = haplotypes_default_w();$/;"	m	struct:HaplotypesConfig	file:
karger_stein	mcmc_genotyper.cpp	/^    vector<unordered_set<size_t>> MCMCGenotyper::karger_stein(const vector<multipath_alignment_t>& reads, PhasedGenome& genome) const{$/;"	f	class:vg::MCMCGenotyper
kargers_min_cut	algorithms/min_cut_graph.cpp	/^        pair<vector<unordered_set<size_t>>, size_t> kargers_min_cut(Graph graph, const int seed) {$/;"	f	namespace:vg::algorithms
keep	readfilter.hpp	/^    bool keep() {$/;"	f	struct:vg::Counts
keep_conflicted_genotypes	deconstructor.hpp	/^    bool keep_conflicted_genotypes = false;$/;"	m	class:vg::Deconstructor
keep_intermediates	index_registry.hpp	/^    bool keep_intermediates = false;$/;"	m	class:vg::IndexRegistry
keep_path	vg.cpp	/^void VG::keep_path(const string& path_name) {$/;"	f	class:vg::VG
keep_paths	path.cpp	/^void Paths::keep_paths(const set<string>& names) {$/;"	f	class:vg::Paths
keep_paths	vg.cpp	/^void VG::keep_paths(const set<string>& path_names, set<string>& kept_names) {$/;"	f	class:vg::VG
key	explainer.cpp	/^void ProblemDumpExplainer::key(const std::string& k) {$/;"	f	class:vg::ProblemDumpExplainer
key	gbwt_extender.cpp	/^    key_type key() const {$/;"	f	struct:vg::WFAPoint
kff_bytes	kff.hpp	/^inline size_t kff_bytes(size_t k) {$/;"	f	namespace:vg
kff_decode	kff.cpp	/^std::string kff_decode(const uint8_t* kmer, size_t k, const std::string& decoding) {$/;"	f	namespace:vg
kff_decode	kff.cpp	/^void kff_decode(uint8_t byte, size_t chars, const std::string& decoding, std::string& output) {$/;"	f	namespace:vg
kff_encode	kff.cpp	/^std::vector<uint8_t> kff_encode(const std::string& kmer, const uint8_t* encoding) {$/;"	f	namespace:vg
kff_encode	kff.cpp	/^uint8_t kff_encode(const std::string& kmer, size_t start, size_t limit, const uint8_t* encoding) {$/;"	f	namespace:vg
kff_get	kff.cpp	/^uint8_t kff_get(const uint8_t* kmer, size_t i) {$/;"	f	namespace:vg
kff_invert	kff.cpp	/^std::string kff_invert(const uint8_t* encoding) {$/;"	f	namespace:vg
kff_is_trivial	kff.cpp	/^bool kff_is_trivial(const uint8_t* encoding) {$/;"	f	namespace:vg
kff_parse	kff.cpp	/^uint64_t kff_parse(const uint8_t* data, size_t bytes) {$/;"	f	namespace:vg
kff_recode	kff.cpp	/^gbwtgraph::Key64::value_type kff_recode(const uint8_t* kmer, size_t k, kff_recoding_t recoding) {$/;"	f	namespace:vg
kff_recode	kff.cpp	/^std::vector<gbwtgraph::Key64::value_type> kff_recode(const uint8_t* kmers, size_t n, size_t k, kff_recoding_t recoding) {$/;"	f	namespace:vg
kff_recode	kff.cpp	/^std::vector<uint8_t> kff_recode(gbwtgraph::Key64::value_type kmer, size_t k, const uint8_t* encoding) {$/;"	f	namespace:vg
kff_recode	kff.cpp	/^uint8_t kff_recode(gbwtgraph::Key64::value_type kmer, size_t k, size_t chars, const uint8_t* encoding) {$/;"	f	namespace:vg
kff_recode_trivial	kff.cpp	/^gbwtgraph::Key64::value_type kff_recode_trivial(const uint8_t* kmer, size_t k, size_t bytes) {$/;"	f	namespace:vg
kff_recoding	kff.cpp	/^kff_recoding_t kff_recoding(const uint8_t* encoding) {$/;"	f	namespace:vg
kff_recoding_t	kff.hpp	/^struct kff_recoding_t {$/;"	s	namespace:vg
kff_reverse_complement	kff.cpp	/^std::vector<uint8_t> kff_reverse_complement(const uint8_t* kmer, size_t k, const uint8_t* encoding) {$/;"	f	namespace:vg
kff_set	kff.cpp	/^void kff_set(std::vector<uint8_t>& kmer, size_t i, uint8_t value) {$/;"	f	namespace:vg
kmer	vg.hpp	/^    string kmer;$/;"	m	struct:vg::KmerPosition
kmer_counts	recombinator.cpp	/^hash_map<Haplotypes::Subchain::kmer_type, size_t> Haplotypes::kmer_counts(const std::string& kff_file, Verbosity verbosity) const {$/;"	f	class:vg::Haplotypes
kmer_input	subcommand/haplotypes_main.cpp	/^    std::string haplotype_input, kmer_input, vcf_input;$/;"	m	struct:HaplotypesConfig	file:
kmer_length	subcommand/prune_main.cpp	/^    static std::map<PruningMode, int>    kmer_length;$/;"	m	struct:PruningParameters	file:
kmer_output	subcommand/haplotypes_main.cpp	/^    std::string gbz_output, haplotype_output, score_output, kmer_output;$/;"	m	struct:HaplotypesConfig	file:
kmer_presence	recombinator.hpp	/^    enum kmer_presence { absent, heterozygous, present, frequent };$/;"	g	class:vg::Recombinator
kmer_size	variant_adder.hpp	/^    size_t kmer_size = 16;$/;"	m	class:vg::VariantAdder
kmer_t	algorithms/kmer.hpp	/^    kmer_t(const std::string& s,$/;"	f	struct:vg::algorithms::kmer_t
kmer_t	algorithms/kmer.hpp	/^struct kmer_t {$/;"	s	namespace:vg::algorithms
kmer_t	kmer.hpp	/^    kmer_t(const string& s,$/;"	f	struct:vg::kmer_t
kmer_t	kmer.hpp	/^struct kmer_t {$/;"	s	namespace:vg
kmer_to_gcsa_kmers	kmer.cpp	/^void kmer_to_gcsa_kmers(const kmer_t& kmer, const gcsa::Alphabet& alpha, const function<void(const gcsa::KMer&)>& lambda) {$/;"	f	namespace:vg
kmer_type	kff.hpp	/^    typedef gbwtgraph::Key64::value_type kmer_type;$/;"	t	class:vg::ParallelKFFReader
kmer_type	recombinator.hpp	/^        typedef gbwtgraph::Key64::value_type kmer_type;$/;"	t	struct:vg::Haplotypes::Subchain
kmer_type	recombinator.hpp	/^    typedef Haplotypes::Subchain::kmer_type kmer_type;$/;"	t	class:vg::HaplotypePartitioner
kmers	recombinator.hpp	/^        size_t kmers = 0;$/;"	m	struct:vg::Recombinator::Statistics
kmers	recombinator.hpp	/^        std::vector<std::pair<kmer_type, size_t>> kmers;$/;"	m	struct:vg::Haplotypes::Subchain
kmers	recombinator.hpp	/^    size_t kmers() const { return this->header.total_kmers; }$/;"	f	class:vg::Haplotypes
kmers_present	recombinator.hpp	/^        sdsl::bit_vector kmers_present;$/;"	m	struct:vg::Haplotypes::Subchain
kmp_search	kmp.cpp	/^size_t kmp_search(const char* text, size_t text_len,$/;"	f	namespace:vg
lane	genome_state.hpp	/^    size_t lane;$/;"	m	struct:vg::ReplaceSnarlHaplotypeCommand
large_alignment_band_padding	variant_adder.hpp	/^    size_t large_alignment_band_padding = 30;$/;"	m	class:vg::VariantAdder
larger_prime	cluster.hpp	/^    size_t larger_prime;$/;"	m	class:vg::ShuffledPairs
last	feature_set.hpp	/^        size_t last;$/;"	m	struct:vg::FeatureSet::Feature
last	readfilter.hpp	/^        proper_pair, unmapped, annotation, incorrectly_mapped, last};$/;"	e	enum:vg::Counts::FilterName
last_checkin	watchdog.hpp	/^        chrono::steady_clock::time_point last_checkin;$/;"	m	struct:vg::Watchdog::thread_state_t
last_correct_stage	funnel.cpp	/^string Funnel::last_correct_stage(size_t tag_start, size_t tag_length) const {$/;"	f	class:vg::Funnel
last_group_min_id	stream_index.hpp	/^    id_t last_group_min_id = numeric_limits<id_t>::min();$/;"	m	class:vg::StreamIndexBase
last_node_length	path_index.hpp	/^    size_t last_node_length;$/;"	m	struct:vg::PathIndex
last_path_position	path.cpp	/^Position last_path_position(const Path& path) {$/;"	f	namespace:vg
last_progress	progressive.hpp	/^    long last_progress;$/;"	m	class:vg::Progressive
last_tagged_stage	funnel.cpp	/^string Funnel::last_tagged_stage(State tag, size_t tag_start, size_t tag_length) const {$/;"	f	class:vg::Funnel
latest	funnel.cpp	/^size_t Funnel::latest() const {$/;"	f	class:vg::Funnel
layout_order	dagified_graph.hpp	/^        unordered_map<handle_t, size_t> layout_order;$/;"	m	class:vg::DagifiedGraph
layout_order_of_handle	dagified_graph.cpp	/^    size_t DagifiedGraph::layout_order_of_handle(const handle_t& handle) const {$/;"	f	class:vg::DagifiedGraph
lcp	mapper.hpp	/^    gcsa::LCPArray* lcp = nullptr;$/;"	m	class:vg::BaseMapper
lcp_ind	filter.hpp	/^        gcsa::LCPArray * lcp_ind;$/;"	m	class:vg::Filter
left_alignment_strand	banded_global_aligner.hpp	/^        bool left_alignment_strand;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
left_border	viz.hpp	/^    int left_border = 0;$/;"	m	class:vg::Viz
left_degree	vg.cpp	/^int VG::left_degree(NodeTraversal node) {$/;"	f	class:vg::VG
left_ends	constructor.hpp	/^    set<id_t> left_ends;$/;"	m	struct:vg::ConstructedChunk
left_full	gbwt_extender.hpp	/^    bool                      left_full, right_full;$/;"	m	struct:vg::GaplessExtension
left_handle_trans	splicing.hpp	/^    vector<int64_t> left_handle_trans;$/;"	m	class:vg::JoinedSpliceGraph
left_maximal	gbwt_extender.hpp	/^    bool                      left_maximal, right_maximal;$/;"	m	struct:vg::GaplessExtension
left_seed_node	splicing.cpp	/^handle_t JoinedSpliceGraph::left_seed_node() const {$/;"	f	class:vg::JoinedSpliceGraph
left_splice_node	splicing.cpp	/^handle_t JoinedSpliceGraph::left_splice_node() const {$/;"	f	class:vg::JoinedSpliceGraph
left_splice_offset	splicing.hpp	/^    size_t left_splice_offset;$/;"	m	class:vg::JoinedSpliceGraph
left_subgraph	splicing.hpp	/^    const IncrementalSubgraph* left_subgraph;$/;"	m	class:vg::JoinedSpliceGraph
left_telomere_node	phased_genome.hpp	/^        PhasedGenome::HaplotypeNode* left_telomere_node;$/;"	m	class:vg::PhasedGenome::Haplotype
len	sequence_complexity.hpp	/^    int len;$/;"	m	struct:vg::SeqComplexity
length	algorithms/chain_items.hpp	/^    inline size_t length() const {$/;"	f	class:vg::algorithms::Anchor
length	algorithms/gfa_to_handle.hpp	/^    inline static size_t length(const chars_t& range) {$/;"	f	class:vg::algorithms::GFAParser
length	algorithms/prune.cpp	/^    uint16_t length; \/\/\/ how far we've been$/;"	m	struct:vg::algorithms::walk_t	file:
length	gbwt_extender.cpp	/^    size_t length() const {$/;"	f	struct:vg::WFANode
length	gbwt_extender.hpp	/^    size_t length() const { return this->read_interval.second - this->read_interval.first; }$/;"	f	struct:vg::GaplessExtension
length	gbwt_extender.hpp	/^    uint32_t length = 0;$/;"	m	struct:vg::WFAAlignment
length	haplotypes.hpp	/^  double length;$/;"	m	struct:haplo::haplo_DP_column
length	haplotypes.hpp	/^  size_t length;$/;"	m	class:haplo::hDP_gbwt_graph_accessor
length	mem.cpp	/^int MaximalExactMatch::length(void) const {$/;"	f	class:vg::MaximalExactMatch
length	mem_accelerator.hpp	/^inline int64_t MEMAccelerator::length() const {$/;"	f	class:vg::MEMAccelerator
length	minimizer_mapper.hpp	/^        int32_t length; \/\/ How long is the minimizer (index's k)$/;"	m	struct:vg::MinimizerMapper::Minimizer
length	path.hpp	/^    int32_t length;$/;"	m	class:vg::mapping_t
length	subcommand/gamcompare_main.cpp	/^    size_t length; \/\/ Length of the alignment.$/;"	m	struct:MappingRun	file:
length	subcommand/haplotypes_main.cpp	/^    size_t length() const {$/;"	f	struct:ReferenceInterval
length	vg.cpp	/^size_t VG::length(void) {$/;"	f	class:vg::VG
lengths	mapper.hpp	/^    multiset<double> lengths;$/;"	m	class:vg::FragmentLengthDistribution
less_than	stream_sorter.hpp	/^bool StreamSorter<Message>::less_than(const Message &a, const Message &b) const {$/;"	f	class:vg::StreamSorter
less_than	stream_sorter.hpp	/^bool StreamSorter<Message>::less_than(const Position& a, const Position& b) const {$/;"	f	class:vg::StreamSorter
likelihood_ln	genotyper.hpp	/^        double likelihood_ln = 0;    $/;"	m	struct:vg::Genotyper::Affinity
likely_mate_positions	mapper.cpp	/^vector<pos_t> Mapper::likely_mate_positions(const Alignment& aln, bool is_first_mate) {$/;"	f	class:vg::Mapper
likely_mismapping	multipath_mapper.cpp	/^    bool MultipathMapper::likely_mismapping(const multipath_alignment_t& multipath_aln) {$/;"	f	class:vg::MultipathMapper
likely_misrescue	multipath_mapper.cpp	/^    bool MultipathMapper::likely_misrescue(const multipath_alignment_t& multipath_aln) {$/;"	f	class:vg::MultipathMapper
limit	subcommand/gamcompare_main.cpp	/^    size_t limit() const {$/;"	f	struct:MappingRun
line	unittest/catch.hpp	/^            line( _line )$/;"	f	struct:Catch::SourceLineInfo
line	unittest/catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
lineInfo	unittest/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
line_number	algorithms/gfa_to_handle.hpp	/^    size_t line_number = 0;$/;"	m	struct:vg::algorithms::GFAFormatError
linearUnrepresentable	haplotypes.hpp	/^  class linearUnrepresentable : public runtime_error {$/;"	c	struct:haplo::linear_haplo_structure
linear_haplo_structure	haplotypes.cpp	/^linear_haplo_structure::linear_haplo_structure(istream& slls_index, double log_mut_penalty,$/;"	f	class:haplo::linear_haplo_structure
linear_haplo_structure	haplotypes.hpp	/^struct linear_haplo_structure{$/;"	s	namespace:haplo
list_haplotypes	haplotype_extracter.cpp	/^vector<pair<vector<gbwt::node_type>, gbwt::SearchState> > list_haplotypes(const HandleGraph& graph,$/;"	f	namespace:vg
list_names	subcommand/gbwt_main.cpp	/^    bool metadata = false, contigs = false, haplotypes = false, samples = false, list_names = false, thread_names = false, tags = false;$/;"	m	struct:GBWTConfig	file:
literal_target_memory_usage	index_registry.cpp	/^int64_t IndexingPlan::literal_target_memory_usage() const {$/;"	f	class:vg::IndexingPlan
ln_to_log10	statistics.hpp	/^inline double ln_to_log10(double ln) {$/;"	f	namespace:vg
load	packer.cpp	/^void Packer::load(istream& in) {$/;"	f	class:vg::Packer
load	path.cpp	/^void Paths::load(istream& in) {$/;"	f	class:vg::Paths
load	translator.cpp	/^void Translator::load(const vector<Translation>& trans) {$/;"	f	class:vg::Translator
load_alignments	msa_converter.cpp	/^    void MSAConverter::load_alignments(istream& in, string format){$/;"	f	class:vg::MSAConverter
load_bed	feature_set.cpp	/^void FeatureSet::load_bed(istream& in) {$/;"	f	class:vg::FeatureSet
load_from_file	packer.cpp	/^void Packer::load_from_file(const string& file_name) {$/;"	f	class:vg::Packer
load_gbwt	gbwt_helper.cpp	/^void load_gbwt(gbwt::DynamicGBWT& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_gbwt	gbwt_helper.cpp	/^void load_gbwt(gbwt::GBWT& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_gbwtgraph	gbwtgraph_helper.cpp	/^void load_gbwtgraph(gbwtgraph::GBWTGraph& graph, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_gbwtgraph	subcommand/gbwt_main.cpp	/^void GraphHandler::load_gbwtgraph(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f	class:GraphHandler
load_gbz	gbwtgraph_helper.cpp	/^void load_gbz(gbwt::GBWT& index, gbwtgraph::GBWTGraph& graph, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_gbz	gbwtgraph_helper.cpp	/^void load_gbz(gbwtgraph::GBZ& gbz, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_gbz	gbwtgraph_helper.cpp	/^void load_gbz(gbwtgraph::GBZ& gbz, const std::string& gbwt_name, const std::string& graph_name, bool show_progress) {$/;"	f	namespace:vg
load_gbz	subcommand/gbwt_main.cpp	/^void GraphHandler::load_gbz(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f	class:GraphHandler
load_gcsa	gcsa_helper.cpp	/^void load_gcsa(gcsa::GCSA& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_lcp	gcsa_helper.cpp	/^void load_lcp(gcsa::LCPArray& lcp, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_minimizer	gbwtgraph_helper.cpp	/^void load_minimizer(gbwtgraph::DefaultMinimizerIndex& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_old	recombinator.cpp	/^void Haplotypes::TopLevelChain::load_old(std::istream& in) {$/;"	f	class:vg::Haplotypes::TopLevelChain
load_pack_as_supports	genotypekit.cpp	/^void SupportAugmentedGraph::load_pack_as_supports(const string& pack_file_name, const HandleGraph* vectorizable_graph) {$/;"	f	class:vg::SupportAugmentedGraph
load_proto_to_graph	io/load_proto_to_graph.cpp	/^void load_proto_to_graph(vg::MutablePathMutableHandleGraph* destination, const function<void(const function<void(Graph&)>&)>& chunk_sender) {$/;"	f	namespace:vg::io
load_proto_to_graph	io/load_proto_to_graph.cpp	/^void load_proto_to_graph(vg::MutablePathMutableHandleGraph* destination, const vg::io::message_sender_function_t& for_each_message) {$/;"	f	namespace:vg::io
load_r_index	gbwt_helper.cpp	/^void load_r_index(gbwt::FastLocate& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
load_supports	genotypekit.cpp	/^void SupportAugmentedGraph::load_supports(istream& in_file) {$/;"	f	class:vg::SupportAugmentedGraph
load_translation_back_map	gbwt_helper.cpp	/^unordered_map<nid_t, pair<string, size_t>> load_translation_back_map(HandleGraph& graph, ifstream& input_stream) {$/;"	f	namespace:vg
load_translation_back_map	gbwtgraph_helper.cpp	/^unordered_map<nid_t, pair<string, size_t>> load_translation_back_map(const gbwtgraph::GBWTGraph& graph) {$/;"	f	namespace:vg
load_translation_map	gbwt_helper.cpp	/^unordered_map<string, vector<nid_t>> load_translation_map(ifstream& input_stream) {$/;"	f	namespace:vg
load_translation_map	gbwtgraph_helper.cpp	/^unordered_map<string, vector<nid_t>> load_translation_map(const gbwtgraph::GBWTGraph& graph) {$/;"	f	namespace:vg
load_translations	genotypekit.cpp	/^void AugmentedGraph::load_translations(istream& in_file) {$/;"	f	class:vg::AugmentedGraph
locally_expand_graph	algorithms/locally_expand_graph.cpp	/^void locally_expand_graph(const HandleGraph& parent, MutableHandleGraph& subgraph,$/;"	f	namespace:vg::algorithms
lock	graph_synchronizer.cpp	/^void GraphSynchronizer::Lock::lock() {$/;"	f	class:vg::GraphSynchronizer::Lock
locked_nodes	graph_synchronizer.hpp	/^        set<id_t> locked_nodes;$/;"	m	class:vg::GraphSynchronizer::Lock
locked_nodes	graph_synchronizer.hpp	/^    set<id_t> locked_nodes;$/;"	m	class:vg::GraphSynchronizer
locus_to_variant	genotyper.cpp	/^Genotyper::locus_to_variant(VG& graph,$/;"	f	class:vg::Genotyper
log10_add_one	statistics.hpp	/^inline double log10_add_one(double x) {$/;"	f	namespace:vg
log10_to_ln	statistics.hpp	/^inline double log10_to_ln(double l10) {$/;"	f	namespace:vg
logRRDiff	haplotypes.cpp	/^double RRMemo::logRRDiff(int height, int width) {$/;"	f	class:haplo::haploMath::RRMemo
logS	haplotypes.cpp	/^double RRMemo::logS(int height, int width) {$/;"	f	class:haplo::haploMath::RRMemo
logS_bases	haplotypes.hpp	/^    std::vector<double> logS_bases;$/;"	m	struct:haplo::haploMath::RRMemo
logT	haplotypes.cpp	/^double RRMemo::logT(int width) {$/;"	f	class:haplo::haploMath::RRMemo
logT_base	haplotypes.hpp	/^    double logT_base;$/;"	m	struct:haplo::haploMath::RRMemo
log_alignment	minimizer_mapper.cpp	/^string MinimizerMapper::log_alignment(const Alignment& aln) {$/;"	f	class:vg::MinimizerMapper
log_alignment	minimizer_mapper.cpp	/^string MinimizerMapper::log_alignment(const Path& path, bool force_condensed) {$/;"	f	class:vg::MinimizerMapper
log_base	aligner.hpp	/^        double log_base = 0.0;$/;"	m	class:vg::GSSWAligner
log_base	splicing.hpp	/^    double log_base;$/;"	m	class:vg::SpliceStats
log_bits	minimizer_mapper.cpp	/^string MinimizerMapper::log_bits(const std::vector<bool>& bits) {$/;"	f	class:vg::MinimizerMapper
log_continue_factor	haplotypes.cpp	/^double RRMemo::log_continue_factor(int64_t totwidth) {$/;"	f	class:haplo::haploMath::RRMemo
log_continue_probability	haplotypes.hpp	/^    double log_continue_probability;         \/\/ $/;"	m	struct:haplo::haploMath::RRMemo
log_likelihood_approx_factor	multipath_mapper.hpp	/^        double log_likelihood_approx_factor = 1.0;$/;"	m	class:vg::MultipathMapper
log_name	minimizer_mapper.cpp	/^string MinimizerMapper::log_name() {$/;"	f	class:vg::MinimizerMapper
log_population_size	haplotypes.cpp	/^double RRMemo::log_population_size() {$/;"	f	class:haplo::haploMath::RRMemo
log_recombination_penalty	haplotypes.cpp	/^double RRMemo::log_recombination_penalty() {$/;"	f	class:haplo::haploMath::RRMemo
log_target	mcmc_genotyper.cpp	/^    double MCMCGenotyper::log_target(unique_ptr<PhasedGenome>& phased_genome, const vector<multipath_alignment_t>& reads)const{$/;"	f	class:vg::MCMCGenotyper
logdiff	haplotypes.cpp	/^double logdiff(double a, double b) {$/;"	f	namespace:haplo::haploMath
lognormal_pdf	statistics.cpp	/^double lognormal_pdf(double x, double mu, double sigma) {$/;"	f	namespace:vg
logprob_add	statistics.hpp	/^inline double logprob_add(double logprob1, double logprob2) {$/;"	f	namespace:vg
logprob_geometric_mean	statistics.hpp	/^inline double logprob_geometric_mean(double lnprob1, double lnprob2) {$/;"	f	namespace:vg
logprob_invert	statistics.hpp	/^inline double logprob_invert(double logprob) {$/;"	f	namespace:vg
logprob_sum	statistics.hpp	/^typename Collection::value_type logprob_sum(const Collection& collection) {$/;"	f	namespace:vg
logprob_to_phred	statistics.hpp	/^inline double logprob_to_phred(double logprob ) {$/;"	f	namespace:vg
logprob_to_prob	statistics.hpp	/^inline double logprob_to_prob(double logprob) {$/;"	f	namespace:vg
logsum	haplotypes.cpp	/^double logsum(double a, double b) {$/;"	f	namespace:haplo::haploMath
long_opt	option.hpp	/^    string long_opt;$/;"	m	class:vg::BaseOption
long_options	option.hpp	/^    vector<struct option> long_options;$/;"	m	class:vg::ConfigurableParser
long_options_used	option.hpp	/^    set<string> long_options_used;$/;"	m	class:vg::ConfigurableParser
long_ref_contig	deconstructor.hpp	/^    bool long_ref_contig = false;$/;"	m	class:vg::Deconstructor
longest_detectable_gap	aligner.cpp	/^size_t GSSWAligner::longest_detectable_gap(const Alignment& alignment) const {$/;"	f	class:vg::GSSWAligner
longest_detectable_gap	aligner.cpp	/^size_t GSSWAligner::longest_detectable_gap(const Alignment& alignment, const string::const_iterator& read_pos) const {$/;"	f	class:vg::GSSWAligner
longest_detectable_gap	aligner.cpp	/^size_t GSSWAligner::longest_detectable_gap(size_t read_length) const {$/;"	f	class:vg::GSSWAligner
longest_detectable_gap	aligner.cpp	/^size_t GSSWAligner::longest_detectable_gap(size_t read_length, size_t read_pos) const {$/;"	f	class:vg::GSSWAligner
longest_paths_in_forest	integrated_snarl_finder.cpp	/^pair<vector<pair<size_t, vector<handle_t>>>, unordered_map<handle_t, handle_t>> IntegratedSnarlFinder::MergedAdjacencyGraph::longest_paths_in_forest($/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
lookback_item_hard_cap	minimizer_mapper.hpp	/^    size_t lookback_item_hard_cap = lookback_item_hard_cap;$/;"	m	class:vg::MinimizerMapper
lookback_scale_factor	minimizer_mapper.hpp	/^    double lookback_scale_factor = default_lookback_scale_factor;$/;"	m	class:vg::MinimizerMapper
loop_left	snarl_seed_clusterer.hpp	/^            size_t loop_left = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
loop_right	snarl_seed_clusterer.hpp	/^            size_t loop_right = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
low_complexity_p_value	surjector.hpp	/^        double low_complexity_p_value = .001;$/;"	m	class:vg::Surjector
lower_bound	filter.hpp	/^    int64_t lower_bound = 100;$/;"	m	struct:vg::BREAKPOINT
lower_bound_heuristic	cluster.hpp	/^    unique_ptr<DistanceHeuristic> lower_bound_heuristic;$/;"	m	class:vg::TargetValueSearch
lowercase_warned_alt	constructor.hpp	/^    mutable bool lowercase_warned_alt = false;$/;"	m	class:vg::Constructor
lowercase_warned_sequences	constructor.hpp	/^    mutable unordered_set<string> lowercase_warned_sequences;$/;"	m	class:vg::Constructor
lru_cache_size	packer.cpp	/^const int Packer::lru_cache_size = 4096;$/;"	m	class:vg::Packer	file:
lru_cache_size	packer.hpp	/^    static const int lru_cache_size;$/;"	m	class:vg::Packer
m128	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde__m128         m128[2];$/;"	m	union:__anon7
m128	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m128         m128[4];$/;"	m	union:__anon14
m128_private	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde__m128_private m128_private[2];$/;"	m	union:__anon7
m128_private	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m128_private m128_private[4];$/;"	m	union:__anon14
m128d	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde__m128d         m128d[2];$/;"	m	union:__anon8
m128d	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m128d         m128d[4];$/;"	m	union:__anon15
m128d_private	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde__m128d_private m128d_private[2];$/;"	m	union:__anon8
m128d_private	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m128d_private m128d_private[4];$/;"	m	union:__anon15
m128i	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde__m128i         m128i[2];$/;"	m	union:__anon9
m128i	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m128i         m128i[4];$/;"	m	union:__anon16
m128i	simde/x86/gfni.h	/^  simde__m128i m128i[16];$/;"	m	union:__anon6
m128i_private	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 simde__m128i_private m128i_private[2];$/;"	m	union:__anon9
m128i_private	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m128i_private m128i_private[4];$/;"	m	union:__anon16
m256	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m256         m256[2];$/;"	m	union:__anon14
m256_private	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m256_private m256_private[2];$/;"	m	union:__anon14
m256d	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m256d         m256d[2];$/;"	m	union:__anon15
m256d_private	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m256d_private m256d_private[2];$/;"	m	union:__anon15
m256i	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m256i         m256i[2];$/;"	m	union:__anon16
m256i_private	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN simde__m256i_private m256i_private[2];$/;"	m	union:__anon16
m64	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 simde__m64         m64[2];$/;"	m	union:__anon12
m64	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde__m64         m64[2];$/;"	m	union:__anon10
m64	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde__m64         m64[2];$/;"	m	union:__anon11
m64_private	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 simde__m64_private m64_private[2];$/;"	m	union:__anon12
m64_private	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde__m64_private m64_private[2];$/;"	m	union:__anon10
m64_private	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 simde__m64_private m64_private[2];$/;"	m	union:__anon11
m_a	statistics.hpp	/^    T m_a;$/;"	m	class:vg::uniform_int_distribution
m_a	statistics.hpp	/^    T m_a;$/;"	m	class:vg::uniform_real_distribution
m_alpha	statistics.hpp	/^    T m_alpha;$/;"	m	class:vg::truncated_normal_distribution
m_args	unittest/catch.hpp	/^        std::vector<Arg> m_args;$/;"	m	struct:Catch::Parser
m_b	statistics.hpp	/^    T m_b;$/;"	m	class:vg::uniform_int_distribution
m_b	statistics.hpp	/^    T m_b;$/;"	m	class:vg::uniform_real_distribution
m_beta	statistics.hpp	/^    T m_beta;$/;"	m	class:vg::truncated_normal_distribution
m_description	unittest/catch.hpp	/^        std::string m_description;$/;"	m	class:Catch::ParserRefImpl
m_distU1	statistics.hpp	/^    vg::uniform_real_distribution<T> m_distU1;$/;"	m	class:vg::normal_distribution
m_distU1	statistics.hpp	/^    vg::uniform_real_distribution<T> m_distU1;$/;"	m	class:vg::truncated_normal_distribution
m_exeName	unittest/catch.hpp	/^        mutable ExeName m_exeName;$/;"	m	struct:Catch::Parser
m_hint	unittest/catch.hpp	/^        std::string m_hint;$/;"	m	class:Catch::ParserRefImpl
m_index	unittest/catch.hpp	/^        std::size_t m_index;$/;"	m	class:Catch::ReusableStringStream
m_mean	statistics.hpp	/^    T m_mean;$/;"	m	class:vg::normal_distribution
m_mu	statistics.hpp	/^    T m_mu;$/;"	m	class:vg::truncated_normal_distribution
m_name	unittest/catch.hpp	/^            StringRef m_name;$/;"	m	struct:Catch::Detail::EnumInfo
m_name	unittest/catch.hpp	/^        std::shared_ptr<std::string> m_name;$/;"	m	class:Catch::ExeName
m_optNames	unittest/catch.hpp	/^        std::vector<std::string> m_optNames;$/;"	m	class:Catch::Opt
m_optionality	unittest/catch.hpp	/^        Optionality m_optionality = Optionality::Optional;$/;"	m	class:Catch::ParserRefImpl
m_options	unittest/catch.hpp	/^        std::vector<Opt> m_options;$/;"	m	struct:Catch::Parser
m_oss	unittest/catch.hpp	/^        std::ostream* m_oss;$/;"	m	class:Catch::ReusableStringStream
m_ref	unittest/catch.hpp	/^        std::shared_ptr<BoundRef> m_ref;$/;"	m	class:Catch::ParserRefImpl
m_ref	unittest/catch.hpp	/^        std::shared_ptr<BoundValueRefBase> m_ref;$/;"	m	class:Catch::ExeName
m_sigma	statistics.hpp	/^    T m_sigma;$/;"	m	class:vg::truncated_normal_distribution
m_size	unittest/catch.hpp	/^            m_size( size )$/;"	f	class:Catch::StringRef
m_size	unittest/catch.hpp	/^            m_size( stdString.size() )$/;"	f	class:Catch::StringRef
m_size	unittest/catch.hpp	/^        size_type m_size = 0;$/;"	m	class:Catch::StringRef
m_start	unittest/catch.hpp	/^        char const* m_start = s_empty;$/;"	m	class:Catch::StringRef
m_stddev	statistics.hpp	/^    T m_stddev;$/;"	m	class:vg::normal_distribution
m_sums	statistics.hpp	/^    vector<double> m_sums;$/;"	m	class:vg::discrete_distribution
m_testAsMethod	unittest/catch.hpp	/^    TestInvokerAsMethod( void (C::*testAsMethod)() ) noexcept : m_testAsMethod( testAsMethod ) {}$/;"	f	class:Catch::TestInvokerAsMethod
m_testAsMethod	unittest/catch.hpp	/^    void (C::*m_testAsMethod)();$/;"	m	class:Catch::TestInvokerAsMethod
m_values	unittest/catch.hpp	/^            std::vector<std::pair<int, StringRef>> m_values;$/;"	m	struct:Catch::Detail::EnumInfo
m_weights	statistics.hpp	/^    vector<double> m_weights;$/;"	m	class:vg::discrete_distribution
macroName	unittest/catch.hpp	/^        StringRef macroName;$/;"	m	struct:Catch::AssertionInfo
magic_number	recombinator.hpp	/^        std::uint32_t magic_number = MAGIC_NUMBER;$/;"	m	struct:vg::Haplotypes::Header
main	main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	unittest/support/driver.cpp	/^int main(int argc, char** argv) {$/;"	f
main_add	subcommand/add_main.cpp	/^int main_add(int argc, char** argv) {$/;"	f
main_align	subcommand/align_main.cpp	/^int main_align(int argc, char** argv) {$/;"	f
main_annotate	subcommand/annotate_main.cpp	/^int main_annotate(int argc, char** argv) {$/;"	f
main_augment	subcommand/augment_main.cpp	/^int main_augment(int argc, char** argv) {$/;"	f
main_autoindex	subcommand/autoindex_main.cpp	/^int main_autoindex(int argc, char** argv) {$/;"	f
main_benchmark	subcommand/benchmark_main.cpp	/^int main_benchmark(int argc, char** argv) {$/;"	f
main_call	subcommand/call_main.cpp	/^int main_call(int argc, char** argv) {$/;"	f
main_chain	subcommand/chain_main.cpp	/^int main_chain(int argc, char** argv) {$/;"	f
main_chunk	subcommand/chunk_main.cpp	/^int main_chunk(int argc, char** argv) {$/;"	f
main_circularize	subcommand/circularize_main.cpp	/^int main_circularize(int argc, char** argv){$/;"	f
main_clip	subcommand/clip_main.cpp	/^int main_clip(int argc, char** argv) {$/;"	f
main_cluster	subcommand/cluster_main.cpp	/^int main_cluster(int argc, char** argv) {$/;"	f
main_combine	subcommand/combine_main.cpp	/^int main_combine(int argc, char** argv) {$/;"	f
main_concat	subcommand/concat_main.cpp	/^int main_concat(int argc, char** argv) {$/;"	f
main_construct	subcommand/construct_main.cpp	/^int main_construct(int argc, char** argv) {$/;"	f
main_convert	subcommand/convert_main.cpp	/^int main_convert(int argc, char** argv) {$/;"	f
main_deconstruct	subcommand/deconstruct_main.cpp	/^int main_deconstruct(int argc, char** argv){$/;"	f
main_depth	subcommand/depth_main.cpp	/^int main_depth(int argc, char** argv) {$/;"	f
main_dotplot	subcommand/dotplot_main.cpp	/^int main_dotplot(int argc, char** argv) {$/;"	f
main_explode	subcommand/explode_main.cpp	/^int main_explode(int argc, char** argv) {$/;"	f
main_filter	subcommand/filter_main.cpp	/^int main_filter(int argc, char** argv) {$/;"	f
main_find	subcommand/find_main.cpp	/^int main_find(int argc, char** argv) {$/;"	f
main_function	subcommand/subcommand.hpp	/^    std::function<int(int, char**)> main_function;$/;"	m	class:vg::subcommand::Subcommand
main_gamcompare	subcommand/gamcompare_main.cpp	/^int main_gamcompare(int argc, char** argv) {$/;"	f
main_gampcompare	subcommand/gampcompare_main.cpp	/^int main_gampcompare(int argc, char** argv) {$/;"	f
main_gamsort	subcommand/gamsort_main.cpp	/^int main_gamsort(int argc, char **argv)$/;"	f
main_gbwt	subcommand/gbwt_main.cpp	/^int main_gbwt(int argc, char** argv) {$/;"	f
main_genotype	subcommand/genotype_main.cpp	/^int main_genotype(int argc, char** argv) {$/;"	f
main_giraffe	subcommand/giraffe_main.cpp	/^int main_giraffe(int argc, char** argv) {$/;"	f
main_haplotypes	subcommand/haplotypes_main.cpp	/^int main_haplotypes(int argc, char** argv) {$/;"	f
main_help	subcommand/help_main.cpp	/^int main_help(int argc, char** argv){$/;"	f
main_ids	subcommand/ids_main.cpp	/^int main_ids(int argc, char** argv) {$/;"	f
main_index	subcommand/index_main.cpp	/^int main_index(int argc, char** argv) {$/;"	f
main_inject	subcommand/inject_main.cpp	/^int main_inject(int argc, char** argv) {$/;"	f
main_join	subcommand/join_main.cpp	/^int main_join(int argc, char** argv) {$/;"	f
main_kmers	subcommand/kmers_main.cpp	/^int main_kmers(int argc, char** argv) {$/;"	f
main_map	subcommand/map_main.cpp	/^int main_map(int argc, char** argv) {$/;"	f
main_mcmc	subcommand/mcmc_main.cpp	/^int main_mcmc(int argc, char** argv) {$/;"	f
main_minimizer	subcommand/minimizer_main.cpp	/^int main_minimizer(int argc, char** argv) {$/;"	f
main_mod	subcommand/mod_main.cpp	/^int main_mod(int argc, char** argv) {$/;"	f
main_mpmap	subcommand/mpmap_main.cpp	/^int main_mpmap(int argc, char** argv) {$/;"	f
main_msga	subcommand/msga_main.cpp	/^int main_msga(int argc, char** argv) {$/;"	f
main_pack	subcommand/pack_main.cpp	/^int main_pack(int argc, char** argv) {$/;"	f
main_paths	subcommand/paths_main.cpp	/^int main_paths(int argc, char** argv) {$/;"	f
main_prune	subcommand/prune_main.cpp	/^int main_prune(int argc, char** argv) {$/;"	f
main_rna	subcommand/rna_main.cpp	/^int32_t main_rna(int32_t argc, char** argv) {$/;"	f
main_sift	subcommand/sift_main.cpp	/^int main_sift(int argc, char** argv){$/;"	f
main_sim	subcommand/sim_main.cpp	/^int main_sim(int argc, char** argv) {$/;"	f
main_simplify	subcommand/simplify_main.cpp	/^int main_simplify(int argc, char** argv) {$/;"	f
main_snarl	subcommand/snarls_main.cpp	/^int main_snarl(int argc, char** argv) {$/;"	f
main_sort	subcommand/sort_main.cpp	/^int main_sort(int argc, char *argv[]) {$/;"	f
main_stats	subcommand/stats_main.cpp	/^int main_stats(int argc, char** argv) {$/;"	f
main_surject	subcommand/surject_main.cpp	/^int main_surject(int argc, char** argv) {$/;"	f
main_test	subcommand/test_main.cpp	/^int main_test(int argc, char** argv){$/;"	f
main_trace	subcommand/trace_main.cpp	/^int main_trace(int argc, char** argv) {$/;"	f
main_translate	subcommand/translate_main.cpp	/^int main_translate(int argc, char** argv) {$/;"	f
main_validate	subcommand/validate_main.cpp	/^int main_validate(int argc, char** argv) {$/;"	f
main_vectorize	subcommand/vectorize_main.cpp	/^int main_vectorize(int argc, char** argv){$/;"	f
main_version	subcommand/version_main.cpp	/^int main_version(int argc, char** argv){$/;"	f
main_view	subcommand/view_main.cpp	/^int main_view(int argc, char** argv) {$/;"	f
main_viz	subcommand/viz_main.cpp	/^int main_viz(int argc, char** argv) {$/;"	f
make_anchors	unittest/chain_items.cpp	/^static vector<algorithms::Anchor> make_anchors(const vector<tuple<size_t, handle_t, size_t, size_t, int>>& test_data, const HandleGraph& graph) {$/;"	f	namespace:vg::unittest
make_bands	mapper.cpp	/^vector<Alignment> Mapper::make_bands(const Alignment& read, int band_width, int band_overlap, vector<pair<int, int>>& to_strip) {$/;"	f	class:vg::Mapper
make_circular	path.cpp	/^void Paths::make_circular(const string& name) {$/;"	f	class:vg::Paths
make_compact	packer.cpp	/^void Packer::make_compact(void) {$/;"	f	class:vg::Packer
make_disconnected_graph	unittest/chain_items.cpp	/^static HashGraph make_disconnected_graph(size_t nodes, size_t length = 32) {$/;"	f	namespace:vg::unittest
make_dynamic	packer.cpp	/^void Packer::make_dynamic(void) {$/;"	f	class:vg::Packer
make_edge	phase_unfolder.hpp	/^    static edge_t make_edge(const HandleGraph& graph, gbwt::node_type from, gbwt::node_type to) {$/;"	f	class:vg::PhaseUnfolder
make_empty	gbwt_extender.cpp	/^WFAAlignment WFAAlignment::make_empty() {$/;"	f	class:vg::WFAAlignment
make_graph	msa_converter.cpp	/^    VG MSAConverter::make_graph(bool keep_paths, size_t max_node_length) {$/;"	f	class:vg::MSAConverter
make_hit_graph	cluster.cpp	/^MEMClusterer::HitGraph ComponentMinDistanceClusterer::make_hit_graph(const Alignment& alignment, const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::ComponentMinDistanceClusterer
make_hit_graph	cluster.cpp	/^MEMClusterer::HitGraph GreedyMinDistanceClusterer::make_hit_graph(const Alignment& alignment, const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::GreedyMinDistanceClusterer
make_hit_graph	cluster.cpp	/^MEMClusterer::HitGraph MinDistanceClusterer::make_hit_graph(const Alignment& alignment,$/;"	f	class:vg::MinDistanceClusterer
make_hit_graph	cluster.cpp	/^MEMClusterer::HitGraph NullClusterer::make_hit_graph(const Alignment& alignment, const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::NullClusterer
make_hit_graph	cluster.cpp	/^MEMClusterer::HitGraph OrientedDistanceClusterer::make_hit_graph(const Alignment& alignment, const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::OrientedDistanceClusterer
make_hit_graph	cluster.cpp	/^MEMClusterer::HitGraph TVSClusterer::make_hit_graph(const Alignment& alignment, const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::TVSClusterer
make_indexes	index_registry.cpp	/^void IndexRegistry::make_indexes(const vector<IndexName>& identifiers) {$/;"	f	class:vg::IndexRegistry
make_linear	path.cpp	/^void Paths::make_linear(const string& name) {$/;"	f	class:vg::Paths
make_long_graph	unittest/chain_items.cpp	/^static HashGraph make_long_graph(size_t nodes, size_t length = 32) {$/;"	f	namespace:vg::unittest
make_long_options	subcommand/options.cpp	/^void GroupedOptionGroup::make_long_options(std::vector<struct option>& dest) const {$/;"	f	class:vg::subcommand::GroupedOptionGroup
make_long_options	subcommand/options.hpp	/^    virtual void make_long_options(std::vector<struct option>& dest) const {$/;"	f	struct:vg::subcommand::OptionGroup
make_nontrivial_multipath_alignment	multipath_mapper.cpp	/^    void MultipathMapper::make_nontrivial_multipath_alignment(const Alignment& alignment, const HandleGraph& subgraph,$/;"	f	class:vg::MultipathMapper
make_null_alignment	surjector.cpp	/^    Alignment Surjector::make_null_alignment(const Alignment& source) {$/;"	f	class:vg::Surjector
make_null_mp_alignment	surjector.cpp	/^    multipath_alignment_t Surjector::make_null_mp_alignment(const string& src_sequence,$/;"	f	class:vg::Surjector
make_plan	index_registry.cpp	/^IndexingPlan IndexRegistry::make_plan(const IndexGroup& end_products) const {$/;"	f	class:vg::IndexRegistry
make_pos_t	position.cpp	/^pos_t make_pos_t(const Position& pos) {$/;"	f	namespace:vg
make_pos_t	position.cpp	/^pos_t make_pos_t(const position_t& pos) {$/;"	f	namespace:vg
make_pos_t	position.cpp	/^pos_t make_pos_t(gcsa::node_type node) {$/;"	f	namespace:vg
make_pos_t	types.hpp	/^inline pos_t make_pos_t(id_t id, bool is_rev, offset_t off) {$/;"	f	namespace:vg
make_position	position.cpp	/^Position make_position(const pos_t& pos) {$/;"	f	namespace:vg
make_position	position.cpp	/^Position make_position(gcsa::node_type node) {$/;"	f	namespace:vg
make_position	position.cpp	/^Position make_position(id_t id, bool is_rev, offset_t off) {$/;"	f	namespace:vg
make_prefix_suffix_table	kmp.cpp	/^vector<size_t> make_prefix_suffix_table(const char* pattern, size_t len) {$/;"	f	namespace:vg
make_random_plan	unittest/gbwt_extender.cpp	/^alignment_plan_t make_random_plan(size_t length, default_random_engine& engine) {$/;"	f	namespace:vg::unittest::__anon3
make_ref_index	clip.cpp	/^static unordered_map<handle_t, vector<int64_t>> make_ref_index(PathHandleGraph* graph, path_handle_t ref_path,$/;"	f	namespace:vg
make_short_options	subcommand/options.cpp	/^void GroupedOptionGroup::make_short_options(std::string& dest) const {$/;"	f	class:vg::subcommand::GroupedOptionGroup
make_short_options	subcommand/options.hpp	/^    virtual void make_short_options(std::string& dest) const {$/;"	f	struct:vg::subcommand::OptionGroup
make_shuffle_seed	multipath_alignment.hpp	/^    inline string make_shuffle_seed(const multipath_alignment_t& aln) {$/;"	f	namespace:vg
make_shuffle_seed	utility.hpp	/^inline string make_shuffle_seed(const Alignment& aln) {$/;"	f	namespace:vg
make_shuffle_seed	utility.hpp	/^inline string make_shuffle_seed(const T* ptr) {$/;"	f	namespace:vg
make_shuffle_seed	utility.hpp	/^inline string make_shuffle_seed(const pair<T1, T2>& p) {$/;"	f	namespace:vg
make_side	haplotype_extracter.cpp	/^static int64_t make_side(id_t id, bool is_end) {$/;"	f	namespace:vg
make_snarl_graph	mcmc_genotyper.cpp	/^    algorithms::Graph MCMCGenotyper::make_snarl_graph(unordered_map<pair<const Snarl*, const Snarl*>, int32_t> map) const{$/;"	f	class:vg::MCMCGenotyper
make_snarl_map	mcmc_genotyper.cpp	/^    unordered_map<pair<const Snarl*, const Snarl*>, int32_t> MCMCGenotyper::make_snarl_map(const vector<multipath_alignment_t>& reads, PhasedGenome& phased_genome) const{$/;"	f	class:vg::MCMCGenotyper
make_subset_graph	genotyper.cpp	/^VG Genotyper::make_subset_graph(VG& graph, const string& ref_path_name,$/;"	f	class:vg::Genotyper
make_support	genotypekit.cpp	/^Support make_support(double forward, double reverse, double quality) {$/;"	f	namespace:vg
make_temporary_distance_index	snarl_distance_index.cpp	/^SnarlDistanceIndex::TemporaryDistanceIndex make_temporary_distance_index($/;"	f	namespace:vg
make_translation	augment.cpp	/^vector<Translation> make_translation(const HandleGraph* graph,$/;"	f	namespace:vg
make_unlocalized_insertion	gbwt_extender.cpp	/^WFAAlignment WFAAlignment::make_unlocalized_insertion(size_t sequence_offset, size_t length, int score) {$/;"	f	class:vg::WFAAlignment
make_variant_id	utility.cpp	/^string make_variant_id(const vcflib::Variant& variant) {$/;"	f	namespace:vg
manage	snarls.cpp	/^const Snarl* SnarlManager::manage(const Snarl& not_owned) const {$/;"	f	class:vg::SnarlManager
manager	genome_state.hpp	/^    const SnarlManager& manager;$/;"	m	class:vg::GenomeState
map	minimizer_mapper.cpp	/^vector<Alignment> MinimizerMapper::map(Alignment& aln) {$/;"	f	class:vg::MinimizerMapper
map	minimizer_mapper.cpp	/^void MinimizerMapper::map(Alignment& aln, AlignmentEmitter& alignment_emitter) {$/;"	f	class:vg::MinimizerMapper
map_from_chains	minimizer_mapper_from_chains.cpp	/^vector<Alignment> MinimizerMapper::map_from_chains(Alignment& aln) {$/;"	f	class:vg::MinimizerMapper
map_from_extensions	minimizer_mapper.cpp	/^vector<Alignment> MinimizerMapper::map_from_extensions(Alignment& aln) {$/;"	f	class:vg::MinimizerMapper
map_keys_to_set	utility.hpp	/^set<T> map_keys_to_set(const map<T, V>& m) {$/;"	f	namespace:vg
map_order_to_original	vcf_buffer.hpp	/^    vector<size_t> map_order_to_original;$/;"	m	class:vg::WindowedVcfBuffer
map_over	utility.hpp	/^Container<Output> map_over(const Container<Input>& in, const std::function<Output(const Input&)>& lambda) {$/;"	f	namespace:vg
map_paired	minimizer_mapper.cpp	/^pair<vector<Alignment>, vector<Alignment>> MinimizerMapper::map_paired(Alignment& aln1, Alignment& aln2) {$/;"	f	class:vg::MinimizerMapper
map_paired	minimizer_mapper.cpp	/^pair<vector<Alignment>, vector<Alignment>> MinimizerMapper::map_paired(Alignment& aln1, Alignment& aln2,$/;"	f	class:vg::MinimizerMapper
map_variants	subcommand/haplotypes_main.cpp	/^void map_variants(const gbwtgraph::GBZ& gbz, const Haplotypes& haplotypes, const HaplotypesConfig& config) {$/;"	f
mapper_alignment_cutoff	variant_adder.hpp	/^    size_t mapper_alignment_cutoff = 0;$/;"	m	class:vg::VariantAdder
mapping	path.hpp	/^inline const path_mapping_t& path_t::mapping(size_t i) const {$/;"	f	class:vg::path_t
mapping	path.hpp	/^inline const vector<path_mapping_t>& path_t::mapping() const {$/;"	f	class:vg::path_t
mapping	phase_unfolder.hpp	/^    gcsa::NodeMapping mapping;$/;"	m	class:vg::PhaseUnfolder
mapping_against_path	alignment.cpp	/^void mapping_against_path(Alignment& alignment, const bam1_t *b, const path_handle_t& path, const PathPositionHandleGraph* graph, bool on_reverse_strand) {$/;"	f	namespace:vg
mapping_cigar	alignment.cpp	/^void mapping_cigar(const Mapping& mapping, vector<pair<int, char>>& cigar) {$/;"	f	namespace:vg
mapping_edits	banded_global_aligner.hpp	/^        list<Edit> mapping_edits;$/;"	m	class:vg::BandedGlobalAligner::BABuilder
mapping_ends_in_deletion	path.cpp	/^bool mapping_ends_in_deletion(const Mapping& m){$/;"	f	namespace:vg
mapping_enters_side	traversal_finder.cpp	/^static bool mapping_enters_side(const Mapping& mapping, const handle_t& side, const HandleGraph* graph) {$/;"	f	namespace:vg
mapping_exits_side	traversal_finder.cpp	/^static bool mapping_exits_side(const Mapping& mapping, const handle_t& side, const HandleGraph* graph) {$/;"	f	namespace:vg
mapping_from_length	path.cpp	/^int mapping_from_length(const Mapping& m) {$/;"	f	namespace:vg
mapping_from_length	path.cpp	/^int mapping_from_length(const path_mapping_t& mapping) {$/;"	f	namespace:vg
mapping_is_match	path.cpp	/^bool mapping_is_match(const Mapping& m) {$/;"	f	namespace:vg
mapping_is_simple_match	path.cpp	/^bool mapping_is_simple_match(const Mapping& m) {$/;"	f	namespace:vg
mapping_is_total_deletion	path.cpp	/^bool mapping_is_total_deletion(const Mapping& m) {$/;"	f	namespace:vg
mapping_is_total_insertion	path.cpp	/^bool mapping_is_total_insertion(const Mapping& m) {$/;"	f	namespace:vg
mapping_is_total_match	vg.cpp	/^bool VG::mapping_is_total_match(const Mapping& m) {$/;"	f	class:vg::VG
mapping_itr	path.hpp	/^    hash_map<const mapping_t*, pair<list<mapping_t>::iterator, int64_t> > mapping_itr;$/;"	m	class:vg::Paths
mapping_likelihoods	multipath_mapper.cpp	/^    vector<double> MultipathMapper::mapping_likelihoods(vector<multipath_alignment_t>& multipath_alns) const {$/;"	f	class:vg::MultipathMapper
mapping_path_id	path.cpp	/^int64_t Paths::mapping_path_id(mapping_t* m) {$/;"	f	class:vg::Paths
mapping_path_name	path.cpp	/^const string Paths::mapping_path_name(mapping_t* m) {$/;"	f	class:vg::Paths
mapping_positions	path_index.hpp	/^    map<const mapping_t*, size_t> mapping_positions;$/;"	m	struct:vg::PathIndex
mapping_quality	multipath_alignment.hpp	/^    inline int32_t multipath_alignment_t::mapping_quality() const {$/;"	f	class:vg::multipath_alignment_t
mapping_quality_method	mapper.hpp	/^    MappingQualityMethod mapping_quality_method; \/\/ how to compute mapping qualities$/;"	m	class:vg::BaseMapper
mapping_quality_score_diff	aligner.cpp	/^double GSSWAligner::mapping_quality_score_diff(double mapping_quality) const {$/;"	f	class:vg::GSSWAligner
mapping_sequence	path.cpp	/^const string mapping_sequence(const Mapping& mp, const Node& n) {$/;"	f	namespace:vg
mapping_sequence	path.cpp	/^const string mapping_sequence(const Mapping& mp, const string& node_seq) {$/;"	f	namespace:vg
mapping_size	path.hpp	/^inline size_t path_t::mapping_size() const {$/;"	f	class:vg::path_t
mapping_starts_in_deletion	path.cpp	/^bool mapping_starts_in_deletion(const Mapping& m) {$/;"	f	namespace:vg
mapping_string	alignment.cpp	/^string mapping_string(const string& source, const Mapping& mapping) {$/;"	f	namespace:vg
mapping_t	path.cpp	/^mapping_t::mapping_t(const Mapping& m) {$/;"	f	class:vg::mapping_t
mapping_t	path.cpp	/^mapping_t::mapping_t(void) : traversal(0), length(0), rank(1) { }$/;"	f	class:vg::mapping_t
mapping_t	path.hpp	/^class mapping_t {$/;"	c	namespace:vg
mapping_to_gbwt	gbwt_helper.hpp	/^inline gbwt::node_type mapping_to_gbwt(const Mapping& mapping) {$/;"	f	namespace:vg
mapping_to_handle	transcriptome.cpp	/^handle_t mapping_to_handle(const Mapping & mapping, const HandleGraph & graph) {$/;"	f	namespace:vg
mapping_to_length	path.cpp	/^int mapping_to_length(const Mapping& m) {$/;"	f	namespace:vg
mapping_to_length	path.cpp	/^int mapping_to_length(const path_mapping_t& mapping) {$/;"	f	namespace:vg
mapping_to_range	subcommand/annotate_main.cpp	/^static pair<size_t, size_t> mapping_to_range(const HandleGraph* xg_index, const Mapping& mapping) {$/;"	f	file:
mapping_type	gbwt_helper.hpp	/^    typedef std::pair<gbwt::vector_type, gbwt::vector_type> mapping_type;$/;"	t	struct:vg::RebuildJob
mappings	gbwt_helper.hpp	/^    std::vector<mapping_type> mappings;$/;"	m	struct:vg::RebuildJob
mappings_by_rank	path.hpp	/^    map<string, hash_map<int32_t, mapping_t*>> mappings_by_rank;$/;"	m	class:vg::Paths
mappings_equivalent	path.cpp	/^bool mappings_equivalent(const Mapping& m1, const Mapping& m2) {$/;"	f	namespace:vg
mapq_scaling_factor	multipath_mapper.hpp	/^        double mapq_scaling_factor = 1.0;$/;"	m	class:vg::MultipathMapper
maps_to_node	path.cpp	/^bool maps_to_node(const Path& p, id_t id) {$/;"	f	namespace:vg
mark_dfs	flow_sort.cpp	/^void FlowSort::mark_dfs(EdgeMapping& edges_to_nodes, id_t s,$/;"	f	class:vg::FlowSort
mark_smallVariant_alignments	filter.cpp	/^    bool Filter::mark_smallVariant_alignments(Alignment& a, Alignment& b){$/;"	f	class:vg::Filter
mark_sv_alignments	filter.cpp	/^    bool Filter::mark_sv_alignments(Alignment& a, Alignment& b){$/;"	f	class:vg::Filter
mask	gbwt_extender.hpp	/^    ReadMasker                  mask;$/;"	m	class:vg::GaplessExtender
mask	gbwt_extender.hpp	/^    ReadMasker                  mask;$/;"	m	class:vg::WFAExtender
mask	gbwt_extender.hpp	/^    std::vector<char> mask;$/;"	m	class:vg::ReadMasker
match	aligner.hpp	/^        int8_t match;$/;"	m	class:vg::GSSWAligner
match	banded_global_aligner.hpp	/^        IntType* match;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
match	gbwt_extender.hpp	/^    enum Edit { match, mismatch, insertion, deletion };$/;"	e	enum:vg::WFAAlignment::Edit
match	ssw_aligner.hpp	/^    uint8_t match;$/;"	m	class:vg::SSWAligner
match	subcommand/giraffe_main.cpp	/^    int8_t match = default_match;$/;"	m	struct:ScoringOptions	file:
match_backward	gbwt_extender.cpp	/^    void match_backward(const std::string& sequence, const gbwtgraph::GBWTGraph& graph, MatchPos& pos) const {$/;"	f	struct:vg::WFANode
match_backward	gbwt_extender.cpp	/^void match_backward(GaplessExtension& match, const std::string& seq, gbwtgraph::view_type target, uint32_t mismatch_limit) {$/;"	f	namespace:vg
match_count	mem.hpp	/^    size_t match_count;$/;"	m	class:vg::MaximalExactMatch
match_forward	gbwt_extender.cpp	/^    void match_forward(const std::string& sequence, const gbwtgraph::GBWTGraph& graph, MatchPos& pos) const {$/;"	f	struct:vg::WFANode
match_forward	gbwt_extender.cpp	/^size_t match_forward(GaplessExtension& match, const std::string& seq, gbwtgraph::view_type target, uint32_t mismatch_limit) {$/;"	f	namespace:vg
match_initial	gbwt_extender.cpp	/^void match_initial(GaplessExtension& match, const std::string& seq, gbwtgraph::view_type target) {$/;"	f	namespace:vg
match_predecessor	gbwt_extender.cpp	/^    std::pair<MatchPos, WFAAlignment::Edit> match_predecessor(uint32_t node, int32_t score, int32_t diagonal) const {$/;"	f	class:vg::WFATree
matches	dinucleotide_machine.cpp	/^bool DinucleotideMachine::matches(uint32_t state, const char* dinucleotide) const {$/;"	f	class:vg::DinucleotideMachine
matches	dinucleotide_machine.cpp	/^bool DinucleotideMachine::matches(uint32_t state, const string& dinucleotide) const {$/;"	f	class:vg::DinucleotideMachine
matches	sequence_complexity.hpp	/^    int matches[MaxOrder];$/;"	m	struct:vg::SeqComplexity
matches_annotation	readfilter.hpp	/^bool ReadFilter<Read>::matches_annotation(const Read& read) const {$/;"	f	class:vg::ReadFilter
matches_name	readfilter.hpp	/^bool ReadFilter<Read>::matches_name(const Read& aln) const {$/;"	f	class:vg::ReadFilter
matching	banded_global_aligner.hpp	/^        bool matching = false;$/;"	m	class:vg::BandedGlobalAligner::BABuilder
mate_rescues	mapper.hpp	/^    int mate_rescues;$/;"	m	class:vg::Mapper
mates	filter.hpp	/^    vector<BREAKPOINT> mates;$/;"	m	struct:vg::BREAKPOINT
matrix_invert	statistics.cpp	/^vector<vector<double>> matrix_invert(const vector<vector<double>>& A) {$/;"	f	namespace:vg
matrix_multiply	statistics.cpp	/^vector<double> matrix_multiply(const vector<vector<double>>& A,$/;"	f	namespace:vg
matrix_multiply	statistics.cpp	/^vector<vector<double>> matrix_multiply(const vector<vector<double>>& A,$/;"	f	namespace:vg
matrix_state	banded_global_aligner.hpp	/^        matrix_t matrix_state;$/;"	m	class:vg::BandedGlobalAligner::BABuilder
matrix_t	banded_global_aligner.hpp	/^        enum matrix_t {Match, InsertCol, InsertRow};$/;"	g	class:vg::BandedGlobalAligner
max	algorithms/chain_items.hpp	/^    inline vg::algorithms::TracedScore max(const vg::algorithms::TracedScore& a, const vg::algorithms::TracedScore& b) {$/;"	f	namespace:std
max	gbwt_extender.hpp	/^            int32_t min, max;$/;"	m	struct:vg::WFAExtender::ErrorModel::Event
max	statistics.hpp	/^    OutType max() const {$/;"	f	class:vg::WideningPRNG
max_alignment_gap	multipath_mapper.hpp	/^        size_t max_alignment_gap = 5000;$/;"	m	class:vg::MultipathMapper
max_alignments	minimizer_mapper.hpp	/^    size_t max_alignments = default_max_alignments;$/;"	m	class:vg::MinimizerMapper
max_alt_mappings	multipath_mapper.hpp	/^        size_t max_alt_mappings = 1;$/;"	m	class:vg::MultipathMapper
max_anchors	surjector.hpp	/^        size_t max_anchors = 200;$/;"	m	class:vg::Surjector
max_attempts	mapper.hpp	/^    int max_attempts;  \/\/ maximum number of times to try to increase sensitivity or use a lower-hit subgraph$/;"	m	class:vg::Mapper
max_band_jump	mapper.hpp	/^    int max_band_jump; \/\/ the maximum length edit we can detect via banded alignment$/;"	m	class:vg::Mapper
max_branch_trim_length	multipath_mapper.hpp	/^        size_t max_branch_trim_length = 1;$/;"	m	class:vg::MultipathMapper
max_bubble_paths	graph_caller.hpp	/^    size_t max_bubble_paths = 100;$/;"	m	class:vg::LegacyCaller
max_bubble_paths	traversal_finder.hpp	/^    size_t max_bubble_paths;$/;"	m	class:vg::RepresentativeTraversalFinder
max_buf_size	stream_sorter.hpp	/^    size_t max_buf_size = (512 * 1024 * 1024);$/;"	m	class:vg::StreamSorter
max_chain_connection	minimizer_mapper.hpp	/^    size_t max_chain_connection = default_max_chain_connection;$/;"	m	class:vg::MinimizerMapper
max_cluster_mapping_quality	mapper.hpp	/^    int max_cluster_mapping_quality; \/\/ the cap for cluster mapping quality$/;"	m	class:vg::Mapper
max_clusters_to_chain	minimizer_mapper.hpp	/^    size_t max_clusters_to_chain = default_max_clusters_to_chain;$/;"	m	class:vg::MinimizerMapper
max_context_radius	variant_adder.hpp	/^    size_t max_context_radius = 50;$/;"	m	class:vg::VariantAdder
max_dagify_duplications	multipath_mapper.hpp	/^        size_t max_dagify_duplications = 10;$/;"	m	class:vg::MultipathMapper
max_degree	subcommand/prune_main.cpp	/^    static std::map<PruningMode, int>    max_degree;$/;"	m	struct:PruningParameters	file:
max_deletion_scan_nodes	traversal_finder.hpp	/^    size_t max_deletion_scan_nodes = 50;$/;"	m	class:vg::VCFTraversalFinder
max_depth	traversal_finder.hpp	/^    size_t max_depth;$/;"	m	class:vg::RepresentativeTraversalFinder
max_diagonal	gbwt_extender.cpp	/^        int32_t max_diagonal;$/;"	m	struct:vg::WFATree::ScoreProperties	file:
max_diagonals	gbwt_extender.cpp	/^    std::pair<int32_t, int32_t> max_diagonals;$/;"	m	class:vg::WFATree	file:
max_distance	incremental_subgraph.hpp	/^    int64_t max_distance;$/;"	m	class:vg::IncrementalSubgraph
max_distance_from_start	incremental_subgraph.cpp	/^int64_t IncrementalSubgraph::max_distance_from_start(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
max_dozeu_cells	minimizer_mapper.hpp	/^    size_t max_dozeu_cells = default_max_dozeu_cells;$/;"	m	class:vg::MinimizerMapper
max_dp_cells	minimizer_mapper.hpp	/^    size_t max_dp_cells = default_max_dp_cells;$/;"	m	class:vg::MinimizerMapper
max_expected_dist_approx_error	cluster.hpp	/^    size_t max_expected_dist_approx_error;$/;"	m	class:vg::OrientedDistanceClusterer
max_expected_dist_approx_error	multipath_mapper.hpp	/^        size_t max_expected_dist_approx_error = 8;$/;"	m	class:vg::MultipathMapper
max_exponential_cdf	statistics.hpp	/^inline double max_exponential_cdf(double x, double rate, double shape, double location = 0.0) {$/;"	f	namespace:vg
max_exponential_log_likelihood	statistics.cpp	/^double max_exponential_log_likelihood(const vector<double>& x, double rate, double shape,$/;"	f	namespace:vg
max_exponential_rate_intercept	multipath_mapper.hpp	/^        double max_exponential_rate_intercept = 0.612045;$/;"	m	class:vg::MultipathMapper
max_exponential_rate_slope	multipath_mapper.hpp	/^        double max_exponential_rate_slope = 0.000555181;$/;"	m	class:vg::MultipathMapper
max_exponential_shape_intercept	multipath_mapper.hpp	/^        double max_exponential_shape_intercept = 12.136;$/;"	m	class:vg::MultipathMapper
max_exponential_shape_slope	multipath_mapper.hpp	/^        double max_exponential_shape_slope = 0.0113637;$/;"	m	class:vg::MultipathMapper
max_extensions	minimizer_mapper.hpp	/^    size_t max_extensions = default_max_extensions;$/;"	m	class:vg::MinimizerMapper
max_fan_in	stream_sorter.hpp	/^    size_t max_fan_in;$/;"	m	class:vg::StreamSorter
max_fanout_base_quality	multipath_mapper.hpp	/^        int max_fanout_base_quality = 20;$/;"	m	class:vg::MultipathMapper
max_fans_out	multipath_mapper.hpp	/^        int max_fans_out = 5;$/;"	m	class:vg::MultipathMapper
max_flow_sort	flow_sort.cpp	/^std::unique_ptr< list<NodeTraversal> >  FlowSort::max_flow_sort(const string& ref_name, bool isGrooming) $/;"	f	class:vg::FlowSort
max_fragment_length	minimizer_mapper.hpp	/^    size_t max_fragment_length = default_max_fragment_length;$/;"	m	class:vg::MinimizerMapper
max_gap	cluster.hpp	/^    int64_t max_gap = numeric_limits<int64_t>::max();$/;"	m	class:vg::MEMClusterer
max_handle	dozeu_pinning_overlay.hpp	/^    uint64_t max_handle = numeric_limits<uint64_t>::min();$/;"	m	class:vg::DozeuPinningOverlay
max_handle_memo_size	memoizing_graph.hpp	/^        size_t max_handle_memo_size = 500;$/;"	m	class:vg::MemoizingGraph
max_het_bias	genotyper.hpp	/^    double max_het_bias = 4;$/;"	m	class:vg::Genotyper
max_het_bias	snarl_caller.hpp	/^    double max_het_bias = 6;$/;"	m	class:vg::RatioSupportSnarlCaller
max_id	algorithms/gfa_to_handle.hpp	/^    nid_t max_id = 0;$/;"	m	struct:vg::algorithms::GFAIDMapInfo
max_id	constructor.hpp	/^    id_t max_id = 0;$/;"	m	class:vg::Constructor
max_id	constructor.hpp	/^    id_t max_id;$/;"	m	struct:vg::ConstructedChunk
max_id	dagified_graph.hpp	/^        id_t max_id = std::numeric_limits<uint64_t>::min();$/;"	m	class:vg::DagifiedGraph
max_id	subgraph.hpp	/^        id_t max_id = numeric_limits<id_t>::min();$/;"	m	class:vg::SubHandleGraph
max_in	algorithms/chain_items.cpp	/^void TracedScore::max_in(const vector<TracedScore>& options, size_t option_number) {$/;"	f	class:vg::algorithms::TracedScore
max_indel_bases	minimizer_mapper.hpp	/^    size_t max_indel_bases = default_max_indel_bases;$/;"	m	class:vg::MinimizerMapper
max_indel_het_bias	snarl_caller.hpp	/^    double max_indel_het_bias = 6;$/;"	m	class:vg::RatioSupportSnarlCaller
max_intron_length	multipath_mapper.hpp	/^        int64_t max_intron_length = 1 << 18;$/;"	m	class:vg::MultipathMapper
max_iterations	small_snarl_simplifier.hpp	/^    size_t max_iterations = 10;$/;"	m	class:vg::SmallSnarlSimplifier
max_kmers_per_block	kff.hpp	/^    size_t max_kmers_per_block;$/;"	m	class:vg::ParallelKFFReader
max_link_length	splicing.cpp	/^int64_t JoinedSpliceGraph::max_link_length() const {$/;"	f	class:vg::JoinedSpliceGraph
max_local_extensions	minimizer_mapper.hpp	/^    size_t max_local_extensions = default_max_local_extensions;$/;"	m	class:vg::MinimizerMapper
max_lookback_bases	minimizer_mapper.hpp	/^    size_t max_lookback_bases = default_max_lookback_bases;$/;"	m	class:vg::MinimizerMapper
max_ma_bias	snarl_caller.hpp	/^    double max_ma_bias = 0;$/;"	m	class:vg::RatioSupportSnarlCaller
max_mapping_p_value	multipath_mapper.hpp	/^        double max_mapping_p_value = 0.0001;$/;"	m	class:vg::MultipathMapper
max_mapping_quality	mapper.hpp	/^    int max_mapping_quality; \/\/ the cap for mapping quality$/;"	m	class:vg::BaseMapper
max_memory_proportion	index_registry.cpp	/^double IndexingParameters::max_memory_proportion = 0.75;$/;"	m	class:vg::IndexingParameters	file:
max_memory_proportion	index_registry.hpp	/^    static double max_memory_proportion;$/;"	m	struct:vg::IndexingParameters
max_missing_variant_warnings	haplotype_indexer.hpp	/^    size_t max_missing_variant_warnings = 10; $/;"	m	class:vg::HaplotypeIndexer
max_motif_pairs	multipath_mapper.hpp	/^        size_t max_motif_pairs = 1024;$/;"	m	class:vg::MultipathMapper
max_multi_alns	banded_global_aligner.hpp	/^        int64_t max_multi_alns;$/;"	m	class:vg::BandedGlobalAligner
max_multi_alns	banded_global_aligner.hpp	/^        int64_t max_multi_alns;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack
max_multimaps	mapper.hpp	/^    int max_multimaps;$/;"	m	class:vg::Mapper
max_multimaps	minimizer_mapper.hpp	/^    size_t max_multimaps = default_max_multimaps;$/;"	m	class:vg::MinimizerMapper
max_node	subgraph_overlay.hpp	/^    nid_t max_node = 0;$/;"	m	class:vg::SubgraphOverlay
max_node_id	dagified_graph.cpp	/^    id_t DagifiedGraph::max_node_id() const {$/;"	f	class:vg::DagifiedGraph
max_node_id	dozeu_pinning_overlay.cpp	/^id_t DozeuPinningOverlay::max_node_id() const {$/;"	f	class:vg::DozeuPinningOverlay
max_node_id	extra_node_graph.cpp	/^id_t ExtraNodeGraph::max_node_id() const {$/;"	f	class:vg::ExtraNodeGraph
max_node_id	graph_caller.cpp	/^nid_t SnarlGraph::max_node_id() const {$/;"	f	class:vg::SnarlGraph
max_node_id	identity_overlay.cpp	/^    id_t IdentityOverlay::max_node_id() const {$/;"	f	class:vg::IdentityOverlay
max_node_id	incremental_subgraph.cpp	/^id_t IncrementalSubgraph::max_node_id() const {$/;"	f	class:vg::IncrementalSubgraph
max_node_id	indexed_vg.cpp	/^id_t IndexedVG::max_node_id() const {$/;"	f	class:vg::IndexedVG
max_node_id	memoizing_graph.cpp	/^    id_t MemoizingGraph::max_node_id() const {$/;"	f	class:vg::MemoizingGraph
max_node_id	null_masking_graph.cpp	/^id_t NullMaskingGraph::max_node_id() const {$/;"	f	class:vg::NullMaskingGraph
max_node_id	path_subgraph.cpp	/^    id_t PathSubgraph::max_node_id() const {$/;"	f	class:vg::PathSubgraph
max_node_id	reverse_graph.cpp	/^    id_t ReverseGraph::max_node_id() const {$/;"	f	class:vg::ReverseGraph
max_node_id	snarls.cpp	/^id_t NetGraph::max_node_id() const {$/;"	f	class:vg::NetGraph
max_node_id	source_sink_overlay.cpp	/^id_t SourceSinkOverlay::max_node_id() const {$/;"	f	class:vg::SourceSinkOverlay
max_node_id	splicing.cpp	/^id_t JoinedSpliceGraph::max_node_id() const {$/;"	f	class:vg::JoinedSpliceGraph
max_node_id	split_strand_graph.cpp	/^    id_t StrandSplitGraph::max_node_id() const {$/;"	f	class:vg::StrandSplitGraph
max_node_id	subgraph.cpp	/^    id_t SubHandleGraph::max_node_id() const {$/;"	f	class:vg::SubHandleGraph
max_node_id	subgraph_overlay.cpp	/^nid_t SubgraphOverlay::max_node_id() const {$/;"	f	class:vg::SubgraphOverlay
max_node_id	tree_subgraph.cpp	/^id_t TreeSubgraph::max_node_id() const {$/;"	f	class:vg::TreeSubgraph
max_node_id	vg.cpp	/^nid_t VG::max_node_id(void) const {$/;"	f	class:vg::VG
max_node_id	vg_set.cpp	/^id_t VGset::max_node_id(void) {$/;"	f	class:vg::VGset
max_node_size	constructor.hpp	/^    size_t max_node_size = 1000;$/;"	m	class:vg::Constructor
max_node_size	index_registry.cpp	/^int IndexingParameters::max_node_size = 32;$/;"	m	class:vg::IndexingParameters	file:
max_node_size	index_registry.hpp	/^    static int max_node_size;$/;"	m	struct:vg::IndexingParameters
max_node_size	variant_adder.hpp	/^    size_t max_node_size = 32;$/;"	m	class:vg::VariantAdder
max_nodes_for_exhaustive	deconstructor.hpp	/^    int max_nodes_for_exhaustive = 100;$/;"	m	class:vg::Deconstructor
max_num_nodes	incremental_subgraph.hpp	/^    size_t max_num_nodes;$/;"	m	class:vg::IncrementalSubgraph
max_overhang	readfilter.hpp	/^    enum FilterName { read = 0, wrong_name, wrong_refpos, excluded_feature, min_score, min_sec_score, max_overhang,$/;"	e	enum:vg::Counts::FilterName
max_overhang	readfilter.hpp	/^    int max_overhang = numeric_limits<int>::max() \/ 2;$/;"	m	class:vg::ReadFilter
max_p_value_memo_size	multipath_mapper.hpp	/^        size_t max_p_value_memo_size = 500;$/;"	m	class:vg::MultipathMapper
max_parsed_variant_size	constructor.hpp	/^    size_t max_parsed_variant_size = 100;$/;"	m	class:vg::Constructor
max_path_id	path.hpp	/^    mutable int64_t max_path_id;$/;"	m	class:vg::Paths
max_path_length	filter.hpp	/^        int max_path_length = 0;$/;"	m	class:vg::Filter
max_path_search_steps	genotyper.hpp	/^    size_t max_path_search_steps = 100;$/;"	m	class:vg::Genotyper
max_path_search_steps	traversal_finder.hpp	/^    int max_path_search_steps;$/;"	m	class:vg::PathRestrictedTraversalFinder
max_path_search_steps	traversal_finder.hpp	/^    int max_path_search_steps;$/;"	m	class:vg::ReadRestrictedTraversalFinder
max_possible_mapping_quality	aligner.cpp	/^double GSSWAligner::max_possible_mapping_quality(int length) const {$/;"	f	class:vg::GSSWAligner
max_possible_mapping_quality	mapper.cpp	/^double Mapper::max_possible_mapping_quality(int length) {$/;"	f	class:vg::Mapper
max_precluster_connections	minimizer_mapper.hpp	/^    size_t max_precluster_connections = default_max_precluster_connections;$/;"	m	class:vg::MinimizerMapper
max_prune_iterations	traversal_finder.hpp	/^    size_t max_prune_iterations = 2;$/;"	m	class:vg::VCFTraversalFinder
max_ref_het_bias	snarl_caller.hpp	/^    double max_ref_het_bias = 6;$/;"	m	class:vg::RatioSupportSnarlCaller
max_rescue_attempts	minimizer_mapper.hpp	/^    size_t max_rescue_attempts = default_max_rescue_attempts;$/;"	m	class:vg::MinimizerMapper
max_rescue_attempts	multipath_mapper.hpp	/^        size_t max_rescue_attempts = 32;$/;"	m	class:vg::MultipathMapper
max_rescue_p_value	multipath_mapper.hpp	/^        double max_rescue_p_value = 0.1;$/;"	m	class:vg::MultipathMapper
max_rgfa_rank	algorithms/gfa_to_handle.hpp	/^    int64_t max_rgfa_rank = -1;$/;"	m	class:vg::algorithms::GFAParser
max_sample_size	mapper.cpp	/^size_t FragmentLengthDistribution::max_sample_size() const {$/;"	f	class:vg::FragmentLengthDistribution
max_search_depth	graph_caller.hpp	/^    int max_search_depth = 1000;$/;"	m	class:vg::LegacyCaller
max_search_width	graph_caller.hpp	/^    int max_search_width = 1000;$/;"	m	class:vg::LegacyCaller
max_separation	cluster.hpp	/^    const int64_t max_separation = 250;$/;"	m	class:vg::GreedyMinDistanceClusterer
max_shift	multipath_alignment_graph.cpp	/^    size_t MultipathAlignmentGraph::max_shift() const {$/;"	f	class:vg::MultipathAlignmentGraph
max_single_end_mappings_for_rescue	multipath_mapper.hpp	/^        size_t max_single_end_mappings_for_rescue = 64;$/;"	m	class:vg::MultipathMapper
max_snarl_cut_size	multipath_mapper.hpp	/^        int64_t max_snarl_cut_size = 5;$/;"	m	class:vg::MultipathMapper
max_snarl_edges	graph_caller.hpp	/^    size_t max_snarl_edges = 10000;$/;"	m	class:vg::FlowCaller
max_snarl_shallow_size	graph_caller.hpp	/^    size_t max_snarl_shallow_size = 50000;$/;"	m	class:vg::NestedFlowCaller
max_softclip_iterations	mapper.hpp	/^    int max_softclip_iterations; \/\/ Extend no more than this many times (while softclips are getting shorter)$/;"	m	class:vg::Mapper
max_softclip_overlap	multipath_mapper.hpp	/^        int64_t max_softclip_overlap = 8;$/;"	m	class:vg::MultipathMapper
max_splice_overhang	multipath_mapper.hpp	/^        int64_t max_splice_overhang = 3;$/;"	m	class:vg::MultipathMapper
max_splice_ref_search_length	multipath_mapper.hpp	/^        int64_t max_splice_ref_search_length = 32;$/;"	m	class:vg::MultipathMapper
max_steps_of_handle_memo_size	memoizing_graph.hpp	/^        size_t max_steps_of_handle_memo_size = 500;$/;"	m	class:vg::MemoizingGraph
max_sub_mem_recursion_depth	mapper.hpp	/^    int max_sub_mem_recursion_depth = 2;$/;"	m	class:vg::BaseMapper
max_subgraph_bases	surjector.hpp	/^        size_t max_subgraph_bases = 100 * 1024;$/;"	m	class:vg::Surjector
max_suboptimal_path_score_ratio	multipath_mapper.hpp	/^        double max_suboptimal_path_score_ratio = 2.0;$/;"	m	class:vg::MultipathMapper
max_tail_anchor_prune	surjector.hpp	/^        int64_t max_tail_anchor_prune = 4;$/;"	m	class:vg::Surjector
max_tail_length	minimizer_mapper.hpp	/^    size_t max_tail_length = default_max_tail_length;$/;"	m	class:vg::MinimizerMapper
max_tail_merge_supress_length	multipath_mapper.hpp	/^        size_t max_tail_merge_supress_length = 4;$/;"	m	class:vg::MultipathMapper
max_target_factor	mapper.hpp	/^    int max_target_factor; \/\/ the maximum multiple of the read length we'll try to align to$/;"	m	class:vg::Mapper
max_trav_size	snarl_caller.hpp	/^        int max_trav_size;$/;"	m	struct:vg::PoissonSupportSnarlCaller::PoissonCallInfo
max_traversal_cutoff	traversal_finder.hpp	/^    size_t max_traversal_cutoff;$/;"	m	class:vg::VCFTraversalFinder
max_traversal_length	traversal_finder.hpp	/^    size_t max_traversal_length;$/;"	m	class:vg::FlowTraversalFinder
max_tries	sampler.hpp	/^    size_t max_tries = 100;$/;"	m	class:vg::AbstractReadSampler
max_uncalled_alleles	graph_caller.hpp	/^    size_t max_uncalled_alleles = 5;$/;"	m	class:vg::VCFOutputCaller
max_unique_min	minimizer_mapper.hpp	/^    size_t max_unique_min = default_max_unique_min;$/;"	m	class:vg::MinimizerMapper
max_value	statistics.hpp	/^    double max_value;$/;"	m	struct:vg::SummaryStatistics
max_vertex	cluster.cpp	/^MEMChainModelVertex* MEMChainModel::max_vertex(void) {$/;"	f	class:vg::MEMChainModel
max_vertex	mapper.cpp	/^AlignmentChainModelVertex* AlignmentChainModel::max_vertex(void) {$/;"	f	class:vg::AlignmentChainModel
max_walk	cluster.hpp	/^    size_t max_walk = 50;$/;"	m	class:vg::PathOrientedDistanceMeasurer
max_width	traversal_finder.hpp	/^    size_t max_width;$/;"	m	class:vg::RepresentativeTraversalFinder
max_xdrop_gap_length	mapper.hpp	/^    int max_xdrop_gap_length;$/;"	m	class:vg::Mapper
maximum_distance	snarl_distance_index.cpp	/^size_t maximum_distance(const SnarlDistanceIndex& distance_index, pos_t pos1, pos_t pos2) {$/;"	f	namespace:vg
maximum_mapping_quality_approx	aligner.cpp	/^double GSSWAligner::maximum_mapping_quality_approx(const vector<double>& scaled_scores, size_t* max_idx_out,$/;"	f	class:vg::GSSWAligner
maximum_mapping_quality_exact	aligner.cpp	/^double GSSWAligner::maximum_mapping_quality_exact(const vector<double>& scaled_scores, size_t* max_idx_out,$/;"	f	class:vg::GSSWAligner
maximum_quality	packer.cpp	/^const int Packer::maximum_quality = 60;$/;"	m	class:vg::Packer	file:
maximum_quality	packer.hpp	/^    static const int maximum_quality;$/;"	m	class:vg::Packer
maximum_sample_size	mapper.hpp	/^    size_t maximum_sample_size;$/;"	m	class:vg::FragmentLengthDistribution
maybe_mq_threshold	mapper.hpp	/^    double maybe_mq_threshold; \/\/ quality below which we let the estimated mq kick in$/;"	m	class:vg::Mapper
mean	mapper.cpp	/^double FragmentLengthDistribution::mean() const {$/;"	f	class:vg::FragmentLengthDistribution
mean	statistics.hpp	/^    T mean() const {$/;"	f	class:vg::normal_distribution
mean	statistics.hpp	/^    T mean() const {$/;"	f	class:vg::truncated_normal_distribution
mean	statistics.hpp	/^    double mean;$/;"	m	struct:vg::SummaryStatistics
mean_node_length	transcriptome.cpp	/^float Transcriptome::mean_node_length() const {$/;"	f	class:vg::Transcriptome
measurements_begin	mapper.cpp	/^multiset<double>::const_iterator FragmentLengthDistribution::measurements_begin() const {$/;"	f	class:vg::FragmentLengthDistribution
measurements_end	mapper.cpp	/^multiset<double>::const_iterator FragmentLengthDistribution::measurements_end() const {$/;"	f	class:vg::FragmentLengthDistribution
median	statistics.cpp	/^double median(std::vector<int> &v) {$/;"	f	namespace:vg
median	statistics.hpp	/^    double median;$/;"	m	struct:vg::SummaryStatistics
median_mem_coverage	cluster.cpp	/^size_t MEMClusterer::HitGraph::median_mem_coverage(const vector<size_t>& component, const Alignment& aln) const {$/;"	f	class:vg::MEMClusterer::HitGraph
mem	cluster.hpp	/^    MaximalExactMatch mem;$/;"	m	class:vg::MEMChainModelVertex
mem	cluster.hpp	/^    const MaximalExactMatch* mem;$/;"	m	class:vg::MEMClusterer::HitNode
mem_coverage_min_ratio	multipath_mapper.hpp	/^        double mem_coverage_min_ratio = 0.5;$/;"	m	class:vg::MultipathMapper
mem_min_oriented_distances	mem.cpp	/^pair<int64_t, int64_t> mem_min_oriented_distances(const MaximalExactMatch& m1, const MaximalExactMatch& m2) {$/;"	f	namespace:vg
mem_node_start_positions	cluster.cpp	/^vector<pair<gcsa::node_type, size_t> > mem_node_start_positions(const HandleGraph& graph, const vg::MaximalExactMatch& mem) {$/;"	f	namespace:vg
mem_reseed_length	mapper.hpp	/^    int mem_reseed_length; \/\/ the length above which we reseed MEMs to get potentially missed hits$/;"	m	class:vg::BaseMapper
mem_usage_string	subcommand/autoindex_main.cpp	/^string mem_usage_string(int64_t mem) {$/;"	f
memo	haplotypes.hpp	/^  haploMath::RRMemo& memo;$/;"	m	class:haplo::hDP_gbwt_graph_accessor
memoized_LF	mem_accelerator.cpp	/^gcsa::range_type MEMAccelerator::memoized_LF(string::const_iterator last) const {$/;"	f	class:vg::MEMAccelerator
memory_high_water_kb	watchdog.hpp	/^    atomic<size_t> memory_high_water_kb;$/;"	m	class:vg::Watchdog
mems_overlap	mem.cpp	/^bool mems_overlap(const MaximalExactMatch& mem1,$/;"	f	namespace:vg
mems_overlap_length	mem.cpp	/^int mems_overlap_length(const MaximalExactMatch& mem1,$/;"	f	namespace:vg
mems_to_json	mem.cpp	/^const string mems_to_json(const vector<MaximalExactMatch>& mems) {$/;"	f	namespace:vg
merge	algorithms/merge.cpp	/^void merge(handlegraph::MutablePathDeletableHandleGraph* graph, const vector<pair<handle_t, size_t>>& start, size_t length) {$/;"	f	namespace:vg::algorithms
merge	funnel.hpp	/^void Funnel::merge(Iterator prev_stage_items_begin, Iterator prev_stage_items_end) {$/;"	f	class:vg::Funnel::Funnel
merge	integrated_snarl_finder.cpp	/^void IntegratedSnarlFinder::MergedAdjacencyGraph::merge(handle_t into_a, handle_t into_b) {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
merge	subcommand/gbwt_main.cpp	/^    merge_mode merge = merge_none;$/;"	m	struct:GBWTConfig	file:
merge	vg.cpp	/^void VG::merge(Graph& g) {$/;"	f	class:vg::VG
merge	vg.cpp	/^void VG::merge(VG& g) {$/;"	f	class:vg::VG
mergeNodeObjects	cactus.cpp	/^void* mergeNodeObjects(void* a, void* b) {$/;"	f	namespace:vg
merge_adjacent_edits	path.cpp	/^Mapping merge_adjacent_edits(const Mapping& m) {$/;"	f	namespace:vg
merge_alignments	alignment.cpp	/^Alignment merge_alignments(const Alignment& a1, const Alignment& a2, bool debug) {$/;"	f	namespace:vg
merge_alignments	alignment.cpp	/^Alignment merge_alignments(const vector<Alignment>& alns) {$/;"	f	namespace:vg
merge_edits_in_place	path.cpp	/^void merge_edits_in_place(Edit& e, const Edit& f) {$/;"	f	namespace:vg
merge_fast	subcommand/gbwt_main.cpp	/^    enum merge_mode { merge_none, merge_insert, merge_fast, merge_parallel };$/;"	e	enum:GBWTConfig::merge_mode	file:
merge_from_dynamic	packer.cpp	/^void Packer::merge_from_dynamic(vector<Packer*>& packers) {$/;"	f	class:vg::Packer
merge_from_files	packer.cpp	/^void Packer::merge_from_files(const vector<string>& file_names) {$/;"	f	class:vg::Packer
merge_group	funnel.hpp	/^void Funnel::merge_group(Iterator prev_stage_items_begin, Iterator prev_stage_items_end) {$/;"	f	class:vg::Funnel::Funnel
merge_groups	funnel.hpp	/^void Funnel::merge_groups(Iterator prev_stage_items_begin, Iterator prev_stage_items_end) {$/;"	f	class:vg::Funnel::Funnel
merge_id_space	vg_set.cpp	/^int64_t VGset::merge_id_space(void) {$/;"	f	class:vg::VGset
merge_insert	subcommand/gbwt_main.cpp	/^    enum merge_mode { merge_none, merge_insert, merge_fast, merge_parallel };$/;"	e	enum:GBWTConfig::merge_mode	file:
merge_mode	subcommand/gbwt_main.cpp	/^    enum merge_mode { merge_none, merge_insert, merge_fast, merge_parallel };$/;"	g	struct:GBWTConfig	file:
merge_non_branching_subpaths	multipath_alignment.cpp	/^    void merge_non_branching_subpaths(multipath_alignment_t& multipath_aln,$/;"	f	namespace:vg
merge_none	subcommand/gbwt_main.cpp	/^    enum merge_mode { merge_none, merge_insert, merge_fast, merge_parallel };$/;"	e	enum:GBWTConfig::merge_mode	file:
merge_parallel	subcommand/gbwt_main.cpp	/^    enum merge_mode { merge_none, merge_insert, merge_fast, merge_parallel };$/;"	e	enum:GBWTConfig::merge_mode	file:
merge_parameters	subcommand/gbwt_main.cpp	/^    gbwt::MergeParameters merge_parameters;$/;"	m	struct:GBWTConfig	file:
merge_partially_redundant_match_nodes	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::merge_partially_redundant_match_nodes(const unordered_map<int64_t, vector<int64_t>>& node_matches,$/;"	f	class:vg::MultipathAlignmentGraph
merge_rescued_mappings	multipath_mapper.cpp	/^    void MultipathMapper::merge_rescued_mappings(vector<pair<multipath_alignment_t, multipath_alignment_t>>& multipath_aln_pairs_out,$/;"	f	class:vg::MultipathMapper
merge_state	dinucleotide_machine.cpp	/^uint32_t DinucleotideMachine::merge_state(uint32_t state_1, uint32_t state_2) const {$/;"	f	class:vg::DinucleotideMachine
merge_union	vg.cpp	/^void VG::merge_union(VG& g) {$/;"	f	class:vg::VG
merged_group	indexed_vg.hpp	/^        Graph merged_group;$/;"	m	struct:vg::IndexedVG::CacheEntry
message	alignment.hpp	/^    std::string message = "";$/;"	m	struct:vg::AlignmentValidity
message	banded_global_aligner.cpp	/^const string NoAlignmentInBandException::message = "error:[BandedGlobalAligner] cannot align to graph within band, consider permissive banding";$/;"	m	class:vg::NoAlignmentInBandException	file:
message	banded_global_aligner.hpp	/^        static const string message;$/;"	m	class:vg::NoAlignmentInBandException
message_buffer	algorithms/gfa_to_handle.hpp	/^    mutable string message_buffer;$/;"	m	struct:vg::algorithms::GFAFormatError
metadata	subcommand/gbwt_main.cpp	/^    bool metadata = false, contigs = false, haplotypes = false, samples = false, list_names = false, thread_names = false, tags = false;$/;"	m	struct:GBWTConfig	file:
metadata_mode	subcommand/gbwt_main.cpp	/^    bool metadata_mode = false, thread_mode = false;$/;"	m	struct:GBWTConfig	file:
middle_signature	alignment.cpp	/^pair<string, string> middle_signature(const Alignment& aln1, const Alignment& aln2, int len) {$/;"	f	namespace:vg
middle_signature	alignment.cpp	/^string middle_signature(const Alignment& aln, int len) {$/;"	f	namespace:vg
min	gbwt_extender.hpp	/^            int32_t min, max;$/;"	m	struct:vg::WFAExtender::ErrorModel::Event
min	statistics.hpp	/^    OutType min() const {$/;"	f	class:vg::WideningPRNG
min_ad_log_likelihood_for_filter	snarl_caller.hpp	/^    double min_ad_log_likelihood_for_filter = -9;    $/;"	m	class:vg::RatioSupportSnarlCaller
min_alt_path_support	snarl_caller.hpp	/^    double min_alt_path_support = 0.5;$/;"	m	class:vg::SupportBasedSnarlCaller
min_approx_path_distance	algorithms/approx_path_distance.cpp	/^size_t min_approx_path_distance(const PathPositionHandleGraph* graph, const pos_t& pos1, const pos_t& pos2, uint64_t max_search) {$/;"	f	namespace:vg::algorithms
min_avg_qual	filter.hpp	/^        double min_avg_qual = 0.0;$/;"	m	class:vg::Filter
min_banded_mq	mapper.hpp	/^    int min_banded_mq; \/\/ when aligning banded, treat bands with MQ < this as unaligned$/;"	m	class:vg::Mapper
min_base_qual	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
min_base_quality	readfilter.hpp	/^    int min_base_quality = numeric_limits<int>::min() \/ 2;$/;"	m	class:vg::ReadFilter
min_base_quality_fraction	readfilter.hpp	/^    double min_base_quality_fraction = numeric_limits<double>::lowest();$/;"	m	class:vg::ReadFilter
min_bp_edge_override	traversal_support.hpp	/^    bool min_bp_edge_override = false;$/;"	m	class:vg::TraversalSupportFinder
min_chains	minimizer_mapper.hpp	/^    int min_chains = default_min_chains;$/;"	m	class:vg::MinimizerMapper
min_cluster_length	mapper.hpp	/^    int min_cluster_length; \/\/ a cluster needs this much sequence in it for us to consider it$/;"	m	class:vg::Mapper
min_clustering_mem_length	multipath_mapper.hpp	/^        size_t min_clustering_mem_length = 0;$/;"	m	class:vg::MultipathMapper
min_clusters_to_chain	minimizer_mapper.hpp	/^    size_t min_clusters_to_chain = default_min_clusters_to_chain;$/;"	m	class:vg::MinimizerMapper
min_count_to_keep	rare_variant_simplifier.hpp	/^    size_t min_count_to_keep = 0;$/;"	m	class:vg::RareVariantSimplifier
min_cov	filter.hpp	/^        int min_cov = 0;$/;"	m	class:vg::Filter
min_cut	flow_sort.cpp	/^vector<pair<id_t,id_t>> FlowSort::min_cut(map<id_t, map<id_t, int>>& graph_weight,$/;"	f	class:vg::FlowSort
min_cut_decomposition	algorithms/min_cut_graph.cpp	/^        vector<unordered_set<size_t>> min_cut_decomposition(Graph graph, const int seed){$/;"	f	namespace:vg::algorithms
min_depth	filter.hpp	/^        int min_depth = 0;$/;"	m	class:vg::Filter
min_diagonal	gbwt_extender.cpp	/^        int32_t min_diagonal;$/;"	m	struct:vg::WFATree::ScoreProperties	file:
min_distance_from_start	incremental_subgraph.cpp	/^int64_t IncrementalSubgraph::min_distance_from_start(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
min_dists	deletion_aligner.cpp	/^pair<vector<size_t>, vector<pair<size_t, size_t>>> DeletionAligner::min_dists($/;"	f	class:vg::DeletionAligner
min_edge_support	traversal_finder.hpp	/^    int min_edge_support;$/;"	m	class:vg::SupportRestrictedTraversalFinder
min_edge_support	traversal_finder.hpp	/^    size_t min_edge_support;    $/;"	m	class:vg::RepresentativeTraversalFinder
min_end_matches	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
min_end_matches	readfilter.hpp	/^    int min_end_matches = numeric_limits<int>::min() \/ 2;$/;"	m	class:vg::ReadFilter
min_extension_sets	minimizer_mapper.hpp	/^    int min_extension_sets = default_min_extension_sets;$/;"	m	class:vg::MinimizerMapper
min_extensions	minimizer_mapper.hpp	/^    size_t min_extensions = default_min_extensions;$/;"	m	class:vg::MinimizerMapper
min_fold_coverage_for_downsample	surjector.hpp	/^        int64_t min_fold_coverage_for_downsample = 8;$/;"	m	class:vg::Surjector
min_frequency_to_keep	rare_variant_simplifier.hpp	/^    double min_frequency_to_keep = 0;$/;"	m	class:vg::RareVariantSimplifier
min_good_transition_score_per_base	minimizer_mapper.hpp	/^    double min_good_transition_score_per_base = default_min_good_transition_score_per_base;$/;"	m	class:vg::MinimizerMapper
min_handle	dagified_graph.hpp	/^        uint64_t min_handle = std::numeric_limits<uint64_t>::max();$/;"	m	class:vg::DagifiedGraph
min_id	subgraph.hpp	/^        id_t min_id = numeric_limits<id_t>::max();$/;"	m	class:vg::SubHandleGraph
min_identity	mapper.hpp	/^    float min_identity; \/\/ require that alignment identity is at least this much to accept alignment$/;"	m	class:vg::Mapper
min_link_length	splicing.cpp	/^int64_t JoinedSpliceGraph::min_link_length() const {$/;"	f	class:vg::JoinedSpliceGraph
min_lookback_items	minimizer_mapper.hpp	/^    size_t min_lookback_items = default_min_lookback_items;$/;"	m	class:vg::MinimizerMapper
min_mad_for_filter	snarl_caller.hpp	/^    size_t min_mad_for_filter = 1;$/;"	m	class:vg::SupportBasedSnarlCaller
min_mapq	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
min_mapq	readfilter.hpp	/^    double min_mapq = numeric_limits<double>::lowest();$/;"	m	class:vg::ReadFilter
min_median_mem_coverage_for_split	multipath_mapper.hpp	/^        size_t min_median_mem_coverage_for_split = 0;$/;"	m	class:vg::MultipathMapper
min_mem_length	mapper.hpp	/^    int min_mem_length; \/\/ a mem must be >= this length$/;"	m	class:vg::BaseMapper
min_multimaps	mapper.hpp	/^    int min_multimaps; \/\/ Minimum number of multimappings$/;"	m	class:vg::Mapper
min_node	subgraph_overlay.hpp	/^    nid_t min_node = 0;$/;"	m	class:vg::SubgraphOverlay
min_node_id	dagified_graph.cpp	/^    id_t DagifiedGraph::min_node_id() const {$/;"	f	class:vg::DagifiedGraph
min_node_id	dozeu_pinning_overlay.cpp	/^id_t DozeuPinningOverlay::min_node_id() const {$/;"	f	class:vg::DozeuPinningOverlay
min_node_id	extra_node_graph.cpp	/^id_t ExtraNodeGraph::min_node_id() const {$/;"	f	class:vg::ExtraNodeGraph
min_node_id	graph_caller.cpp	/^nid_t SnarlGraph::min_node_id() const {$/;"	f	class:vg::SnarlGraph
min_node_id	identity_overlay.cpp	/^    id_t IdentityOverlay::min_node_id() const {$/;"	f	class:vg::IdentityOverlay
min_node_id	incremental_subgraph.cpp	/^id_t IncrementalSubgraph::min_node_id() const {$/;"	f	class:vg::IncrementalSubgraph
min_node_id	indexed_vg.cpp	/^id_t IndexedVG::min_node_id() const {$/;"	f	class:vg::IndexedVG
min_node_id	memoizing_graph.cpp	/^    id_t MemoizingGraph::min_node_id() const {$/;"	f	class:vg::MemoizingGraph
min_node_id	null_masking_graph.cpp	/^id_t NullMaskingGraph::min_node_id() const {$/;"	f	class:vg::NullMaskingGraph
min_node_id	path_subgraph.cpp	/^    id_t PathSubgraph::min_node_id() const {$/;"	f	class:vg::PathSubgraph
min_node_id	reverse_graph.cpp	/^    id_t ReverseGraph::min_node_id() const {$/;"	f	class:vg::ReverseGraph
min_node_id	snarls.cpp	/^id_t NetGraph::min_node_id() const {$/;"	f	class:vg::NetGraph
min_node_id	source_sink_overlay.cpp	/^id_t SourceSinkOverlay::min_node_id() const {$/;"	f	class:vg::SourceSinkOverlay
min_node_id	splicing.cpp	/^id_t JoinedSpliceGraph::min_node_id() const {$/;"	f	class:vg::JoinedSpliceGraph
min_node_id	split_strand_graph.cpp	/^    id_t StrandSplitGraph::min_node_id() const {$/;"	f	class:vg::StrandSplitGraph
min_node_id	subgraph.cpp	/^    id_t SubHandleGraph::min_node_id() const {$/;"	f	class:vg::SubHandleGraph
min_node_id	subgraph_overlay.cpp	/^nid_t SubgraphOverlay::min_node_id() const {$/;"	f	class:vg::SubgraphOverlay
min_node_id	tree_subgraph.cpp	/^id_t TreeSubgraph::min_node_id() const {$/;"	f	class:vg::TreeSubgraph
min_node_id	vg.cpp	/^nid_t VG::min_node_id(void) const {$/;"	f	class:vg::VG
min_node_support	traversal_finder.hpp	/^    int min_node_support;$/;"	m	class:vg::SupportRestrictedTraversalFinder
min_node_support	traversal_finder.hpp	/^    size_t min_node_support;$/;"	m	class:vg::RepresentativeTraversalFinder
min_node_support_cache	traversal_support.hpp	/^    mutable vector<LRUCache<nid_t, Support>*> min_node_support_cache;$/;"	m	class:vg::CachedPackedTraversalSupportFinder
min_oriented_distances	position.cpp	/^pair<int64_t, int64_t> min_oriented_distances(const unordered_map<path_handle_t, vector<pair<size_t, bool> > >& path_offsets1,$/;"	f	namespace:vg
min_pair_fragment_length	mapper.cpp	/^unordered_map<path_handle_t, int64_t> Mapper::min_pair_fragment_length(const Alignment& aln1, const Alignment& aln2) {$/;"	f	class:vg::Mapper
min_percent_identity	filter.hpp	/^        double min_percent_identity = 0.0;$/;"	m	class:vg::Filter
min_precluster_connections	minimizer_mapper.hpp	/^    size_t min_precluster_connections = default_min_precluster_connections;$/;"	m	class:vg::MinimizerMapper
min_primary	readfilter.hpp	/^    double min_primary = numeric_limits<double>::lowest();$/;"	m	class:vg::ReadFilter
min_qual	filter.hpp	/^        int min_qual = 0;$/;"	m	class:vg::Filter
min_read_separation	cluster.hpp	/^    const int64_t min_read_separation = 0;$/;"	m	class:vg::ComponentMinDistanceClusterer
min_recurrence	genotyper.hpp	/^    int min_recurrence = 2;$/;"	m	class:vg::Genotyper
min_recurrence	traversal_finder.hpp	/^    int min_recurrence;$/;"	m	class:vg::PathRestrictedTraversalFinder
min_recurrence	traversal_finder.hpp	/^    int min_recurrence;$/;"	m	class:vg::ReadRestrictedTraversalFinder
min_score	readfilter.hpp	/^    enum FilterName { read = 0, wrong_name, wrong_refpos, excluded_feature, min_score, min_sec_score, max_overhang,$/;"	e	enum:vg::Counts::FilterName
min_score_factor	variant_adder.hpp	/^    double min_score_factor = 0.95;$/;"	m	class:vg::VariantAdder
min_score_per_base	genotyper.hpp	/^    double min_score_per_base = 0.90;$/;"	m	class:vg::Genotyper
min_sec_score	readfilter.hpp	/^    enum FilterName { read = 0, wrong_name, wrong_refpos, excluded_feature, min_score, min_sec_score, max_overhang,$/;"	e	enum:vg::Counts::FilterName
min_secondary	readfilter.hpp	/^    double min_secondary = numeric_limits<double>::lowest();$/;"	m	class:vg::ReadFilter
min_separation	cluster.hpp	/^    const int64_t min_separation = -10;$/;"	m	class:vg::GreedyMinDistanceClusterer
min_shift_for_prune	surjector.hpp	/^        int64_t min_shift_for_prune = 32 * 1024;$/;"	m	class:vg::Surjector
min_site_depth	snarl_caller.hpp	/^    size_t min_site_depth = 4;$/;"	m	class:vg::SupportBasedSnarlCaller
min_size	small_snarl_simplifier.hpp	/^    size_t min_size = 10;$/;"	m	class:vg::SmallSnarlSimplifier
min_softclip_length_for_splice	multipath_mapper.hpp	/^        int64_t min_softclip_length_for_splice = 20;$/;"	m	class:vg::MultipathMapper
min_softclipped_score_for_splice	multipath_mapper.hpp	/^        int64_t min_softclipped_score_for_splice = 25;$/;"	m	class:vg::MultipathMapper
min_splice_length	hts_alignment_emitter.hpp	/^    size_t min_splice_length = 20;$/;"	m	class:vg::SplicedHTSAlignmentEmitter
min_splice_length	multipath_alignment_emitter.hpp	/^    int64_t min_splice_length = numeric_limits<int64_t>::max();$/;"	m	class:vg::MultipathAlignmentEmitter
min_splice_repair_length	surjector.hpp	/^        int64_t min_splice_repair_length = 250;$/;"	m	class:vg::Surjector
min_splice_rescue_matches	multipath_mapper.hpp	/^        int64_t min_splice_rescue_matches = 6;$/;"	m	class:vg::MultipathMapper
min_support_in_path	nested_traversal_finder.cpp	/^Support NestedTraversalFinder::min_support_in_path(const vector<Visit>& path) {$/;"	f	class:vg::NestedTraversalFinder
min_support_in_path	traversal_finder.cpp	/^Support RepresentativeTraversalFinder::min_support_in_path(const list<Visit>& path) {$/;"	f	class:vg::RepresentativeTraversalFinder
min_tail_anchor_length	multipath_mapper.hpp	/^        size_t min_tail_anchor_length = 3;$/;"	m	class:vg::MultipathMapper
min_total_support_for_call	snarl_caller.hpp	/^    int min_total_support_for_call = 2;$/;"	m	class:vg::SupportBasedSnarlCaller
min_unique_per_strand	genotyper.hpp	/^    int min_unique_per_strand = 2;$/;"	m	class:vg::Genotyper
minimizer_cache	snarl_seed_clusterer.hpp	/^            gbwtgraph::Payload minimizer_cache = MIPayload::NO_CODE; \/\/minimizer payload$/;"	m	struct:vg::SnarlDistanceIndexClusterer::Seed
minimizer_cache	snarl_seed_clusterer.hpp	/^            gbwtgraph::Payload minimizer_cache;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SeedCache
minimizer_index	minimizer_mapper.hpp	/^    const gbwtgraph::DefaultMinimizerIndex& minimizer_index;$/;"	m	class:vg::MinimizerMapper
minimizer_index	recombinator.hpp	/^    const minimizer_index_type& minimizer_index;$/;"	m	class:vg::HaplotypePartitioner
minimizer_index_type	recombinator.hpp	/^    typedef gbwtgraph::MinimizerIndex<gbwtgraph::Key64, gbwtgraph::Position> minimizer_index_type;$/;"	t	class:vg::HaplotypePartitioner
minimizer_k	index_registry.cpp	/^int IndexingParameters::minimizer_k = 29;$/;"	m	class:vg::IndexingParameters	file:
minimizer_k	index_registry.hpp	/^    static int minimizer_k;$/;"	m	struct:vg::IndexingParameters
minimizer_recode	unittest/kff.cpp	/^void minimizer_recode(const std::string& kmer, const uint8_t* encoding) {$/;"	f	namespace:vg::unittest::__anon5
minimizer_reverse_complement	kff.hpp	/^inline gbwtgraph::Key64::value_type minimizer_reverse_complement(gbwtgraph::Key64::value_type kmer, size_t k) {$/;"	f	namespace:vg
minimizer_s	index_registry.cpp	/^int IndexingParameters::minimizer_s = 18;$/;"	m	class:vg::IndexingParameters	file:
minimizer_s	index_registry.hpp	/^    static int minimizer_s;$/;"	m	struct:vg::IndexingParameters
minimizer_score_fraction	minimizer_mapper.hpp	/^    double minimizer_score_fraction = default_minimizer_score_fraction;$/;"	m	class:vg::MinimizerMapper
minimizer_w	index_registry.cpp	/^int IndexingParameters::minimizer_w = 11;$/;"	m	class:vg::IndexingParameters	file:
minimizer_w	index_registry.hpp	/^    static int minimizer_w;$/;"	m	struct:vg::IndexingParameters
minimum_distance	snarl_distance_index.cpp	/^size_t minimum_distance(const SnarlDistanceIndex& distance_index, pos_t pos1, pos_t pos2,$/;"	f	namespace:vg
mismatch	aligner.hpp	/^        int8_t mismatch;$/;"	m	class:vg::GSSWAligner
mismatch	gbwt_extender.cpp	/^    int32_t mismatch, gap_open, gap_extend;$/;"	m	class:vg::WFATree	file:
mismatch	gbwt_extender.hpp	/^    enum Edit { match, mismatch, insertion, deletion };$/;"	e	enum:vg::WFAAlignment::Edit
mismatch	ssw_aligner.hpp	/^    uint8_t mismatch;$/;"	m	class:vg::SSWAligner
mismatch	subcommand/giraffe_main.cpp	/^    int8_t mismatch = default_mismatch;$/;"	m	struct:ScoringOptions	file:
mismatch_penalty	minimizer_mapper.cpp	/^static int32_t mismatch_penalty(size_t n, const Aligner* aligner) {$/;"	f	namespace:vg
mismatch_positions	gbwt_extender.hpp	/^    std::vector<size_t>       mismatch_positions;$/;"	m	struct:vg::GaplessExtension
mismatches	gbwt_extender.hpp	/^        Event mismatches;$/;"	m	struct:vg::WFAExtender::ErrorModel
mismatches	gbwt_extender.hpp	/^    size_t mismatches() const { return this->mismatch_positions.size(); }$/;"	f	struct:vg::GaplessExtension
mixture_weights	splicing.hpp	/^    vector<double> mixture_weights;$/;"	m	class:vg::SpliceStats
mmi_i16	simde/x86/mmx.h	/^    int16x4_t      mmi_i16;$/;"	m	union:__anon17
mmi_i32	simde/x86/mmx.h	/^    int32x2_t      mmi_i32;$/;"	m	union:__anon17
mmi_i64	simde/x86/mmx.h	/^    int64_t        mmi_i64;$/;"	m	union:__anon17
mmi_i8	simde/x86/mmx.h	/^    int8x8_t       mmi_i8;$/;"	m	union:__anon17
mmi_u16	simde/x86/mmx.h	/^    uint16x4_t     mmi_u16;$/;"	m	union:__anon17
mmi_u32	simde/x86/mmx.h	/^    uint32x2_t     mmi_u32;$/;"	m	union:__anon17
mmi_u64	simde/x86/mmx.h	/^    uint64_t       mmi_u64;$/;"	m	union:__anon17
mmi_u8	simde/x86/mmx.h	/^    uint8x8_t      mmi_u8;$/;"	m	union:__anon17
mode	statistics.hpp	/^    double mode;$/;"	m	struct:vg::SummaryStatistics
mode	subcommand/haplotypes_main.cpp	/^    OperatingMode mode = mode_invalid;$/;"	m	struct:HaplotypesConfig	file:
mode_classify	subcommand/haplotypes_main.cpp	/^        mode_classify,$/;"	e	enum:HaplotypesConfig::OperatingMode	file:
mode_extract	subcommand/haplotypes_main.cpp	/^        mode_extract,$/;"	e	enum:HaplotypesConfig::OperatingMode	file:
mode_invalid	subcommand/haplotypes_main.cpp	/^        mode_invalid,$/;"	e	enum:HaplotypesConfig::OperatingMode	file:
mode_log_likelihood	splicing.hpp	/^    double mode_log_likelihood;$/;"	m	class:vg::SpliceStats
mode_map_variants	subcommand/haplotypes_main.cpp	/^        mode_map_variants,$/;"	e	enum:HaplotypesConfig::OperatingMode	file:
mode_name	subcommand/prune_main.cpp	/^std::string mode_name(PruningMode mode) {$/;"	f
mode_preprocess	subcommand/haplotypes_main.cpp	/^        mode_preprocess,$/;"	e	enum:HaplotypesConfig::OperatingMode	file:
mode_prune	subcommand/prune_main.cpp	/^enum PruningMode { mode_prune, mode_restore, mode_unfold };$/;"	e	enum:PruningMode	file:
mode_restore	subcommand/prune_main.cpp	/^enum PruningMode { mode_prune, mode_restore, mode_unfold };$/;"	e	enum:PruningMode	file:
mode_sample_graph	subcommand/haplotypes_main.cpp	/^        mode_sample_graph,$/;"	e	enum:HaplotypesConfig::OperatingMode	file:
mode_sample_haplotypes	subcommand/haplotypes_main.cpp	/^        mode_sample_haplotypes,$/;"	e	enum:HaplotypesConfig::OperatingMode	file:
mode_unfold	subcommand/prune_main.cpp	/^enum PruningMode { mode_prune, mode_restore, mode_unfold };$/;"	e	enum:PruningMode	file:
model	cluster.hpp	/^    vector<MEMChainModelVertex> model;$/;"	m	class:vg::MEMChainModel
model	mapper.hpp	/^    vector<AlignmentChainModelVertex> model;$/;"	m	class:vg::AlignmentChainModel
modular_exponent	utility.cpp	/^size_t modular_exponent(uint64_t base, uint64_t exponent, uint64_t modulus) {$/;"	f	namespace:vg
monitor	utility.cpp	/^static recursive_mutex monitor;$/;"	m	namespace:vg::temp_file	file:
motif_data	splicing.hpp	/^    vector<tuple<string, string, int32_t>> motif_data;$/;"	m	class:vg::SpliceStats
motif_frequency	splicing.cpp	/^double SpliceStats::motif_frequency(size_t motif_num) const {$/;"	f	class:vg::SpliceStats
motif_is_reverse	splicing.cpp	/^bool SpliceStats::motif_is_reverse(size_t motif_num) const {$/;"	f	class:vg::SpliceStats
motif_matches	splicing.hpp	/^    vector<vector<tuple<handle_t, size_t, int64_t>>> motif_matches;$/;"	m	class:vg::SpliceRegion
motif_score	splicing.cpp	/^int32_t SpliceStats::motif_score(size_t motif_num) const {$/;"	f	class:vg::SpliceStats
motif_size	splicing.cpp	/^size_t SpliceStats::motif_size() const {$/;"	f	class:vg::SpliceStats
move	small_bitset.hpp	/^        void move(SmallBitset& another) {$/;"	f	class:vg::SmallBitset
mp_aln_emitter	readfilter.hpp	/^    unique_ptr<MultipathAlignmentEmitter> mp_aln_emitter;$/;"	m	class:vg::ReadFilter
mp_aln_emitters	multipath_alignment_emitter.hpp	/^    vector<unique_ptr<vg::io::ProtobufEmitter<MultipathAlignment>>> mp_aln_emitters;$/;"	m	class:vg::MultipathAlignmentEmitter
mpl_	unittest/catch.hpp	/^namespace mpl_{$/;"	n
mq_overlap	mapper.hpp	/^    float mq_overlap; \/\/ consider as alternative mappings any alignment with this overlap with our best$/;"	m	class:vg::Mapper
msg	index_registry.hpp	/^    const string msg;$/;"	m	class:vg::RewindPlanException
msg	index_registry.hpp	/^    string msg;$/;"	m	class:vg::InsufficientInputException
msg	kmer.cpp	/^const string SizeLimitExceededException::msg = "error: exceeded limit of size on disk";$/;"	m	class:vg::SizeLimitExceededException	file:
msg	kmer.hpp	/^    static const string msg;$/;"	m	class:vg::SizeLimitExceededException
mtx	kff.hpp	/^    std::mutex mtx;$/;"	m	class:vg::ParallelKFFReader
mu	mapper.hpp	/^    double mu = 0.0;$/;"	m	class:vg::FragmentLengthDistribution
multi_position_annotations	sampler.hpp	/^    bool multi_position_annotations = false;$/;"	m	class:vg::AbstractReadSampler
multi_surject	surjector.cpp	/^    vector<Alignment> Surjector::multi_surject(const Alignment& source,$/;"	f	class:vg::Surjector
multi_surject	surjector.cpp	/^    vector<multipath_alignment_t> Surjector::multi_surject(const multipath_alignment_t& source,$/;"	f	class:vg::Surjector
multiallelic_sv_warned	constructor.hpp	/^    mutable bool multiallelic_sv_warned = false;$/;"	m	class:vg::Constructor
multinomial_censored_sampling_prob_ln	statistics.hpp	/^real_t multinomial_censored_sampling_prob_ln(const vector<ProbIn>& probs, const unordered_map<vector<bool>, int>& obs) {$/;"	f	namespace:vg
multinomial_choose_ln	statistics.hpp	/^inline real_t multinomial_choose_ln(int n, vector<int> k) {$/;"	f	namespace:vg
multinomial_sampling_prob_ln	statistics.hpp	/^real_t multinomial_sampling_prob_ln(const vector<ProbIn>& probs, const vector<int>& obs) {$/;"	f	namespace:vg
multipath_align	multipath_mapper.cpp	/^    void MultipathMapper::multipath_align(const Alignment& alignment, clustergraph_t& cluster_graph,$/;"	f	class:vg::MultipathMapper
multipath_alignment_graph_hpp	multipath_alignment_graph.hpp	9;"	d
multipath_alignment_hpp	multipath_alignment.hpp	7;"	d
multipath_alignment_path_offsets	algorithms/alignment_path_offsets.cpp	/^multipath_alignment_path_offsets(const PathPositionHandleGraph& graph,$/;"	f	namespace:vg::algorithms
multipath_alignment_t	multipath_alignment.cpp	/^    multipath_alignment_t::multipath_alignment_t() : _mapping_quality(0) {$/;"	f	class:vg::multipath_alignment_t
multipath_alignment_t	multipath_alignment.cpp	/^    multipath_alignment_t::multipath_alignment_t(const multipath_alignment_t& other) {$/;"	f	class:vg::multipath_alignment_t
multipath_alignment_t	multipath_alignment.cpp	/^    multipath_alignment_t::multipath_alignment_t(multipath_alignment_t&& other) {$/;"	f	class:vg::multipath_alignment_t
multipath_alignment_t	multipath_alignment.hpp	/^    class multipath_alignment_t {$/;"	c	namespace:vg
multipath_map	multipath_mapper.cpp	/^    void MultipathMapper::multipath_map(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
multipath_map_paired	multipath_mapper.cpp	/^    bool MultipathMapper::multipath_map_paired(const Alignment& alignment1, const Alignment& alignment2,$/;"	f	class:vg::MultipathMapper
multipath_mapper_hpp	multipath_mapper.hpp	8;"	d
multiple_thread_sources	subcommand/index_main.cpp	/^void multiple_thread_sources() {$/;"	f
multiplexer	hts_alignment_emitter.hpp	/^    vg::io::StreamMultiplexer multiplexer;$/;"	m	class:vg::HTSWriter
mut_graph_impl	index_registry.cpp	/^IndexingParameters::MutableGraphImplementation IndexingParameters::mut_graph_impl = PackedGraph;$/;"	m	class:vg::IndexingParameters	file:
mut_graph_impl	index_registry.hpp	/^    static MutableGraphImplementation mut_graph_impl;$/;"	m	struct:vg::IndexingParameters
mut_sampler	sampler.hpp	/^    vg::uniform_int_distribution<size_t> mut_sampler;$/;"	m	class:vg::NGSSimulator
mutable_connection	multipath_alignment.hpp	/^    inline connection_t* subpath_t::mutable_connection(size_t i) {$/;"	f	class:vg::subpath_t
mutable_connection	multipath_alignment.hpp	/^    inline vector<connection_t>* subpath_t::mutable_connection() {$/;"	f	class:vg::subpath_t
mutable_edit	path.hpp	/^inline edit_t* path_mapping_t::mutable_edit(size_t i) {$/;"	f	class:vg::path_mapping_t
mutable_edit	path.hpp	/^inline vector<edit_t>* path_mapping_t::mutable_edit() {$/;"	f	class:vg::path_mapping_t
mutable_mapping	path.hpp	/^inline path_mapping_t* path_t::mutable_mapping(size_t i) {$/;"	f	class:vg::path_t
mutable_mapping	path.hpp	/^inline vector<path_mapping_t>* path_t::mutable_mapping() {$/;"	f	class:vg::path_t
mutable_next	multipath_alignment.hpp	/^    inline vector<uint32_t>* subpath_t::mutable_next() {$/;"	f	class:vg::subpath_t
mutable_path	multipath_alignment.hpp	/^    inline path_t* subpath_t::mutable_path() {$/;"	f	class:vg::subpath_t
mutable_position	path.hpp	/^inline position_t* path_mapping_t::mutable_position() {$/;"	f	class:vg::path_mapping_t
mutable_quality	multipath_alignment.hpp	/^    inline string* multipath_alignment_t::mutable_quality() {$/;"	f	class:vg::multipath_alignment_t
mutable_sequence	multipath_alignment.hpp	/^    inline string* multipath_alignment_t::mutable_sequence() {$/;"	f	class:vg::multipath_alignment_t
mutable_sequence	path.hpp	/^inline string* edit_t::mutable_sequence() {$/;"	f	class:vg::edit_t
mutable_start	multipath_alignment.hpp	/^    inline vector<uint32_t>* multipath_alignment_t::mutable_start() {$/;"	f	class:vg::multipath_alignment_t
mutable_subpath	multipath_alignment.hpp	/^    inline subpath_t* multipath_alignment_t::mutable_subpath(size_t i) {$/;"	f	class:vg::multipath_alignment_t
mutable_subpath	multipath_alignment.hpp	/^    inline vector<subpath_t>* multipath_alignment_t::mutable_subpath() {$/;"	f	class:vg::multipath_alignment_t
mutate	sampler.cpp	/^Alignment Sampler::mutate(const Alignment& aln,$/;"	f	class:vg::Sampler
mutate_edit	sampler.cpp	/^vector<Edit> Sampler::mutate_edit(const Edit& edit,$/;"	f	class:vg::Sampler
mutation_alphabets	sampler.hpp	/^    unordered_map<char, string> mutation_alphabets;$/;"	m	class:vg::NGSSimulator
mutex_graph	transcriptome.hpp	/^        mutex mutex_graph;$/;"	m	class:vg::Transcriptome
mutex_transcript_paths	transcriptome.hpp	/^        mutex mutex_transcript_paths;$/;"	m	class:vg::Transcriptome
my_mapper	filter.hpp	/^        Mapper* my_mapper;$/;"	m	class:vg::Filter
my_max_distance	filter.hpp	/^        int my_max_distance = 1000;$/;"	m	class:vg::Filter
my_names	vectorizer.hpp	/^    vector<string> my_names;$/;"	m	class:Vectorizer
my_path_position_graph	filter.hpp	/^        PathPositionHandleGraph* my_path_position_graph = NULL;$/;"	m	class:vg::Filter
my_vectors	vectorizer.hpp	/^    vector<bit_vector> my_vectors;$/;"	m	class:Vectorizer
my_vg	filter.hpp	/^        vg::VG* my_vg = NULL;$/;"	m	class:vg::Filter
my_xg	vectorizer.hpp	/^    const PathPositionHandleGraph* my_xg;$/;"	m	class:Vectorizer
n	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 __m256         n;$/;"	m	union:__anon7
n	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 __m256d        n;$/;"	m	union:__anon8
n	simde/x86/avx.h	/^    SIMDE_ALIGN_TO_32 __m256i        n;$/;"	m	union:__anon9
n	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN __m512         n;$/;"	m	union:__anon14
n	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN __m512d        n;$/;"	m	union:__anon15
n	simde/x86/avx512/types.h	/^    SIMDE_AVX512_ALIGN __m512i        n;$/;"	m	union:__anon16
n	simde/x86/mmx.h	/^    __m64          n;$/;"	m	union:__anon17
n	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 __m128         n;$/;"	m	union:__anon12
n	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 __m128d        n;$/;"	m	union:__anon11
n	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 __m128i        n;$/;"	m	union:__anon10
n_bins	packer.hpp	/^    size_t n_bins = 1;$/;"	m	class:vg::Packer
n_iterations	mcmc_genotyper.hpp	/^    const int n_iterations;$/;"	m	class:vg::MCMCGenotyper
n_iterations	unittest/mcmc_genotyper.cpp	/^        const int n_iterations = 100;$/;"	m	namespace:vg::unittest	file:
n_iterations	unittest/min_cut_graph.cpp	/^        const int n_iterations = 100;$/;"	m	namespace:vg::unittest	file:
name	benchmark.hpp	/^    string name;$/;"	m	struct:vg::BenchmarkResult
name	filter.hpp	/^    string name;$/;"	m	struct:vg::BREAKPOINT
name	funnel.hpp	/^        string name;$/;"	m	struct:vg::Funnel::State::Stage
name	recombinator.hpp	/^        std::string name;$/;"	m	struct:vg::Recombinator::LocalHaplotype
name	subcommand/subcommand.hpp	/^    std::string name;$/;"	m	class:vg::subcommand::Subcommand
name	transcriptome.hpp	/^    string name;$/;"	m	struct:vg::Transcript
name	unittest/catch.hpp	/^    StringRef name;$/;"	m	struct:Catch::NameAndTags
name	vg.hpp	/^        string name;$/;"	m	struct:vg::VG::Plan
name	vg.hpp	/^    string name;$/;"	m	class:vg::VG
name_prefixes	readfilter.hpp	/^    vector<string> name_prefixes;$/;"	m	class:vg::ReadFilter
name_to_id	algorithms/gfa_to_handle.hpp	/^    unique_ptr<unordered_map<string, nid_t>> name_to_id = std::make_unique<unordered_map<string, nid_t>>();$/;"	m	struct:vg::algorithms::GFAIDMapInfo
name_to_id	path.hpp	/^    mutable map<string, int64_t> name_to_id;$/;"	m	class:vg::Paths
nearest_offsets_in_paths	algorithms/nearest_offsets_in_paths.cpp	/^path_offset_collection_t nearest_offsets_in_paths(const PathPositionHandleGraph* graph,$/;"	f	namespace:vg::algorithms
need_comma	explainer.hpp	/^    bool need_comma = false;$/;"	m	class:vg::ProblemDumpExplainer
neon_f32	simde/x86/mmx.h	/^    float32x2_t    neon_f32;$/;"	m	union:__anon17
neon_f32	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 float32x4_t    neon_f32;$/;"	m	union:__anon12
neon_f32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 float32x4_t    neon_f32;$/;"	m	union:__anon10
neon_f32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 float32x4_t    neon_f32;$/;"	m	union:__anon11
neon_f64	simde/x86/sse.h	/^      SIMDE_ALIGN_TO_16 float64x2_t    neon_f64;$/;"	m	union:__anon12
neon_f64	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 float64x2_t    neon_f64;$/;"	m	union:__anon10
neon_f64	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 float64x2_t    neon_f64;$/;"	m	union:__anon11
neon_i16	simde/x86/mmx.h	/^    int16x4_t      neon_i16;$/;"	m	union:__anon17
neon_i16	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int16x8_t      neon_i16;$/;"	m	union:__anon12
neon_i16	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int16x8_t      neon_i16;$/;"	m	union:__anon10
neon_i16	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int16x8_t      neon_i16;$/;"	m	union:__anon11
neon_i32	simde/x86/mmx.h	/^    int32x2_t      neon_i32;$/;"	m	union:__anon17
neon_i32	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int32x4_t      neon_i32;$/;"	m	union:__anon12
neon_i32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int32x4_t      neon_i32;$/;"	m	union:__anon10
neon_i32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int32x4_t      neon_i32;$/;"	m	union:__anon11
neon_i64	simde/x86/mmx.h	/^    int64x1_t      neon_i64;$/;"	m	union:__anon17
neon_i64	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int64x2_t      neon_i64;$/;"	m	union:__anon12
neon_i64	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int64x2_t      neon_i64;$/;"	m	union:__anon10
neon_i64	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int64x2_t      neon_i64;$/;"	m	union:__anon11
neon_i8	simde/x86/mmx.h	/^    int8x8_t       neon_i8;$/;"	m	union:__anon17
neon_i8	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 int8x16_t      neon_i8;$/;"	m	union:__anon12
neon_i8	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int8x16_t      neon_i8;$/;"	m	union:__anon10
neon_i8	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 int8x16_t      neon_i8;$/;"	m	union:__anon11
neon_u16	simde/x86/mmx.h	/^    uint16x4_t     neon_u16;$/;"	m	union:__anon17
neon_u16	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint16x8_t     neon_u16;$/;"	m	union:__anon12
neon_u16	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint16x8_t     neon_u16;$/;"	m	union:__anon10
neon_u16	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint16x8_t     neon_u16;$/;"	m	union:__anon11
neon_u32	simde/x86/mmx.h	/^    uint32x2_t     neon_u32;$/;"	m	union:__anon17
neon_u32	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint32x4_t     neon_u32;$/;"	m	union:__anon12
neon_u32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint32x4_t     neon_u32;$/;"	m	union:__anon10
neon_u32	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint32x4_t     neon_u32;$/;"	m	union:__anon11
neon_u64	simde/x86/mmx.h	/^    uint64x1_t     neon_u64;$/;"	m	union:__anon17
neon_u64	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint64x2_t     neon_u64;$/;"	m	union:__anon12
neon_u64	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint64x2_t     neon_u64;$/;"	m	union:__anon10
neon_u64	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint64x2_t     neon_u64;$/;"	m	union:__anon11
neon_u8	simde/x86/mmx.h	/^    uint8x8_t      neon_u8;$/;"	m	union:__anon17
neon_u8	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 uint8x16_t     neon_u8;$/;"	m	union:__anon12
neon_u8	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint8x16_t     neon_u8;$/;"	m	union:__anon10
neon_u8	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 uint8x16_t     neon_u8;$/;"	m	union:__anon11
nested_support_finder	graph_caller.hpp	/^    NestedCachedPackedTraversalSupportFinder& nested_support_finder;$/;"	m	class:vg::NestedFlowCaller
net_graph_of	snarls.cpp	/^NetGraph SnarlManager::net_graph_of(const Snarl* snarl, const HandleGraph* graph, bool use_internal_connectivity) const {$/;"	f	class:vg::SnarlManager
net_graphs	genome_state.hpp	/^    unordered_map<const Snarl*, NetGraph> net_graphs;$/;"	m	class:vg::GenomeState
net_handle	snarl_seed_clusterer.hpp	/^                net_handle_t net_handle;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem::SnarlTreeChild
net_handle_to_node_problem_index	snarl_seed_clusterer.hpp	/^            hash_map<net_handle_t, size_t> net_handle_to_node_problem_index;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
net_node_lanes	genome_state.hpp	/^    unordered_map<handle_t, vector<decltype(haplotypes)::value_type::iterator>> net_node_lanes;$/;"	m	class:vg::SnarlState
new_height	haplotypes.hpp	/^size_t hDP_gbwt_graph_accessor<GBWTType>::new_height() const {$/;"	f	class:haplo::hDP_gbwt_graph_accessor
new_length	haplotypes.hpp	/^size_t hDP_gbwt_graph_accessor<GBWTType>::new_length() const {$/;"	f	class:haplo::hDP_gbwt_graph_accessor
new_node	haplotypes.hpp	/^  const gbwt::node_type new_node;$/;"	m	class:haplo::hDP_gbwt_graph_accessor
new_output_graph	io/save_handle_graph.hpp	/^unique_ptr<T> new_output_graph(const string& fmt_string) {$/;"	f	namespace:vg::io
new_side	haplotypes.hpp	/^size_t hDP_gbwt_graph_accessor<GBWTType>::new_side() const {$/;"	f	class:haplo::hDP_gbwt_graph_accessor
next	gbwt_extender.cpp	/^    void next(int32_t score, pos_t to) {$/;"	f	class:vg::WFATree
next	multipath_alignment.hpp	/^    inline const vector<uint32_t>& subpath_t::next() const {$/;"	f	class:vg::subpath_t
next	multipath_alignment.hpp	/^    inline int32_t connection_t::next() const {$/;"	f	class:vg::connection_t
next	multipath_alignment.hpp	/^    inline uint32_t subpath_t::next(size_t i) const {$/;"	f	class:vg::subpath_t
next	phase_unfolder.cpp	/^    size_t next;    \/\/ Branch to choose at offset + 1.$/;"	m	struct:vg::PathBranch	file:
next	phased_genome.hpp	/^        HaplotypeNode* next;$/;"	m	struct:vg::PhasedGenome::HaplotypeNode
next	vcf_buffer.cpp	/^bool WindowedVcfBuffer::next() {$/;"	f	class:vg::WindowedVcfBuffer
next_char	kmer.hpp	/^    vector<char> next_char;$/;"	m	struct:vg::kmer_t
next_chars	vg.hpp	/^    set<char> next_chars;$/;"	m	struct:vg::KmerPosition
next_cost	cluster.hpp	/^    vector<pair<MEMChainModelVertex*, double> > next_cost; \/\/ for forward$/;"	m	class:vg::MEMChainModelVertex
next_cost	mapper.hpp	/^    vector<pair<AlignmentChainModelVertex*, double> > next_cost; \/\/ for forward$/;"	m	class:vg::AlignmentChainModelVertex
next_empty_alignment	banded_global_aligner.cpp	/^inline void BandedGlobalAligner<IntType>::AltTracebackStack::next_empty_alignment(Alignment& alignment) {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
next_explanation_number	explainer.hpp	/^    static std::atomic<size_t> next_explanation_number;$/;"	m	class:vg::Explainer
next_group	indexed_vg.hpp	/^        int64_t next_group;$/;"	m	struct:vg::IndexedVG::CacheEntry
next_is_empty	banded_global_aligner.cpp	/^inline bool BandedGlobalAligner<IntType>::AltTracebackStack::next_is_empty()  {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
next_pos	kmer.hpp	/^    vector<pos_t> next_pos;$/;"	m	struct:vg::kmer_t
next_pos_chars	algorithms/next_pos_chars.cpp	/^map<pos_t, char> next_pos_chars(const PathPositionHandleGraph& graph, pos_t pos) {$/;"	f	namespace:vg::algorithms
next_pos_chars	sampler.cpp	/^map<pos_t, char> Sampler::next_pos_chars(pos_t pos) {$/;"	f	class:vg::Sampler
next_positions	vg.hpp	/^    set<string> next_positions;$/;"	m	struct:vg::KmerPosition
next_score	gbwt_extender.cpp	/^    int32_t next_score(int32_t match_score) {$/;"	f	class:vg::WFATree
next_size	multipath_alignment.hpp	/^    inline size_t subpath_t::next_size() const {$/;"	f	class:vg::subpath_t
next_snarl	snarls.cpp	/^Visit SnarlManager::next_snarl(const Visit& here) const {$/;"	f	class:vg::SnarlManager
next_traceback_alignment	banded_global_aligner.cpp	/^inline void BandedGlobalAligner<IntType>::AltTracebackStack::next_traceback_alignment() {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
no_Ns	sampler.hpp	/^    bool no_Ns;$/;"	m	class:vg::Sampler
no_chain_info	minimizer_mapper.hpp	/^    inline static gbwtgraph::Payload no_chain_info() {$/;"	f	class:vg::MinimizerMapper
no_clustering	multipath_mapper.hpp	/^        bool no_clustering = false;$/;"	m	class:vg::MultipathMapper
no_multiple_cover_types	subcommand/gbwt_main.cpp	/^void no_multiple_cover_types(const GBWTConfig& config) {$/;"	f
no_multiple_input_types	subcommand/gbwt_main.cpp	/^void no_multiple_input_types(const GBWTConfig& config) {$/;"	f
no_multiple_inputs	subcommand/convert_main.cpp	/^void no_multiple_inputs(input_type input) {$/;"	f
no_pos	gbwt_extender.cpp	/^    static bool no_pos(pos_t pos) { return (id(pos) == 0); }$/;"	f	class:vg::WFATree
no_splice_log_odds	multipath_mapper.hpp	/^        int32_t no_splice_log_odds = 16;$/;"	m	class:vg::MultipathMapper
no_splice_natural_log_odds	multipath_mapper.hpp	/^        double no_splice_natural_log_odds = 22.55;$/;"	m	class:vg::MultipathMapper
node	banded_global_aligner.hpp	/^        handle_t node;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
node	cactus.hpp	/^    int64_t node;$/;"	m	struct:vg::CactusSide
node	gbwt_extender.cpp	/^    uint32_t node() const { return this->path.top(); }$/;"	f	struct:vg::MatchPos
node	nodeside.hpp	/^    id_t node;$/;"	m	class:vg::NodeSide
node	nodetraversal.hpp	/^    Node* node;$/;"	m	class:vg::NodeTraversal
nodeType	haplotypes.hpp	/^  typedef enum nodeType{$/;"	g	struct:haplo::linear_haplo_structure
nodeType	haplotypes.hpp	/^  } nodeType;$/;"	t	struct:haplo::linear_haplo_structure	typeref:enum:haplo::linear_haplo_structure::nodeType
node_by_id	vg.hpp	/^    hash_map<nid_t, Node*> node_by_id;$/;"	m	class:vg::VG
node_cache	sampler.hpp	/^    LRUCache<id_t, Node> node_cache;$/;"	m	class:vg::Sampler
node_count	dagified_graph.hpp	/^        size_t node_count = 0;$/;"	m	class:vg::DagifiedGraph
node_count	vg.cpp	/^size_t VG::node_count(void) const {$/;"	f	class:vg::VG
node_count_next	vg.cpp	/^int VG::node_count_next(NodeTraversal n) {$/;"	f	class:vg::VG
node_count_prev	vg.cpp	/^int VG::node_count_prev(NodeTraversal n) {$/;"	f	class:vg::VG
node_end	nodeside.hpp	/^inline NodeSide node_end(id_t id) {$/;"	f	namespace:vg
node_id	path.cpp	/^id_t mapping_t::node_id(void) const {$/;"	f	class:vg::mapping_t
node_id	position.hpp	/^inline int64_t position_t::node_id() const {$/;"	f	class:vg::position_t
node_id_to_idx	banded_global_aligner.hpp	/^        unordered_map<int64_t, int64_t> node_id_to_idx;$/;"	m	class:vg::BandedGlobalAligner
node_ids	contracting_graph.hpp	/^    vector<size_t> node_ids;   $/;"	m	class:vg::ContractingGraph
node_ids	sparse_union_find.hpp	/^        vector<size_t> node_ids;$/;"	m	class:vg::SparseUnionFind
node_index	dozeu_interface.hpp	/^        size_t node_index;$/;"	m	struct:vg::DozeuInterface::graph_pos_s
node_index	packer.cpp	/^size_t Packer::node_index(nid_t node_id) const {$/;"	f	class:vg::Packer
node_index	vg.hpp	/^    hash_map<Node*, int> node_index;$/;"	m	class:vg::VG
node_length	path_index.cpp	/^size_t PathIndex::node_length(const iterator& here) const {$/;"	f	class:vg::PathIndex
node_length	sampler.cpp	/^size_t Sampler::node_length(id_t id) {$/;"	f	class:vg::Sampler
node_length	snarl_distance_index.hpp	/^    size_t node_length;$/;"	m	struct:vg::MIPayloadValues
node_length	snarl_distance_index.hpp	/^    static size_t node_length(const gbwtgraph::Payload code) { $/;"	f	struct:vg::MIPayload
node_length	snarl_seed_clusterer.hpp	/^            size_t node_length = std::numeric_limits<size_t>::max();             $/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
node_length	source_sink_overlay.hpp	/^    size_t node_length;$/;"	m	class:vg::SourceSinkOverlay
node_lengths	haplotypes.hpp	/^  vector<size_t> node_lengths;$/;"	m	struct:haplo::gbwt_thread_t
node_listeners	algorithms/gfa_to_handle.hpp	/^    vector<std::function<void(nid_t id, const chars_t& sequence, const tag_list_t& tags)>> node_listeners;$/;"	m	class:vg::algorithms::GFAParser
node_locations	phased_genome.hpp	/^        unordered_map<int64_t, list<HaplotypeNode*> > node_locations;$/;"	m	class:vg::PhasedGenome
node_mapping	path.hpp	/^    hash_map<id_t, map<int64_t, set<mapping_t*>>> node_mapping;$/;"	m	class:vg::Paths
node_mappings	banded_global_aligner.hpp	/^        list<Mapping> node_mappings;$/;"	m	class:vg::BandedGlobalAligner::BABuilder
node_names	unittest/back_translate.cpp	/^    unordered_map<nid_t, string> node_names;$/;"	m	class:vg::unittest::MockBackTranslation	file:
node_occurrences	path_index.hpp	/^    map<id_t, vector<iterator>> node_occurrences;$/;"	m	struct:vg::PathIndex
node_offset	gbwt_extender.cpp	/^    uint32_t node_offset;$/;"	m	struct:vg::MatchPos	file:
node_offset	gbwt_extender.cpp	/^    uint32_t node_offset;$/;"	m	struct:vg::WFAPoint	file:
node_offset	gbwt_extender.hpp	/^    uint32_t node_offset = 0;$/;"	m	struct:vg::WFAAlignment
node_offset	viz.cpp	/^double Viz::node_offset(id_t id) {$/;"	f	class:vg::Viz
node_offset_of	gbwt_extender.cpp	/^    size_t node_offset_of(pos_t pos) const {$/;"	f	struct:vg::WFANode
node_path_traversal_counts	path.cpp	/^map<string, int> Paths::node_path_traversal_counts(id_t id, bool rev) {$/;"	f	class:vg::Paths
node_path_traversals	path.cpp	/^vector<string> Paths::node_path_traversals(id_t id, bool rev) {$/;"	f	class:vg::Paths
node_qual_bin_size	packer.hpp	/^    size_t node_qual_bin_size;$/;"	m	class:vg::Packer
node_quality_bin_offset	packer.cpp	/^pair<size_t, size_t> Packer::node_quality_bin_offset(size_t i) const {$/;"	f	class:vg::Packer
node_quality_bin_size	packer.cpp	/^size_t Packer::node_quality_bin_size(size_t i) const {$/;"	f	class:vg::Packer
node_quality_civ	packer.hpp	/^    vlc_vector<> node_quality_civ; \/\/ averge mapq for each node rank (compacted node_quality_dynamic)$/;"	m	class:vg::Packer
node_quality_dynamic	packer.hpp	/^    vector<gcsa::CounterArray*> node_quality_dynamic;$/;"	m	class:vg::Packer
node_quality_locks	packer.hpp	/^    std::mutex* node_quality_locks;$/;"	m	class:vg::Packer
node_quality_vector_size	packer.cpp	/^size_t Packer::node_quality_vector_size(void) const {$/;"	f	class:vg::Packer
node_rank	vg.cpp	/^int VG::node_rank(Node* node) {$/;"	f	class:vg::VG
node_rank	vg.cpp	/^int VG::node_rank(nid_t id) {$/;"	f	class:vg::VG
node_record_offset	snarl_distance_index.hpp	/^    size_t node_record_offset;$/;"	m	struct:vg::MIPayloadValues
node_record_offset	snarl_distance_index.hpp	/^    static size_t node_record_offset(const gbwtgraph::Payload code) { $/;"	f	struct:vg::MIPayload
node_start	nodeside.hpp	/^inline NodeSide node_start(id_t id) {$/;"	f	namespace:vg
node_starts_in_path	vg.cpp	/^void VG::node_starts_in_path(const list<NodeTraversal>& path,$/;"	f	class:vg::VG
node_starts_in_path	vg.cpp	/^void VG::node_starts_in_path(list<NodeTraversal>& path,$/;"	f	class:vg::VG
node_subset	subgraph_overlay.hpp	/^    const unordered_set<nid_t>* node_subset;$/;"	m	class:vg::SubgraphOverlay
node_supports	genotypekit.hpp	/^    map<id_t, Support> node_supports;$/;"	m	struct:vg::SupportAugmentedGraph
node_supports	unittest/traversal_support.cpp	/^    const unordered_map<nid_t, double> node_supports;$/;"	m	class:vg::unittest::TestTraversalSupportFinder	file:
node_to_position	filter.hpp	/^        map<int64_t, int64_t> node_to_position;$/;"	m	class:vg::Filter
node_to_segment_and_offsets	flat_file_back_translation.hpp	/^    std::unordered_map<nid_t, std::tuple<nid_t, size_t, size_t>> node_to_segment_and_offsets;$/;"	m	class:vg::FlatFileBackTranslation
node_to_snarl	graph_caller.cpp	/^pair<bool, handle_t> SnarlGraph::node_to_snarl(handle_t handle) const {$/;"	f	class:vg::SnarlGraph
node_to_variant	traversal_finder.hpp	/^    unordered_map<id_t, list<vcflib::Variant*>> node_to_variant;$/;"	m	class:vg::VCFTraversalFinder
node_traversal	phased_genome.hpp	/^        NodeTraversal node_traversal;$/;"	m	struct:vg::PhasedGenome::HaplotypeNode
node_weight_callback	traversal_finder.hpp	/^    function<double(handle_t)> node_weight_callback;$/;"	m	class:vg::FlowTraversalFinder
nodelength	haplotypes.cpp	/^size_t gbwt_thread_t::nodelength(size_t i) const {$/;"	f	class:haplo::gbwt_thread_t
nodes	algorithms/min_cut_graph.hpp	/^            unordered_map<size_t,Node> nodes;$/;"	m	struct:vg::algorithms::Graph
nodes	cluster.hpp	/^    const vector<HitNode>& nodes;$/;"	m	struct:vg::MEMClusterer::DPScoreComparator
nodes	cluster.hpp	/^    vector<HitNode> nodes;$/;"	m	class:vg::MEMClusterer::HitGraph
nodes	explainer.hpp	/^    std::unordered_map<std::string, annotation_t> nodes;$/;"	m	class:vg::DiagramExplainer
nodes	flow_sort.hpp	/^        set<id_t> nodes;$/;"	m	struct:vg::FlowSort::Growth
nodes	gbwt_extender.cpp	/^    std::vector<WFANode> nodes;$/;"	m	class:vg::WFATree	file:
nodes	haplotypes.hpp	/^  gbwt::vector_type nodes;$/;"	m	struct:haplo::gbwt_thread_t
nodes	mem.hpp	/^    std::vector<gcsa::node_type> nodes;$/;"	m	class:vg::MaximalExactMatch
nodes_before_offset	viz.cpp	/^double Viz::nodes_before_offset(size_t pos) {$/;"	f	class:vg::Viz
nodes_next	vg.cpp	/^vector<NodeTraversal> VG::nodes_next(NodeTraversal n) {$/;"	f	class:vg::VG
nodes_next	vg.cpp	/^void VG::nodes_next(NodeTraversal node, vector<NodeTraversal>& nodes) {$/;"	f	class:vg::VG
nodes_prev	vg.cpp	/^vector<NodeTraversal> VG::nodes_prev(NodeTraversal n) {$/;"	f	class:vg::VG
nodes_prev	vg.cpp	/^void VG::nodes_prev(NodeTraversal node, vector<NodeTraversal>& nodes) {$/;"	f	class:vg::VG
noexcept	algorithms/gfa_to_handle.hpp	/^    virtual const char* what() const noexcept;$/;"	m	struct:vg::algorithms::GFAFormatError
noexcept	banded_global_aligner.hpp	/^        virtual const char* what() const noexcept;$/;"	m	class:vg::NoAlignmentInBandException
noexcept	index_registry.hpp	/^                               const IndexRegistry& registry) noexcept;$/;"	m	class:vg::InsufficientInputException
noexcept	index_registry.hpp	/^    RewindPlanException(const string& msg, const IndexGroup& rewind_to) noexcept;$/;"	m	class:vg::RewindPlanException
noexcept	index_registry.hpp	/^    const IndexGroup& get_indexes() const noexcept;$/;"	m	class:vg::RewindPlanException
noexcept	index_registry.hpp	/^    const char* what() const noexcept;$/;"	m	class:vg::InsufficientInputException
noexcept	index_registry.hpp	/^    const char* what() const noexcept;$/;"	m	class:vg::RewindPlanException
noexcept	index_registry.hpp	/^    ~RewindPlanException() noexcept = default;$/;"	m	class:vg::RewindPlanException
noexcept	kmer.hpp	/^    SizeLimitExceededException() noexcept = default;$/;"	m	class:vg::SizeLimitExceededException
noexcept	kmer.hpp	/^    const char* what() const noexcept;$/;"	m	class:vg::SizeLimitExceededException
noexcept	kmer.hpp	/^    ~SizeLimitExceededException() noexcept = default;$/;"	m	class:vg::SizeLimitExceededException
noexcept	unittest/catch.hpp	/^        SourceLineInfo& operator = ( SourceLineInfo&& ) noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	unittest/catch.hpp	/^        SourceLineInfo( SourceLineInfo&& )              noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	unittest/catch.hpp	/^        SourceLineInfo( char const* _file, std::size_t _line ) noexcept$/;"	m	struct:Catch::SourceLineInfo
noexcept	unittest/catch.hpp	/^        StringRef( char const* rawChars ) noexcept;$/;"	m	class:Catch::StringRef
noexcept	unittest/catch.hpp	/^        bool operator < ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	unittest/catch.hpp	/^        bool operator == ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	unittest/catch.hpp	/^        constexpr StringRef() noexcept = default;$/;"	m	class:Catch::StringRef
noexcept	unittest/catch.hpp	/^    AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept;$/;"	m	struct:Catch::AutoReg
noexcept	unittest/catch.hpp	/^    NameAndTags( StringRef const& name_ = StringRef(), StringRef const& tags_ = StringRef() ) noexcept;$/;"	m	struct:Catch::NameAndTags
noexcept	vg.hpp	/^    VG& operator=(VG&& other) noexcept;$/;"	m	class:vg::VG
noexcept	vg.hpp	/^    VG(VG&& other) noexcept;$/;"	m	class:vg::VG
nonATGCNtoN	utility.cpp	/^string nonATGCNtoN(const string& s) {$/;"	f	namespace:vg
non_intermediate_aliases	index_registry.cpp	/^vector<pair<IndexName, vector<IndexName>>> AliasGraph::non_intermediate_aliases(const IndexingPlan* plan,$/;"	f	class:vg::AliasGraph
non_match_end	alignment.cpp	/^int non_match_end(const Alignment& alignment) {$/;"	f	namespace:vg
non_match_start	alignment.cpp	/^int non_match_start(const Alignment& alignment) {$/;"	f	namespace:vg
nonce	sampler.hpp	/^    int64_t nonce;$/;"	m	class:vg::Sampler
nondisjoint	haplotypes.cpp	/^bool int_itvl_t::nondisjoint(const int_itvl_t& A, const int_itvl_t& B) {$/;"	f	class:haplo::int_itvl_t
nonoverlapping_node_context_without_paths	vg.cpp	/^void VG::nonoverlapping_node_context_without_paths(Node* node, VG& g) {$/;"	f	class:vg::VG
normal_aligners	genotyper.hpp	/^    vector<Aligner> normal_aligners;$/;"	m	class:vg::Genotyper
normal_distribution	statistics.hpp	/^    normal_distribution(T _mean = 0.0, T _stddev = 1.0) : m_mean(_mean), m_stddev(_stddev) {$/;"	f	class:vg::normal_distribution
normal_distribution	statistics.hpp	/^class normal_distribution {$/;"	c	namespace:vg
normal_pdf	statistics.hpp	/^T normal_pdf(T x, T m = 0.0, T s = 1.0)$/;"	f	namespace:vg
normal_supports	filter.hpp	/^    int normal_supports = 0;$/;"	m	struct:vg::BREAKPOINT
normalize	algorithms/normalize.cpp	/^void normalize(handlegraph::MutablePathDeletableHandleGraph* graph, int max_iter, bool debug,$/;"	f	namespace:vg::algorithms
normalize	unittest/component_paths.cpp	/^set<set<path_handle_t>> normalize(vector<unordered_set<path_handle_t>> result) {$/;"	f	namespace:vg::unittest
normalize_alignment	alignment.cpp	/^void normalize_alignment(Alignment& alignment) {$/;"	f	namespace:vg
normalize_seeds	unittest/gbwt_extender.cpp	/^std::vector<std::pair<pos_t, size_t>> normalize_seeds(std::vector<std::pair<pos_t, size_t>>& seeds) {$/;"	f	namespace:vg::unittest::__anon3
nowhere	algorithms/chain_items.hpp	/^    inline static size_t nowhere() {$/;"	f	class:vg::algorithms::TracedScore
nt_table	aligner.hpp	/^        int8_t* nt_table = nullptr;$/;"	m	class:vg::GSSWAligner
nt_table	dinucleotide_machine.hpp	/^    uint32_t nt_table[256];$/;"	m	class:vg::DinucleotideMachine
nth_copy_of_handle	dagified_graph.cpp	/^    handle_t DagifiedGraph::nth_copy_of_handle(const handle_t& handle, const uint64_t& n) const {$/;"	f	class:vg::DagifiedGraph
num_alt_alns	multipath_mapper.hpp	/^        int32_t num_alt_alns = 4;$/;"	m	class:vg::MultipathMapper
num_bases_dynamic	packer.hpp	/^    size_t num_bases_dynamic;$/;"	m	class:vg::Packer
num_bp_per_min	minimizer_mapper.hpp	/^    size_t num_bp_per_min = default_num_bp_per_min;$/;"	m	class:vg::MinimizerMapper
num_components	algorithms/component.cpp	/^size_t num_components(const HandleGraph& graph) {$/;"	f	namespace:vg::algorithms
num_connected_components	multipath_alignment.cpp	/^    size_t num_connected_components(const multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
num_edges_dynamic	packer.hpp	/^    size_t num_edges_dynamic;$/;"	m	class:vg::Packer
num_haplotypes	phased_genome.cpp	/^    size_t PhasedGenome::num_haplotypes() {$/;"	f	class:vg::PhasedGenome
num_haplotypes	recombinator.hpp	/^        size_t num_haplotypes = NUM_HAPLOTYPES;$/;"	m	struct:vg::Recombinator::Parameters
num_items	cluster.hpp	/^    size_t num_items;$/;"	m	class:vg::ShuffledPairs
num_jobs	gbwt_helper.hpp	/^    size_t num_jobs = 1;$/;"	m	struct:vg::RebuildParameters
num_left_handles	splicing.hpp	/^    size_t num_left_handles;$/;"	m	class:vg::JoinedSpliceGraph
num_mapping_attempts	multipath_mapper.hpp	/^        size_t num_mapping_attempts = 48;$/;"	m	class:vg::MultipathMapper
num_nodes_dynamic	packer.hpp	/^    size_t num_nodes_dynamic;$/;"	m	class:vg::Packer
num_null_nodes	dozeu_pinning_overlay.hpp	/^    size_t num_null_nodes = 0;$/;"	m	class:vg::DozeuPinningOverlay
num_null_nodes	null_masking_graph.hpp	/^    size_t num_null_nodes = 0;$/;"	m	class:vg::NullMaskingGraph
num_pairs	cluster.hpp	/^    size_t num_pairs;$/;"	m	class:vg::ShuffledPairs
num_paths	subcommand/gbwt_main.cpp	/^    size_t num_paths = default_num_paths(), context_length = default_context_length();$/;"	m	struct:GBWTConfig	file:
num_paths_set	subcommand/gbwt_main.cpp	/^    bool num_paths_set = false;$/;"	m	struct:GBWTConfig	file:
num_snarls	snarls.cpp	/^int SnarlManager::num_snarls()const{$/;"	f	class:vg::SnarlManager
num_threads	transcriptome.hpp	/^        int32_t num_threads = 1;$/;"	m	class:vg::Transcriptome
number_of_values	statistics.hpp	/^    size_t number_of_values;$/;"	m	struct:vg::SummaryStatistics
numeric_mode	algorithms/gfa_to_handle.hpp	/^    bool numeric_mode = true;$/;"	m	struct:vg::algorithms::GFAIDMapInfo
object_end	explainer.cpp	/^void ProblemDumpExplainer::object_end() {$/;"	f	class:vg::ProblemDumpExplainer
object_start	explainer.cpp	/^void ProblemDumpExplainer::object_start() {$/;"	f	class:vg::ProblemDumpExplainer
occs	minimizer_mapper.hpp	/^        const typename gbwtgraph::DefaultMinimizerIndex::value_type* occs;$/;"	m	struct:vg::MinimizerMapper::Minimizer
of_node	path.cpp	/^set<string> Paths::of_node(id_t id) {$/;"	f	class:vg::Paths
offset	gbwt_extender.hpp	/^    size_t                    offset;$/;"	m	struct:vg::GaplessExtension
offset	phase_unfolder.cpp	/^    size_t offset;$/;"	m	struct:vg::PathBranch	file:
offset	position.hpp	/^inline int64_t position_t::offset() const {$/;"	f	class:vg::position_t
offset	recombinator.hpp	/^        size_t offset;$/;"	m	struct:vg::Haplotypes::TopLevelChain
offset	types.hpp	/^inline offset_t offset(const pos_t& pos) {$/;"	f	namespace:vg
offset	utility.hpp	/^        size_t offset = 0;$/;"	m	struct:vg::VectorView::const_iterator
offset_t	types.hpp	/^typedef size_t offset_t;$/;"	t	namespace:vg
offsets_in_paths	algorithms/nearest_offsets_in_paths.cpp	/^map<string, vector<pair<size_t, bool>>> offsets_in_paths(const PathPositionHandleGraph* graph, const pos_t& pos) {$/;"	f	namespace:vg::algorithms
ok	gbwt_extender.hpp	/^    bool ok = false;$/;"	m	struct:vg::WFAAlignment
old_node	haplotypes.hpp	/^  const gbwt::node_type old_node;$/;"	m	class:haplo::hDP_gbwt_graph_accessor
old_score	gbwt_extender.hpp	/^    uint32_t                  old_score;      \/\/ Mismatches before the current flank.$/;"	m	struct:vg::GaplessExtension
on_path_edit	feature_set.cpp	/^void FeatureSet::on_path_edit(const string& path, size_t start, size_t old_length, size_t new_length) {$/;"	f	class:vg::FeatureSet
one_end_anchored_filter	filter.cpp	/^    bool Filter::one_end_anchored_filter(Alignment& aln_first, Alignment& aln_second){$/;"	f	class:vg::Filter
only_correctly_mapped	readfilter.hpp	/^    bool only_correctly_mapped = false;$/;"	m	class:vg::ReadFilter
only_mapped	readfilter.hpp	/^    bool only_mapped = true;$/;"	m	class:vg::ReadFilter
only_proper_pairs	readfilter.hpp	/^    bool only_proper_pairs = true;$/;"	m	class:vg::ReadFilter
open_all	stream_sorter.hpp	/^void StreamSorter<Message>::open_all(const vector<string>& filenames, list<ifstream>& streams, list<cursor_t>& cursors) {$/;"	f	class:vg::StreamSorter
operator !=	algorithms/chain_items.hpp	/^    inline bool operator!=(const TracedScore& other) const {$/;"	f	class:vg::algorithms::TracedScore
operator !=	cluster.cpp	/^bool ShuffledPairs::iterator::operator!=(const iterator& other) const {$/;"	f	class:vg::ShuffledPairs::iterator
operator !=	gbwt_extender.hpp	/^    bool operator!=(const GaplessExtension& another) const {$/;"	f	struct:vg::GaplessExtension
operator !=	minimizer_mapper.cpp	/^    inline bool operator!=(const alignment_index_t& other) {$/;"	f	struct:vg::alignment_index_t
operator !=	minimizer_mapper.cpp	/^    inline bool operator!=(const read_alignment_index_t& other) {$/;"	f	struct:vg::read_alignment_index_t
operator !=	nodeside.hpp	/^    inline bool operator!=(const NodeSide& other) const {$/;"	f	class:vg::NodeSide
operator !=	nodetraversal.hpp	/^    inline bool operator!=(const NodeTraversal& other) const {$/;"	f	class:vg::NodeTraversal
operator !=	path.hpp	/^inline bool edit_t::operator!=(const edit_t& other) const {$/;"	f	class:vg::edit_t
operator !=	path.hpp	/^inline bool path_mapping_t::operator!=(const path_mapping_t& other) const {$/;"	f	class:vg::path_mapping_t
operator !=	path.hpp	/^inline bool path_t::operator!=(const path_t& other) const {$/;"	f	class:vg::path_t
operator !=	phased_genome.hpp	/^        inline bool operator!=(const iterator& other) const {$/;"	f	class:vg::PhasedGenome::iterator
operator !=	position.hpp	/^inline bool position_t::operator!=(const position_t& other) const {$/;"	f	class:vg::position_t
operator !=	snarls.cpp	/^bool ChainIterator::operator!=(const ChainIterator& other) const {$/;"	f	class:vg::ChainIterator
operator !=	snarls.cpp	/^bool operator!=(const Snarl& a, const Snarl& b) {$/;"	f	namespace:vg
operator !=	snarls.cpp	/^bool operator!=(const SnarlTraversal& a, const SnarlTraversal& b) {$/;"	f	namespace:vg
operator !=	snarls.cpp	/^bool operator!=(const Visit& a, const Visit& b) {$/;"	f	namespace:vg
operator !=	transcriptome.cpp	/^bool operator!=(const Exon & lhs, const Exon & rhs) { $/;"	f	namespace:vg
operator !=	transcriptome.cpp	/^bool operator!=(const Mapping & lhs, const Mapping & rhs) { $/;"	f	namespace:vg
operator !=	transcriptome.cpp	/^bool operator!=(const Path & lhs, const Path & rhs) { $/;"	f	namespace:vg
operator !=	transcriptome.cpp	/^bool operator!=(const Transcript & lhs, const Transcript & rhs) { $/;"	f	namespace:vg
operator !=	utility.hpp	/^        bool operator!=(const const_iterator& other) const {$/;"	f	struct:vg::VectorView::const_iterator
operator !=	utility.hpp	/^    inline bool operator!=(const IncrementIter& other) const {$/;"	f	struct:vg::IncrementIter
operator &=	small_bitset.hpp	/^        void operator&=(const SmallBitset& another) {$/;"	f	class:vg::SmallBitset
operator ()	clip.cpp	/^    uint64_t operator()(const edge_t& edge, uint64_t seed = 0xAAAAAAAA55555555ULL) const {$/;"	f	struct:vg::BBEdgeHash
operator ()	cluster.cpp	/^int64_t SnarlMinDistance::operator()(const pos_t& pos_1, const pos_t& pos_2) {$/;"	f	class:vg::SnarlMinDistance
operator ()	cluster.cpp	/^int64_t TipAnchoredMaxDistance::operator()(const pos_t& pos_1, const pos_t& pos_2) {$/;"	f	class:vg::TipAnchoredMaxDistance
operator ()	cluster.hpp	/^    inline bool operator()(const size_t i, const size_t j) {$/;"	f	struct:vg::MEMClusterer::DPScoreComparator
operator ()	gbwt_extender.cpp	/^    size_t operator()(const gbwt::BidirectionalState& state) const {$/;"	f	struct:vg::state_hash
operator ()	gbwt_extender.cpp	/^void ReadMasker::operator()(std::string& sequence) const {$/;"	f	class:vg::ReadMasker
operator ()	genotyper.hpp	/^        size_t operator()(const NodeTraversal& node_traversal) const {$/;"	f	struct:vg::Genotyper::hash_node_traversal
operator ()	genotyper.hpp	/^        size_t operator()(const pair<const NodeTraversal, const NodeTraversal>& edge) const {$/;"	f	struct:vg::Genotyper::hash_oriented_edge
operator ()	genotyper.hpp	/^        size_t operator()(const vector<size_t>& ambiguous_set) const {$/;"	f	struct:vg::Genotyper::hash_ambiguous_allele_set
operator ()	handle.hpp	/^    size_t operator()(const handlegraph::handle_t& handle) const {$/;"	f	struct:vg::wang_hash
operator ()	handle.hpp	/^    size_t operator()(const handlegraph::path_handle_t& handle) const {$/;"	f	struct:vg::wang_hash
operator ()	hash_map.hpp	/^    operator()(std::tuple<TT...> const& tt) const$/;"	f	struct:std::hash
operator ()	hash_map.hpp	/^    size_t operator()(const T& x) const {$/;"	f	struct:vg::wang_hash
operator ()	hash_map.hpp	/^    size_t operator()(const T* pointer) const {$/;"	f	struct:vg::wang_hash
operator ()	hash_map.hpp	/^    size_t operator()(const pair<A,B>& x) const {$/;"	f	struct:std::hash
operator ()	hash_map.hpp	/^    size_t operator()(const std::pair<A, B>& x) const {$/;"	f	struct:vg::wang_hash
operator ()	incremental_subgraph.hpp	/^        inline bool operator()(const tuple<int64_t, handle_t, unordered_set<handle_t>*, vector<size_t>*>& a,$/;"	f	struct:vg::IncrementalSubgraph::FCmp
operator ()	nodeside.hpp	/^    size_t operator()(const NodeSide& x) const {$/;"	f	struct:vg::wang_hash
operator ()	nodeside.hpp	/^    size_t operator()(const vg::NodeSide& item) const$/;"	f	struct:std::hash
operator ()	nodetraversal.hpp	/^        size_t operator()(const vg::NodeTraversal& trav) const {$/;"	f	struct:std::hash
operator ()	nodetraversal.hpp	/^    size_t operator()(const NodeTraversal& x) const {$/;"	f	struct:vg::wang_hash
operator ()	snarl_distance_index.hpp	/^    inline size_t operator()(const net_handle_t& net_handle) const {$/;"	f	struct:vg::wang_hash
operator ()	snarls.hpp	/^    size_t operator()(const vg::Snarl& snarl) const {$/;"	f	struct:std::hash
operator ()	statistics.hpp	/^    OutType operator()() {$/;"	f	class:vg::WideningPRNG
operator ()	statistics.hpp	/^    T operator()(Generator &_g) {$/;"	f	class:vg::discrete_distribution
operator ()	statistics.hpp	/^    T operator()(Generator &_g) {$/;"	f	class:vg::normal_distribution
operator ()	statistics.hpp	/^    T operator()(Generator &_g) {$/;"	f	class:vg::truncated_normal_distribution
operator ()	statistics.hpp	/^    T operator()(Generator &_g) {$/;"	f	class:vg::uniform_int_distribution
operator ()	statistics.hpp	/^    T operator()(Generator &_g) {$/;"	f	class:vg::uniform_real_distribution
operator ()	subcommand/gamsort_main.cpp	/^    bool operator()(const GafFile& gf1, const GafFile& gf2) {$/;"	f	struct:greater_gaffile
operator ()	subcommand/gamsort_main.cpp	/^    bool operator()(const gafkluge::GafRecord& gaf1, const gafkluge::GafRecord& gaf2) {$/;"	f	struct:compare_gaf
operator ()	subcommand/subcommand.cpp	/^const int Subcommand::operator()(int argc, char** argv) const {$/;"	f	class:vg::subcommand::Subcommand
operator ()	transcriptome.hpp	/^    size_t operator()(const Mapping & mapping) const$/;"	f	struct:vg::MappingHash
operator ()	traversal_support.hpp	/^        inline bool operator()(const Snarl& s1, const Snarl& s2) const {$/;"	f	struct:vg::NestedCachedPackedTraversalSupportFinder::snarl_less
operator ()	unittest/vg_algorithms.cpp	/^    int64_t operator()(const pos_t& pos_1, const pos_t& pos_2) const {$/;"	f	struct:vg::unittest::TestDistHeuristic
operator ()	utility.cpp	/^minstd_rand::result_type LazyRNG::operator()() {$/;"	f	class:vg::LazyRNG
operator *	cluster.cpp	/^pair<size_t, size_t> ShuffledPairs::iterator::operator*() const {$/;"	f	class:vg::ShuffledPairs::iterator
operator *	deconstructor.hpp	/^    count_back_inserter &operator *(){ return *this; }$/;"	f	class:vg::count_back_inserter
operator *	genotypekit.hpp	/^Support operator*(const Scalar& scale, const Support& support) {$/;"	f	namespace:vg
operator *	genotypekit.hpp	/^Support operator*(const Support& support, const Scalar& scale) {$/;"	f	namespace:vg
operator *	phased_genome.hpp	/^        inline NodeTraversal operator*(){$/;"	f	class:vg::PhasedGenome::iterator
operator *	snarls.cpp	/^pair<const Snarl*, bool> ChainIterator::operator*() const {$/;"	f	class:vg::ChainIterator
operator *	utility.hpp	/^        const Item& operator*() const {$/;"	f	struct:vg::VectorView::const_iterator
operator *	utility.hpp	/^    inline size_t operator*(){$/;"	f	struct:vg::IncrementIter
operator *=	genotypekit.hpp	/^Support& operator*=(Support& support, const Scalar& scale) {$/;"	f	namespace:vg
operator +	genotypekit.cpp	/^Support operator+(const Support& one, const Support& other) {$/;"	f	namespace:vg
operator +	unittest/catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator +	utility.hpp	/^        const_iterator operator+(const difference_type& difference) const {$/;"	f	struct:vg::VectorView::const_iterator
operator +	utility.hpp	/^typename VectorView<Item>::const_iterator operator+(typename VectorView<Item>::const_iterator::difference_type a, const typename VectorView<Item>::const_iterator& b) {$/;"	f	namespace:vg
operator ++	cluster.cpp	/^ShuffledPairs::iterator& ShuffledPairs::iterator::operator++() {$/;"	f	class:vg::ShuffledPairs::iterator
operator ++	deconstructor.hpp	/^    count_back_inserter &operator++(){ return *this; }$/;"	f	class:vg::count_back_inserter
operator ++	phased_genome.hpp	/^        inline iterator operator++( int ) {$/;"	f	class:vg::PhasedGenome::iterator
operator ++	phased_genome.hpp	/^        inline iterator operator++() {$/;"	f	class:vg::PhasedGenome::iterator
operator ++	snarls.cpp	/^ChainIterator& ChainIterator::operator++() {$/;"	f	class:vg::ChainIterator
operator ++	utility.hpp	/^        const_iterator operator++(int) {$/;"	f	struct:vg::VectorView::const_iterator
operator ++	utility.hpp	/^        const_iterator& operator++() {$/;"	f	struct:vg::VectorView::const_iterator
operator ++	utility.hpp	/^    inline IncrementIter operator++( int ) {$/;"	f	struct:vg::IncrementIter
operator ++	utility.hpp	/^    inline IncrementIter operator++() {$/;"	f	struct:vg::IncrementIter
operator +=	genotypekit.cpp	/^Support& operator+=(Support& one, const Support& other) {$/;"	f	namespace:vg
operator +=	readfilter.hpp	/^    Counts& operator+=(const Counts& other) {$/;"	f	struct:vg::Counts
operator +=	utility.hpp	/^        const_iterator& operator+=(const difference_type& difference) {$/;"	f	struct:vg::VectorView::const_iterator
operator -	utility.hpp	/^        const_iterator operator-(const difference_type& difference) const {$/;"	f	struct:vg::VectorView::const_iterator
operator -	utility.hpp	/^        difference_type operator-(const const_iterator& other) const {$/;"	f	struct:vg::VectorView::const_iterator
operator --	utility.hpp	/^        const_iterator operator--(int) {$/;"	f	struct:vg::VectorView::const_iterator
operator --	utility.hpp	/^        const_iterator& operator--() {$/;"	f	struct:vg::VectorView::const_iterator
operator -=	utility.hpp	/^        const_iterator& operator-=(const difference_type& difference) {$/;"	f	struct:vg::VectorView::const_iterator
operator ->	snarls.cpp	/^const pair<const Snarl*, bool>* ChainIterator::operator->() const {$/;"	f	class:vg::ChainIterator
operator ->	utility.hpp	/^        const Item* operator->() const {$/;"	f	struct:vg::VectorView::const_iterator
operator /	genotypekit.hpp	/^Support operator\/(const Support& support, const Scalar& scale) {$/;"	f	namespace:vg
operator /=	genotypekit.hpp	/^Support& operator\/=(Support& support, const Scalar& scale) {$/;"	f	namespace:vg
operator <	algorithms/chain_items.hpp	/^    inline bool operator<(const TracedScore& other) const {$/;"	f	class:vg::algorithms::TracedScore
operator <	gbwt_extender.cpp	/^    bool operator<(const MatchPos& another) {$/;"	f	struct:vg::MatchPos
operator <	gbwt_extender.cpp	/^    bool operator<(const WFAPoint& another) const {$/;"	f	struct:vg::WFAPoint
operator <	gbwt_extender.hpp	/^    bool operator<(const GaplessExtension& another) const {$/;"	f	struct:vg::GaplessExtension
operator <	genotypekit.cpp	/^bool operator< (const Support& a, const Support& b) {$/;"	f	namespace:vg
operator <	mem.cpp	/^bool operator<(const MaximalExactMatch& m1, const MaximalExactMatch& m2) {$/;"	f	namespace:vg
operator <	minimizer_mapper.hpp	/^        inline bool operator< (const Minimizer& another) const {$/;"	f	struct:vg::MinimizerMapper::Minimizer
operator <	nodeside.hpp	/^    inline bool operator<(const NodeSide& other) const {$/;"	f	class:vg::NodeSide
operator <	nodetraversal.hpp	/^    inline bool operator<(const NodeTraversal& other) const {$/;"	f	class:vg::NodeTraversal
operator <	snarls.cpp	/^bool operator<(const Snarl& a, const Snarl& b) {$/;"	f	namespace:vg
operator <	snarls.cpp	/^bool operator<(const SnarlTraversal& a, const SnarlTraversal& b) {$/;"	f	namespace:vg
operator <	snarls.cpp	/^bool operator<(const Visit& a, const Visit& b) {$/;"	f	namespace:vg
operator <	subcommand/gbwt_main.cpp	/^    bool operator<(const job_type& another) const {$/;"	f	struct:job_type
operator <	transcriptome.cpp	/^bool operator<(const Exon & lhs, const Exon & rhs) { $/;"	f	namespace:vg
operator <	transcriptome.cpp	/^bool operator<(const Transcript & lhs, const Transcript & rhs) { $/;"	f	namespace:vg
operator <<	algorithms/chain_items.cpp	/^ostream& operator<<(ostream& out, const Anchor& anchor) {$/;"	f	namespace:vg::algorithms
operator <<	algorithms/chain_items.cpp	/^ostream& operator<<(ostream& out, const TracedScore& value) {$/;"	f	namespace:vg::algorithms
operator <<	algorithms/kmer.cpp	/^std::ostream& operator<<(std::ostream& out, const kmer_t& kmer) {$/;"	f	namespace:vg::algorithms
operator <<	algorithms/walk.cpp	/^std::ostream& operator<<(std::ostream& out, const walk_t& walk) {$/;"	f	namespace:vg::algorithms
operator <<	benchmark.cpp	/^ostream& operator<<(ostream& out, const BenchmarkResult& result) {$/;"	f	namespace:vg
operator <<	funnel.hpp	/^inline std::ostream& operator<<(std::ostream& out, const Funnel::State& state) {$/;"	f	class:vg::Funnel
operator <<	gbwt_extender.cpp	/^std::ostream& operator<<(std::ostream& out, const WFAAlignment::Edit& edit) {$/;"	f	namespace:vg
operator <<	genotypekit.cpp	/^ostream& operator<<(ostream& stream, const Support& support) {$/;"	f	namespace:vg
operator <<	kmer.cpp	/^ostream& operator<<(ostream& out, const kmer_t& kmer) {$/;"	f	namespace:vg
operator <<	mem.cpp	/^ostream& operator<<(ostream& out, const MaximalExactMatch& mem) {$/;"	f	namespace:vg
operator <<	nodeside.hpp	/^inline ostream& operator<<(ostream& out, const NodeSide& nodeside) {$/;"	f	namespace:vg
operator <<	nodetraversal.hpp	/^inline ostream& operator<<(ostream& out, const NodeTraversal& nodetraversal) {$/;"	f	namespace:vg
operator <<	path.cpp	/^ostream& operator<<(ostream& out, mapping_t mapping) {$/;"	f	namespace:vg
operator <<	phase_unfolder.cpp	/^std::ostream& operator<<(std::ostream& out, PathBranch branch) {$/;"	f	namespace:vg
operator <<	readfilter.cpp	/^ostream& operator<<(ostream& os, const Counts& counts) {$/;"	f	namespace:vg
operator <<	snarls.cpp	/^ostream& operator<<(ostream& out, const Snarl& snarl) {$/;"	f	namespace:vg
operator <<	snarls.cpp	/^ostream& operator<<(ostream& out, const Visit& visit) {$/;"	f	namespace:vg
operator <<	subcommand/subcommand.cpp	/^std::ostream& operator<<(std::ostream& out, const CommandCategory& category) {$/;"	f	namespace:vg::subcommand
operator <<	types.hpp	/^inline std::ostream& operator<<(std::ostream& out, const pos_t& pos) {$/;"	f	namespace:vg
operator =	deconstructor.hpp	/^    void operator=(const T &){ ++count; }$/;"	f	class:vg::count_back_inserter
operator =	index_registry.cpp	/^IndexRegistry& IndexRegistry::operator=(IndexRegistry&& other) {$/;"	f	class:vg::IndexRegistry
operator =	multipath_alignment.cpp	/^    multipath_alignment_t& multipath_alignment_t::operator=(const multipath_alignment_t& other) {$/;"	f	class:vg::multipath_alignment_t
operator =	multipath_alignment.cpp	/^    multipath_alignment_t& multipath_alignment_t::operator=(multipath_alignment_t&& other) {$/;"	f	class:vg::multipath_alignment_t
operator =	option.hpp	/^    BaseOption<Value, Parser>& operator=(const Value& other) {$/;"	f	class:vg::BaseOption
operator =	path.hpp	/^    Paths& operator=(const Paths& other) {$/;"	f	class:vg::Paths
operator =	phased_genome.cpp	/^    PhasedGenome& PhasedGenome::operator = (PhasedGenome& phased_genome){$/;"	f	class:vg::PhasedGenome
operator =	phased_genome.hpp	/^        inline iterator& operator=(const iterator& other) {$/;"	f	class:vg::PhasedGenome::iterator
operator =	qual_adj_xdrop_aligner.cpp	/^QualAdjXdropAligner& QualAdjXdropAligner::operator=(QualAdjXdropAligner&& other)$/;"	f	class:QualAdjXdropAligner
operator =	qual_adj_xdrop_aligner.cpp	/^QualAdjXdropAligner& QualAdjXdropAligner::operator=(const QualAdjXdropAligner& other)$/;"	f	class:QualAdjXdropAligner
operator =	small_bitset.hpp	/^        SmallBitset& operator=(SmallBitset&& another) {$/;"	f	class:vg::SmallBitset
operator =	small_bitset.hpp	/^        SmallBitset& operator=(const SmallBitset& another) {$/;"	f	class:vg::SmallBitset
operator =	subcommand/options.hpp	/^    Range& operator=(Range&& other) {$/;"	f	struct:vg::Range
operator =	subcommand/options.hpp	/^    Range& operator=(const Range& other) {$/;"	f	struct:vg::Range
operator =	utility.hpp	/^    inline IncrementIter& operator=(const IncrementIter& other) {$/;"	f	struct:vg::IncrementIter
operator =	vg.cpp	/^VG& VG::operator=(const VG& other) {$/;"	f	class:vg::VG
operator =	xdrop_aligner.cpp	/^XdropAligner& XdropAligner::operator=(XdropAligner&& other)$/;"	f	class:XdropAligner
operator =	xdrop_aligner.cpp	/^XdropAligner& XdropAligner::operator=(const XdropAligner& other)$/;"	f	class:XdropAligner
operator ==	algorithms/chain_items.hpp	/^    inline bool operator==(const TracedScore& other) const {$/;"	f	class:vg::algorithms::TracedScore
operator ==	cluster.cpp	/^bool ShuffledPairs::iterator::operator==(const iterator& other) const {$/;"	f	class:vg::ShuffledPairs::iterator
operator ==	gbwt_extender.hpp	/^    bool operator==(const GaplessExtension& another) const {$/;"	f	struct:vg::GaplessExtension
operator ==	mem.cpp	/^bool operator==(const MaximalExactMatch& m1, const MaximalExactMatch& m2) {$/;"	f	namespace:vg
operator ==	minimizer_mapper.cpp	/^    inline bool operator==(const alignment_index_t& other) {$/;"	f	struct:vg::alignment_index_t
operator ==	minimizer_mapper.cpp	/^    inline bool operator==(const read_alignment_index_t& other) {$/;"	f	struct:vg::read_alignment_index_t
operator ==	nodeside.hpp	/^    inline bool operator==(const NodeSide& other) const {$/;"	f	class:vg::NodeSide
operator ==	nodetraversal.hpp	/^    inline bool operator==(const NodeTraversal& other) const {$/;"	f	class:vg::NodeTraversal
operator ==	path.hpp	/^inline bool edit_t::operator==(const edit_t& other) const {$/;"	f	class:vg::edit_t
operator ==	path.hpp	/^inline bool path_mapping_t::operator==(const path_mapping_t& other) const {$/;"	f	class:vg::path_mapping_t
operator ==	path.hpp	/^inline bool path_t::operator==(const path_t& other) const {$/;"	f	class:vg::path_t
operator ==	phased_genome.hpp	/^        inline bool operator==(const iterator& other) const {$/;"	f	class:vg::PhasedGenome::iterator
operator ==	position.hpp	/^inline bool position_t::operator==(const position_t& other) const {$/;"	f	class:vg::position_t
operator ==	snarls.cpp	/^bool ChainIterator::operator==(const ChainIterator& other) const {$/;"	f	class:vg::ChainIterator
operator ==	snarls.cpp	/^bool operator==(const Snarl& a, const Snarl& b) {$/;"	f	namespace:vg
operator ==	snarls.cpp	/^bool operator==(const SnarlTraversal& a, const SnarlTraversal& b) {$/;"	f	namespace:vg
operator ==	snarls.cpp	/^bool operator==(const Visit& a, const Visit& b) {$/;"	f	namespace:vg
operator ==	transcriptome.cpp	/^bool operator==(const Exon & lhs, const Exon & rhs) { $/;"	f	namespace:vg
operator ==	transcriptome.cpp	/^bool operator==(const Mapping & lhs, const Mapping & rhs) { $/;"	f	namespace:vg
operator ==	transcriptome.cpp	/^bool operator==(const Path & lhs, const Path & rhs) { $/;"	f	namespace:vg
operator ==	transcriptome.cpp	/^bool operator==(const Transcript & lhs, const Transcript & rhs) { $/;"	f	namespace:vg
operator ==	utility.hpp	/^        bool operator==(const const_iterator& other) const {$/;"	f	struct:vg::VectorView::const_iterator
operator ==	utility.hpp	/^    inline bool operator==(const IncrementIter& other) const {$/;"	f	struct:vg::IncrementIter
operator >	algorithms/chain_items.hpp	/^    inline bool operator>(const TracedScore& other) const {$/;"	f	class:vg::algorithms::TracedScore
operator >	genotypekit.cpp	/^bool operator> (const Support& a, const Support& b) {$/;"	f	namespace:vg
operator Number	subcommand/options.hpp	/^    operator Number() const {$/;"	f	struct:vg::Range
operator Value&	option.hpp	/^    operator Value&() {$/;"	f	class:vg::BaseOption
operator []	haplotypes.cpp	/^const gbwt::vector_type::value_type& gbwt_thread_t::operator[](size_t i) const {$/;"	f	class:haplo::gbwt_thread_t
operator []	haplotypes.cpp	/^gbwt::vector_type::value_type& gbwt_thread_t::operator[](size_t i) {$/;"	f	class:haplo::gbwt_thread_t
operator []	utility.hpp	/^    inline const Item& operator[](size_t index) const {$/;"	f	struct:vg::VectorView
operator []	utility.hpp	/^    inline size_t operator[](size_t backing_index) {$/;"	f	class:vg::VectorViewInverse
operator bool	alignment.hpp	/^    inline operator bool() const {$/;"	f	struct:vg::AlignmentValidity
operator bool	gbwt_extender.hpp	/^    operator bool() const { return this->ok; }$/;"	f	struct:vg::WFAAlignment
operator std::string	unittest/catch.hpp	/^        explicit operator std::string() const {$/;"	f	class:Catch::StringRef
operator |=	small_bitset.hpp	/^        void operator|=(const SmallBitset& another) {$/;"	f	class:vg::SmallBitset
optimal_alignment	multipath_alignment.cpp	/^    void optimal_alignment(const multipath_alignment_t& multipath_aln, Alignment& aln_out, bool subpath_global) {$/;"	f	namespace:vg
optimal_alignment_internal	multipath_alignment.cpp	/^    int32_t optimal_alignment_internal(const multipath_alignment_t& multipath_aln, Alignment* aln_out,$/;"	f	namespace:vg
optimal_alignment_score	multipath_alignment.cpp	/^    int32_t optimal_alignment_score(const multipath_alignment_t& multipath_aln, bool subpath_global){$/;"	f	namespace:vg
optimal_alignments	multipath_alignment.cpp	/^    vector<Alignment> optimal_alignments(const multipath_alignment_t& multipath_aln, size_t count) {$/;"	f	namespace:vg
optimal_alignments_with_disjoint_subpaths	multipath_alignment.cpp	/^    vector<Alignment> optimal_alignments_with_disjoint_subpaths(const multipath_alignment_t& multipath_aln, size_t count) {$/;"	f	namespace:vg
optimal_score_on_genome	phased_genome.cpp	/^    int32_t PhasedGenome::optimal_score_on_genome(const multipath_alignment_t& multipath_aln, VG& graph) {$/;"	f	class:vg::PhasedGenome
optimize	vg.cpp	/^void VG::optimize(bool allow_id_reassignment) {$/;"	f	class:vg::VG
option	subcommand/options.hpp	/^    std::string option;$/;"	m	struct:vg::subcommand::BaseArgSpec
option	subcommand/options.hpp	/^    std::string option;$/;"	m	struct:vg::subcommand::BaseValuation
option_id	subcommand/options.hpp	/^    int option_id;$/;"	m	struct:vg::subcommand::BaseArgSpec
option_offsets	option.hpp	/^    vector<ptrdiff_t> option_offsets;$/;"	m	class:vg::Configurable
option_to_index	subcommand/options.hpp	/^    std::unordered_map<std::string, size_t> option_to_index;$/;"	m	struct:vg::subcommand::OptionGroup
options_by_code	option.hpp	/^    map<int, OptionInterface*> options_by_code;$/;"	m	class:vg::ConfigurableParser
order	dozeu_interface.hpp	/^        const vector<handle_t>& order;$/;"	m	struct:vg::DozeuInterface::OrderedGraph
order	subcommand/haplotypes_main.cpp	/^    enum order { before, overlap, after };$/;"	g	struct:ReferenceInterval	file:
order_length_repeat_hit_max	multipath_mapper.hpp	/^        size_t order_length_repeat_hit_max = 0;$/;"	m	class:vg::MultipathMapper
order_of	incremental_subgraph.cpp	/^size_t IncrementalSubgraph::order_of(const handle_t& handle) const {$/;"	f	class:vg::IncrementalSubgraph
oriented_distance	cluster.cpp	/^int64_t PathOrientedDistanceMeasurer::oriented_distance(const pos_t& pos_1, const pos_t& pos_2) {$/;"	f	class:vg::PathOrientedDistanceMeasurer
oriented_distance	cluster.cpp	/^int64_t SnarlOrientedDistanceMeasurer::oriented_distance(const pos_t& pos_1, const pos_t& pos_2) {$/;"	f	class:vg::SnarlOrientedDistanceMeasurer
oriented_motif	splicing.cpp	/^const string& SpliceStats::oriented_motif(size_t motif_num, bool left_side) const {$/;"	f	class:vg::SpliceStats
ostream	unittest/catch.hpp	/^    auto operator << ( std::ostream& os, StringRef const& sr ) -> std::ostream&;$/;"	m	class:Catch::std
other	algorithms/chain_items.hpp	/^    Anchor& operator=(Anchor&& other) = default;$/;"	m	class:vg::algorithms::Anchor
other	algorithms/chain_items.hpp	/^    Anchor& operator=(const Anchor& other) = default;$/;"	m	class:vg::algorithms::Anchor
other	algorithms/chain_items.hpp	/^    Anchor(Anchor&& other) = default;$/;"	m	class:vg::algorithms::Anchor
other	algorithms/chain_items.hpp	/^    Anchor(const Anchor& other) = default;$/;"	m	class:vg::algorithms::Anchor
other	algorithms/min_cut_graph.hpp	/^            int other; \/\/node at other end $/;"	m	struct:vg::algorithms::Edge
other	cluster.hpp	/^        iterator(const iterator& other) = default;$/;"	m	class:vg::ShuffledPairs::iterator
other	hts_alignment_emitter.hpp	/^    HTSAlignmentEmitter& operator=(HTSAlignmentEmitter&& other) = delete;$/;"	m	class:vg::HTSAlignmentEmitter
other	hts_alignment_emitter.hpp	/^    HTSAlignmentEmitter& operator=(const HTSAlignmentEmitter& other) = delete;$/;"	m	class:vg::HTSAlignmentEmitter
other	hts_alignment_emitter.hpp	/^    HTSAlignmentEmitter(HTSAlignmentEmitter&& other) = delete;$/;"	m	class:vg::HTSAlignmentEmitter
other	hts_alignment_emitter.hpp	/^    HTSAlignmentEmitter(const HTSAlignmentEmitter& other) = delete;$/;"	m	class:vg::HTSAlignmentEmitter
other	hts_alignment_emitter.hpp	/^    HTSWriter& operator=(HTSWriter&& other) = delete;$/;"	m	class:vg::HTSWriter
other	hts_alignment_emitter.hpp	/^    HTSWriter& operator=(const HTSWriter& other) = delete;$/;"	m	class:vg::HTSWriter
other	hts_alignment_emitter.hpp	/^    HTSWriter(HTSWriter&& other) = delete;$/;"	m	class:vg::HTSWriter
other	hts_alignment_emitter.hpp	/^    HTSWriter(const HTSWriter& other) = delete;$/;"	m	class:vg::HTSWriter
other	index_registry.hpp	/^    IndexRegistry& operator=(const IndexRegistry& other) = delete;$/;"	m	class:vg::IndexRegistry
other	index_registry.hpp	/^    IndexRegistry(const IndexRegistry& other) = delete;$/;"	m	class:vg::IndexRegistry
other	indexed_vg.hpp	/^        CacheEntry& operator=(CacheEntry&& other) = default;$/;"	m	struct:vg::IndexedVG::CacheEntry
other	indexed_vg.hpp	/^        CacheEntry(CacheEntry&& other) = default;$/;"	m	struct:vg::IndexedVG::CacheEntry
other	indexed_vg.hpp	/^    IndexedVG(const IndexedVG& other) = delete;$/;"	m	class:vg::IndexedVG
other	option.hpp	/^    BaseOption<Value, Parser>& operator=(const BaseOption<Value, Parser>& other) = default;$/;"	m	class:vg::BaseOption
other	phased_genome.hpp	/^        PhasedGenome(PhasedGenome&& other) = delete;$/;"	m	class:vg::PhasedGenome
other	snarls.hpp	/^    SnarlManager& operator=(SnarlManager&& other) = default;$/;"	m	class:vg::SnarlManager
other	snarls.hpp	/^    SnarlManager& operator=(const SnarlManager& other) = delete;$/;"	m	class:vg::SnarlManager
other	snarls.hpp	/^    SnarlManager(SnarlManager&& other) = default;$/;"	m	class:vg::SnarlManager
other	snarls.hpp	/^    SnarlManager(const SnarlManager& other) = delete;$/;"	m	class:vg::SnarlManager
other	stream_index.hpp	/^    BitString& operator=(BitString&& other) = default;$/;"	m	class:vg::BitString
other	stream_index.hpp	/^    BitString& operator=(const BitString& other) = default;$/;"	m	class:vg::BitString
other	stream_index.hpp	/^    BitString(BitString&& other) = default;$/;"	m	class:vg::BitString
other	stream_index.hpp	/^    BitString(const BitString& other) = default;$/;"	m	class:vg::BitString
other	stream_index.hpp	/^    StreamIndexBase& operator=(const StreamIndexBase& other) = delete;$/;"	m	class:vg::StreamIndexBase
other	stream_index.hpp	/^    StreamIndexBase(const StreamIndexBase& other) = delete;$/;"	m	class:vg::StreamIndexBase
other	subcommand/options.hpp	/^    GroupedOptionGroup& operator=(GroupedOptionGroup& other) = delete;$/;"	m	struct:vg::subcommand::GroupedOptionGroup
other	subcommand/options.hpp	/^    GroupedOptionGroup& operator=(GroupedOptionGroup&& other) = default;$/;"	m	struct:vg::subcommand::GroupedOptionGroup
other	subcommand/options.hpp	/^    GroupedOptionGroup(GroupedOptionGroup&& other) = default;$/;"	m	struct:vg::subcommand::GroupedOptionGroup
other	subcommand/options.hpp	/^    GroupedOptionGroup(const GroupedOptionGroup& other) = delete;$/;"	m	struct:vg::subcommand::GroupedOptionGroup
other	unittest/catch.hpp	/^        SourceLineInfo( SourceLineInfo const& other )            = default;$/;"	m	struct:Catch::SourceLineInfo
other	utility.hpp	/^    VectorView& operator=(VectorView&& other) = default;$/;"	m	struct:vg::VectorView
other	utility.hpp	/^    VectorView& operator=(const VectorView& other) = default;$/;"	m	struct:vg::VectorView
other	utility.hpp	/^    VectorView(VectorView&& other) = default;$/;"	m	struct:vg::VectorView
other	utility.hpp	/^    VectorView(const VectorView& other) = default;$/;"	m	struct:vg::VectorView
other	vcf_buffer.hpp	/^    VcfBuffer& operator=(const VcfBuffer& other) = delete;$/;"	m	class:vg::VcfBuffer
other	vcf_buffer.hpp	/^    VcfBuffer(const VcfBuffer& other) = delete;$/;"	m	class:vg::VcfBuffer
other	vcf_buffer.hpp	/^    WindowedVcfBuffer& operator=(const WindowedVcfBuffer& other) = delete;$/;"	m	class:vg::WindowedVcfBuffer
other	vcf_buffer.hpp	/^    WindowedVcfBuffer(const WindowedVcfBuffer& other) = delete;$/;"	m	class:vg::WindowedVcfBuffer
other	watchdog.hpp	/^    Watchdog& operator=(Watchdog&& other) = delete;$/;"	m	class:vg::Watchdog
other	watchdog.hpp	/^    Watchdog& operator=(const Watchdog& other) = delete;$/;"	m	class:vg::Watchdog
other	watchdog.hpp	/^    Watchdog(Watchdog&& other) = delete;$/;"	m	class:vg::Watchdog
other	watchdog.hpp	/^    Watchdog(const Watchdog& other) = delete;$/;"	m	class:vg::Watchdog
other_orientation_timeout	traversal_finder.hpp	/^    size_t other_orientation_timeout = 10;$/;"	m	class:vg::RepresentativeTraversalFinder
other_supports	filter.hpp	/^    int other_supports = 0;$/;"	m	struct:vg::BREAKPOINT
out	explainer.hpp	/^    ofstream out;$/;"	m	class:vg::ProblemDumpExplainer
out_file	hts_alignment_emitter.hpp	/^    unique_ptr<ofstream> out_file;$/;"	m	class:vg::HTSWriter
out_stream	mcmc_caller.hpp	/^        ostream& out_stream; $/;"	m	class:vg::MCMCCaller
out_to	extra_node_graph.hpp	/^    unordered_set<handle_t> out_to;$/;"	m	class:vg::ExtraNodeGraph
outfile	viz.hpp	/^    string outfile;$/;"	m	class:vg::Viz
output_fields	readfilter.hpp	/^    vector<string> output_fields;$/;"	m	class:vg::ReadFilter
output_filepath	index_registry.cpp	/^string IndexingPlan::output_filepath(const IndexName& identifier) const {$/;"	f	class:vg::IndexingPlan
output_filepath	index_registry.cpp	/^string IndexingPlan::output_filepath(const IndexName& identifier, size_t chunk, size_t num_chunks) const {$/;"	f	class:vg::IndexingPlan
output_format_t	multipath_alignment_emitter.hpp	/^    enum output_format_t {GAMP, GAM, GAF, BAM, SAM, CRAM};$/;"	g	class:vg::MultipathAlignmentEmitter
output_graph_with_embedded_paths	haplotype_extracter.cpp	/^Graph output_graph_with_embedded_paths(vector<pair<thread_t,int>>& haplotype_list, const HandleGraph& source) {$/;"	f	namespace:vg
output_graph_with_embedded_paths	haplotype_extracter.cpp	/^void output_graph_with_embedded_paths(ostream& subgraph_ostream,$/;"	f	namespace:vg
output_haplotype_counts	haplotype_extracter.cpp	/^void output_haplotype_counts(ostream& annotation_ostream,$/;"	f	namespace:vg
output_in_progress	funnel.hpp	/^    size_t output_in_progress = numeric_limits<size_t>::max();$/;"	m	class:vg::Funnel::State
output_is_bgzf	hts_alignment_emitter.hpp	/^    bool output_is_bgzf;$/;"	m	class:vg::HTSWriter
output_names	vectorizer.hpp	/^    bool output_names = false;$/;"	m	class:Vectorizer
output_png	viz.hpp	/^    bool output_png = false;$/;"	m	class:vg::Viz
output_prefix	index_registry.hpp	/^    string output_prefix = "index";$/;"	m	class:vg::IndexRegistry
output_svg	viz.hpp	/^    bool output_svg = false;$/;"	m	class:vg::Viz
output_tabbed	vectorizer.hpp	/^    bool output_tabbed = false;$/;"	m	class:Vectorizer
output_variants	graph_caller.hpp	/^    mutable vector<vector<pair<pair<string, size_t>, string>>> output_variants;$/;"	m	class:vg::VCFOutputCaller
output_vcf	graph_caller.hpp	/^    mutable vcflib::VariantCallFile output_vcf;$/;"	m	class:vg::VCFOutputCaller
output_wabbit_map	vectorizer.cpp	/^string Vectorizer::output_wabbit_map(){$/;"	f	class:Vectorizer
over_directed_edge	path.cpp	/^vector<string> Paths::over_directed_edge(id_t id1, bool rev1, id_t id2, bool rev2,$/;"	f	class:vg::Paths
over_edge	path.cpp	/^vector<string> Paths::over_edge(id_t id1, bool rev1, id_t id2, bool rev2,$/;"	f	class:vg::Paths
overlap	filter.hpp	/^    inline bool overlap(BREAKPOINT p, int dist){$/;"	f	struct:vg::BREAKPOINT
overlap	gbwt_extender.cpp	/^size_t GaplessExtension::overlap(const HandleGraph& graph, const GaplessExtension& another) const {$/;"	f	class:vg::GaplessExtension
overlap	path.cpp	/^double overlap(const Path& p1, const Path& p2) {$/;"	f	namespace:vg
overlap	subcommand/haplotypes_main.cpp	/^    enum order { before, overlap, after };$/;"	e	enum:ReferenceInterval::order	file:
overlay	translator.cpp	/^Translation Translator::overlay(const Translation& trans) {$/;"	f	class:vg::Translator
overlay_node_translations	utility.cpp	/^unordered_map<id_t, id_t> overlay_node_translations(const unordered_map<id_t, id_t>& over,$/;"	f	namespace:vg
overlay_node_translations	utility.cpp	/^unordered_map<id_t, pair<id_t, bool>> overlay_node_translations(const unordered_map<id_t, id_t>& over,$/;"	f	namespace:vg
overlay_node_translations	utility.cpp	/^unordered_map<id_t, pair<id_t, bool>> overlay_node_translations(const unordered_map<id_t, pair<id_t, bool>>& over,$/;"	f	namespace:vg
overlay_node_translations	vg.cpp	/^unordered_map<nid_t, pair<nid_t, bool> > VG::overlay_node_translations(const unordered_map<nid_t, pair<nid_t, bool> >& over,$/;"	f	class:vg::VG
p_value	sequence_complexity.hpp	/^double SeqComplexity<MaxOrder>::p_value(int order) const {$/;"	f	class:vg::SeqComplexity
p_value_memo	multipath_mapper.cpp	/^    thread_local unordered_map<pair<int64_t, size_t>, double> MultipathMapper::p_value_memo;$/;"	m	class:vg::MultipathMapper	file:
p_value_memo	multipath_mapper.hpp	/^        static thread_local unordered_map<pair<int64_t, size_t>, double> p_value_memo;$/;"	m	class:vg::MultipathMapper
pack_names	viz.hpp	/^    vector<string> pack_names;$/;"	m	class:vg::Viz
pack_query_forward	qual_adj_xdrop_aligner.cpp	/^dz_query_s* QualAdjXdropAligner::pack_query_forward(const char* seq, const uint8_t* qual,$/;"	f	class:QualAdjXdropAligner
pack_query_forward	xdrop_aligner.cpp	/^dz_query_s* XdropAligner::pack_query_forward(const char* seq, const uint8_t* qual,$/;"	f	class:XdropAligner
pack_query_reverse	qual_adj_xdrop_aligner.cpp	/^dz_query_s* QualAdjXdropAligner::pack_query_reverse(const char* seq, const uint8_t* qual,$/;"	f	class:QualAdjXdropAligner
pack_query_reverse	xdrop_aligner.cpp	/^dz_query_s* XdropAligner::pack_query_reverse(const char* seq, const uint8_t* qual,$/;"	f	class:XdropAligner
packed_depth_of_bin	algorithms/coverage_depth.cpp	/^pair<double, double> packed_depth_of_bin(const Packer& packer,$/;"	f	namespace:vg::algorithms
packed_depths	algorithms/coverage_depth.cpp	/^void packed_depths(const Packer& packer, const string& path_name, size_t min_coverage, ostream& out_stream) {$/;"	f	namespace:vg::algorithms
packer	traversal_support.hpp	/^    const Packer& packer;$/;"	m	class:vg::PackedTraversalSupportFinder
packs	viz.hpp	/^    vector<Packer>* packs = nullptr;$/;"	m	class:vg::Viz
pad_cluster_score_threshold	minimizer_mapper.hpp	/^    double pad_cluster_score_threshold = default_pad_cluster_score_threshold;$/;"	m	class:vg::MinimizerMapper
pad_traversal	graph_caller.cpp	/^SnarlTraversal GAFOutputCaller::pad_traversal(const PathHandleGraph& graph, const SnarlTraversal& trav) const {$/;"	f	class:vg::GAFOutputCaller
paint	funnel.cpp	/^void Funnel::PaintableSpace::paint(size_t start, size_t length) {$/;"	f	class:vg::Funnel::PaintableSpace
pair_all	minimizer_mapper.cpp	/^void MinimizerMapper::pair_all(std::array<vector<Alignment>, 2>& mappings) const {$/;"	f	class:vg::MinimizerMapper
pair_cluster_multiplicity	multipath_mapper.cpp	/^    double MultipathMapper::pair_cluster_multiplicity(const memcluster_t& cluster_1, const memcluster_t& cluster_2) const {$/;"	f	class:vg::MultipathMapper
pair_clusters	cluster.cpp	/^vector<pair<pair<size_t, size_t>, int64_t>>  NullClusterer::pair_clusters(const Alignment& alignment_1,$/;"	f	class:vg::NullClusterer
pair_clusters	cluster.cpp	/^vector<pair<pair<size_t, size_t>, int64_t>> MinDistanceClusterer::pair_clusters(const Alignment& alignment_1,$/;"	f	class:vg::MinDistanceClusterer
pair_clusters	cluster.cpp	/^vector<pair<pair<size_t, size_t>, int64_t>> OrientedDistanceClusterer::pair_clusters(const Alignment& alignment_1,$/;"	f	class:vg::OrientedDistanceClusterer
pair_clusters	cluster.cpp	/^vector<pair<pair<size_t, size_t>, int64_t>> TVSClusterer::pair_clusters(const Alignment& alignment_1,$/;"	f	class:vg::TVSClusterer
pair_consistent	mapper.cpp	/^bool Mapper::pair_consistent(Alignment& aln1,$/;"	f	class:vg::Mapper
pair_from_edge	nodeside.hpp	/^    static inline pair<NodeSide, NodeSide> pair_from_edge(Edge* e) {$/;"	f	class:vg::NodeSide
pair_from_edge	nodeside.hpp	/^    static inline pair<NodeSide, NodeSide> pair_from_edge(const Edge& e) {$/;"	f	class:vg::NodeSide
pair_from_end_edge	nodeside.hpp	/^    static inline pair<NodeSide, NodeSide> pair_from_end_edge(id_t end_id, const pair<id_t, bool>& oriented_other) {$/;"	f	class:vg::NodeSide
pair_from_start_edge	nodeside.hpp	/^    static inline pair<NodeSide, NodeSide> pair_from_start_edge(id_t start_id, const pair<id_t, bool>& oriented_other) {$/;"	f	class:vg::NodeSide
pair_hash_map	hash_map.hpp	/^    pair_hash_map() {$/;"	f	class:vg::pair_hash_map
pair_hash_map	hash_map.hpp	/^class pair_hash_map : public google::dense_hash_map<K, V, wang_hash<K>>$/;"	c	namespace:vg
pair_hash_set	hash_map.hpp	/^    pair_hash_set() {$/;"	f	class:vg::pair_hash_set
pair_hash_set	hash_map.hpp	/^class pair_hash_set : public google::dense_hash_set<K, wang_hash<K>>$/;"	c	namespace:vg
pair_mapping_likelihoods	multipath_mapper.cpp	/^    vector<double> MultipathMapper::pair_mapping_likelihoods(vector<pair<multipath_alignment_t, multipath_alignment_t>>& multipath_aln_pairs,$/;"	f	class:vg::MultipathMapper
pair_orientation_filter	filter.cpp	/^    bool Filter::pair_orientation_filter(Alignment& aln_first, Alignment& aln_second){$/;"	f	class:vg::Filter
pair_rescue	mapper.cpp	/^pair<bool, bool> Mapper::pair_rescue(Alignment& mate1, Alignment& mate2,$/;"	f	class:vg::Mapper
pair_rescue_hang_threshold	mapper.hpp	/^    double pair_rescue_hang_threshold;$/;"	m	class:vg::Mapper
pair_rescue_retry_threshold	mapper.hpp	/^    double pair_rescue_retry_threshold;$/;"	m	class:vg::Mapper
pair_to_string	subcommand/haplotypes_main.cpp	/^std::string pair_to_string(std::pair<T, T> value) {$/;"	f
paired_distance_stdevs	minimizer_mapper.hpp	/^    double paired_distance_stdevs = default_paired_distance_stdevs; $/;"	m	class:vg::MinimizerMapper
paired_rescue_score_limit	minimizer_mapper.hpp	/^    double paired_rescue_score_limit = default_paired_rescue_score_limit;$/;"	m	class:vg::MinimizerMapper
param_type	statistics.hpp	/^    typedef double param_type;$/;"	t	class:vg::discrete_distribution
parent	gbwt_extender.cpp	/^    uint32_t parent(uint32_t node) const { return this->nodes[node].parent; }$/;"	f	class:vg::WFATree
parent	gbwt_extender.cpp	/^    uint32_t parent;$/;"	m	struct:vg::WFANode	file:
parent	utility.hpp	/^        const VectorView<Item>& parent;$/;"	m	struct:vg::VectorView::const_iterator
parent	utility.hpp	/^    TreeNode<T>* parent;$/;"	m	struct:vg::TreeNode
parent_chains	snarl_seed_clusterer.hpp	/^            vector<net_handle_t>* parent_chains;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
parent_directory	utility.cpp	/^    string parent_directory;$/;"	m	struct:vg::temp_file::Handler	file:
parent_graph	splicing.hpp	/^    const HandleGraph* parent_graph;$/;"	m	class:vg::JoinedSpliceGraph
parent_is_chain	snarl_distance_index.hpp	/^    bool parent_is_chain;$/;"	m	struct:vg::MIPayloadValues
parent_is_chain	snarl_distance_index.hpp	/^    static bool parent_is_chain(const gbwtgraph::Payload code) { $/;"	f	struct:vg::MIPayload
parent_is_root	snarl_distance_index.hpp	/^    bool parent_is_root; $/;"	m	struct:vg::MIPayloadValues
parent_is_root	snarl_distance_index.hpp	/^    static bool parent_is_root (const gbwtgraph::Payload code) { $/;"	f	struct:vg::MIPayload
parent_net_handle	snarl_seed_clusterer.hpp	/^            net_handle_t parent_net_handle;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
parent_of	snarls.cpp	/^const Snarl* SnarlManager::parent_of(const Snarl* snarl) const {$/;"	f	class:vg::SnarlManager
parent_record_offset	snarl_distance_index.hpp	/^    size_t parent_record_offset; $/;"	m	struct:vg::MIPayloadValues
parent_record_offset	snarl_distance_index.hpp	/^    static size_t parent_record_offset(const gbwtgraph::Payload code) {$/;"	f	struct:vg::MIPayload
parent_snarls	snarl_seed_clusterer.hpp	/^            vector<net_handle_t> parent_snarls;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
pareto_point	minimizer_mapper.cpp	/^typedef std::pair<uint32_t, int32_t> pareto_point;$/;"	t	namespace:vg	file:
parse	algorithms/gfa_to_handle.cpp	/^void GFAParser::parse(istream& in) {$/;"	f	class:vg::algorithms::GFAParser
parse	option.cpp	/^void ConfigurableParser::parse(int argc, char** argv) {$/;"	f	class:vg::ConfigurableParser
parse	option.hpp	/^    static void parse(const string& arg, Value& value) {$/;"	f	class:vg::OptionValueParser
parse	option.hpp	/^    static void parse(const string& arg, vector<Item>& value) {$/;"	f	class:vg::OptionValueParser
parse	option.hpp	/^    virtual void parse() {$/;"	f	class:vg::BaseOption
parse	option.hpp	/^    virtual void parse(const string& arg) {$/;"	f	class:vg::BaseOption
parse	option.hpp	/^inline void OptionValueParser<bool>::parse(const string& arg, bool& value) {$/;"	f	class:vg::OptionValueParser
parse	subcommand/options.cpp	/^bool GroupedOptionGroup::parse(int option_id, const char* optarg) {$/;"	f	class:vg::subcommand::GroupedOptionGroup
parse	subcommand/options.hpp	/^    virtual bool parse(int option_id, const char* optarg) {$/;"	f	struct:vg::subcommand::OptionGroup
parse	subcommand/options.hpp	/^    virtual void parse(const char* optarg) {$/;"	f	struct:vg::subcommand::FlagArgSpec
parse	subcommand/options.hpp	/^    virtual void parse(const char* optarg) {$/;"	f	struct:vg::subcommand::ValueArgSpec
parse	subcommand/options.hpp	/^inline bool parse(const string& arg, typename enable_if<is_instantiation_of<Result, Range>::value, Result>::type& dest) {$/;"	f	namespace:vg
parse	utility.cpp	/^bool parse(const string& arg, double& dest) {$/;"	f	namespace:vg
parse	utility.cpp	/^bool parse(const string& arg, pos_t& dest) {$/;"	f	namespace:vg
parse	utility.cpp	/^bool parse(const string& arg, std::regex& dest) {$/;"	f	namespace:vg
parse	utility.hpp	/^Result parse(const char* arg) {$/;"	f	namespace:vg
parse	utility.hpp	/^Result parse(const string& arg) {$/;"	f	namespace:vg
parse	utility.hpp	/^bool parse(const string& arg, typename enable_if<sizeof(Result) <= sizeof(long long) &&$/;"	f	namespace:vg
parse	utility.hpp	/^bool parse(const string& arg, typename enable_if<sizeof(Result) <= sizeof(unsigned long long) &&$/;"	f	namespace:vg
parseGenotypes	gbwt_helper.cpp	/^std::vector<std::string> parseGenotypes(const std::string& vcf_line, size_t num_samples) {$/;"	f	namespace:vg
parse_attribute_value	transcriptome.cpp	/^string Transcriptome::parse_attribute_value(const string & attribute, const string & name) const {$/;"	f	class:vg::Transcriptome
parse_attributes	gff_reader.cpp	/^    map<string, string> GFFRecord::parse_attributes() {$/;"	f	class:vg::GFFRecord
parse_bed_regions	alignment.cpp	/^void parse_bed_regions(istream& bedstream,$/;"	f	namespace:vg
parse_bed_regions	region.cpp	/^void parse_bed_regions(const string& bed_path,$/;"	f	namespace:vg
parse_default	option.hpp	/^    static void parse_default(const Value& default_value, Value& value) {$/;"	f	class:vg::OptionValueParser
parse_default	option.hpp	/^    static void parse_default(const vector<Item>& default_value, vector<Item>& value) {$/;"	f	class:vg::OptionValueParser
parse_default	option.hpp	/^inline void OptionValueParser<bool>::parse_default(const bool& default_value, bool& value) {$/;"	f	class:vg::OptionValueParser
parse_gbwt_config	subcommand/gbwt_main.cpp	/^GBWTConfig parse_gbwt_config(int argc, char** argv) {$/;"	f
parse_gff_regions	alignment.cpp	/^void parse_gff_regions(istream& gffstream,$/;"	f	namespace:vg
parse_h	algorithms/gfa_to_handle.cpp	/^tuple<GFAParser::tag_list_t> GFAParser::parse_h(const string& h_line) {$/;"	f	class:vg::algorithms::GFAParser
parse_haplotype_transcript_file	subcommand/sim_main.cpp	/^vector<tuple<string, string, size_t>> parse_haplotype_transcript_file(istream& haplo_tx_in) {$/;"	f
parse_intron_distr_file	subcommand/mpmap_main.cpp	/^pair<vector<double>, vector<pair<double, double>>> parse_intron_distr_file(ifstream& strm) {$/;"	f
parse_introns	transcriptome.cpp	/^void Transcriptome::parse_introns(vector<Transcript> * introns, istream * intron_stream, const bdsg::PositionOverlay & graph_path_pos_overlay) const {$/;"	f	class:vg::Transcriptome
parse_l	algorithms/gfa_to_handle.cpp	/^tuple<string, bool, string, bool, GFAParser::chars_t, GFAParser::tag_list_t> GFAParser::parse_l(const string& l_line) {$/;"	f	class:vg::algorithms::GFAParser
parse_matrix	aligner.cpp	/^int8_t* AlignerClient::parse_matrix(istream& matrix_stream) {$/;"	f	class:vg::AlignerClient
parse_memory_usage	subcommand/autoindex_main.cpp	/^int64_t parse_memory_usage(const string& mem_arg) {$/;"	f
parse_only	subcommand/gbwt_main.cpp	/^    bool gam_format = false, inputs_as_jobs = false, parse_only = false;$/;"	m	struct:GBWTConfig	file:
parse_p	algorithms/gfa_to_handle.cpp	/^tuple<string, GFAParser::chars_t, GFAParser::chars_t, GFAParser::tag_list_t> GFAParser::parse_p(const string& p_line) {$/;"	f	class:vg::algorithms::GFAParser
parse_provide_string	subcommand/autoindex_main.cpp	/^pair<string, vector<string>> parse_provide_string(const string& str) {$/;"	f
parse_region	region.cpp	/^void parse_region(const string& target, string& name, int64_t& start, int64_t& end) {$/;"	f	namespace:vg
parse_region	region.hpp	/^inline void parse_region(string& region,$/;"	f	namespace:vg
parse_rg_sample_map	alignment.cpp	/^void parse_rg_sample_map(char* hts_header, map<string, string>& rg_sample) {$/;"	f	namespace:vg
parse_rsem_expression_file	subcommand/sim_main.cpp	/^vector<pair<string, double>> parse_rsem_expression_file(istream& rsem_in) {$/;"	f
parse_s	algorithms/gfa_to_handle.cpp	/^tuple<string, GFAParser::chars_t, GFAParser::tag_list_t> GFAParser::parse_s(const string& s_line) {$/;"	f	class:vg::algorithms::GFAParser
parse_tags	algorithms/gfa_to_handle.cpp	/^GFAParser::tag_list_t GFAParser::parse_tags(const chars_t& tag_range) {$/;"	f	class:vg::algorithms::GFAParser
parse_tid_path_handle_map	alignment.cpp	/^void parse_tid_path_handle_map(const bam_hdr_t* hts_header, const PathHandleGraph* graph, map<int, path_handle_t>& tid_path_handle) {$/;"	f	namespace:vg
parse_transcripts	transcriptome.cpp	/^int32_t Transcriptome::parse_transcripts(vector<Transcript> * transcripts, uint32_t * number_of_excluded_transcripts, istream * transcript_stream, const bdsg::PositionOverlay & graph_path_pos_overlay, const gbwt::GBWT & haplotype_index, const bool use_haplotype_paths) const {$/;"	f	class:vg::Transcriptome
parse_translation	path_index.cpp	/^map<id_t, vector<Mapping>> PathIndex::parse_translation(const Translation& translation) {$/;"	f	class:vg::PathIndex
parse_vcf	haplotype_indexer.cpp	/^std::vector<std::string> HaplotypeIndexer::parse_vcf(const std::string& filename, const PathHandleGraph& graph, const std::string& job_name) const {$/;"	f	class:vg::HaplotypeIndexer
parse_vcf	haplotype_indexer.cpp	/^std::vector<std::string> HaplotypeIndexer::parse_vcf(const std::string& filename, const PathHandleGraph& graph, const std::vector<path_handle_t>& paths, const std::string& job_name) const {$/;"	f	class:vg::HaplotypeIndexer
parse_w	algorithms/gfa_to_handle.cpp	/^tuple<string, size_t, string, pair<int64_t, int64_t>, GFAParser::chars_t, GFAParser::tag_list_t> GFAParser::parse_w(const string& w_line) {$/;"	f	class:vg::algorithms::GFAParser
partial_matches	unittest/gbwt_extender.cpp	/^void partial_matches(const std::vector<std::pair<pos_t, size_t>>& seeds, const std::string& read, const std::vector<std::vector<std::pair<pos_t, std::string>>>& correct_extensions, const std::vector<size_t>& correct_offsets, const GaplessExtender& extender, size_t error_bound) {$/;"	f	namespace:vg::unittest::__anon3
partition_gbwt_sequences	gbwt_helper.cpp	/^std::vector<std::vector<gbwt::size_type>> partition_gbwt_sequences(const gbwt::GBWT& gbwt_index, const std::unordered_map<nid_t, size_t>& node_to_job, size_t num_jobs) {$/;"	f	namespace:vg
partition_haplotypes	recombinator.cpp	/^Haplotypes HaplotypePartitioner::partition_haplotypes(const Parameters& parameters) const {$/;"	f	class:vg::HaplotypePartitioner
partitioner_parameters	subcommand/haplotypes_main.cpp	/^    HaplotypePartitioner::Parameters partitioner_parameters;$/;"	m	struct:HaplotypesConfig	file:
pass	funnel.cpp	/^void Funnel::pass(const char* filter, size_t prev_stage_item, double statistic) {$/;"	f	class:vg::Funnel
pass_number	algorithms/gfa_to_handle.hpp	/^    size_t pass_number = 0;$/;"	m	struct:vg::algorithms::GFAFormatError
passed_filters	funnel.hpp	/^        vector<const char*> passed_filters = {};$/;"	m	struct:vg::Funnel::State::Item
passed_statistics	funnel.hpp	/^        vector<double> passed_statistics = {};$/;"	m	struct:vg::Funnel::State::Item
passing	funnel.hpp	/^        size_t passing = 0;$/;"	m	struct:vg::Funnel::State::FilterPerformance
passing_correct	funnel.hpp	/^        size_t passing_correct = 0;$/;"	m	struct:vg::Funnel::State::FilterPerformance
past_end	graph_synchronizer.hpp	/^        size_t past_end = 0;$/;"	m	class:vg::GraphSynchronizer::Lock
patch_alignment	mapper.cpp	/^Alignment Mapper::patch_alignment(const Alignment& aln, int max_patch_length, bool trim_internal_deletions, bool xdrop_alignment) {$/;"	f	class:vg::Mapper
patch_alignments	mapper.hpp	/^    bool patch_alignments; \/\/ should we attempt alignment patching to resolve unaligned regions in banded alignment$/;"	m	class:vg::Mapper
path	algorithms/walk.hpp	/^    std::vector<handle_t> path;$/;"	m	struct:vg::algorithms::walk_t
path	gbwt_extender.cpp	/^    PathList path; \/\/ Sequence of tree offsets from a leaf to the relevant node.$/;"	m	struct:vg::MatchPos	file:
path	gbwt_extender.hpp	/^    std::vector<handle_t>     path;$/;"	m	struct:vg::GaplessExtension
path	gbwt_extender.hpp	/^    std::vector<handle_t> path;$/;"	m	struct:vg::WFAAlignment
path	multipath_alignment.hpp	/^    inline const path_t& subpath_t::path() const {$/;"	f	class:vg::subpath_t
path	multipath_alignment_graph.hpp	/^        path_t path;$/;"	m	class:vg::PathNode
path	path.cpp	/^Path Paths::path(const string& name) {$/;"	f	class:vg::Paths
path	recombinator.cpp	/^    gbwt::vector_type path;$/;"	m	struct:vg::RecombinatorHaplotype	file:
path	transcriptome.hpp	/^    Path path;$/;"	m	struct:vg::EditedTranscriptPath
path	transcriptome.hpp	/^    vector<handle_t> path;$/;"	m	struct:vg::CompletedTranscriptPath
path_back	memoizing_graph.cpp	/^    step_handle_t MemoizingGraph::path_back(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
path_back	subgraph_overlay.cpp	/^step_handle_t PathSubgraphOverlay::path_back(const path_handle_t& path_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
path_back	vg.cpp	/^step_handle_t VG::path_back(const path_handle_t& path_handle) const {$/;"	f	class:vg::VG
path_begin	memoizing_graph.cpp	/^    step_handle_t MemoizingGraph::path_begin(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
path_begin	subgraph_overlay.cpp	/^step_handle_t PathSubgraphOverlay::path_begin(const path_handle_t& path_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
path_begin	vg.cpp	/^step_handle_t VG::path_begin(const path_handle_t& path_handle) const {$/;"	f	class:vg::VG
path_collapse_type	transcriptome.hpp	/^        string path_collapse_type = "haplotype";$/;"	m	class:vg::Transcriptome
path_component_index	cluster.hpp	/^    const PathComponentIndex* path_component_index = nullptr;$/;"	m	class:vg::PathOrientedDistanceMeasurer
path_component_index	multipath_mapper.hpp	/^        unique_ptr<PathComponentIndex> path_component_index;$/;"	m	class:vg::MultipathMapper
path_contains_node	path_index.cpp	/^bool PathIndex::path_contains_node(int64_t node_id) const {$/;"	f	class:vg::PathIndex
path_contains_node_in_orientation	path_index.cpp	/^bool PathIndex::path_contains_node_in_orientation(int64_t node_id, bool is_reverse) const {$/;"	f	class:vg::PathIndex
path_cover	subcommand/gbwt_main.cpp	/^    path_cover_mode path_cover = path_cover_none;$/;"	m	struct:GBWTConfig	file:
path_cover_augment	subcommand/gbwt_main.cpp	/^    enum path_cover_mode { path_cover_none, path_cover_augment, path_cover_local, path_cover_greedy };$/;"	e	enum:GBWTConfig::path_cover_mode	file:
path_cover_depth	index_registry.cpp	/^int IndexingParameters::path_cover_depth = gbwtgraph::PATH_COVER_DEFAULT_N;$/;"	m	class:vg::IndexingParameters	file:
path_cover_depth	index_registry.hpp	/^    static int path_cover_depth;$/;"	m	struct:vg::IndexingParameters
path_cover_greedy	subcommand/gbwt_main.cpp	/^    enum path_cover_mode { path_cover_none, path_cover_augment, path_cover_local, path_cover_greedy };$/;"	e	enum:GBWTConfig::path_cover_mode	file:
path_cover_local	subcommand/gbwt_main.cpp	/^    enum path_cover_mode { path_cover_none, path_cover_augment, path_cover_local, path_cover_greedy };$/;"	e	enum:GBWTConfig::path_cover_mode	file:
path_cover_mode	subcommand/gbwt_main.cpp	/^    enum path_cover_mode { path_cover_none, path_cover_augment, path_cover_local, path_cover_greedy };$/;"	g	struct:GBWTConfig	file:
path_cover_none	subcommand/gbwt_main.cpp	/^    enum path_cover_mode { path_cover_none, path_cover_augment, path_cover_local, path_cover_greedy };$/;"	e	enum:GBWTConfig::path_cover_mode	file:
path_cover_parameters	subcommand/gbwt_main.cpp	/^    gbwtgraph::PathCoverParameters path_cover_parameters() const {$/;"	f	struct:GBWTConfig
path_depth_of_bin	algorithms/coverage_depth.cpp	/^pair<double, double> path_depth_of_bin(const PathHandleGraph& graph,$/;"	f	namespace:vg::algorithms
path_depths	algorithms/coverage_depth.cpp	/^void path_depths(const PathHandleGraph& graph, const string& path_name, size_t min_coverage, bool count_cycles, ostream& out_stream) {$/;"	f	namespace:vg::algorithms
path_divergence_filter	filter.cpp	/^    Alignment Filter::path_divergence_filter(Alignment& aln){$/;"	f	class:vg::Filter
path_edge_count	vg.cpp	/^int VG::path_edge_count(list<NodeTraversal>& path, int32_t offset, int path_length) {$/;"	f	class:vg::VG
path_end	memoizing_graph.cpp	/^    step_handle_t MemoizingGraph::path_end(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
path_end	subgraph_overlay.cpp	/^step_handle_t PathSubgraphOverlay::path_end(const path_handle_t& path_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
path_end	vg.cpp	/^step_handle_t VG::path_end(const path_handle_t& path_handle) const {$/;"	f	class:vg::VG
path_end_node_offset	vg.cpp	/^int VG::path_end_node_offset(list<NodeTraversal>& path, int32_t offset, int path_length) {$/;"	f	class:vg::VG
path_end_position	path.cpp	/^Position path_end_position(const Path& path) {$/;"	f	namespace:vg
path_finder	traversal_finder.hpp	/^    PathTraversalFinder path_finder;$/;"	m	class:vg::VCFTraversalFinder
path_for_contig	subcommand/haplotypes_main.cpp	/^gbwt::size_type path_for_contig(const gbwtgraph::GBZ& gbz, gbwt::size_type contig_id, const std::string& contig_name) {$/;"	f
path_from_length	path.cpp	/^int path_from_length(const Path& path) {$/;"	f	namespace:vg
path_from_length	path.cpp	/^int path_from_length(const path_t& path) {$/;"	f	namespace:vg
path_from_node_traversals	path.cpp	/^Path path_from_node_traversals(const list<NodeTraversal>& traversals) {$/;"	f	namespace:vg
path_from_path_handle	path.cpp	/^Path path_from_path_handle(const PathHandleGraph& graph, path_handle_t path_handle) {$/;"	f	namespace:vg
path_from_thread_t	haplotype_extracter.cpp	/^Path path_from_thread_t(thread_t& t, const HandleGraph& source) {$/;"	f	namespace:vg
path_from_thread_t	unittest/haplotypes.cpp	/^vg::Path path_from_thread_t(thread_t& t) {$/;"	f	namespace:unittest
path_front_end	memoizing_graph.cpp	/^    step_handle_t MemoizingGraph::path_front_end(const path_handle_t& path_handle) const {$/;"	f	class:vg::MemoizingGraph
path_front_end	subgraph_overlay.cpp	/^step_handle_t PathSubgraphOverlay::path_front_end(const path_handle_t& path_handle) const {$/;"	f	class:vg::PathSubgraphOverlay
path_front_end	vg.cpp	/^step_handle_t VG::path_front_end(const path_handle_t& path_handle) const {$/;"	f	class:vg::VG
path_graph	minimizer_mapper.hpp	/^    const PathPositionHandleGraph* path_graph; \/\/ Can be nullptr; only needed for correctness tracking.$/;"	m	class:vg::MinimizerMapper
path_graph	phase_unfolder.hpp	/^    const PathHandleGraph& path_graph;$/;"	m	class:vg::PhaseUnfolder
path_graph	subcommand/gbwt_main.cpp	/^    std::unique_ptr<PathHandleGraph> path_graph = nullptr;$/;"	m	struct:GraphHandler	file:
path_identity	vg.cpp	/^double VG::path_identity(const Path& path1, const Path& path2) {$/;"	f	class:vg::VG
path_index_graph_1	unittest/path_index.cpp	/^const string path_index_graph_1 = R"($/;"	m	namespace:vg::unittest	file:
path_indexes	graph_caller.hpp	/^    vector<PathIndex*> path_indexes;$/;"	m	class:vg::LegacyCaller
path_is_simple_match	path.cpp	/^bool path_is_simple_match(const Path& p) {$/;"	f	namespace:vg
path_jaccard_window	deconstructor.hpp	/^    int path_jaccard_window = 10000;$/;"	m	class:vg::Deconstructor
path_length_filter	filter.cpp	/^    Alignment Filter::path_length_filter(Alignment& aln){$/;"	f	class:vg::Filter
path_lengths_to_sinks	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::path_lengths_to_sinks(vector<int64_t>& shortest_path_to_sink,$/;"	f	class:vg::BandedGlobalAligner
path_listeners	algorithms/gfa_to_handle.hpp	/^    vector<std::function<void(const string& name, const chars_t& visits, const chars_t& overlaps, const tag_list_t& tags)>> path_listeners;$/;"	m	class:vg::algorithms::GFAParser
path_mapping_node_id	haplotypes.cpp	/^int64_t linear_haplo_structure::path_mapping_node_id(const vg::Path& path, size_t i) const {$/;"	f	class:haplo::linear_haplo_structure
path_mapping_offset	haplotypes.cpp	/^size_t linear_haplo_structure::path_mapping_offset(const vg::Path& path, size_t i) const {$/;"	f	class:haplo::linear_haplo_structure
path_mapping_t	path.hpp	/^class path_mapping_t {$/;"	c	namespace:vg
path_name	feature_set.hpp	/^        string path_name;$/;"	m	struct:vg::FeatureSet::Feature
path_name	graph_synchronizer.hpp	/^        string path_name;$/;"	m	class:vg::GraphSynchronizer::Lock
path_names	variant_adder.hpp	/^    set<string> path_names;$/;"	m	class:vg::VariantAdder
path_node	phase_unfolder.cpp	/^vg::id_t path_node(const gbwt::vector_type& path, size_t i) {$/;"	f	namespace:vg
path_node	phase_unfolder.cpp	/^vg::id_t path_node(const vector<pair<vg::id_t, bool>>& path, size_t i) {$/;"	f	namespace:vg
path_nodes	multipath_alignment_graph.hpp	/^        vector<PathNode> path_nodes;$/;"	m	class:vg::MultipathAlignmentGraph
path_offset	graph_synchronizer.hpp	/^        size_t path_offset = 0;$/;"	m	class:vg::GraphSynchronizer::Lock
path_order_and_length	hts_alignment_emitter.hpp	/^    vector<pair<string, int64_t>> path_order_and_length;$/;"	m	class:vg::HTSWriter
path_position_handle_graph	mcmc_caller.hpp	/^        const PathPositionHandleGraph* path_position_handle_graph;$/;"	m	class:vg::MCMCCaller
path_predecessors	gbwt_helper.cpp	/^gbwt::vector_type path_predecessors(const PathHandleGraph& graph, const std::string& path_name) {$/;"	f	namespace:vg
path_restricted	deconstructor.hpp	/^    bool path_restricted = false;$/;"	m	class:vg::Deconstructor
path_reverse	phase_unfolder.cpp	/^bool path_reverse(const gbwt::vector_type& path, size_t i) {$/;"	f	namespace:vg
path_reverse	phase_unfolder.cpp	/^bool path_reverse(const vector<pair<vg::id_t, bool>>& path, size_t i) {$/;"	f	namespace:vg
path_sampler	sampler.hpp	/^    vg::discrete_distribution<> path_sampler; \/\/ draw an index in source_paths$/;"	m	class:vg::Sampler
path_sampler	sampler.hpp	/^    vg::discrete_distribution<> path_sampler;$/;"	m	class:vg::NGSSimulator
path_score_annotations	surjector.hpp	/^    string Surjector::path_score_annotations(const unordered_map<pair<path_handle_t, bool>, pair<AlnType, pair<step_handle_t, step_handle_t>>>& surjections) const {$/;"	f	class:vg::Surjector
path_sequence	path.cpp	/^string path_sequence(const HandleGraph& graph, const Path& path) {$/;"	f	namespace:vg
path_sequence	vg.cpp	/^const string VG::path_sequence(const Path& path) {$/;"	f	class:vg::VG
path_size	phase_unfolder.cpp	/^size_t path_size(const gbwt::vector_type& path) {$/;"	f	namespace:vg
path_size	phase_unfolder.cpp	/^size_t path_size(const vector<pair<vg::id_t, bool>>& path) {$/;"	f	namespace:vg
path_start_position	path.cpp	/^Position path_start_position(const Path& path) {$/;"	f	namespace:vg
path_string	algorithms/path_string.cpp	/^string path_string(const HandleGraph& graph, const Path& path) {$/;"	f	namespace:vg::algorithms
path_subset	subgraph_overlay.hpp	/^    unordered_set<path_handle_t> path_subset;$/;"	m	class:vg::PathSubgraphOverlay
path_t	path.hpp	/^class path_t {$/;"	c	namespace:vg
path_to_gbwt	gbwt_helper.hpp	/^inline gbwt::vector_type path_to_gbwt(const Path& path) {$/;"	f	namespace:vg
path_to_gbwt_thread_t	haplotypes.cpp	/^gbwt_thread_t path_to_gbwt_thread_t(const vg::Path& path) {$/;"	f	namespace:haplo
path_to_input_haplotype	haplotypes.cpp	/^inputHaplotype* linear_haplo_structure::path_to_input_haplotype(const vg::Path& path) const {$/;"	f	class:haplo::linear_haplo_structure
path_to_length	path.cpp	/^int path_to_length(const Path& path) {$/;"	f	namespace:vg
path_to_length	path.cpp	/^int path_to_length(const path_t& path) {$/;"	f	namespace:vg
path_to_ploidy	graph_caller.hpp	/^    unordered_map<string, int> path_to_ploidy;$/;"	m	class:vg::VCFGenotyper
path_to_sample_phase	deconstructor.hpp	/^    const unordered_map<string, pair<string, int>>* path_to_sample_phase;$/;"	m	class:vg::Deconstructor
path_to_string	path.cpp	/^string path_to_string(Path p){$/;"	f	namespace:vg
path_to_vcf	haplotype_indexer.hpp	/^    std::map<std::string, std::string> path_to_vcf;$/;"	m	class:vg::HaplotypeIndexer
path_to_wfa_alignment	unittest/gbwt_extender.cpp	/^WFAAlignment path_to_wfa_alignment(const Path& path, const HandleGraph& graph) {$/;"	f	namespace:vg::unittest::__anon3
path_trav_finder	deconstructor.hpp	/^    unique_ptr<PathTraversalFinder> path_trav_finder;$/;"	m	class:vg::Deconstructor
path_type	phase_unfolder.hpp	/^    typedef gbwt::vector_type                 path_type;$/;"	t	class:vg::PhaseUnfolder
path_type	subcommand/gbwt_main.cpp	/^    typedef std::pair<path_handle_t, size_t> path_type;$/;"	t	struct:job_type	file:
paths	subcommand/gbwt_main.cpp	/^    std::vector<path_handle_t> paths;$/;"	m	struct:job_type	file:
paths	surjecting_alignment_emitter.hpp	/^    unordered_set<path_handle_t> paths;$/;"	m	class:vg::SurjectingAlignmentEmitter
paths	traversal_finder.hpp	/^    unordered_set<path_handle_t> paths;$/;"	m	class:vg::PathTraversalFinder
paths	vg.hpp	/^    Paths paths;$/;"	m	class:vg::VG
paths_as_alignments	vg.cpp	/^const vector<Alignment> VG::paths_as_alignments(void) {$/;"	f	class:vg::VG
paths_match	unittest/gbwt_extender.cpp	/^void paths_match(const Path& path, const Path& correct_path) {$/;"	f	namespace:vg::unittest::__anon3
paths_on_same_component	path_component_index.cpp	/^    bool PathComponentIndex::paths_on_same_component(const path_handle_t& path_1,$/;"	f	class:vg::PathComponentIndex
pb_contents	unittest/snarl_distance_index.cpp	/^    static pair<unordered_set<Node*>, unordered_set<Edge*> > pb_contents($/;"	f	namespace:vg::unittest
pb_contents	unittest/snarls.cpp	/^        static pair<unordered_set<Node*>, unordered_set<Edge*> > pb_contents($/;"	f	namespace:vg::unittest
penalties	haplotypes.hpp	/^  penaltySet* penalties = nullptr;$/;"	m	struct:haplo::linear_haplo_structure
per_base	gbwt_extender.hpp	/^            double per_base;$/;"	m	struct:vg::WFAExtender::ErrorModel::Event
percent_identity_filter	filter.cpp	/^    Alignment Filter::percent_identity_filter(Alignment& aln){$/;"	f	class:vg::Filter
percent_url_encode	utility.cpp	/^string percent_url_encode(const string& seq) {$/;"	f	namespace:vg
perf_event_open	subcommand/giraffe_main.cpp	/^static long perf_event_open(struct perf_event_attr* hw_event, pid_t pid, int cpu, int group_fd, unsigned long flags) {$/;"	f	file:
perfect_filter	filter.cpp	/^    bool Filter::perfect_filter(Alignment& aln){$/;"	f	class:vg::Filter
perfect_pair_identity_threshold	mapper.hpp	/^    float perfect_pair_identity_threshold = 0.9;$/;"	m	class:vg::FragmentLengthStatistics
performOptionalSelector	unittest/catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
perform_dp	cluster.cpp	/^void MEMClusterer::HitGraph::perform_dp() {$/;"	f	class:vg::MEMClusterer::HitGraph
performed_duplications	dozeu_pinning_overlay.cpp	/^bool DozeuPinningOverlay::performed_duplications() const {$/;"	f	class:vg::DozeuPinningOverlay
peripheral_attachments	graph_synchronizer.hpp	/^        map<NodeSide, set<NodeSide>> peripheral_attachments;$/;"	m	class:vg::GraphSynchronizer::Lock
periphery	graph_synchronizer.hpp	/^        set<id_t> periphery;$/;"	m	class:vg::GraphSynchronizer::Lock
permutation_idx	cluster.hpp	/^        size_t permutation_idx;$/;"	m	class:vg::ShuffledPairs::iterator
permuted	cluster.hpp	/^        size_t permuted;$/;"	m	class:vg::ShuffledPairs::iterator
pessimistic_gap	multipath_mapper.cpp	/^    int64_t MultipathMapper::pessimistic_gap(int64_t length, double multiplier) const {$/;"	f	class:vg::MultipathMapper
pessimistic_gap_memo	multipath_mapper.cpp	/^    thread_local unordered_map<double, vector<int64_t>> MultipathMapper::pessimistic_gap_memo;$/;"	m	class:vg::MultipathMapper	file:
pessimistic_gap_memo	multipath_mapper.hpp	/^        static thread_local unordered_map<double, vector<int64_t>> pessimistic_gap_memo;$/;"	m	class:vg::MultipathMapper
pessimistic_gap_multiplier	multipath_mapper.hpp	/^        double pessimistic_gap_multiplier = 0.0;$/;"	m	class:vg::MultipathMapper
pessimistic_tail_gap	multipath_alignment_graph.cpp	/^    int64_t MultipathAlignmentGraph::pessimistic_tail_gap(int64_t tail_length, double multiplier) {$/;"	f	class:vg::MultipathAlignmentGraph
pessimistic_tail_gap_memo	multipath_alignment_graph.cpp	/^    thread_local unordered_map<double, vector<int64_t>> MultipathAlignmentGraph::pessimistic_tail_gap_memo;$/;"	m	class:vg::MultipathAlignmentGraph	file:
pessimistic_tail_gap_memo	multipath_alignment_graph.hpp	/^        static thread_local unordered_map<double, vector<int64_t>> pessimistic_tail_gap_memo;$/;"	m	class:vg::MultipathAlignmentGraph
phase	gff_reader.hpp	/^        int32_t phase = -1;$/;"	m	struct:vg::GFFRecord
phase_homozygous	haplotype_indexer.hpp	/^    bool phase_homozygous = true;$/;"	m	class:vg::HaplotypeIndexer
phase_visits	vg.hpp	/^        map<pair<long, int>, vector<bool>> phase_visits;$/;"	m	struct:vg::VG::Plan
phased_genome	phased_genome.hpp	/^        PhasedGenome& operator =(PhasedGenome&& phased_genome) = delete;$/;"	m	class:vg::PhasedGenome
phased_genome_hpp	phased_genome.hpp	10;"	d
phred_add	statistics.hpp	/^inline double phred_add(double phred1, double phred2) {$/;"	f	namespace:vg
phred_for_at_least_one	statistics.cpp	/^double phred_for_at_least_one(size_t p, size_t n) {$/;"	f	namespace:vg
phred_geometric_mean	statistics.hpp	/^inline double phred_geometric_mean(double phred1, double phred2) {$/;"	f	namespace:vg
phred_prob	sampler.hpp	/^    vector<double> phred_prob;$/;"	m	class:vg::NGSSimulator
phred_sum	statistics.hpp	/^typename Collection::value_type phred_sum(const Collection& collection) {$/;"	f	namespace:vg
phred_sum	statistics.hpp	/^typename std::iterator_traits<Iterator>::value_type phred_sum(const Iterator& begin_it, const Iterator& end_it) {$/;"	f	namespace:vg
phred_to_logprob	statistics.hpp	/^inline double phred_to_logprob(int phred) {$/;"	f	namespace:vg
phred_to_prob	statistics.cpp	/^double phred_to_prob(uint8_t phred) {$/;"	f	namespace:vg
phred_to_prob	statistics.hpp	/^inline double phred_to_prob(double phred) {$/;"	f	namespace:vg
pinned_tail_size	variant_adder.hpp	/^    size_t pinned_tail_size = 200;$/;"	m	class:vg::VariantAdder
pixel	simde/simde-features.h	361;"	d
plan_to_path	unittest/gbwt_extender.cpp	/^std::pair<Path, std::string> plan_to_path(const alignment_plan_t& plan, const HandleGraph& graph, const vector<handle_t>& base_path, size_t start_offset) {$/;"	f	namespace:vg::unittest::__anon3
plausible_rescue_cluster_coverage_diff	multipath_mapper.hpp	/^        size_t plausible_rescue_cluster_coverage_diff = 5;$/;"	m	class:vg::MultipathMapper
ploidy	deconstructor.hpp	/^    int ploidy;$/;"	m	class:vg::Deconstructor
pmax	utility.hpp	/^vector<T> pmax(const std::vector<T>& a, const std::vector<T>& b) {$/;"	f	namespace:vg
pointer	deconstructor.hpp	/^    typedef void pointer;$/;"	t	class:vg::count_back_inserter
pointer	small_bitset.hpp	/^            value_type* pointer;$/;"	m	union:vg::SmallBitset::__anon20
pointerfy	utility.hpp	/^Container<const Item*> pointerfy(const Container<Item>& in) {$/;"	f	namespace:vg
points	algorithms/chain_items.hpp	/^    int points;$/;"	m	class:vg::algorithms::Anchor
poisson_prob_ln	statistics.hpp	/^inline real_t poisson_prob_ln(int observed, real_t expected) {$/;"	f	namespace:vg
polyploid_prior_success_logprob	genotyper.hpp	/^    double polyploid_prior_success_logprob = prob_to_logprob(0.5);$/;"	m	class:vg::Genotyper
pop	gbwt_extender.cpp	/^        void pop() {$/;"	f	struct:vg::MatchPos::PathList
pop	gbwt_extender.cpp	/^    void pop() { this->path.pop(); }$/;"	f	struct:vg::MatchPos
populate_path_from_traceback	multipath_alignment.cpp	/^    void populate_path_from_traceback(const multipath_alignment_t& multipath_aln, const MultipathProblem& problem,$/;"	f	namespace:vg
populate_snarl_index	snarl_distance_index.cpp	/^void populate_snarl_index($/;"	f	namespace:vg
population_max_paths	multipath_mapper.hpp	/^        size_t population_max_paths = 10;$/;"	m	class:vg::MultipathMapper
population_paths_hard_cap	multipath_mapper.hpp	/^        size_t population_paths_hard_cap = 1000;$/;"	m	class:vg::MultipathMapper
population_size	haplotypes.hpp	/^    size_t population_size;$/;"	m	struct:haplo::haploMath::RRMemo
pos	algorithms/chain_items.hpp	/^    pos_t pos;$/;"	m	class:vg::algorithms::Anchor
pos	gbwt_extender.cpp	/^    MatchPos pos(const MatchPos::PathList& path) const {$/;"	f	struct:vg::WFAPoint
pos	snarl_seed_clusterer.hpp	/^            pos_t  pos;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::Seed
pos	snarl_seed_clusterer.hpp	/^            pos_t pos;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SeedCache
pos	snarls.hpp	/^    Chain::const_iterator pos;$/;"	m	struct:vg::ChainIterator
pos	vg.hpp	/^    string pos;$/;"	m	struct:vg::KmerPosition
pos_at	subcommand/gamcompare_main.cpp	/^    pos_t pos_at(size_t offset) const {$/;"	f	struct:MappingRun
pos_char	sampler.cpp	/^char Sampler::pos_char(pos_t pos) {$/;"	f	class:vg::Sampler
pos_key	packer.cpp	/^string Packer::pos_key(size_t i) const {$/;"	f	class:vg::Packer
pos_t	types.hpp	/^typedef std::tuple<id_t, bool, offset_t> pos_t;$/;"	t	namespace:vg
pos_to_edit_to_depth	filter.hpp	/^        unordered_map<string, unordered_map<string, int> > pos_to_edit_to_depth;$/;"	m	class:vg::Filter
pos_to_gbwt	gbwt_helper.hpp	/^inline gbwt::node_type pos_to_gbwt(pos_t pos) {$/;"	f	namespace:vg
pos_to_qual	filter.hpp	/^        unordered_map<int, int> pos_to_qual;$/;"	m	class:vg::Filter
pos_to_trans	translator.hpp	/^    map<pos_t, Translation*> pos_to_trans;$/;"	m	class:vg::Translator
position	algorithms/gfa_to_handle.hpp	/^    GFAParser::cursor_t position;$/;"	m	struct:vg::algorithms::GFAFormatError
position	filter.hpp	/^    Position position;$/;"	m	struct:vg::BREAKPOINT
position	path.hpp	/^inline const position_t& path_mapping_t::position() const {$/;"	f	class:vg::path_mapping_t
position	recombinator.cpp	/^    gbwt::edge_type position;$/;"	m	struct:vg::RecombinatorHaplotype	file:
position	sampler.cpp	/^pos_t Sampler::position(void) {$/;"	f	class:vg::Sampler
position_assuming_acyclic	haplotypes.cpp	/^size_t linear_haplo_structure::position_assuming_acyclic(int64_t node_id) const {$/;"	f	class:haplo::linear_haplo_structure
position_at	sampler.cpp	/^pos_t position_at(PathPositionHandleGraph* graph_ptr, const string& path_name, const size_t& path_offset, bool is_reverse) {$/;"	f	namespace:vg
position_file	sampler.hpp	/^    ofstream position_file;$/;"	m	class:vg::NGSSimulator
position_in_basis	packer.cpp	/^size_t Packer::position_in_basis(const Position& pos) const {$/;"	f	class:vg::Packer
position_t	position.hpp	/^class position_t {$/;"	c	namespace:vg
positions	cluster.hpp	/^    unordered_map<path_handle_t, map<int64_t, vector<vector<MEMChainModelVertex>::iterator> > > positions;$/;"	m	class:vg::MEMChainModel
positions	mapper.hpp	/^    unordered_map<path_handle_t, map<int64_t, vector<vector<AlignmentChainModelVertex>::iterator> > > positions;$/;"	m	class:vg::AlignmentChainModel
positions	mapper.hpp	/^    unordered_map<path_handle_t, vector<pair<size_t, bool> > > positions;$/;"	m	class:vg::AlignmentChainModelVertex
positions	mem.hpp	/^    unordered_map<path_handle_t, vector<pair<size_t, bool> > > positions;$/;"	m	class:vg::MaximalExactMatch
possible_scores	gbwt_extender.cpp	/^    std::map<int32_t, ScoreProperties> possible_scores;$/;"	m	class:vg::WFATree	file:
posterior	snarl_caller.hpp	/^        double posterior;$/;"	m	struct:vg::PoissonSupportSnarlCaller::PoissonCallInfo
pow_ln	statistics.hpp	/^inline real_t pow_ln(real_t m, int n) {$/;"	f	namespace:vg
precision	unittest/catch.hpp	/^        static int precision;$/;"	m	struct:Catch::StringMaker
precluster_connection_coverage_threshold	minimizer_mapper.hpp	/^    double precluster_connection_coverage_threshold = default_precluster_connection_coverage_threshold;$/;"	m	class:vg::MinimizerMapper
precollapse_order_length_hits	mapper.hpp	/^    bool precollapse_order_length_hits = true;$/;"	m	class:vg::BaseMapper
precollapse_order_length_runs	mapper.cpp	/^void BaseMapper::precollapse_order_length_runs(string::const_iterator seq_begin,$/;"	f	class:vg::BaseMapper
predecessor_offset	gbwt_extender.cpp	/^    void predecessor_offset(uint32_t& node, uint32_t& offset) const {$/;"	f	class:vg::WFATree
prefilter_redundant_hits	mapper.hpp	/^    bool prefilter_redundant_hits = true;$/;"	m	class:vg::BaseMapper
prefilter_redundant_sub_mems	mapper.cpp	/^void BaseMapper::prefilter_redundant_sub_mems(vector<MaximalExactMatch>& mems,$/;"	f	class:vg::BaseMapper
prefix	gbwt_extender.cpp	/^WFAAlignment WFAExtender::prefix(const std::string& sequence, pos_t to) const {$/;"	f	class:vg::WFAExtender
prefix	recombinator.cpp	/^void RecombinatorHaplotype::prefix(gbwt::size_type sequence_id, gbwt::node_type until, const gbwt::GBWT& index) {$/;"	f	class:vg::RecombinatorHaplotype
prefix	recombinator.hpp	/^            prefix = 1,$/;"	m	struct:vg::Haplotypes::Subchain	typeref:enum:vg::Haplotypes::Subchain::
prefix	stream_index.hpp	/^        BitString prefix;$/;"	m	struct:vg::BitStringTree::TreeNode
prefix_length	multipath_alignment.cpp	/^        vector<int64_t> prefix_length;$/;"	m	struct:vg::MultipathProblem	file:
prefix_score	multipath_alignment.cpp	/^        vector<int32_t> prefix_score;$/;"	m	struct:vg::MultipathProblem	file:
prefix_sum	snarl_distance_index.hpp	/^    size_t prefix_sum;$/;"	m	struct:vg::MIPayloadValues
prefix_sum	snarl_distance_index.hpp	/^    static size_t prefix_sum (const gbwtgraph::Payload code) { $/;"	f	struct:vg::MIPayload
prefix_sum	snarl_seed_clusterer.hpp	/^                size_t prefix_sum;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem::SnarlTreeChild
prefix_sum_value	snarl_seed_clusterer.hpp	/^            size_t prefix_sum_value = std::numeric_limits<size_t>::max(); \/\/of node or first node in snarl$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
prefixes	phase_unfolder.hpp	/^    pair_hash_map<std::pair<gbwt::node_type, gbwt::node_type>, gbwt::node_type> prefixes, suffixes;$/;"	m	class:vg::PhaseUnfolder
preflight_check	preflight.cpp	/^void preflight_check() {$/;"	f	namespace:vg
preload_progress	progressive.cpp	/^void Progressive::preload_progress(const string& message) {$/;"	f	class:vg::Progressive
prepend_mapping	path.cpp	/^void Paths::prepend_mapping(const string& name, const Mapping& m, bool warn_on_duplicates) {$/;"	f	class:vg::Paths
prepend_mapping	path.cpp	/^void Paths::prepend_mapping(const string& name, id_t id, bool is_reverse, size_t length, size_t rank, bool warn_on_duplicates) {$/;"	f	class:vg::Paths
prepend_step	vg.cpp	/^step_handle_t VG::prepend_step(const path_handle_t& path, const handle_t& to_prepend) {$/;"	f	class:vg::VG
preprocess_graph	subcommand/haplotypes_main.cpp	/^void preprocess_graph(const gbwtgraph::GBZ& gbz, Haplotypes& haplotypes, HaplotypesConfig& config) {$/;"	f
present	recombinator.hpp	/^    enum kmer_presence { absent, heterozygous, present, frequent };$/;"	e	enum:vg::Recombinator::kmer_presence
present	snarl_seed_clusterer.hpp	/^            SmallBitset present; \/\/ Minimizers that are present in the cluster.$/;"	m	struct:vg::SnarlDistanceIndexClusterer::Cluster
present_discount	recombinator.hpp	/^        double present_discount = PRESENT_DISCOUNT;$/;"	m	struct:vg::Recombinator::Parameters
present_kmers	recombinator.cpp	/^void present_kmers(const std::vector<std::vector<HaplotypePartitioner::kmer_type>>& sequences,$/;"	f	namespace:vg
preserve_sinks	dozeu_pinning_overlay.hpp	/^    bool preserve_sinks;$/;"	m	class:vg::DozeuPinningOverlay
preset	subcommand/options.cpp	/^bool GroupedOptionGroup::preset(const BaseValuation& entry) {$/;"	f	class:vg::subcommand::GroupedOptionGroup
preset	subcommand/options.hpp	/^    virtual bool preset(const BaseValuation& entry) {$/;"	f	struct:vg::subcommand::OptionGroup
preset	subcommand/options.hpp	/^    virtual void preset(const BaseValuation& entry) {$/;"	f	struct:vg::subcommand::ArgSpec
prev	cluster.hpp	/^    MEMChainModelVertex* prev;$/;"	m	class:vg::MEMChainModelVertex
prev	mapper.hpp	/^    AlignmentChainModelVertex* prev;$/;"	m	class:vg::AlignmentChainModelVertex
prev	phased_genome.hpp	/^        HaplotypeNode* prev;$/;"	m	struct:vg::PhasedGenome::HaplotypeNode
prev_char	kmer.hpp	/^    vector<char> prev_char; \/\/ next positions and their chars$/;"	m	struct:vg::kmer_t
prev_chars	vg.hpp	/^    set<char> prev_chars;$/;"	m	struct:vg::KmerPosition
prev_cost	cluster.hpp	/^    vector<pair<MEMChainModelVertex*, double> > prev_cost; \/\/ for backward$/;"	m	class:vg::MEMChainModelVertex
prev_cost	mapper.hpp	/^    vector<pair<AlignmentChainModelVertex*, double> > prev_cost; \/\/ for backward$/;"	m	class:vg::AlignmentChainModelVertex
prev_idx	haplotypes.cpp	/^int64_t haplo_DP_rectangle::prev_idx() const {$/;"	f	class:haplo::haplo_DP_rectangle
prev_pos	kmer.hpp	/^    vector<pos_t> prev_pos; \/\/ previous positions and their chars$/;"	m	struct:vg::kmer_t
prev_snarl	snarls.cpp	/^Visit SnarlManager::prev_snarl(const Visit& here) const {$/;"	f	class:vg::SnarlManager
prev_stage_items	funnel.hpp	/^        vector<size_t> prev_stage_items = {};$/;"	m	struct:vg::Funnel::State::Item
prev_subpath	multipath_alignment.cpp	/^        vector<int64_t> prev_subpath;$/;"	m	struct:vg::MultipathProblem	file:
previous_R	haplotypes.cpp	/^double haplo_DP_column::previous_R(size_t i) const {$/;"	f	class:haplo::haplo_DP_column
previous_index	haplotypes.hpp	/^  int64_t previous_index = -1;$/;"	m	struct:haplo::haplo_DP_rectangle
previous_sizes	haplotypes.hpp	/^  vector<int64_t> previous_sizes;$/;"	m	struct:haplo::haplo_DP_column
previous_sum	haplotypes.hpp	/^  double previous_sum;$/;"	m	struct:haplo::haplo_DP_column
previous_values	haplotypes.hpp	/^  vector<double> previous_values;$/;"	m	struct:haplo::haplo_DP_column
primary	mem.hpp	/^    bool primary; \/\/ if not a sub-MEM$/;"	m	class:vg::MaximalExactMatch
primitive_root	cluster.hpp	/^    size_t primitive_root;$/;"	m	class:vg::ShuffledPairs
primitive_roots_of_unity	cluster.hpp	/^static constexpr size_t primitive_roots_of_unity[62] = {1ull, 3ull, 2ull, 21ull, 27ull, 56ull, 17ull, 45ull, 40ull, 28ull, 69ull, 70ull, 40ull, 31ull, 119ull, 75ull, 42ull, 61ull, 60ull, 46ull, 21ull, 13ull, 39ull, 13ull, 29ull, 15ull, 29ull, 32ull, 37ull, 73ull, 56ull, 45ull, 13ull, 90ull, 51ull, 12ull, 32ull, 11ull, 39ull, 24ull, 8ull, 39ull, 7ull, 51ull, 38ull, 67ull, 2ull, 34ull, 62ull, 19ull, 13ull, 30ull, 12ull, 45ull, 31ull, 57ull, 6ull, 57ull, 3ull, 37ull, 68ull, 54ull};$/;"	m	namespace:vg
print	gbwt_extender.cpp	/^std::ostream& WFAAlignment::print(const HandleGraph& graph, std::ostream& out) const {$/;"	f	class:vg::WFAAlignment
print	gbwt_extender.cpp	/^std::ostream& WFAAlignment::print(std::ostream& out) const {$/;"	f	class:vg::WFAAlignment
print	haplotypes.cpp	/^void haplo_DP_column::print(ostream& out) const {$/;"	f	class:haplo::haplo_DP_column
print	haplotypes.hpp	/^void hDP_gbwt_graph_accessor<GBWTType>::print(ostream& output_stream) const {$/;"	f	class:haplo::hDP_gbwt_graph_accessor
print	recombinator.cpp	/^std::ostream& Recombinator::Statistics::print(std::ostream& out) const {$/;"	f	class:vg::Recombinator::Statistics
print	subcommand/options.hpp	/^    virtual void print(ostream& out, const char* sep = "", const char* after = "", bool slug = false) const {$/;"	f	struct:vg::subcommand::BaseArgSpec
print	subcommand/options.hpp	/^    virtual void print(ostream& out, const char* sep = "", const char* after = "", bool slug = false) const {$/;"	f	struct:vg::subcommand::FlagArgSpec
printId	phase_unfolder.cpp	/^void printId(vg::id_t id) {$/;"	f	namespace:vg
print_band	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BAMatrix::print_band(const HandleGraph& graph, matrix_t which_mat) {$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
print_default	subcommand/options.hpp	/^    virtual void print_default(ostream& out) const {$/;"	f	struct:vg::subcommand::FlagArgSpec
print_default	subcommand/options.hpp	/^    virtual void print_default(ostream& out) const {$/;"	f	struct:vg::subcommand::ValueArgSpec
print_defaults	subcommand/prune_main.cpp	/^void print_defaults(const std::map<PruningMode, ValueType>& defaults) {$/;"	f
print_edges	vg.cpp	/^void VG::print_edges(void) {$/;"	f	class:vg::VG
print_full_matrices	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BAMatrix::print_full_matrices(const HandleGraph& graph) {$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
print_help	option.cpp	/^void ConfigurableParser::print_help(ostream& out) const {$/;"	f	class:vg::ConfigurableParser
print_matrix	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BAMatrix::print_matrix(const HandleGraph& graph, matrix_t which_mat) {$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
print_metadata	subcommand/gbwt_main.cpp	/^void print_metadata(std::ostream& out, const GBWTHandler& gbwts) {$/;"	f
print_metavar	subcommand/options.hpp	/^    virtual void print_metavar(ostream& out, const char* sep = "") const {$/;"	f	struct:vg::subcommand::FlagArgSpec
print_metavar	subcommand/options.hpp	/^    virtual void print_metavar(ostream& out, const char* sep = "") const {$/;"	f	struct:vg::subcommand::ValueArgSpec
print_options	subcommand/options.cpp	/^void GroupedOptionGroup::print_options(ostream& out, bool slug) const {$/;"	f	class:vg::subcommand::GroupedOptionGroup
print_options	subcommand/options.hpp	/^    virtual void print_options(ostream& out, bool slug = false) const {$/;"	f	struct:vg::subcommand::OptionGroup
print_phased_genome	phased_genome.cpp	/^    void PhasedGenome::print_phased_genome(){$/;"	f	class:vg::PhasedGenome
print_rectangularized_bands	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BAMatrix::print_rectangularized_bands(const HandleGraph& graph) {$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
print_report	indexed_vg.cpp	/^void IndexedVG::print_report() const {$/;"	f	class:vg::IndexedVG
print_snarl	graph_caller.cpp	/^string VCFOutputCaller::print_snarl(const Snarl& snarl, bool in_brackets) const {$/;"	f	class:vg::VCFOutputCaller
print_statistics	genotyper.cpp	/^void Genotyper::print_statistics(ostream& out) {$/;"	f	class:vg::Genotyper
print_table	subcommand/options.cpp	/^void print_table(const std::vector<std::pair<std::string, std::string>>& rows, ostream& out) {$/;"	f	namespace:vg::subcommand
print_updates	variant_adder.hpp	/^    bool print_updates = false;$/;"	m	class:vg::VariantAdder
print_value	subcommand/options.hpp	/^    virtual void print_value(ostream& out, const char* sep = "") const {$/;"	f	struct:vg::subcommand::FlagArgSpec
print_value	subcommand/options.hpp	/^    virtual void print_value(ostream& out, const char* sep = "") const {$/;"	f	struct:vg::subcommand::ValueArgSpec
priority	subcommand/subcommand.hpp	/^    int priority;$/;"	m	class:vg::subcommand::Subcommand
prng	sampler.cpp	/^mt19937_64& NGSSimulator::prng() {$/;"	f	class:vg::NGSSimulator
prng	sampler.hpp	/^        mt19937_64 prng;$/;"	m	class:vg::NGSSimulator::MarkovDistribution
prngs	sampler.hpp	/^    vector<mt19937_64> prngs;$/;"	m	class:vg::NGSSimulator
prob_for_at_least_one	statistics.cpp	/^double prob_for_at_least_one(size_t p, size_t n) {$/;"	f	namespace:vg
prob_sampler	sampler.hpp	/^    vg::uniform_real_distribution<double> prob_sampler;$/;"	m	class:vg::NGSSimulator
prob_to_logprob	statistics.hpp	/^inline double prob_to_logprob(double prob) {$/;"	f	namespace:vg
prob_to_phred	statistics.hpp	/^inline double prob_to_phred(double prob) {$/;"	f	namespace:vg
problem	alignment.hpp	/^    Problem problem = OK;$/;"	m	struct:vg::AlignmentValidity
process_in_out_growth	flow_sort.cpp	/^void FlowSort::process_in_out_growth(EdgeMapping& nodes_to_edges, id_t current_id,$/;"	f	class:vg::FlowSort
process_until_threshold_a	minimizer_mapper.hpp	/^void MinimizerMapper::process_until_threshold_a(size_t items, const function<Score(size_t)>& get_score,$/;"	f	class:vg::MinimizerMapper
process_until_threshold_b	minimizer_mapper.hpp	/^void MinimizerMapper::process_until_threshold_b(const vector<Score>& scores,$/;"	f	class:vg::MinimizerMapper
process_until_threshold_c	minimizer_mapper.hpp	/^void MinimizerMapper::process_until_threshold_c(size_t items, const function<Score(size_t)>& get_score,$/;"	f	class:vg::MinimizerMapper
processed_input	funnel.cpp	/^void Funnel::processed_input() {$/;"	f	class:vg::Funnel
processing_input	funnel.cpp	/^void Funnel::processing_input(size_t prev_stage_item) {$/;"	f	class:vg::Funnel
produced_output	funnel.cpp	/^void Funnel::produced_output() {$/;"	f	class:vg::Funnel
produces_one_gbwt	subcommand/gbwt_main.cpp	/^    bool produces_one_gbwt = false; \/\/ Steps 1-4 eventually produce one input GBWT regardless of the number of input args.$/;"	m	struct:GBWTConfig	file:
producing_output	funnel.cpp	/^void Funnel::producing_output(size_t item) {$/;"	f	class:vg::Funnel
progress	progressive.hpp	/^    ProgressBar* progress = nullptr;$/;"	m	class:vg::Progressive
progress_bars	vg_set.hpp	/^    bool progress_bars = true;$/;"	m	class:vg::VGset
progress_count	progressive.hpp	/^    long progress_count;$/;"	m	class:vg::Progressive
progress_message	progressive.hpp	/^    string progress_message = "progress";$/;"	m	class:vg::Progressive
progress_seen	progressive.hpp	/^    long progress_seen;$/;"	m	class:vg::Progressive
project	funnel.cpp	/^void Funnel::project(size_t prev_stage_item) {$/;"	f	class:vg::Funnel
project_group	funnel.cpp	/^void Funnel::project_group(size_t prev_stage_item, size_t group_size) {$/;"	f	class:vg::Funnel
project_haplotype_transcripts	transcriptome.cpp	/^void Transcriptome::project_haplotype_transcripts(const vector<Transcript> & transcripts, const gbwt::GBWT & haplotype_index, const bdsg::PositionOverlay & graph_path_pos_overlay, const bool proj_emded_paths, const float mean_node_length) {$/;"	f	class:vg::Transcriptome
project_haplotype_transcripts_callback	transcriptome.cpp	/^void Transcriptome::project_haplotype_transcripts_callback(list<CompletedTranscriptPath> * completed_transcript_paths, spp::sparse_hash_map<handle_t, vector<CompletedTranscriptPath *> > * completed_transcript_paths_index,  mutex * completed_transcript_paths_mutex, const int32_t thread_idx, const vector<Transcript> & transcripts, const gbwt::GBWT & haplotype_index, const bdsg::PositionOverlay & graph_path_pos_overlay, const bool proj_emded_paths, const float mean_node_length) {$/;"	f	class:vg::Transcriptome
project_transcript_embedded	transcriptome.cpp	/^list<EditedTranscriptPath> Transcriptome::project_transcript_embedded(const Transcript & cur_transcript, const bdsg::PositionOverlay & graph_path_pos_overlay, const bool use_reference_paths, const bool use_haplotype_paths) const {$/;"	f	class:vg::Transcriptome
project_transcript_gbwt	transcriptome.cpp	/^list<EditedTranscriptPath> Transcriptome::project_transcript_gbwt(const Transcript & cur_transcript, const gbwt::GBWT & haplotype_index,$/;"	f	class:vg::Transcriptome
projected_count	funnel.hpp	/^        size_t projected_count = 0;$/;"	m	struct:vg::Funnel::State::Stage
proper_pair	readfilter.hpp	/^        proper_pair, unmapped, annotation, incorrectly_mapped, last};$/;"	e	enum:vg::Counts::FilterName
proposal_sample	mcmc_genotyper.cpp	/^    tuple<int, const Snarl*, vector<NodeTraversal> > MCMCGenotyper::proposal_sample(unique_ptr<PhasedGenome>& current)const{$/;"	f	class:vg::MCMCGenotyper
propose_deflection	banded_global_aligner.cpp	/^inline void BandedGlobalAligner<IntType>::AltTracebackStack::propose_deflection(const IntType score, const int64_t from_node_id,$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
provide	index_registry.cpp	/^void IndexFile::provide(const vector<string>& filenames) {$/;"	f	class:vg::IndexFile
provide	index_registry.cpp	/^void IndexRegistry::provide(const IndexName& identifier, const string& filename) {$/;"	f	class:vg::IndexRegistry
provide	index_registry.cpp	/^void IndexRegistry::provide(const IndexName& identifier, const vector<string>& filenames) {$/;"	f	class:vg::IndexRegistry
provided_directly	index_registry.hpp	/^    bool provided_directly = false;$/;"	m	class:vg::IndexFile
prune_and_restore	unittest/phase_unfolder.cpp	/^void prune_and_restore(VG& vg_graph, const std::set<vg::id_t>& to_remove, PhaseUnfolder& unfolder) {$/;"	f	namespace:vg::unittest
prune_and_unfold	unittest/phase_unfolder.cpp	/^void prune_and_unfold(VG& vg_graph, const std::set<vg::id_t>& to_remove, PhaseUnfolder& unfolder) {$/;"	f	namespace:vg::unittest
prune_complex	algorithms/prune.cpp	/^size_t prune_complex(DeletableHandleGraph& graph,$/;"	f	namespace:vg::algorithms
prune_complex_with_head_tail	algorithms/prune.cpp	/^size_t prune_complex_with_head_tail(DeletableHandleGraph& graph,$/;"	f	namespace:vg::algorithms
prune_high_shift_edges	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::prune_high_shift_edges(size_t prune_diff, bool prohibit_new_sources, bool prohibit_new_sinks) {$/;"	f	class:vg::MultipathAlignmentGraph
prune_low_scoring_edges	cluster.cpp	/^void MEMClusterer::HitGraph::prune_low_scoring_edges(vector<vector<size_t>>& components, size_t component_idx, double score_factor) {$/;"	f	class:vg::MEMClusterer::HitGraph
prune_short_subgraphs	algorithms/prune.cpp	/^size_t prune_short_subgraphs(DeletableHandleGraph& graph, int min_size) {$/;"	f	namespace:vg::algorithms
prune_subpaths_multiplier	multipath_mapper.hpp	/^        double prune_subpaths_multiplier = 2.0;$/;"	m	class:vg::MultipathMapper
prune_suspicious_anchors	surjector.hpp	/^        bool prune_suspicious_anchors = false;$/;"	m	class:vg::Surjector
prune_to_connecting_graph	algorithms/prune_to_connecting_graph.cpp	/^void prune_to_connecting_graph(DeletableHandleGraph& graph,$/;"	f	namespace:vg::algorithms
prune_to_high_scoring_paths	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::prune_to_high_scoring_paths(const Alignment& alignment, const GSSWAligner* aligner,$/;"	f	class:vg::MultipathAlignmentGraph
prune_unconnectable	surjector.cpp	/^    void Surjector::prune_unconnectable(vector<vector<size_t>>& adj,$/;"	f	class:vg::Surjector
pruning_max_edge_count	index_registry.cpp	/^int IndexingParameters::pruning_max_edge_count = 3;$/;"	m	class:vg::IndexingParameters	file:
pruning_max_edge_count	index_registry.hpp	/^    static int pruning_max_edge_count;$/;"	m	struct:vg::IndexingParameters
pruning_max_node_degree	index_registry.cpp	/^int IndexingParameters::pruning_max_node_degree = 128;$/;"	m	class:vg::IndexingParameters	file:
pruning_max_node_degree	index_registry.hpp	/^    static int pruning_max_node_degree;$/;"	m	struct:vg::IndexingParameters
pruning_max_node_degree_decrease_factor	index_registry.cpp	/^double IndexingParameters::pruning_max_node_degree_decrease_factor = 0.75;$/;"	m	class:vg::IndexingParameters	file:
pruning_max_node_degree_decrease_factor	index_registry.hpp	/^    static double pruning_max_node_degree_decrease_factor;$/;"	m	struct:vg::IndexingParameters
pruning_min_component_size	index_registry.cpp	/^int IndexingParameters::pruning_min_component_size = 33;$/;"	m	class:vg::IndexingParameters	file:
pruning_min_component_size	index_registry.hpp	/^    static int pruning_min_component_size;$/;"	m	struct:vg::IndexingParameters
pruning_walk_length	index_registry.cpp	/^int IndexingParameters::pruning_walk_length = 24;$/;"	m	class:vg::IndexingParameters	file:
pruning_walk_length	index_registry.hpp	/^    static int pruning_walk_length;$/;"	m	struct:vg::IndexingParameters
pruning_walk_length_increase_factor	index_registry.cpp	/^double IndexingParameters::pruning_walk_length_increase_factor = 1.5;$/;"	m	class:vg::IndexingParameters	file:
pruning_walk_length_increase_factor	index_registry.hpp	/^    static double pruning_walk_length_increase_factor;$/;"	m	struct:vg::IndexingParameters
pseudo_length	multipath_mapper.cpp	/^    int64_t MultipathMapper::pseudo_length(const multipath_alignment_t& multipath_aln) const {$/;"	f	class:vg::MultipathMapper
pseudo_random_sequence	utility.cpp	/^string pseudo_random_sequence(size_t length, uint64_t seed) {$/;"	f	namespace:vg
purge_unmapped_alignments	multipath_mapper.cpp	/^    void MultipathMapper::purge_unmapped_alignments(vector<multipath_alignment_t>& multipath_alns_out) {$/;"	f	class:vg::MultipathMapper
purge_unmapped_alignments	multipath_mapper.cpp	/^    void MultipathMapper::purge_unmapped_alignments(vector<pair<multipath_alignment_t, multipath_alignment_t>>& multipath_aln_pairs_out, bool proper_paired) {$/;"	f	class:vg::MultipathMapper
push	gbwt_extender.cpp	/^        void push(uint32_t value) {$/;"	f	struct:vg::MatchPos::PathList
push_back	haplotypes.cpp	/^void gbwt_thread_t::push_back(gbwt::node_type node, size_t node_length) {$/;"	f	class:haplo::gbwt_thread_t
push_back	haplotypes.cpp	/^void linear_haplo_structure::SNVvector::push_back(alleleValue allele, size_t ref_pos, bool deletion) {$/;"	f	class:haplo::linear_haplo_structure::SNVvector
push_edit	dozeu_interface.cpp	/^size_t DozeuInterface::push_edit(Mapping *mapping, uint8_t op, char const *alt, size_t len) const$/;"	f	class:DozeuInterface
qual_adj_aligner	aligner.hpp	/^        unique_ptr<QualAdjAligner> qual_adj_aligner;$/;"	m	class:vg::AlignerClient
qual_adj_full_length_bonuses	aligner.hpp	/^        int8_t* qual_adj_full_length_bonuses = nullptr;$/;"	m	class:vg::QualAdjAligner
qual_adjusted_bonuses	aligner.cpp	/^int8_t* QualAdjAligner::qual_adjusted_bonuses(int8_t _full_length_bonus, uint32_t max_qual) const {$/;"	f	class:vg::QualAdjAligner
qual_adjusted_matrix	aligner.cpp	/^int8_t* QualAdjAligner::qual_adjusted_matrix(const int8_t* _score_matrix, double gc_content, uint32_t max_qual) const {$/;"	f	class:vg::QualAdjAligner
qual_filter	filter.cpp	/^    Alignment Filter::qual_filter(Alignment& aln){$/;"	f	class:vg::Filter
qual_offset	filter.hpp	/^        int qual_offset = 0;$/;"	m	class:vg::Filter
quality	multipath_alignment.hpp	/^    inline const string& multipath_alignment_t::quality() const {$/;"	f	class:vg::multipath_alignment_t
quality_aligners	genotyper.hpp	/^    vector<QualAdjAligner> quality_aligners;$/;"	m	class:vg::Genotyper
quality_cache	packer.hpp	/^    mutable vector<LRUCache<pair<int, int>, int>*> quality_cache;$/;"	m	class:vg::Packer
quality_scale_factor	aligner.cpp	/^static const double quality_scale_factor = 10.0 \/ log(10.0);$/;"	m	namespace:vg	file:
queried_count	mem.hpp	/^    size_t queried_count;$/;"	m	class:vg::MaximalExactMatch
query	indexed_vg.cpp	/^Graph IndexedVG::CacheEntry::query(const id_t& id) const {$/;"	f	class:vg::IndexedVG::CacheEntry
query	subcommand/options.cpp	/^bool GroupedOptionGroup::query(BaseValuation& entry) const {$/;"	f	class:vg::subcommand::GroupedOptionGroup
query	subcommand/options.hpp	/^    virtual bool query(BaseValuation& entry) const {$/;"	f	struct:vg::subcommand::OptionGroup
query	subcommand/options.hpp	/^    virtual void query(BaseValuation& entry) const {$/;"	f	struct:vg::subcommand::ArgSpec
query_cluster_graphs	multipath_mapper.cpp	/^    vector<MultipathMapper::clustergraph_t> MultipathMapper::query_cluster_graphs(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
query_offset	dozeu_interface.hpp	/^        uint32_t query_offset;$/;"	m	struct:vg::DozeuInterface::graph_pos_s
query_overlap	alignment.cpp	/^int query_overlap(const Alignment& aln1, const Alignment& aln2) {$/;"	f	namespace:vg
queue	job_schedule.hpp	/^    list<pair<int64_t, int64_t>> queue;$/;"	m	class:vg::JobSchedule
r_index	recombinator.hpp	/^    const gbwt::FastLocate& r_index;$/;"	m	class:vg::HaplotypePartitioner
r_index_name	subcommand/gbwt_main.cpp	/^    std::string r_index_name; \/\/ Output r-index.$/;"	m	struct:GBWTConfig	file:
r_index_name	subcommand/haplotypes_main.cpp	/^    std::string distance_name, r_index_name;$/;"	m	struct:HaplotypesConfig	file:
random	colors.hpp	/^    string random(void) {$/;"	f	class:vg::Colors
random	pictographs.hpp	/^    string random(void) {$/;"	f	class:vg::Pictographs
random	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
random_adjacency_list	unittest/random_graph.cpp	/^vector<vector<size_t>> random_adjacency_list(size_t node_count, size_t edge_count) {$/;"	f	namespace:vg::unittest
random_engine	mcmc_genotyper.hpp	/^    mutable minstd_rand0 random_engine;$/;"	m	class:vg::MCMCGenotyper
random_graph	unittest/random_graph.cpp	/^void random_graph(int64_t seq_size, int64_t variant_len, int64_t variant_count,$/;"	f	namespace:vg::unittest
random_graph	unittest/random_graph.cpp	/^void random_graph(vector<int64_t> seq_sizes, int64_t variant_len, int64_t total_variant_count,$/;"	f	namespace:vg::unittest
random_match_length	mapper.cpp	/^int BaseMapper::random_match_length(double chance_random) {$/;"	f	class:vg::BaseMapper
random_match_p_value	multipath_mapper.cpp	/^    double MultipathMapper::random_match_p_value(int64_t match_length, size_t read_length) {$/;"	f	class:vg::MultipathMapper
random_read	vg.cpp	/^Alignment VG::random_read(size_t read_len,$/;"	f	class:vg::VG
random_sequence	utility.cpp	/^string random_sequence(size_t length) {$/;"	f	namespace:vg
range	mem.hpp	/^    gcsa::range_type range;$/;"	m	class:vg::MaximalExactMatch
rangeToString	unittest/catch.hpp	/^        std::string rangeToString(InputIterator first, Sentinel last) {$/;"	f	namespace:Catch::Detail
range_table	mem_accelerator.hpp	/^    sdsl::int_vector<> range_table;$/;"	m	class:vg::MEMAccelerator
range_vector	utility.cpp	/^vector<size_t> range_vector(size_t begin, size_t end) {$/;"	f	namespace:vg
range_vector	utility.hpp	/^inline vector<size_t> range_vector(size_t end) {$/;"	f	namespace:vg
rank	path.hpp	/^    int32_t rank;$/;"	m	class:vg::mapping_t
rank	phased_genome.hpp	/^        size_t rank;$/;"	m	class:vg::PhasedGenome::iterator
rank_by_support	snarl_caller.cpp	/^vector<int> PoissonSupportSnarlCaller::rank_by_support(const vector<Support>& supports) {$/;"	f	class:vg::PoissonSupportSnarlCaller
rawMemoryToString	unittest/catch.hpp	/^        std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
re_genotype	graph_caller.cpp	/^LegacyCaller::re_genotype(const Snarl& snarl, TraversalFinder& trav_finder,$/;"	f	class:vg::LegacyCaller
reachable_with_gap	gbwt_extender.cpp	/^        bool reachable_with_gap;$/;"	m	struct:vg::WFATree::ScoreProperties	file:
read	kff.cpp	/^std::vector<std::pair<ParallelKFFReader::kmer_type, size_t>> ParallelKFFReader::read(size_t n) {$/;"	f	class:vg::ParallelKFFReader
read	minimizer_mapper.cpp	/^    bool read;$/;"	m	struct:vg::alignment_index_t	file:
read	readfilter.hpp	/^    enum FilterName { read = 0, wrong_name, wrong_refpos, excluded_feature, min_score, min_sec_score, max_overhang,$/;"	e	enum:vg::Counts::FilterName
read_1_adapter	multipath_mapper.hpp	/^        string read_1_adapter = "";$/;"	m	class:vg::MultipathMapper
read_1_adapter_lps	multipath_mapper.hpp	/^        vector<size_t> read_1_adapter_lps;$/;"	m	class:vg::MultipathMapper
read_2_adapter	multipath_mapper.hpp	/^        string read_2_adapter = "";$/;"	m	class:vg::MultipathMapper
read_2_adapter_lps	multipath_mapper.hpp	/^        vector<size_t> read_2_adapter_lps;$/;"	m	class:vg::MultipathMapper
read_alignment_index_t	minimizer_mapper.cpp	/^struct read_alignment_index_t {$/;"	s	namespace:vg	file:
read_best_left	snarl_seed_clusterer.hpp	/^            pair<size_t, size_t> read_best_left = make_pair(std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max());$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
read_best_right	snarl_seed_clusterer.hpp	/^            pair<size_t, size_t> read_best_right = make_pair(std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max());$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
read_cluster_heads	snarl_seed_clusterer.hpp	/^            hash_set<pair<size_t, size_t>> read_cluster_heads;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
read_distance_limit	snarl_seed_clusterer.hpp	/^            size_t read_distance_limit;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
read_end	algorithms/chain_items.hpp	/^    inline size_t read_end() const {$/;"	f	class:vg::algorithms::Anchor
read_group	minimizer_mapper.hpp	/^    string read_group;$/;"	m	class:vg::MinimizerMapper
read_group	multipath_alignment_emitter.hpp	/^    string read_group;$/;"	m	class:vg::MultipathAlignmentEmitter
read_interval	gbwt_extender.hpp	/^    std::pair<size_t, size_t> read_interval;$/;"	m	struct:vg::GaplessExtension
read_log_likelihood	phased_genome.cpp	/^    double PhasedGenome::read_log_likelihood(const multipath_alignment_t& multipath_aln, double log_base) {$/;"	f	class:vg::PhasedGenome
read_mapping	phase_unfolder.cpp	/^void PhaseUnfolder::read_mapping(const std::string& filename) {$/;"	f	class:vg::PhaseUnfolder
read_num	snarl_seed_clusterer.hpp	/^            size_t read_num = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusterHead
read_offset	subcommand/gamcompare_main.cpp	/^    size_t read_offset; \/\/ Starting position in the read.$/;"	m	struct:MappingRun	file:
read_start	algorithms/chain_items.hpp	/^    inline size_t read_start() const {$/;"	f	class:vg::algorithms::Anchor
read_union_find	snarl_seed_clusterer.hpp	/^            vector<structures::UnionFind> read_union_find;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
reader	kff.hpp	/^    Kff_reader reader;$/;"	m	class:vg::ParallelKFFReader
reader	vcf_buffer.hpp	/^    VcfBuffer reader;$/;"	m	class:vg::WindowedVcfBuffer
reads_by_name	traversal_finder.hpp	/^    map<string, const Alignment*>& reads_by_name;$/;"	m	class:vg::PathRestrictedTraversalFinder
realign_indels	genotyper.hpp	/^    bool realign_indels = false;$/;"	m	class:vg::Genotyper
realigning_surject	surjector.cpp	/^    Alignment Surjector::realigning_surject(const PathPositionHandleGraph* path_position_graph, const Alignment& source,$/;"	f	class:vg::Surjector
reallocate_atomic_int_vector	algorithms/component.cpp	/^void reallocate_atomic_int_vector(vector<atomic<Int1>>*& vec1, vector<atomic<Int2>>*& vec2) {$/;"	f	namespace:vg::algorithms
reassign_node	path.cpp	/^void Paths::reassign_node(id_t new_id, mapping_t* m) {$/;"	f	class:vg::Paths
reassign_node_ids	vg.cpp	/^void VG::reassign_node_ids(const std::function<nid_t(const nid_t&)>& get_new_id) {$/;"	f	class:vg::VG
reassign_split_clusters	multipath_mapper.cpp	/^    void MultipathMapper::reassign_split_clusters(const Alignment& alignment,$/;"	f	class:vg::MultipathMapper
rebuild_edge_indexes	vg.cpp	/^void VG::rebuild_edge_indexes(void) {$/;"	f	class:vg::VG
rebuild_gbwt	gbwt_helper.cpp	/^gbwt::GBWT rebuild_gbwt(const gbwt::GBWT& gbwt_index, const std::vector<RebuildJob::mapping_type>& mappings) {$/;"	f	namespace:vg
rebuild_gbwt	gbwt_helper.cpp	/^gbwt::GBWT rebuild_gbwt(const gbwt::GBWT& gbwt_index,$/;"	f	namespace:vg
rebuild_gbwt_job	gbwt_helper.cpp	/^gbwt::GBWT rebuild_gbwt_job(const gbwt::GBWT& gbwt_index, const RebuildJob& job, size_t job_id, const std::vector<gbwt::size_type>& sequences, const RebuildParameters& parameters) {$/;"	f	namespace:vg
rebuild_indexes	vg.cpp	/^void VG::rebuild_indexes(void) {$/;"	f	class:vg::VG
rebuild_mapping_aux	path.cpp	/^void Paths::rebuild_mapping_aux(void) {$/;"	f	class:vg::Paths
rebuild_node_mapping	path.cpp	/^void Paths::rebuild_node_mapping(void) {$/;"	f	class:vg::Paths
recipe_registry	index_registry.hpp	/^    map<IndexGroup, vector<IndexRecipe>> recipe_registry;$/;"	m	class:vg::IndexRegistry
recode_block	unittest/kff.cpp	/^void recode_block(const std::string& block, const std::vector<std::string>& true_kmers, const uint8_t* encoding) {$/;"	f	namespace:vg::unittest::__anon5
recode_trivial	unittest/kff.cpp	/^void recode_trivial(const std::string& kmer) {$/;"	f	namespace:vg::unittest::__anon5
recoding	kff.hpp	/^    kff_recoding_t recoding;$/;"	m	class:vg::ParallelKFFReader
recombination_penalty	mapper.hpp	/^    double recombination_penalty = 20.7; \/\/ 9 * 2.3 = 20.7$/;"	m	class:vg::BaseMapper
recombination_penalty	multipath_mapper.hpp	/^        double recombination_penalty = 20.7; \/\/ 20.7 = 9 * 2.3$/;"	m	class:vg::MultipathMapper
recombinator_parameters	subcommand/haplotypes_main.cpp	/^    Recombinator::Parameters recombinator_parameters;$/;"	m	struct:HaplotypesConfig	file:
recombinator_sanity_checks	recombinator.cpp	/^void recombinator_sanity_checks(const Recombinator::Parameters& parameters) {$/;"	f	namespace:vg
record	snarls.hpp	/^    inline SnarlRecord* record(Snarl* snarl) {$/;"	f	class:vg::SnarlManager
record	snarls.hpp	/^    inline const SnarlRecord* record(const Snarl* snarl) const {$/;"	f	class:vg::SnarlManager
record_bases	packer.hpp	/^    bool record_bases;$/;"	m	class:vg::Packer
record_edges	packer.hpp	/^    bool record_edges;$/;"	m	class:vg::Packer
record_edits	packer.hpp	/^    bool record_edits;$/;"	m	class:vg::Packer
record_fanouts	multipath_mapper.cpp	/^    MultipathMapper::match_fanouts_t MultipathMapper::record_fanouts(const vector<MaximalExactMatch>& mems,$/;"	f	class:vg::MultipathMapper
record_fragment_configuration	mapper.cpp	/^void FragmentLengthStatistics::record_fragment_configuration(const Alignment& aln1, const Alignment& aln2, Mapper* mapper) {$/;"	f	class:vg::FragmentLengthStatistics
record_offset	snarl_distance_index.hpp	/^    size_t record_offset; $/;"	m	struct:vg::MIPayloadValues
record_offset	snarl_distance_index.hpp	/^    static size_t record_offset(const gbwtgraph::Payload code) { $/;"	f	struct:vg::MIPayload
record_qualities	packer.hpp	/^    bool record_qualities;$/;"	m	class:vg::Packer
record_read_pair_quality	sampler.cpp	/^void NGSSimulator::record_read_pair_quality(const Alignment& aln_1, const Alignment& aln_2) {$/;"	f	class:vg::NGSSimulator
record_read_quality	sampler.cpp	/^void NGSSimulator::record_read_quality(const Alignment& aln, bool read_2) {$/;"	f	class:vg::NGSSimulator
record_transition	sampler.hpp	/^void NGSSimulator::MarkovDistribution<From, To>::record_transition(From from, To to) {$/;"	f	class:vg::NGSSimulator::MarkovDistribution
recover_log_base	aligner.cpp	/^double GSSWAligner::recover_log_base(const int8_t* score_matrix, double gc_content, double tol) const {$/;"	f	class:vg::GSSWAligner
recursively_emit_snarls	cactus_snarl_finder.cpp	/^const Snarl* CactusSnarlFinder::recursively_emit_snarls(const Visit& start, const Visit& end,$/;"	f	class:vg::CactusSnarlFinder
reduce_to_single_path	multipath_mapper.cpp	/^    void MultipathMapper::reduce_to_single_path(const multipath_alignment_t& multipath_aln, vector<Alignment>& alns_out,$/;"	f	class:vg::MultipathMapper
redundant_vertexes	cluster.hpp	/^    set<vector<MEMChainModelVertex>::iterator> redundant_vertexes;$/;"	m	class:vg::MEMChainModel
redundant_vertexes	mapper.hpp	/^    set<vector<AlignmentChainModelVertex>::iterator> redundant_vertexes;$/;"	m	class:vg::AlignmentChainModel
reestimation_frequency	mapper.hpp	/^    size_t reestimation_frequency;$/;"	m	class:vg::FragmentLengthDistribution
ref_offset	dozeu_interface.hpp	/^        uint32_t ref_offset;$/;"	m	struct:vg::DozeuInterface::graph_pos_s
ref_offsets	graph_caller.hpp	/^    map<string, size_t> ref_offsets;$/;"	m	class:vg::FlowCaller
ref_offsets	graph_caller.hpp	/^    map<string, size_t> ref_offsets;$/;"	m	class:vg::LegacyCaller
ref_offsets	graph_caller.hpp	/^    map<string, size_t> ref_offsets;$/;"	m	class:vg::NestedFlowCaller
ref_offsets	mcmc_caller.hpp	/^        map<string, size_t> ref_offsets; $/;"	m	class:vg::MCMCCaller
ref_path	flow_sort.hpp	/^        list<id_t> ref_path;$/;"	m	struct:vg::FlowSort::Growth
ref_path_distance	algorithms/ref_path_distance.cpp	/^int64_t ref_path_distance(const PathPositionHandleGraph* graph, const pos_t& pos_1, const pos_t& pos_2,$/;"	f	namespace:vg::algorithms
ref_path_handle	haplotypes.hpp	/^  vg::path_handle_t ref_path_handle;$/;"	m	struct:haplo::linear_haplo_structure
ref_path_handles	multipath_mapper.hpp	/^        unordered_set<path_handle_t> ref_path_handles;$/;"	m	class:vg::MultipathMapper
ref_path_interval	graph_caller.hpp	/^        pair<int64_t, int64_t> ref_path_interval;$/;"	m	struct:vg::NestedFlowCaller::CallRecord
ref_path_lengths	mcmc_caller.hpp	/^        const vector<size_t> ref_path_lengths = {};$/;"	m	class:vg::MCMCCaller
ref_path_name	graph_caller.hpp	/^        string ref_path_name;$/;"	m	struct:vg::NestedFlowCaller::CallRecord
ref_path_offsets	mcmc_caller.hpp	/^        const vector<size_t> ref_path_offsets = {};$/;"	m	class:vg::MCMCCaller
ref_path_set	graph_caller.hpp	/^    unordered_set<string> ref_path_set;$/;"	m	class:vg::FlowCaller
ref_path_set	graph_caller.hpp	/^    unordered_set<string> ref_path_set;$/;"	m	class:vg::NestedFlowCaller
ref_paths	deconstructor.hpp	/^    set<string> ref_paths;$/;"	m	class:vg::Deconstructor
ref_paths	graph_caller.hpp	/^    unordered_set<string> ref_paths;$/;"	m	class:vg::GAFOutputCaller
ref_paths	graph_caller.hpp	/^    vector<string> ref_paths;$/;"	m	class:vg::FlowCaller
ref_paths	graph_caller.hpp	/^    vector<string> ref_paths;$/;"	m	class:vg::LegacyCaller
ref_paths	graph_caller.hpp	/^    vector<string> ref_paths;$/;"	m	class:vg::NestedFlowCaller
ref_paths	mcmc_caller.hpp	/^        vector<string> ref_paths;$/;"	m	class:vg::MCMCCaller
ref_paths	recombinator.hpp	/^        size_t ref_paths = 0;$/;"	m	struct:vg::Recombinator::Statistics
ref_ploidies	graph_caller.hpp	/^    map<string, int> ref_ploidies;$/;"	m	class:vg::FlowCaller
ref_ploidies	graph_caller.hpp	/^    map<string, int> ref_ploidies;$/;"	m	class:vg::LegacyCaller
ref_ploidies	graph_caller.hpp	/^    map<string, int> ref_ploidies;$/;"	m	class:vg::NestedFlowCaller
ref_position	haplotypes.cpp	/^size_t linear_haplo_structure::SNVvector::ref_position(size_t i) const {$/;"	f	class:haplo::linear_haplo_structure::SNVvector
ref_positions	haplotypes.hpp	/^    vector<size_t> ref_positions;$/;"	m	struct:haplo::linear_haplo_structure::SNVvector
ref_samples	deconstructor.hpp	/^    set<string> ref_samples;$/;"	m	class:vg::Deconstructor
ref_span	haplotypes.hpp	/^    ref_span,$/;"	e	enum:haplo::linear_haplo_structure::nodeType
ref_trav_idx	graph_caller.hpp	/^        int ref_trav_idx; \/\/ index of ref paths in CallRecord::travs$/;"	m	struct:vg::NestedFlowCaller::CallRecord
refactor_split_alignment	filter.cpp	/^    pair<Alignment, int> Filter::refactor_split_alignment(Alignment& a){$/;"	f	class:vg::Filter
reference	deconstructor.hpp	/^    typedef void reference;$/;"	t	class:vg::count_back_inserter
reference_paths	phase_unfolder.hpp	/^    std::vector<path_type> reference_paths;$/;"	m	class:vg::PhaseUnfolder
reference_transcript_paths	transcriptome.cpp	/^vector<CompletedTranscriptPath> Transcriptome::reference_transcript_paths() const {$/;"	f	class:vg::Transcriptome
reflect	graph_synchronizer.hpp	/^        bool reflect = false; \/\/ Should we bounce off node ends?$/;"	m	class:vg::GraphSynchronizer::Lock
regions	funnel.hpp	/^        std::map<size_t, size_t> regions;$/;"	m	struct:vg::Funnel::State::PaintableSpace
regions	haplotype_indexer.hpp	/^    std::map<std::string, std::pair<size_t, size_t>> regions;$/;"	m	class:vg::HaplotypeIndexer
registerEnum	unittest/catch.hpp	/^        Detail::EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::initializer_list<E> values ) {$/;"	f	class:Catch::IMutableEnumValuesRegistry::Detail
register_alias	index_registry.cpp	/^void AliasGraph::register_alias(const IndexName& aliasor, const IndexFile* aliasee) {$/;"	f	class:vg::AliasGraph
register_configurable	option.cpp	/^void ConfigurableParser::register_configurable(Configurable* configurable) {$/;"	f	class:vg::ConfigurableParser
register_fragment_length	mapper.cpp	/^void FragmentLengthDistribution::register_fragment_length(int64_t length) {$/;"	f	class:vg::FragmentLengthDistribution
register_generalization	index_registry.cpp	/^void IndexRegistry::register_generalization(const RecipeName& generalizer, const RecipeName& generalizee) {$/;"	f	class:vg::IndexRegistry
register_index	index_registry.cpp	/^void IndexRegistry::register_index(const IndexName& identifier, const string& suffix) {$/;"	f	class:vg::IndexRegistry
register_libvg_io	io/register_libvg_io.cpp	/^bool register_libvg_io() {$/;"	f	namespace:vg::io
register_loader_saver_distance_index	io/register_loader_saver_distance_index.cpp	/^void register_loader_saver_distance_index() {$/;"	f	namespace:vg::io
register_loader_saver_gbwt	io/register_loader_saver_gbwt.cpp	/^void register_loader_saver_gbwt() {$/;"	f	namespace:vg::io
register_loader_saver_gbwtgraph	io/register_loader_saver_gbwtgraph.cpp	/^void register_loader_saver_gbwtgraph() {$/;"	f	namespace:vg::io
register_loader_saver_gbz	io/register_loader_saver_gbz.cpp	/^void register_loader_saver_gbz() {$/;"	f	namespace:vg::io
register_loader_saver_gbzgraph	io/register_loader_saver_gbzgraph.cpp	/^void register_loader_saver_gbzgraph() {$/;"	f	namespace:vg::io
register_loader_saver_gcsa	io/register_loader_saver_gcsa.cpp	/^void register_loader_saver_gcsa() {$/;"	f	namespace:vg::io
register_loader_saver_gfa	io/register_loader_saver_gfa.cpp	/^void register_loader_saver_gfa() {$/;"	f	namespace:vg::io
register_loader_saver_hash_graph	io/register_loader_saver_hash_graph.cpp	/^void register_loader_saver_hash_graph() {$/;"	f	namespace:vg::io
register_loader_saver_lcp	io/register_loader_saver_lcp.cpp	/^void register_loader_saver_lcp() {$/;"	f	namespace:vg::io
register_loader_saver_minimizer	io/register_loader_saver_minimizer.cpp	/^void register_loader_saver_minimizer() {$/;"	f	namespace:vg::io
register_loader_saver_packed_graph	io/register_loader_saver_packed_graph.cpp	/^void register_loader_saver_packed_graph() {$/;"	f	namespace:vg::io
register_loader_saver_r_index	io/register_loader_saver_r_index.cpp	/^void register_loader_saver_r_index() {$/;"	f	namespace:vg::io
register_loader_saver_snarl_manager	io/register_loader_saver_snarl_manager.cpp	/^void register_loader_saver_snarl_manager() {$/;"	f	namespace:vg::io
register_loader_saver_vg	io/register_loader_saver_vg.cpp	/^void register_loader_saver_vg() {$/;"	f	namespace:vg::io
register_loader_saver_xg	io/register_loader_saver_xg.cpp	/^void register_loader_saver_xg() {$/;"	f	namespace:vg::io
register_option	option.cpp	/^void Configurable::register_option(OptionInterface* option) {$/;"	f	class:vg::Configurable
register_recipe	index_registry.cpp	/^RecipeName IndexRegistry::register_recipe(const vector<IndexName>& identifiers,$/;"	f	class:vg::IndexRegistry
register_sampled_position	sampler.cpp	/^void NGSSimulator::register_sampled_position(const Alignment& aln, const string& path_name,$/;"	f	class:vg::NGSSimulator
registered_suffixes	index_registry.hpp	/^    unordered_set<string> registered_suffixes;$/;"	m	class:vg::IndexRegistry
registry	index_registry.hpp	/^    IndexRegistry* registry;$/;"	m	class:vg::IndexingPlan
regress	statistics.cpp	/^vector<double> regress(const vector<vector<double>>& X, vector<double>& y) {$/;"	f	namespace:vg
regular_aligner	aligner.hpp	/^        unique_ptr<Aligner> regular_aligner;$/;"	m	class:vg::AlignerClient
regularize	snarls.cpp	/^void SnarlManager::regularize() {$/;"	f	class:vg::SnarlManager
remap	filter.cpp	/^    vector<Alignment> Filter::remap(Alignment& aln){$/;"	f	class:vg::Filter
remap	filter.cpp	/^    vector<Alignment> Filter::remap(string seq){$/;"	f	class:vg::Filter
remove	phased_genome.hpp	/^    inline void PhasedGenome::remove(HaplotypeNode* haplo_node) {$/;"	f	class:vg::PhasedGenome
remove	utility.cpp	/^void remove(const string& filename) {$/;"	f	namespace:vg::temp_file
remove_bonuses	aligner.cpp	/^int32_t GSSWAligner::remove_bonuses(const Alignment& aln, bool pinned, bool pin_left) const {$/;"	f	class:vg::GSSWAligner
remove_clipped_portion	filter.cpp	/^    Alignment Filter::remove_clipped_portion(Alignment& a){$/;"	f	class:vg::Filter
remove_directory	utility.cpp	/^    static void remove_directory(const string& name) {$/;"	f	struct:vg::temp_file::Handler
remove_dominated_chunks	surjector.cpp	/^    vector<vector<size_t>> Surjector::remove_dominated_chunks(const string& src_sequence,$/;"	f	class:vg::Surjector
remove_duplicate_edges	graph.cpp	/^void remove_duplicate_edges(Graph& graph) {$/;"	f	namespace:vg
remove_duplicate_nodes	graph.cpp	/^void remove_duplicate_nodes(Graph& graph) {$/;"	f	namespace:vg
remove_duplicated_in	vg.cpp	/^void VG::remove_duplicated_in(VG& g) {$/;"	f	class:vg::VG
remove_duplicates	gbwt_extender.cpp	/^void remove_duplicates(std::vector<GaplessExtension>& result) {$/;"	f	namespace:vg
remove_duplicates	graph.cpp	/^void remove_duplicates(Graph& graph) {$/;"	f	namespace:vg
remove_duplicates	vg.cpp	/^void VG::remove_duplicates(void) {$/;"	f	class:vg::VG
remove_edge	flow_sort.cpp	/^void FlowSort::remove_edge(EdgeMapping& nodes_to_edges, id_t node, id_t to, bool reverse)$/;"	f	class:vg::FlowSort
remove_edit_tmpfiles	packer.cpp	/^void Packer::remove_edit_tmpfiles(void) {$/;"	f	class:vg::Packer
remove_empty_alignment_sections	multipath_alignment.cpp	/^    void remove_empty_alignment_sections(multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
remove_failing_edits	filter.hpp	/^        bool remove_failing_edits = false;$/;"	m	class:vg::Filter
remove_full_length_bonuses	mapper.cpp	/^void Mapper::remove_full_length_bonuses(Alignment& aln) {$/;"	f	class:vg::Mapper
remove_high_degree_nodes	algorithms/prune.cpp	/^size_t remove_high_degree_nodes(DeletableHandleGraph& g, int max_degree) {$/;"	f	namespace:vg::algorithms
remove_inverting_edges	vg.cpp	/^void VG::remove_inverting_edges(void) {$/;"	f	class:vg::VG
remove_low_scoring_sections	multipath_alignment.cpp	/^    void remove_low_scoring_sections(multipath_alignment_t& multipath_aln, int32_t max_score_diff) {$/;"	f	namespace:vg
remove_mapping	path.cpp	/^list<mapping_t>::iterator Paths::remove_mapping(mapping_t* m) {$/;"	f	class:vg::Paths
remove_node	path.cpp	/^void Paths::remove_node(id_t id) {$/;"	f	class:vg::Paths
remove_node_forwarding_edges	vg.cpp	/^void VG::remove_node_forwarding_edges(Node* node) {$/;"	f	class:vg::VG
remove_non_path	vg.cpp	/^void VG::remove_non_path(void) {$/;"	f	class:vg::VG
remove_non_transcribed_nodes	transcriptome.cpp	/^void Transcriptome::remove_non_transcribed_nodes() {$/;"	f	class:vg::Transcriptome
remove_null_nodes	vg.cpp	/^void VG::remove_null_nodes(void) {$/;"	f	class:vg::VG
remove_null_nodes_forwarding_edges	vg.cpp	/^void VG::remove_null_nodes_forwarding_edges(void) {$/;"	f	class:vg::VG
remove_orphan_edges	graph.cpp	/^void remove_orphan_edges(Graph& graph) {$/;"	f	namespace:vg
remove_orphan_edges	vg.cpp	/^void VG::remove_orphan_edges(void) {$/;"	f	class:vg::VG
remove_path	path.cpp	/^void Paths::remove_path(const string& name) {$/;"	f	class:vg::Paths
remove_path	vg.cpp	/^void VG::remove_path(void) {$/;"	f	class:vg::VG
remove_paths	path.cpp	/^void Paths::remove_paths(const set<string>& names) {$/;"	f	class:vg::Paths
remove_paths	path.cpp	/^void remove_paths(Graph& graph, const function<bool(const string&)>& paths_to_take, std::list<Path>* matching) {$/;"	f	namespace:vg
remove_redundant_transcript_paths	transcriptome.cpp	/^void Transcriptome::remove_redundant_transcript_paths(list<T> * new_transcript_paths, spp::sparse_hash_map<handle_t, vector<T*> > * transcript_paths_index) const {$/;"	f	class:vg::Transcriptome
remove_samples	subcommand/gbwt_main.cpp	/^void remove_samples(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f
remove_transitive_edges	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::remove_transitive_edges(const vector<size_t>& topological_order) {$/;"	f	class:vg::MultipathAlignmentGraph
rename_variants	haplotype_indexer.hpp	/^    bool rename_variants = true;$/;"	m	class:vg::HaplotypeIndexer
reorder_adjacency_lists	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::reorder_adjacency_lists(const vector<size_t>& order) {$/;"	f	class:vg::MultipathAlignmentGraph
reorder_exons	transcriptome.cpp	/^void Transcriptome::reorder_exons(Transcript * transcript) const {$/;"	f	class:vg::Transcriptome
repeat	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
repeat_size	readfilter.hpp	/^    int repeat_size = 0;$/;"	m	class:vg::ReadFilter
repetitiveness	sequence_complexity.hpp	/^double SeqComplexity<MaxOrder>::repetitiveness(int order) const {$/;"	f	class:vg::SeqComplexity
replace_in_string	utility.cpp	/^string replace_in_string(string subject,$/;"	f	namespace:vg
replace_local_haplotype	genome_state.cpp	/^ReplaceLocalHaplotypeCommand GenomeState::replace_local_haplotype(const ReplaceLocalHaplotypeCommand& c) {$/;"	f	class:vg::GenomeState
replace_mapping	path.cpp	/^pair<mapping_t*, mapping_t*> Paths::replace_mapping(mapping_t* m, pair<mapping_t, mapping_t> n) {$/;"	f	class:vg::Paths
replace_occurrence	path_index.cpp	/^void PathIndex::replace_occurrence(iterator to_replace, const vector<Mapping>& replacements) {$/;"	f	class:vg::PathIndex
replace_snarl_haplotype	genome_state.cpp	/^ReplaceLocalHaplotypeCommand GenomeState::replace_snarl_haplotype(const ReplaceSnarlHaplotypeCommand& c) {$/;"	f	class:vg::GenomeState
report_affinities	genotyper.cpp	/^void Genotyper::report_affinities(map<const Alignment*, vector<Genotyper::Affinity>>& affinities,$/;"	f	class:vg::Genotyper
report_allelic_mapq	multipath_mapper.hpp	/^        bool report_allelic_mapq = false;$/;"	m	class:vg::MultipathMapper
report_exception	crash.cpp	/^void report_exception(const std::exception& ex) {$/;"	f	namespace:vg
report_group_mapq	multipath_mapper.hpp	/^        bool report_group_mapq = false;$/;"	m	class:vg::MultipathMapper
report_snarl	genotyper.cpp	/^void Genotyper::report_snarl(const Snarl* snarl, const SnarlManager& manager, const PathIndex* index,$/;"	f	class:vg::Genotyper
report_snarl_traversal	genotyper.cpp	/^void Genotyper::report_snarl_traversal(const Snarl* snarl, const SnarlManager& manager, VG& graph) {$/;"	f	class:vg::Genotyper
report_time_memory	subcommand/gbwt_main.cpp	/^void report_time_memory(const std::string& what, double start_time, const GBWTConfig& config) {$/;"	f
require	index_registry.cpp	/^vector<string> IndexRegistry::require(const IndexName& identifier) const {$/;"	f	class:vg::IndexRegistry
rescore	readfilter.hpp	/^    bool rescore = false;$/;"	m	class:vg::ReadFilter
rescue_algorithm	minimizer_mapper.hpp	/^    RescueAlgorithm rescue_algorithm = rescue_dozeu;$/;"	m	class:vg::MinimizerMapper
rescue_dozeu	minimizer_mapper.hpp	/^    enum RescueAlgorithm { rescue_none, rescue_dozeu, rescue_gssw };$/;"	e	enum:vg::MinimizerMapper::RescueAlgorithm
rescue_graph_std_devs	multipath_mapper.hpp	/^        double rescue_graph_std_devs = 6.0;$/;"	m	class:vg::MultipathMapper
rescue_gssw	minimizer_mapper.hpp	/^    enum RescueAlgorithm { rescue_none, rescue_dozeu, rescue_gssw };$/;"	e	enum:vg::MinimizerMapper::RescueAlgorithm
rescue_high_count_order_length_mems	mapper.cpp	/^void BaseMapper::rescue_high_count_order_length_mems(vector<MaximalExactMatch>& mems,$/;"	f	class:vg::BaseMapper
rescue_none	minimizer_mapper.hpp	/^    enum RescueAlgorithm { rescue_none, rescue_dozeu, rescue_gssw };$/;"	e	enum:vg::MinimizerMapper::RescueAlgorithm
rescue_only_anchor_max	multipath_mapper.hpp	/^        size_t rescue_only_anchor_max = 16;$/;"	m	class:vg::MultipathMapper
rescue_only_min	multipath_mapper.hpp	/^        size_t rescue_only_min = 128;$/;"	m	class:vg::MultipathMapper
rescue_seed_limit	minimizer_mapper.hpp	/^    size_t rescue_seed_limit = default_rescue_seed_limit;$/;"	m	class:vg::MinimizerMapper
rescue_subgraph_stdevs	minimizer_mapper.hpp	/^    double rescue_subgraph_stdevs = default_rescue_subgraph_stdevs;$/;"	m	class:vg::MinimizerMapper
resect_snarls_from_paths	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::resect_snarls_from_paths(SnarlManager* cutting_snarls,$/;"	f	class:vg::MultipathAlignmentGraph
reseed_between	minimizer_mapper_from_chains.cpp	/^std::vector<MinimizerMapper::Seed> MinimizerMapper::reseed_between($/;"	f	class:vg::MinimizerMapper
reseed_search_distance	minimizer_mapper.hpp	/^    size_t reseed_search_distance = default_reseed_search_distance;$/;"	m	class:vg::MinimizerMapper
reset	index_registry.cpp	/^void IndexFile::reset() {$/;"	f	class:vg::IndexFile
reset	index_registry.cpp	/^void IndexRegistry::reset() {$/;"	f	class:vg::IndexRegistry
reset	readfilter.hpp	/^    void reset() {$/;"	f	struct:vg::Counts
reset	statistics.hpp	/^    void reset() {$/;"	f	class:vg::discrete_distribution
reset	statistics.hpp	/^    void reset() {$/;"	f	class:vg::normal_distribution
reset	statistics.hpp	/^    void reset() {$/;"	f	class:vg::truncated_normal_distribution
reset	statistics.hpp	/^    void reset() {$/;"	f	class:vg::uniform_int_distribution
reset	statistics.hpp	/^    void reset() {$/;"	f	class:vg::uniform_real_distribution
reset	subcommand/options.hpp	/^    void reset() {$/;"	f	struct:vg::Range
reset_chain	subcommand/options.cpp	/^void TickChainLink::reset_chain() {$/;"	f	class:vg::subcommand::TickChainLink
reset_chain	subcommand/options.hpp	/^    void reset_chain() {$/;"	f	struct:vg::Range
reset_chain_parent	subcommand/options.hpp	/^    std::function<void(void)> reset_chain_parent = []() {$/;"	m	struct:vg::subcommand::TickChainLink
resize_indexes	vg.cpp	/^void VG::resize_indexes(void) {$/;"	f	class:vg::VG
restore_paths	phase_unfolder.cpp	/^void PhaseUnfolder::restore_paths(MutableHandleGraph& graph, bool show_progress) const {$/;"	f	class:vg::PhaseUnfolder
restrained_graph_extraction	multipath_mapper.hpp	/^        bool restrained_graph_extraction = false;$/;"	m	class:vg::MultipathMapper
resultDisposition	unittest/catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
result_type	statistics.hpp	/^    typedef T result_type;$/;"	t	class:vg::discrete_distribution
result_type	statistics.hpp	/^    typedef T result_type;$/;"	t	class:vg::normal_distribution
result_type	statistics.hpp	/^    typedef T result_type;$/;"	t	class:vg::truncated_normal_distribution
result_type	statistics.hpp	/^    typedef T result_type;$/;"	t	class:vg::uniform_int_distribution
result_type	statistics.hpp	/^    typedef T result_type;$/;"	t	class:vg::uniform_real_distribution
retry_on_Ns	sampler.hpp	/^    const bool retry_on_Ns;$/;"	m	class:vg::NGSSimulator
retry_pairing_spliced_alignments	multipath_mapper.cpp	/^    bool MultipathMapper::retry_pairing_spliced_alignments(const Alignment& alignment1, const Alignment& alignment2,$/;"	f	class:vg::MultipathMapper
rev_comp	unittest/kff.cpp	/^void rev_comp(const std::string& kmer, const uint8_t* encoding) {$/;"	f	namespace:vg::unittest::__anon5
rev_comp_multipath_alignment	multipath_alignment.cpp	/^    void rev_comp_multipath_alignment(const multipath_alignment_t& multipath_aln, const function<int64_t(int64_t)>& node_length,$/;"	f	namespace:vg
rev_comp_multipath_alignment_in_place	multipath_alignment.cpp	/^    void rev_comp_multipath_alignment_in_place(multipath_alignment_t* multipath_aln,$/;"	f	namespace:vg
rev_comp_subpath	multipath_alignment.cpp	/^    inline void rev_comp_subpath(const subpath_t& subpath, const function<int64_t(int64_t)>& node_length,$/;"	f	namespace:vg
reverse	nodetraversal.hpp	/^    inline NodeTraversal reverse(void) const {$/;"	f	class:vg::NodeTraversal
reverse	position.cpp	/^Position reverse(const Position& pos, size_t node_length) {$/;"	f	namespace:vg
reverse	snarls.hpp	/^inline Visit reverse(const Visit& visit) {$/;"	f	namespace:vg
reverse	types.hpp	/^inline pos_t reverse(const pos_t& pos, size_t node_length) {$/;"	f	namespace:vg
reverse_adjacencies	surjector.cpp	/^    vector<vector<size_t>> Surjector::reverse_adjacencies(const vector<vector<size_t>>& adj) const {$/;"	f	class:vg::Surjector
reverse_base_pos	types.hpp	/^inline pos_t reverse_base_pos(const pos_t& pos, size_t node_length) {$/;"	f	namespace:vg
reverse_complement	utility.cpp	/^char reverse_complement(const char& c) {$/;"	f	namespace:vg
reverse_complement	utility.cpp	/^string reverse_complement(const string& seq) {$/;"	f	namespace:vg
reverse_complement_alignment	alignment.cpp	/^Alignment reverse_complement_alignment(const Alignment& aln,$/;"	f	namespace:vg
reverse_complement_alignment_in_place	alignment.cpp	/^void reverse_complement_alignment_in_place(Alignment* aln,$/;"	f	namespace:vg
reverse_complement_alignments	alignment.cpp	/^vector<Alignment> reverse_complement_alignments(const vector<Alignment>& alns, const function<int64_t(int64_t)>& node_length) {$/;"	f	namespace:vg
reverse_complement_graph	vg.cpp	/^VG VG::reverse_complement_graph(unordered_map<nid_t, pair<nid_t, bool>>& node_translation) {$/;"	f	class:vg::VG
reverse_complement_in_place	utility.cpp	/^void reverse_complement_in_place(string& seq) {$/;"	f	namespace:vg
reverse_complement_mapping	path.cpp	/^Mapping reverse_complement_mapping(const Mapping& m,$/;"	f	namespace:vg
reverse_complement_mapping	path.cpp	/^path_mapping_t reverse_complement_mapping(const path_mapping_t& m,$/;"	f	namespace:vg
reverse_complement_mapping_in_place	path.cpp	/^void reverse_complement_mapping_in_place(Mapping* m,$/;"	f	namespace:vg
reverse_complement_mapping_in_place	path.cpp	/^void reverse_complement_mapping_in_place(path_mapping_t* m,$/;"	f	namespace:vg
reverse_complement_path	path.cpp	/^Path reverse_complement_path(const Path& path,$/;"	f	namespace:vg
reverse_complement_path	path.cpp	/^path_t reverse_complement_path(const path_t& path,$/;"	f	namespace:vg
reverse_complement_path_in_place	path.cpp	/^void reverse_complement_path_in_place(Path* path,$/;"	f	namespace:vg
reverse_complement_path_in_place	path.cpp	/^void reverse_complement_path_in_place(path_t* path,$/;"	f	namespace:vg
reverse_edge	flow_sort.cpp	/^void FlowSort::reverse_edge(Edge* &e)$/;"	f	class:vg::FlowSort
reverse_from_start_to_end_edge	flow_sort.cpp	/^void FlowSort::reverse_from_start_to_end_edge(Edge* &e)$/;"	f	class:vg::FlowSort
reversing_filter	filter.cpp	/^    Alignment Filter::reversing_filter(Alignment& aln){$/;"	f	class:vg::Filter
reversing_walk_length	multipath_mapper.hpp	/^        size_t reversing_walk_length = 0;$/;"	m	class:vg::MultipathMapper
rewrite_segment	vg.cpp	/^pair<step_handle_t, step_handle_t> VG::rewrite_segment(const step_handle_t& segment_begin,$/;"	f	class:vg::VG
rgfa_listeners	algorithms/gfa_to_handle.hpp	/^    vector<std::function<void(nid_t id, int64_t offset, size_t length, const string& path_name, int64_t path_rank)>> rgfa_listeners;$/;"	m	class:vg::algorithms::GFAParser
rho	haplotypes.hpp	/^    double rho;                              \/\/ log space recombination penalty$/;"	m	struct:haplo::haploMath::RRMemo
right_degree	vg.cpp	/^int VG::right_degree(NodeTraversal node) {$/;"	f	class:vg::VG
right_ends	constructor.hpp	/^    set<id_t> right_ends;$/;"	m	struct:vg::ConstructedChunk
right_full	gbwt_extender.hpp	/^    bool                      left_full, right_full;$/;"	m	struct:vg::GaplessExtension
right_handle_trans	splicing.hpp	/^    vector<int64_t> right_handle_trans;$/;"	m	class:vg::JoinedSpliceGraph
right_maximal	gbwt_extender.hpp	/^    bool                      left_maximal, right_maximal;$/;"	m	struct:vg::GaplessExtension
right_seed_node	splicing.cpp	/^handle_t JoinedSpliceGraph::right_seed_node() const {$/;"	f	class:vg::JoinedSpliceGraph
right_splice_node	splicing.cpp	/^handle_t JoinedSpliceGraph::right_splice_node() const {$/;"	f	class:vg::JoinedSpliceGraph
right_splice_offset	splicing.hpp	/^    size_t right_splice_offset;$/;"	m	class:vg::JoinedSpliceGraph
right_subgraph	splicing.hpp	/^    const IncrementalSubgraph* right_subgraph;$/;"	m	class:vg::JoinedSpliceGraph
right_telomere_node	phased_genome.hpp	/^        PhasedGenome::HaplotypeNode* right_telomere_node;$/;"	m	class:vg::PhasedGenome::Haplotype
rng	colors.hpp	/^    mt19937 rng;$/;"	m	class:vg::Colors
rng	pictographs.hpp	/^    mt19937 rng;$/;"	m	class:vg::Pictographs
rng	sampler.hpp	/^    mt19937 rng;$/;"	m	class:vg::Sampler
rng	utility.hpp	/^    unique_ptr<minstd_rand> rng;$/;"	m	class:vg::LazyRNG
robust_estimation_fraction	mapper.hpp	/^    double robust_estimation_fraction;$/;"	m	class:vg::FragmentLengthDistribution
root	stream_index.hpp	/^    TreeNode root;$/;"	m	class:vg::BitStringTree
root	utility.hpp	/^    Node* root;$/;"	m	struct:vg::Tree
root_chains	snarls.hpp	/^    deque<Chain> root_chains;$/;"	m	class:vg::SnarlManager
root_children	snarl_seed_clusterer.hpp	/^            vector<pair<net_handle_t, net_handle_t>> root_children;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
root_trim	tree_subgraph.hpp	/^        size_t root_trim;$/;"	m	class:vg::TreeSubgraph
roots	snarls.hpp	/^    vector<const Snarl*> roots;$/;"	m	class:vg::SnarlManager
round_outward	path_index.cpp	/^pair<size_t, size_t> PathIndex::round_outward(size_t start, size_t past_end) const {$/;"	f	class:vg::PathIndex
round_trip_versions_of	unittest/gbwt_extender.cpp	/^void round_trip_versions_of(const std::vector<handle_t>& base_path, const HandleGraph& graph) {$/;"	f	namespace:vg::unittest::__anon3
row_idx	banded_global_aligner.hpp	/^        const int64_t row_idx;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack::Deflection
rr_memos	multipath_mapper.cpp	/^    thread_local unordered_map<pair<double, size_t>, haploMath::RRMemo> MultipathMapper::rr_memos;$/;"	m	class:vg::MultipathMapper	file:
rr_memos	multipath_mapper.hpp	/^        static thread_local unordered_map<pair<double, size_t>, haploMath::RRMemo> rr_memos;$/;"	m	class:vg::MultipathMapper
run	genotyper.cpp	/^void Genotyper::run(AugmentedGraph& augmented_graph,$/;"	f	class:vg::Genotyper
run_benchmark	benchmark.cpp	/^BenchmarkResult run_benchmark(const string& name, size_t iterations, const function<void(void)>& setup,$/;"	f	namespace:vg
run_benchmark	benchmark.cpp	/^BenchmarkResult run_benchmark(const string& name, size_t iterations, const function<void(void)>& under_test) {$/;"	f	namespace:vg
run_dp	deletion_aligner.cpp	/^vector<vector<handle_t>> DeletionAligner::run_dp(const HandleGraph& graph,$/;"	f	class:vg::DeletionAligner
run_genotype	mcmc_genotyper.cpp	/^    unique_ptr<PhasedGenome> MCMCGenotyper::run_genotype(const vector<multipath_alignment_t>& reads, const double log_base) const{$/;"	f	class:vg::MCMCGenotyper
run_multipath_dp	multipath_alignment.cpp	/^    tuple<MultipathProblem, int64_t, int32_t> run_multipath_dp(const multipath_alignment_t& multipath_aln,$/;"	f	namespace:vg
run_unit_tests	subcommand/test_main.cpp	/^static int run_unit_tests(int argc, char** argv) {$/;"	f	file:
running	subcommand/options.hpp	/^    bool running = false;$/;"	m	struct:vg::Range
runs	benchmark.hpp	/^    size_t runs;$/;"	m	struct:vg::BenchmarkResult
s_empty	unittest/catch.hpp	/^        static constexpr char const* const s_empty = "";$/;"	m	class:Catch::StringRef
sa_to_da	recombinator.cpp	/^void sa_to_da(std::vector<HaplotypePartitioner::sequence_type>& sequences, const gbwt::FastLocate& r_index) {$/;"	f	namespace:vg
safe_to_get	vcf_buffer.hpp	/^    bool safe_to_get = true;$/;"	m	class:vg::VcfBuffer
sam_files	hts_alignment_emitter.hpp	/^    vector<samFile*> sam_files;$/;"	m	class:vg::HTSWriter
sam_flag	alignment.cpp	/^int32_t sam_flag(const Alignment& alignment, bool on_reverse_strand, bool paired) {$/;"	f	namespace:vg
sam_header	hts_alignment_emitter.hpp	/^    string sam_header;$/;"	m	class:vg::HTSWriter
same_context	vg.cpp	/^bool VG::same_context(nid_t n1, nid_t n2) {$/;"	f	class:vg::VG
same_node	gbwt_extender.cpp	/^    bool same_node(pos_t pos) const {$/;"	f	struct:vg::WFANode
same_position	unittest/gbwt_extender.cpp	/^void same_position(const Position& pos, const Position& correct) {$/;"	f	namespace:vg::unittest::__anon3
sample_counter	sampler.hpp	/^    size_t sample_counter = 0;$/;"	m	class:vg::NGSSimulator
sample_gam_depth	algorithms/coverage_depth.cpp	/^pair<double, double> sample_gam_depth(const HandleGraph& graph, const vector<Alignment>& alignments, size_t max_nodes, size_t random_seed, size_t min_coverage, size_t min_mapq) {$/;"	f	namespace:vg::algorithms
sample_haplotypes	subcommand/giraffe_main.cpp	/^string sample_haplotypes(const vector<pair<string, string>>& indexes, string& basename, string& sample_name, string& haplotype_file, string& kff_file, bool progress) {$/;"	f
sample_haplotypes	subcommand/haplotypes_main.cpp	/^void sample_haplotypes(const gbwtgraph::GBZ& gbz, const Haplotypes& haplotypes, const HaplotypesConfig& config) {$/;"	f
sample_interval	gbwt_helper.hpp	/^    gbwt::size_type sample_interval = gbwt::DynamicGBWT::SAMPLE_INTERVAL;$/;"	m	struct:vg::RebuildParameters
sample_mapping_depth	algorithms/coverage_depth.cpp	/^pair<double, double> sample_mapping_depth(const HandleGraph& graph, const string& input_filename, size_t max_nodes, size_t random_seed, size_t min_coverage, size_t min_mapq, const string& format) {$/;"	f	namespace:vg::algorithms
sample_name	graph_caller.hpp	/^    string sample_name;$/;"	m	class:vg::VCFOutputCaller
sample_name	mcmc_caller.hpp	/^        const string sample_name = "SAMPLE";$/;"	m	class:vg::MCMCCaller
sample_name	minimizer_mapper.hpp	/^    string sample_name;$/;"	m	class:vg::MinimizerMapper
sample_name	multipath_alignment_emitter.hpp	/^    string sample_name;$/;"	m	class:vg::MultipathAlignmentEmitter
sample_names	deconstructor.hpp	/^    set<string> sample_names;$/;"	m	class:vg::Deconstructor
sample_nodes	algorithms/coverage_depth.cpp	/^static unordered_map<nid_t, size_t> sample_nodes(const HandleGraph& graph, size_t max_nodes, size_t random_seed) {$/;"	f	namespace:vg::algorithms
sample_path	sampler.cpp	/^size_t NGSSimulator::sample_path() {$/;"	f	class:vg::NGSSimulator
sample_ploidys	deconstructor.hpp	/^    unordered_map<string, int> sample_ploidys;$/;"	m	class:vg::Deconstructor
sample_range	haplotype_indexer.hpp	/^    std::pair<size_t, size_t> sample_range = std::pair<size_t, size_t>(0, std::numeric_limits<size_t>::max());$/;"	m	class:vg::HaplotypeIndexer
sample_read	readfilter.hpp	/^bool ReadFilter<Read>::sample_read(const Read& read) const {$/;"	f	class:vg::ReadFilter
sample_read	sampler.cpp	/^Alignment NGSSimulator::sample_read() {$/;"	f	class:vg::NGSSimulator
sample_read_internal	sampler.cpp	/^void NGSSimulator::sample_read_internal(Alignment& aln, int64_t& offset, bool& is_reverse, pos_t& curr_pos,$/;"	f	class:vg::NGSSimulator
sample_read_pair	sampler.cpp	/^pair<Alignment, Alignment> NGSSimulator::sample_read_pair() {$/;"	f	class:vg::NGSSimulator
sample_read_quality	sampler.cpp	/^pair<string, vector<bool>> NGSSimulator::sample_read_quality() {$/;"	f	class:vg::NGSSimulator
sample_read_quality_internal	sampler.cpp	/^pair<string, vector<bool>> NGSSimulator::sample_read_quality_internal(pair<uint8_t, bool> first,$/;"	f	class:vg::NGSSimulator
sample_read_quality_pair	sampler.cpp	/^pair<pair<string, vector<bool>>, pair<string, vector<bool>>> NGSSimulator::sample_read_quality_pair() {$/;"	f	class:vg::NGSSimulator
sample_start_graph_pos	sampler.cpp	/^pos_t NGSSimulator::sample_start_graph_pos() {$/;"	f	class:vg::NGSSimulator
sample_start_path_pos	sampler.cpp	/^tuple<int64_t, bool, pos_t> NGSSimulator::sample_start_path_pos(const size_t& source_path_idx,$/;"	f	class:vg::NGSSimulator
sample_start_pos	sampler.cpp	/^void NGSSimulator::sample_start_pos(const size_t& source_path_idx, const int64_t& fragment_length,$/;"	f	class:vg::NGSSimulator
sample_transition	sampler.hpp	/^To NGSSimulator::MarkovDistribution<From, To>::sample_transition(From from) {$/;"	f	class:vg::NGSSimulator::MarkovDistribution
sample_unsheared_paths	sampler.hpp	/^    const bool sample_unsheared_paths;$/;"	m	class:vg::NGSSimulator
samplers	sampler.hpp	/^        unordered_map<From, vg::uniform_int_distribution<size_t>> samplers;$/;"	m	class:vg::NGSSimulator::MarkovDistribution
samples	subcommand/gbwt_main.cpp	/^    bool metadata = false, contigs = false, haplotypes = false, samples = false, list_names = false, thread_names = false, tags = false;$/;"	m	struct:GBWTConfig	file:
samples_in_batch	haplotype_indexer.hpp	/^    size_t samples_in_batch = 200;$/;"	m	class:vg::HaplotypeIndexer
sanitize_sequence_in_place	constructor.cpp	/^    bool Constructor::sanitize_sequence_in_place(string& sequence, const string* sequence_name, size_t sequence_start_offset, const vcflib::Variant* variant) const {$/;"	f	class:vg::Constructor
save_bed	feature_set.cpp	/^void FeatureSet::save_bed(ostream& out) const {$/;"	f	class:vg::FeatureSet
save_explanations	explainer.cpp	/^bool Explainer::save_explanations = false;$/;"	m	class:vg::Explainer	file:
save_explanations	explainer.hpp	/^    static bool save_explanations;$/;"	m	class:vg::Explainer
save_frag_lens_to_alns	mapper.cpp	/^void FragmentLengthStatistics::save_frag_lens_to_alns(Alignment& aln1, Alignment& aln2,$/;"	f	class:vg::FragmentLengthStatistics
save_gbwt	gbwt_helper.cpp	/^void save_gbwt(const gbwt::DynamicGBWT& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_gbwt	gbwt_helper.cpp	/^void save_gbwt(const gbwt::GBWT& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_gbwtgraph	gbwtgraph_helper.cpp	/^void save_gbwtgraph(const gbwtgraph::GBWTGraph& graph, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_gbz	gbwtgraph_helper.cpp	/^void save_gbz(const gbwt::GBWT& index, gbwtgraph::GBWTGraph& graph, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_gbz	gbwtgraph_helper.cpp	/^void save_gbz(const gbwtgraph::GBZ& gbz, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_gbz	gbwtgraph_helper.cpp	/^void save_gbz(const gbwtgraph::GBZ& gbz, const std::string& gbwt_name, const std::string& graph_name, bool show_progress) {$/;"	f	namespace:vg
save_gcsa	gcsa_helper.cpp	/^void save_gcsa(const gcsa::GCSA& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_handle_graph	io/save_handle_graph.hpp	/^inline void save_handle_graph(HandleGraph* graph, const string& dest_path) {$/;"	f	namespace:vg::io
save_handle_graph	io/save_handle_graph.hpp	/^inline void save_handle_graph(HandleGraph* graph, ostream& os) {$/;"	f	namespace:vg::io
save_lcp	gcsa_helper.cpp	/^void save_lcp(const gcsa::LCPArray& lcp, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_minimizer	gbwtgraph_helper.cpp	/^void save_minimizer(const gbwtgraph::DefaultMinimizerIndex& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_r_index	gbwt_helper.cpp	/^void save_r_index(const gbwt::FastLocate& index, const std::string& filename, bool show_progress) {$/;"	f	namespace:vg
save_records	hts_alignment_emitter.cpp	/^void HTSWriter::save_records(bam_hdr_t* header, vector<bam1_t*>& records, size_t thread_number) {$/;"	f	class:vg::HTSWriter
save_to_file	packer.cpp	/^void Packer::save_to_file(const string& file_name) {$/;"	f	class:vg::Packer
save_vg_file	unittest/indexed_vg.cpp	/^string save_vg_file(const Graph& graph) {$/;"	f	namespace:vg::unittest
scan	qual_adj_xdrop_aligner.cpp	/^const dz_forefront_s* QualAdjXdropAligner::scan(const dz_query_s* query, const dz_forefront_s** forefronts,$/;"	f	class:QualAdjXdropAligner
scan	scanner.cpp	/^bool PositionIDScanner<Alignment>::scan(const Alignment& msg, const function<bool(const Position&)>& pos_iteratee,$/;"	f	class:vg::PositionIDScanner
scan	scanner.cpp	/^bool PositionIDScanner<Edge>::scan(const Edge& msg, const function<bool(const Position&)>& pos_iteratee,$/;"	f	class:vg::PositionIDScanner
scan	scanner.cpp	/^bool PositionIDScanner<Graph>::scan(const Graph& msg, const function<bool(const Position&)>& pos_iteratee,$/;"	f	class:vg::PositionIDScanner
scan	scanner.cpp	/^bool PositionIDScanner<Mapping>::scan(const Mapping& msg, const function<bool(const Position&)>& pos_iteratee,$/;"	f	class:vg::PositionIDScanner
scan	scanner.cpp	/^bool PositionIDScanner<Node>::scan(const Node& msg, const function<bool(const Position&)>& pos_iteratee,$/;"	f	class:vg::PositionIDScanner
scan	scanner.cpp	/^bool PositionIDScanner<Path>::scan(const Path& msg, const function<bool(const Position&)>& pos_iteratee,$/;"	f	class:vg::PositionIDScanner
scan	scanner.hpp	/^bool IDScanner<Message>::scan(const Message& msg, const function<bool(const id_t&)>& iteratee) {$/;"	f	class:vg::IDScanner
scan	scanner.hpp	/^bool WrappingPositionScanner<Message>::scan(const Message& msg, const function<bool(const Position&)>& iteratee) {$/;"	f	class:vg::WrappingPositionScanner
scan	xdrop_aligner.cpp	/^const dz_forefront_s* XdropAligner::scan(const dz_query_s* query, const dz_forefront_s** forefronts,$/;"	f	class:XdropAligner
scan_contig_lengths	graph_caller.cpp	/^unordered_map<string, size_t> VCFGenotyper::scan_contig_lengths() const {$/;"	f	class:vg::VCFGenotyper
scan_for_deletion	traversal_finder.cpp	/^pair<SnarlTraversal, vector<edge_t>> VCFTraversalFinder::scan_for_deletion(vcflib::Variant* var, int allele, path_handle_t ref_path,$/;"	f	class:vg::VCFTraversalFinder
scan_p_visits	algorithms/gfa_to_handle.cpp	/^void GFAParser::scan_p_visits(const chars_t& visit_range,$/;"	f	class:vg::algorithms::GFAParser
scan_seed_position	dozeu_interface.cpp	/^pair<DozeuInterface::graph_pos_s, bool> DozeuInterface::scan_seed_position(const OrderedGraph& graph, const Alignment& alignment,$/;"	f	class:DozeuInterface
scan_snarl	graph_caller.cpp	/^void VCFOutputCaller::scan_snarl(const string& allele_string, function<void(const string&, Snarl&)> callback) const {$/;"	f	class:vg::VCFOutputCaller
scan_visits	algorithms/gfa_to_handle.cpp	/^void GFAParser::scan_visits(const chars_t& visit_range, char line_type,$/;"	f	class:vg::algorithms::GFAParser
scan_w_visits	algorithms/gfa_to_handle.cpp	/^void GFAParser::scan_w_visits(const chars_t& visit_range,$/;"	f	class:vg::algorithms::GFAParser
scc_copy_count	dagified_graph.hpp	/^        vector<uint64_t> scc_copy_count;$/;"	m	class:vg::DagifiedGraph
scc_copy_of_handle	dagified_graph.cpp	/^    uint64_t DagifiedGraph::scc_copy_of_handle(const handle_t& handle) const {$/;"	f	class:vg::DagifiedGraph
scc_copy_of_node_id	dagified_graph.cpp	/^    uint64_t DagifiedGraph::scc_copy_of_node_id(const id_t& node_id) const {$/;"	f	class:vg::DagifiedGraph
scc_of_handle	dagified_graph.hpp	/^        vector<uint64_t> scc_of_handle;$/;"	m	class:vg::DagifiedGraph
score	algorithms/chain_items.hpp	/^    inline int score() const {$/;"	f	class:vg::algorithms::Anchor
score	algorithms/chain_items.hpp	/^    int score;$/;"	m	class:vg::algorithms::TracedScore
score	benchmark.cpp	/^double BenchmarkResult::score() const {$/;"	f	class:vg::BenchmarkResult
score	cluster.cpp	/^void MEMChainModel::score(const unordered_set<MEMChainModelVertex*>& exclude) {$/;"	f	class:vg::MEMChainModel
score	cluster.hpp	/^    double score;$/;"	m	class:vg::MEMChainModelVertex
score	cluster.hpp	/^    int32_t score;$/;"	m	class:vg::MEMClusterer::HitNode
score	funnel.cpp	/^void Funnel::score(size_t item, double score) {$/;"	f	class:vg::Funnel
score	funnel.hpp	/^        double score = 0;$/;"	m	struct:vg::Funnel::State::Item
score	gbwt_extender.cpp	/^    int32_t  score;$/;"	m	struct:vg::WFAPoint	file:
score	gbwt_extender.hpp	/^    int32_t                   score;$/;"	m	struct:vg::GaplessExtension
score	gbwt_extender.hpp	/^    int32_t score = 0;$/;"	m	struct:vg::WFAAlignment
score	genotyper.hpp	/^        double score = 0;    $/;"	m	struct:vg::Genotyper::Affinity
score	gff_reader.hpp	/^        double score = numeric_limits<double>::quiet_NaN();$/;"	m	struct:vg::GFFRecord
score	haplotypes.cpp	/^haplo_score_type linear_haplo_structure::score(const vg::Path& path) const {$/;"	f	class:haplo::linear_haplo_structure
score	haplotypes.cpp	/^pair<double, bool> LinearScoreProvider::score(const vg::Path& path, haploMath::RRMemo& memo) {$/;"	f	class:haplo::LinearScoreProvider
score	haplotypes.hpp	/^haplo_score_type haplo_DP::score(const gbwt_thread_t& thread, GBWTType& graph, haploMath::RRMemo& memo) {$/;"	f	class:haplo::haplo_DP
score	haplotypes.hpp	/^haplo_score_type haplo_DP::score(const vg::Path& path, GBWTType& graph, haploMath::RRMemo& memo) {$/;"	f	class:haplo::haplo_DP
score	haplotypes.hpp	/^pair<double, bool> GBWTScoreProvider<GBWTType>::score(const vg::Path& path, haploMath::RRMemo& memo) {$/;"	f	class:haplo::GBWTScoreProvider
score	mapper.cpp	/^void AlignmentChainModel::score(const unordered_set<AlignmentChainModelVertex*>& exclude) {$/;"	f	class:vg::AlignmentChainModel
score	mapper.hpp	/^    double score;$/;"	m	class:vg::AlignmentChainModelVertex
score	minimizer_mapper.hpp	/^        double score; \/\/ Scores as 1 + ln(hard_hit_cap) - ln(hits).$/;"	m	struct:vg::MinimizerMapper::Minimizer
score	multipath_alignment.hpp	/^    inline int32_t connection_t::score() const {$/;"	f	class:vg::connection_t
score	multipath_alignment.hpp	/^    inline int32_t subpath_t::score() const {$/;"	f	class:vg::subpath_t
score	recombinator.hpp	/^        double score = 0.0;$/;"	m	struct:vg::Recombinator::Statistics
score	snarl_seed_clusterer.hpp	/^            double score; \/\/ Sum of scores of distinct source minimizers of the seeds.$/;"	m	struct:vg::SnarlDistanceIndexClusterer::Cluster
score_alignment	mapper.cpp	/^int32_t Mapper::score_alignment(const Alignment& aln, bool use_approx_distance) {$/;"	f	class:vg::Mapper
score_alignment_pair	minimizer_mapper.cpp	/^double MinimizerMapper::score_alignment_pair(Alignment& aln1, Alignment& aln2, int64_t fragment_distance) {$/;"	f	class:vg::MinimizerMapper
score_best_chain	algorithms/chain_items.cpp	/^int score_best_chain(const VectorView<Anchor>& to_chain, const SnarlDistanceIndex& distance_index, const HandleGraph& graph, int gap_open, int gap_extension) {$/;"	f	namespace:vg::algorithms
score_bound	gbwt_extender.cpp	/^    int32_t score_bound;$/;"	m	class:vg::WFATree	file:
score_cluster	minimizer_mapper.cpp	/^void MinimizerMapper::score_cluster(Cluster& cluster, size_t i, const VectorView<Minimizer>& minimizers, const std::vector<Seed>& seeds, size_t seq_length, Funnel& funnel) const {$/;"	f	class:vg::MinimizerMapper
score_contiguous_alignment	aligner.cpp	/^int32_t GSSWAligner::score_contiguous_alignment(const Alignment& aln, bool strip_bonuses) const {$/;"	f	class:vg::GSSWAligner
score_discontiguous_alignment	aligner.cpp	/^int32_t GSSWAligner::score_discontiguous_alignment(const Alignment& aln, const function<size_t(pos_t, pos_t, size_t)>& estimate_distance,$/;"	f	class:vg::GSSWAligner
score_error	benchmark.cpp	/^double BenchmarkResult::score_error() const {$/;"	f	class:vg::BenchmarkResult
score_exact_match	aligner.cpp	/^int32_t Aligner::score_exact_match(const Alignment& aln, size_t read_offset, size_t length) const {$/;"	f	class:vg::Aligner
score_exact_match	aligner.cpp	/^int32_t Aligner::score_exact_match(const string& sequence) const {$/;"	f	class:vg::Aligner
score_exact_match	aligner.cpp	/^int32_t Aligner::score_exact_match(const string& sequence, const string& base_quality) const {$/;"	f	class:vg::Aligner
score_exact_match	aligner.cpp	/^int32_t Aligner::score_exact_match(string::const_iterator seq_begin, string::const_iterator seq_end) const {$/;"	f	class:vg::Aligner
score_exact_match	aligner.cpp	/^int32_t Aligner::score_exact_match(string::const_iterator seq_begin, string::const_iterator seq_end,$/;"	f	class:vg::Aligner
score_exact_match	aligner.cpp	/^int32_t QualAdjAligner::score_exact_match(const Alignment& aln, size_t read_offset, size_t length) const {$/;"	f	class:vg::QualAdjAligner
score_exact_match	aligner.cpp	/^int32_t QualAdjAligner::score_exact_match(const string& sequence, const string& base_quality) const {$/;"	f	class:vg::QualAdjAligner
score_exact_match	aligner.cpp	/^int32_t QualAdjAligner::score_exact_match(string::const_iterator seq_begin, string::const_iterator seq_end,$/;"	f	class:vg::QualAdjAligner
score_extension_group	minimizer_mapper.cpp	/^int MinimizerMapper::score_extension_group(const Alignment& aln, const vector<GaplessExtension>& extended_seeds,$/;"	f	class:vg::MinimizerMapper
score_extensions	minimizer_mapper.cpp	/^std::vector<int> MinimizerMapper::score_extensions(const std::vector<std::pair<std::vector<GaplessExtension>, size_t>>& extensions, const Alignment& aln, Funnel& funnel) const {$/;"	f	class:vg::MinimizerMapper
score_extensions	minimizer_mapper.cpp	/^std::vector<int> MinimizerMapper::score_extensions(const std::vector<std::vector<GaplessExtension>>& extensions, const Alignment& aln, Funnel& funnel) const {$/;"	f	class:vg::MinimizerMapper
score_from	algorithms/chain_items.cpp	/^TracedScore TracedScore::score_from(const vector<TracedScore>& options, size_t option_number) {$/;"	f	class:vg::algorithms::TracedScore
score_full_length_bonus	aligner.cpp	/^int32_t Aligner::score_full_length_bonus(bool left_side, const Alignment& alignment) const {$/;"	f	class:vg::Aligner
score_full_length_bonus	aligner.cpp	/^int32_t Aligner::score_full_length_bonus(bool left_side, string::const_iterator seq_begin,$/;"	f	class:vg::Aligner
score_full_length_bonus	aligner.cpp	/^int32_t QualAdjAligner::score_full_length_bonus(bool left_side, const Alignment& alignment) const {$/;"	f	class:vg::QualAdjAligner
score_full_length_bonus	aligner.cpp	/^int32_t QualAdjAligner::score_full_length_bonus(bool left_side, string::const_iterator seq_begin,$/;"	f	class:vg::QualAdjAligner
score_gap	aligner.cpp	/^int32_t GSSWAligner::score_gap(size_t gap_length) const {$/;"	f	class:vg::GSSWAligner
score_gap	aligner.cpp	/^int32_t score_gap(size_t gap_length, int32_t gap_open, int32_t gap_extension) {$/;"	f	namespace:vg
score_matrix	aligner.hpp	/^        int8_t* score_matrix = nullptr;$/;"	m	class:vg::GSSWAligner
score_merged_cluster	minimizer_mapper_from_chains.cpp	/^void MinimizerMapper::score_merged_cluster(Cluster& cluster, $/;"	f	class:vg::MinimizerMapper
score_mismatch	aligner.cpp	/^int32_t Aligner::score_mismatch(size_t length) const {$/;"	f	class:vg::Aligner
score_mismatch	aligner.cpp	/^int32_t Aligner::score_mismatch(string::const_iterator seq_begin, string::const_iterator seq_end,$/;"	f	class:vg::Aligner
score_mismatch	aligner.cpp	/^int32_t QualAdjAligner::score_mismatch(string::const_iterator seq_begin, string::const_iterator seq_end,$/;"	f	class:vg::QualAdjAligner
score_output	subcommand/haplotypes_main.cpp	/^    std::string gbz_output, haplotype_output, score_output, kmer_output;$/;"	m	struct:HaplotypesConfig	file:
score_partial_alignment	aligner.cpp	/^int32_t Aligner::score_partial_alignment(const Alignment& alignment, const HandleGraph& graph, const path_t& path,$/;"	f	class:vg::Aligner
score_partial_alignment	aligner.cpp	/^int32_t QualAdjAligner::score_partial_alignment(const Alignment& alignment, const HandleGraph& graph, const path_t& path,$/;"	f	class:vg::QualAdjAligner
score_sort_and_deduplicate_alignments	mapper.cpp	/^vector<Alignment> Mapper::score_sort_and_deduplicate_alignments(vector<Alignment>& all_alns, const Alignment& original_alignment) {$/;"	f	class:vg::Mapper
score_to_unnormalized_likelihood_ln	aligner.cpp	/^double GSSWAligner::score_to_unnormalized_likelihood_ln(double score) const {$/;"	f	class:vg::GSSWAligner
scores	recombinator.hpp	/^        std::vector<std::pair<size_t, double>> scores;$/;"	m	struct:vg::Recombinator::LocalHaplotype
scratch	snarls.hpp	/^    mutable pair<const Snarl*, bool> scratch;$/;"	m	struct:vg::ChainIterator
search_left	nested_traversal_finder.cpp	/^set<pair<size_t, list<Visit>>> NestedTraversalFinder::search_left(const Visit& root, const Snarl& site) {$/;"	f	class:vg::NestedTraversalFinder
search_multipath_alignment	multipath_alignment.cpp	/^    search_multipath_alignment(const multipath_alignment_t& multipath_aln,$/;"	f	namespace:vg
search_right	nested_traversal_finder.cpp	/^set<pair<size_t, list<Visit>>> NestedTraversalFinder::search_right(const Visit& root, const Snarl& site) {$/;"	f	class:vg::NestedTraversalFinder
search_threads	subcommand/gbwt_main.cpp	/^    size_t search_threads = omp_get_max_threads();$/;"	m	struct:GBWTConfig	file:
search_type	phase_unfolder.hpp	/^    typedef gbwt::SearchState                 search_type;$/;"	t	class:vg::PhaseUnfolder
secondary_rescue_attempts	multipath_mapper.hpp	/^        size_t secondary_rescue_attempts = 4;$/;"	m	class:vg::MultipathMapper
secondary_rescue_score_diff	multipath_mapper.hpp	/^        double secondary_rescue_score_diff = 1.0;$/;"	m	class:vg::MultipathMapper
secondary_rescue_subopt_diff	multipath_mapper.hpp	/^        int32_t secondary_rescue_subopt_diff = 10;$/;"	m	class:vg::MultipathMapper
seed	mcmc_genotyper.hpp	/^    const int seed;$/;"	m	class:vg::MCMCGenotyper
seed	sampler.hpp	/^    uint64_t seed;$/;"	m	class:vg::NGSSimulator
seed	splicing.hpp	/^    pair<handle_t, size_t> seed;$/;"	m	class:vg::SpliceRegion
seed	unittest/mcmc_genotyper.cpp	/^        const int seed = 0;$/;"	m	namespace:vg::unittest	file:
seed	unittest/min_cut_graph.cpp	/^        const int seed = 0;$/;"	m	namespace:vg::unittest	file:
seed_count_prefix_sum	snarl_seed_clusterer.hpp	/^            vector<size_t> seed_count_prefix_sum;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::ClusteringProblem
seed_indices	snarl_seed_clusterer.hpp	/^                pair<size_t, size_t> seed_indices;$/;"	m	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem::SnarlTreeChild
seed_type	gbwt_extender.hpp	/^    typedef GaplessExtension::seed_type seed_type;$/;"	t	class:vg::GaplessExtender
seed_type	gbwt_extender.hpp	/^    typedef std::pair<handle_t, int64_t> seed_type; \/\/ (handle, read_offset - node_offset).$/;"	t	struct:vg::GaplessExtension
seeds	banded_global_aligner.hpp	/^        vector<BAMatrix*> seeds;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
seeds	snarl_seed_clusterer.hpp	/^            std::vector<size_t> seeds; \/\/ Seed ids.$/;"	m	struct:vg::SnarlDistanceIndexClusterer::Cluster
seeds_in_subgraph	minimizer_mapper.cpp	/^GaplessExtender::cluster_type MinimizerMapper::seeds_in_subgraph(const VectorView<Minimizer>& minimizers,$/;"	f	class:vg::MinimizerMapper
segment_to_name	flat_file_back_translation.hpp	/^    std::unordered_map<nid_t, std::string> segment_to_name;$/;"	m	class:vg::FlatFileBackTranslation
segment_translation	subcommand/gbwt_main.cpp	/^    std::string segment_translation; \/\/ Segment to node translation output.$/;"	m	struct:GBWTConfig	file:
select_diploid	recombinator.cpp	/^std::vector<std::pair<size_t, double>> select_diploid($/;"	f	namespace:vg
select_haplotypes	recombinator.cpp	/^std::vector<std::pair<size_t, double>> select_haplotypes($/;"	f	namespace:vg
send_insertions_right	unittest/gbwt_extender.cpp	/^void send_insertions_right(Path& path) {$/;"	f	namespace:vg::unittest::__anon3
seq	algorithms/kmer.hpp	/^    std::string seq;$/;"	m	struct:vg::algorithms::kmer_t
seq	algorithms/walk.hpp	/^    std::string seq;$/;"	m	struct:vg::algorithms::walk_t
seq	kmer.hpp	/^    string seq;$/;"	m	struct:vg::kmer_t
seq	region.hpp	/^    string seq;$/;"	m	struct:vg::Region
seq	vg.hpp	/^        string seq;$/;"	m	struct:vg::VG::Plan
seq_chain_for_path	subcommand/haplotypes_main.cpp	/^std::pair<gbwt::size_type, size_t> seq_chain_for_path(const gbwtgraph::GBZ& gbz, const Haplotypes& haplotypes, gbwt::size_type path_id, const std::string& contig_name) {$/;"	f
seq_length	viz.hpp	/^    size_t seq_length = 0;$/;"	m	class:vg::Viz
seq_offset	gbwt_extender.cpp	/^    uint32_t seq_offset;$/;"	m	struct:vg::MatchPos	file:
seq_offset	gbwt_extender.cpp	/^    uint32_t seq_offset;$/;"	m	struct:vg::WFAPoint	file:
seq_offset	gbwt_extender.hpp	/^    uint32_t seq_offset = 0;$/;"	m	struct:vg::WFAAlignment
sequence	extra_node_graph.hpp	/^    string sequence;$/;"	m	class:vg::ExtraNodeGraph
sequence	gbwt_extender.cpp	/^    const std::string& sequence;$/;"	m	class:vg::WFATree	file:
sequence	mem.cpp	/^string MaximalExactMatch::sequence(void) const {$/;"	f	class:vg::MaximalExactMatch
sequence	multipath_alignment.hpp	/^    inline const string& multipath_alignment_t::sequence() const {$/;"	f	class:vg::multipath_alignment_t
sequence	path.hpp	/^inline const string& edit_t::sequence() const {$/;"	f	class:vg::edit_t
sequence	path_index.hpp	/^    std::string sequence;$/;"	m	struct:vg::PathIndex
sequence	recombinator.hpp	/^        std::string sequence;$/;"	m	struct:vg::Recombinator::LocalHaplotype
sequence	sampler.cpp	/^string Sampler::sequence(size_t length) {$/;"	f	class:vg::Sampler
sequence_id	gff_reader.hpp	/^        string sequence_id;$/;"	m	struct:vg::GFFRecord
sequence_id	recombinator.cpp	/^    gbwt::size_type sequence_id;$/;"	m	struct:vg::RecombinatorHaplotype	file:
sequence_source	subcommand/gbwt_main.cpp	/^    std::unique_ptr<gbwtgraph::SequenceSource> sequence_source = nullptr;$/;"	m	struct:GraphHandler	file:
sequence_type	recombinator.cpp	/^    typedef Recombinator::sequence_type sequence_type;$/;"	t	struct:vg::RecombinatorHaplotype	file:
sequence_type	recombinator.hpp	/^    typedef Haplotypes::sequence_type sequence_type;$/;"	t	class:vg::HaplotypePartitioner
sequence_type	recombinator.hpp	/^    typedef Haplotypes::sequence_type sequence_type;$/;"	t	class:vg::Recombinator
sequence_type	recombinator.hpp	/^    typedef std::pair<gbwt::size_type, gbwt::size_type> sequence_type;$/;"	t	class:vg::Haplotypes
sequences	recombinator.hpp	/^        std::vector<sequence_type> sequences;$/;"	m	struct:vg::Haplotypes::Subchain
serialize	gbwt_helper.cpp	/^void GBWTHandler::serialize(const std::string& new_filename) {$/;"	f	class:vg::GBWTHandler
serialize	packer.cpp	/^size_t Packer::serialize(std::ostream& out,$/;"	f	class:vg::Packer
serialize	snarls.cpp	/^void SnarlManager::serialize(ostream& out) const {$/;"	f	class:vg::SnarlManager
serialize	vg.cpp	/^void VG::serialize(ostream& out) const {$/;"	f	class:vg::VG
serialize_segment_translation	subcommand/gbwt_main.cpp	/^void GraphHandler::serialize_segment_translation(const GBWTConfig& config) const {$/;"	f	class:GraphHandler
serialize_to_emitter	vg.cpp	/^void VG::serialize_to_emitter(vg::io::ProtobufEmitter<Graph>& emitter, nid_t chunk_size) {$/;"	f	class:vg::VG
serialize_to_file	vg.cpp	/^void VG::serialize_to_file(const string& file_name, nid_t chunk_size) {$/;"	f	class:vg::VG
serialize_to_function	vg.cpp	/^void VG::serialize_to_function(const function<void(Graph&)>& emit, nid_t chunk_size) {$/;"	f	class:vg::VG
serialize_to_ostream	vg.cpp	/^void VG::serialize_to_ostream(ostream& out, nid_t chunk_size) {$/;"	f	class:vg::VG
set	subcommand/options.cpp	/^bool GroupedOptionGroup::set(const BaseValuation& entry) {$/;"	f	class:vg::subcommand::GroupedOptionGroup
set	subcommand/options.hpp	/^    virtual bool set(const BaseValuation& entry) {$/;"	f	struct:vg::subcommand::OptionGroup
set	subcommand/options.hpp	/^    virtual void set(const BaseValuation& entry) {$/;"	f	struct:vg::subcommand::ArgSpec
setK	traversal_finder.cpp	/^void FlowTraversalFinder::setK(size_t k) {$/;"	f	class:vg::FlowTraversalFinder
set_alignment_scores	aligner.cpp	/^void AlignerClient::set_alignment_scores(const int8_t* score_matrix, int8_t gap_open, int8_t gap_extend, int8_t full_length_bonus) {$/;"	f	class:vg::AlignerClient
set_alignment_scores	aligner.cpp	/^void AlignerClient::set_alignment_scores(int8_t match, int8_t mismatch, int8_t gap_open, int8_t gap_extend, $/;"	f	class:vg::AlignerClient
set_alignment_scores	aligner.cpp	/^void AlignerClient::set_alignment_scores(std::istream& matrix_stream, int8_t gap_open, int8_t gap_extend, int8_t full_length_bonus) {$/;"	f	class:vg::AlignerClient
set_alignment_scores	mapper.cpp	/^void BaseMapper::set_alignment_scores(int8_t match, int8_t mismatch, int8_t gap_open, int8_t gap_extend,$/;"	f	class:vg::BaseMapper
set_alignment_scores	mapper.cpp	/^void BaseMapper::set_alignment_scores(istream& matrix_stream, int8_t gap_open, int8_t gap_extend,$/;"	f	class:vg::BaseMapper
set_alignment_scores	minimizer_mapper.cpp	/^void MinimizerMapper::set_alignment_scores(const int8_t* score_matrix, int8_t gap_open, int8_t gap_extend, int8_t full_length_bonus) {$/;"	f	class:vg::MinimizerMapper
set_alignment_scores	multipath_mapper.cpp	/^    void MultipathMapper::set_alignment_scores(const int8_t* score_matrix, int8_t gap_open, int8_t gap_extend,$/;"	f	class:vg::MultipathMapper
set_allele	phased_genome.hpp	/^    void PhasedGenome::set_allele(const Snarl& site, NodeTraversalIterator first, NodeTraversalIterator last,$/;"	f	class:vg::PhasedGenome
set_annotation	annotation.hpp	/^inline void set_annotation(Annotated& annotated, const string& name, const AnnotationType& annotation) {$/;"	f	namespace:vg
set_annotation	annotation.hpp	/^inline void set_annotation(Annotated* annotated, const string& name, const AnnotationType& annotation) {$/;"	f	namespace:vg
set_annotation	multipath_alignment.cpp	/^    void multipath_alignment_t::set_annotation(const string& annotation_name) {$/;"	f	class:vg::multipath_alignment_t
set_annotation	multipath_alignment.cpp	/^    void multipath_alignment_t::set_annotation(const string& annotation_name, bool value) {$/;"	f	class:vg::multipath_alignment_t
set_annotation	multipath_alignment.cpp	/^    void multipath_alignment_t::set_annotation(const string& annotation_name, const string& value) {$/;"	f	class:vg::multipath_alignment_t
set_annotation	multipath_alignment.cpp	/^    void multipath_alignment_t::set_annotation(const string& annotation_name, double value) {$/;"	f	class:vg::multipath_alignment_t
set_automatic_min_clustering_length	multipath_mapper.cpp	/^    void MultipathMapper::set_automatic_min_clustering_length(double random_mem_probability) {$/;"	f	class:vg::MultipathMapper
set_avg	filter.cpp	/^    void Filter::set_avg(bool is_avg){$/;"	f	class:vg::Filter
set_baseline_error	snarl_caller.cpp	/^void PoissonSupportSnarlCaller::set_baseline_error(double small_variant_error, double large_variant_error) {$/;"	f	class:vg::PoissonSupportSnarlCaller
set_chain_component	snarl_distance_index.hpp	/^    static void set_chain_component(gbwtgraph::Payload& code, size_t chain_component) {$/;"	f	struct:vg::MIPayload
set_chain_values	snarl_seed_clusterer.hpp	/^            void set_chain_values(const SnarlDistanceIndex& distance_index) {$/;"	f	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
set_circularity	vg.cpp	/^void VG::set_circularity(const path_handle_t& path, bool circular) {$/;"	f	class:vg::VG
set_connection	multipath_alignment.hpp	/^    inline void subpath_t::set_connection(size_t i, const connection_t& c) {$/;"	f	class:vg::subpath_t
set_crash_context	crash.cpp	/^void set_crash_context(const std::string& message) {$/;"	f	namespace:vg
set_dir	utility.cpp	/^void set_dir(const string& new_temp_dir) {$/;"	f	namespace:vg::temp_file
set_edge	vg.cpp	/^void VG::set_edge(Edge* edge) {$/;"	f	class:vg::VG
set_filter_matches	filter.cpp	/^    void Filter::set_filter_matches(bool fm){$/;"	f	class:vg::Filter
set_fragment_length_distr_params	mapper.cpp	/^void PairedEndMapper::set_fragment_length_distr_params(size_t maximum_sample_size, size_t reestimation_frequency,$/;"	f	class:vg::PairedEndMapper
set_from_length	path.hpp	/^inline void edit_t::set_from_length(int32_t l) {$/;"	f	class:vg::edit_t
set_hash_color	viz.cpp	/^void Viz::set_hash_color(const string& str) {$/;"	f	class:vg::Viz
set_het_bias	snarl_caller.cpp	/^void RatioSupportSnarlCaller::set_het_bias(double het_bias, double ref_het_bias) {$/;"	f	class:vg::RatioSupportSnarlCaller
set_id_increment	vg.cpp	/^void VG::set_id_increment(const nid_t& min_id) {$/;"	f	class:vg::VG
set_insertion_bias	snarl_caller.cpp	/^void PoissonSupportSnarlCaller::set_insertion_bias(double insertion_threshold, double small_insertion_bias, double large_insertion_bias) {$/;"	f	class:vg::PoissonSupportSnarlCaller
set_intermediate_file_keeping	index_registry.cpp	/^void IndexRegistry::set_intermediate_file_keeping(bool keep_intermediates) {$/;"	f	class:vg::IndexRegistry
set_intersection	genotyper.cpp	/^template<typename T> inline void set_intersection(const unordered_set<T>& set_1, const unordered_set<T>& set_2,$/;"	f	namespace:vg
set_intron_length_distribution	multipath_mapper.cpp	/^    void MultipathMapper::set_intron_length_distribution(const vector<double>& intron_mixture_weights,$/;"	f	class:vg::MultipathMapper
set_inverse	filter.cpp	/^    void Filter::set_inverse(bool do_inv){$/;"	f	class:vg::Filter
set_is_reverse	path.cpp	/^void mapping_t::set_is_reverse(bool is_rev) {$/;"	f	class:vg::mapping_t
set_is_reverse	position.hpp	/^inline void position_t::set_is_reverse(bool r) {$/;"	f	class:vg::position_t
set_is_reversed	snarl_distance_index.hpp	/^    static void set_is_reversed(gbwtgraph::Payload& code, bool is_reversed) {$/;"	f	struct:vg::MIPayload
set_is_trivial_chain	snarl_distance_index.hpp	/^    static void set_is_trivial_chain(gbwtgraph::Payload& code, bool is_trivial_chain) {$/;"	f	struct:vg::MIPayload
set_log_odds_against_splice	multipath_mapper.cpp	/^    void MultipathMapper::set_log_odds_against_splice(double log_odds) {$/;"	f	class:vg::MultipathMapper
set_mapping_quality	multipath_alignment.hpp	/^    inline void multipath_alignment_t::set_mapping_quality(int32_t q) {$/;"	f	class:vg::multipath_alignment_t
set_max_merge_supression_length	multipath_mapper.cpp	/^    void MultipathMapper::set_max_merge_supression_length() {$/;"	f	class:vg::MultipathMapper
set_min_bp_edge_override	traversal_support.cpp	/^void TraversalSupportFinder::set_min_bp_edge_override(bool bp_override) {$/;"	f	class:vg::TraversalSupportFinder
set_min_depth	filter.cpp	/^    void Filter::set_min_depth(int depth){$/;"	f	class:vg::Filter
set_min_percent_identity	filter.cpp	/^    void Filter::set_min_percent_identity(double pct_id){$/;"	f	class:vg::Filter
set_min_qual	filter.cpp	/^    void Filter::set_min_qual(int qual){$/;"	f	class:vg::Filter
set_min_softclip_length_for_splice	multipath_mapper.cpp	/^    void MultipathMapper::set_min_softclip_length_for_splice(size_t length) {$/;"	f	class:vg::MultipathMapper
set_min_splice_length	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::set_min_splice_length(int64_t min_splice_length) {$/;"	f	class:vg::MultipathAlignmentEmitter
set_min_supports	snarl_caller.cpp	/^void SupportBasedSnarlCaller::set_min_supports(double min_mad_for_call, double min_support_for_call, double min_site_support) {$/;"	f	class:vg::SupportBasedSnarlCaller
set_my_path_position_graph	filter.cpp	/^    void Filter::set_my_path_position_graph(PathPositionHandleGraph* graph){$/;"	f	class:vg::Filter
set_my_vg	filter.cpp	/^    void Filter::set_my_vg(vg::VG* vg){$/;"	f	class:vg::Filter
set_nested	graph_caller.cpp	/^void VCFOutputCaller::set_nested(bool nested) {$/;"	f	class:vg::VCFOutputCaller
set_next	multipath_alignment.hpp	/^    inline void connection_t::set_next(int32_t n) {$/;"	f	class:vg::connection_t
set_next	multipath_alignment.hpp	/^    inline void subpath_t::set_next(size_t i, uint32_t n) {$/;"	f	class:vg::subpath_t
set_node_id	path.cpp	/^void mapping_t::set_node_id(id_t id) {$/;"	f	class:vg::mapping_t
set_node_id	position.hpp	/^inline void position_t::set_node_id(int64_t i) {$/;"	f	class:vg::position_t
set_node_length	snarl_distance_index.hpp	/^    static void set_node_length(gbwtgraph::Payload& code, size_t node_length) {$/;"	f	struct:vg::MIPayload
set_node_record_offset	snarl_distance_index.hpp	/^    static void set_node_record_offset(gbwtgraph::Payload& code, size_t node_record_offset) {$/;"	f	struct:vg::MIPayload
set_offset	position.hpp	/^inline void position_t::set_offset(int64_t o) {$/;"	f	class:vg::position_t
set_option_value	subcommand/options.hpp	/^    void set_option_value(const std::string& option, const T& value) {$/;"	f	struct:vg::subcommand::BaseOptionGroup
set_paired_all	readfilter.hpp	/^    Counts& set_paired_all() {$/;"	f	struct:vg::Counts
set_paired_any	readfilter.hpp	/^    Counts& set_paired_any() {$/;"	f	struct:vg::Counts
set_parent_is_chain	snarl_distance_index.hpp	/^    static void set_parent_is_chain(gbwtgraph::Payload& code, bool parent_is_chain) {$/;"	f	struct:vg::MIPayload
set_parent_is_root	snarl_distance_index.hpp	/^    static void set_parent_is_root(gbwtgraph::Payload& code, bool parent_is_root) {$/;"	f	struct:vg::MIPayload
set_parent_record_offset	snarl_distance_index.hpp	/^    static void set_parent_record_offset(gbwtgraph::Payload& code, size_t parent_record_offset) {$/;"	f	struct:vg::MIPayload
set_path_position	surjector.cpp	/^    void Surjector::set_path_position(const PathPositionHandleGraph* graph, const pos_t& init_surj_pos, const pos_t& final_surj_pos,$/;"	f	class:vg::Surjector
set_prefix	index_registry.cpp	/^void IndexRegistry::set_prefix(const string& prefix) {$/;"	f	class:vg::IndexRegistry
set_prefix_sum	snarl_distance_index.hpp	/^    static void set_prefix_sum(gbwtgraph::Payload& code, size_t prefix_sum) {$/;"	f	struct:vg::MIPayload
set_prev_idx	haplotypes.cpp	/^void haplo_DP_rectangle::set_prev_idx(int64_t index) {$/;"	f	class:haplo::haplo_DP_rectangle
set_quality	multipath_alignment.hpp	/^    inline void multipath_alignment_t::set_quality(const string& q) {$/;"	f	class:vg::multipath_alignment_t
set_read_1_adapter	multipath_mapper.cpp	/^    void MultipathMapper::set_read_1_adapter(const string& adapter) {$/;"	f	class:vg::MultipathMapper
set_read_2_adapter	multipath_mapper.cpp	/^    void MultipathMapper::set_read_2_adapter(const string& adapter) {$/;"	f	class:vg::MultipathMapper
set_read_coverage	multipath_mapper.cpp	/^    void MultipathMapper::set_read_coverage(clustergraph_t& cluster_graph) {$/;"	f	class:vg::MultipathMapper
set_read_group	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::set_read_group(const string& read_group) {$/;"	f	class:vg::MultipathAlignmentEmitter
set_record_offset	snarl_distance_index.hpp	/^    static void set_record_offset(gbwtgraph::Payload& code, size_t record_offset) {$/;"	f	struct:vg::MIPayload
set_region	vcf_buffer.cpp	/^bool VcfBuffer::set_region(const string& contig, int64_t start, int64_t end) {$/;"	f	class:vg::VcfBuffer
set_region	vcf_buffer.cpp	/^bool WindowedVcfBuffer::set_region(const string& contig, int64_t start, int64_t end) {$/;"	f	class:vg::WindowedVcfBuffer
set_remove_failing_edits	filter.cpp	/^    void Filter::set_remove_failing_edits(bool fm){$/;"	f	class:vg::Filter
set_sample_name	multipath_alignment_emitter.cpp	/^void MultipathAlignmentEmitter::set_sample_name(const string& sample_name) {$/;"	f	class:vg::MultipathAlignmentEmitter
set_score	gbwt_extender.cpp	/^void set_score(GaplessExtension& extension, const Aligner* aligner) {$/;"	f	namespace:vg
set_score	multipath_alignment.hpp	/^    inline void connection_t::set_score(int32_t s) {$/;"	f	class:vg::connection_t
set_score	multipath_alignment.hpp	/^    inline void subpath_t::set_score(int32_t s) {$/;"	f	class:vg::subpath_t
set_sequence	multipath_alignment.hpp	/^    inline void multipath_alignment_t::set_sequence(const string& s) {$/;"	f	class:vg::multipath_alignment_t
set_sequence	path.hpp	/^inline void edit_t::set_sequence(const string& s) {$/;"	f	class:vg::edit_t
set_show_progress	graph_caller.cpp	/^void GraphCaller::set_show_progress(bool show_progress) {$/;"	f	class:vg::GraphCaller
set_snarl_values	snarl_seed_clusterer.hpp	/^            void set_snarl_values(const SnarlDistanceIndex& distance_index) {$/;"	f	struct:vg::SnarlDistanceIndexClusterer::SnarlTreeNodeProblem
set_soft_clip_limit	filter.cpp	/^    void Filter::set_soft_clip_limit(int max_clip){$/;"	f	class:vg::Filter
set_source_paths	sampler.cpp	/^void Sampler::set_source_paths(const vector<string>& source_paths,$/;"	f	class:vg::Sampler
set_split_read_limit	filter.cpp	/^    void Filter::set_split_read_limit(int sr){$/;"	f	class:vg::Filter
set_start	multipath_alignment.hpp	/^    inline void multipath_alignment_t::set_start(size_t i, uint32_t s) {$/;"	f	class:vg::multipath_alignment_t
set_support_switch_threshold	traversal_support.cpp	/^void TraversalSupportFinder::set_support_switch_threshold(size_t trav_thresh, size_t node_thresh) {$/;"	f	class:vg::TraversalSupportFinder
set_system_dir	utility.cpp	/^void set_system_dir() {$/;"	f	namespace:vg::temp_file
set_tags	subcommand/gbwt_main.cpp	/^void set_tags(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f
set_target_memory_usage	index_registry.cpp	/^void IndexRegistry::set_target_memory_usage(int64_t bytes) {$/;"	f	class:vg::IndexRegistry
set_to_length	path.hpp	/^inline void edit_t::set_to_length(int32_t l) {$/;"	f	class:vg::edit_t
set_translation	graph_caller.cpp	/^void VCFOutputCaller::set_translation(const unordered_map<nid_t, pair<string, size_t>>* translation) {$/;"	f	class:vg::VCFOutputCaller
set_value	subcommand/options.hpp	/^    virtual void set_value(const T& replacement) {$/;"	f	struct:vg::subcommand::ValueArgSpec
set_window_length	filter.cpp	/^    void Filter::set_window_length(int wind_len){$/;"	f	class:vg::Filter
sha1_variant_name	constructor.hpp	/^    bool sha1_variant_name = true;$/;"	m	class:vg::Constructor
sha1head	utility.cpp	/^const std::string sha1head(const std::string& data, size_t head) {$/;"	f	namespace:vg
sha1sum	utility.cpp	/^const std::string sha1sum(const std::string& data) {$/;"	f	namespace:vg
shallow_contents	snarls.cpp	/^pair<unordered_set<id_t>, unordered_set<edge_t> > SnarlManager::shallow_contents(const Snarl* snarl, const HandleGraph& graph,$/;"	f	class:vg::SnarlManager
share_terminal_positions	multipath_mapper.cpp	/^    bool MultipathMapper::share_terminal_positions(const multipath_alignment_t& multipath_aln_1,$/;"	f	class:vg::MultipathMapper
shift_prune_diff	surjector.hpp	/^        int64_t shift_prune_diff = 16 * 1024;$/;"	m	class:vg::Surjector
short_mem_filter_factor	mapper.hpp	/^    double short_mem_filter_factor = 0.45;$/;"	m	class:vg::BaseMapper
short_mode_name	subcommand/prune_main.cpp	/^std::string short_mode_name(PruningMode mode) {$/;"	f
short_option	subcommand/options.hpp	/^    char short_option;$/;"	m	struct:vg::subcommand::BaseArgSpec
short_options	option.hpp	/^    string short_options;$/;"	m	class:vg::ConfigurableParser
short_opts	option.hpp	/^    string short_opts;$/;"	m	class:vg::BaseOption
shortest_cycle_length	algorithms/shortest_cycle.cpp	/^    size_t shortest_cycle_length(const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
shortest_cycle_length	algorithms/shortest_cycle.cpp	/^    size_t shortest_cycle_length(const HandleGraph* graph, const handle_t& source) {$/;"	f	namespace:vg::algorithms
shortest_cycle_length_internal	algorithms/shortest_cycle.cpp	/^    size_t shortest_cycle_length_internal(const HandleGraph* graph,$/;"	f	namespace:vg::algorithms
shortest_seq_paths	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::shortest_seq_paths(vector<int64_t>& seq_lens_out) {$/;"	f	class:vg::BandedGlobalAligner
should_write_as_w_line	gfa.cpp	/^bool should_write_as_w_line(const PathHandleGraph* graph, path_handle_t path_handle) {$/;"	f	namespace:vg
show_cnv	viz.hpp	/^    bool show_cnv = true;$/;"	m	class:vg::Viz
show_dna	viz.hpp	/^    bool show_dna = true;$/;"	m	class:vg::Viz
show_path_info	deconstructor.hpp	/^    bool show_path_info = false;$/;"	m	class:vg::Deconstructor
show_paths	viz.hpp	/^    bool show_paths = true;$/;"	m	class:vg::Viz
show_progress	gbwt_helper.hpp	/^    bool show_progress = false;$/;"	m	struct:vg::GBWTHandler
show_progress	gbwt_helper.hpp	/^    bool show_progress = false;$/;"	m	struct:vg::RebuildParameters
show_progress	genotyper.hpp	/^    bool show_progress = false;$/;"	m	class:vg::Genotyper
show_progress	graph_caller.hpp	/^    bool show_progress;$/;"	m	class:vg::GraphCaller
show_progress	progressive.hpp	/^    bool show_progress = false;$/;"	m	class:vg::Progressive
show_progress	subcommand/gbwt_main.cpp	/^    bool show_progress = false;$/;"	m	struct:GBWTConfig	file:
show_progress	transcriptome.hpp	/^        bool show_progress = false;$/;"	m	class:vg::Transcriptome
show_progress	vg_set.hpp	/^    bool show_progress = false;$/;"	m	class:vg::VGset
show_structure	packer.cpp	/^ostream& Packer::show_structure(ostream& out) {$/;"	f	class:vg::Packer
show_work	minimizer_mapper.hpp	/^    bool show_work = default_show_work;$/;"	m	class:vg::MinimizerMapper
side_id	haplotype_extracter.cpp	/^static id_t side_id(int64_t side) {$/;"	f	namespace:vg
side_is_end	haplotype_extracter.cpp	/^static bool side_is_end(int64_t side) {$/;"	f	namespace:vg
sides_context	vg.cpp	/^set<pair<NodeSide, bool>> VG::sides_context(nid_t node_id) {$/;"	f	class:vg::VG
sides_from	vg.cpp	/^set<NodeSide> VG::sides_from(NodeSide side) {$/;"	f	class:vg::VG
sides_from	vg.cpp	/^set<NodeSide> VG::sides_from(nid_t id) {$/;"	f	class:vg::VG
sides_of	vg.cpp	/^set<NodeSide> VG::sides_of(NodeSide side) {$/;"	f	class:vg::VG
sides_to	vg.cpp	/^set<NodeSide> VG::sides_to(NodeSide side) {$/;"	f	class:vg::VG
sides_to	vg.cpp	/^set<NodeSide> VG::sides_to(nid_t id) {$/;"	f	class:vg::VG
sigma	mapper.hpp	/^    double sigma = 1.0;$/;"	m	class:vg::FragmentLengthDistribution
signature	alignment.cpp	/^pair<string, string> signature(const Alignment& aln1, const Alignment& aln2) {$/;"	f	namespace:vg
signature	alignment.cpp	/^string signature(const Alignment& aln) {$/;"	f	namespace:vg
simde__m128	simde/x86/sse.h	/^   typedef SIMDE_POWER_ALTIVEC_VECTOR(float) simde__m128;$/;"	t
simde__m128	simde/x86/sse.h	/^   typedef float32x4_t simde__m128;$/;"	t
simde__m128	simde/x86/sse.h	/^   typedef v128_t simde__m128;$/;"	t
simde__m128	simde/x86/sse.h	/^  typedef __m128 simde__m128;$/;"	t
simde__m128	simde/x86/sse.h	/^  typedef simde__m128_private simde__m128;$/;"	t
simde__m128_from_private	simde/x86/sse.h	/^simde__m128_from_private(simde__m128_private v) {$/;"	f
simde__m128_private	simde/x86/sse.h	/^} simde__m128_private;$/;"	t	typeref:union:__anon12
simde__m128_to_altivec_f32	simde/x86/sse.h	/^    simde__m128_to_altivec_f32(simde__m128 value) {$/;"	f
simde__m128_to_private	simde/x86/sse.h	/^simde__m128_to_private(simde__m128 v) {$/;"	f
simde__m128d	simde/x86/sse2.h	/^     typedef SIMDE_POWER_ALTIVEC_VECTOR(double) simde__m128d;$/;"	t
simde__m128d	simde/x86/sse2.h	/^     typedef float64x2_t simde__m128d;$/;"	t
simde__m128d	simde/x86/sse2.h	/^     typedef simde__m128d_private simde__m128d;$/;"	t
simde__m128d	simde/x86/sse2.h	/^   typedef v128_t simde__m128d;$/;"	t
simde__m128d	simde/x86/sse2.h	/^  typedef __m128d simde__m128d;$/;"	t
simde__m128d	simde/x86/sse2.h	/^  typedef simde__m128d_private simde__m128d;$/;"	t
simde__m128d_from_private	simde/x86/sse2.h	/^simde__m128d_from_private(simde__m128d_private v) {$/;"	f
simde__m128d_private	simde/x86/sse2.h	/^} simde__m128d_private;$/;"	t	typeref:union:__anon11
simde__m128d_to_private	simde/x86/sse2.h	/^simde__m128d_to_private(simde__m128d v) {$/;"	f
simde__m128i	simde/x86/sse2.h	/^   typedef int64x2_t simde__m128i;$/;"	t
simde__m128i	simde/x86/sse2.h	/^   typedef v128_t simde__m128i;$/;"	t
simde__m128i	simde/x86/sse2.h	/^  typedef SIMDE_POWER_ALTIVEC_VECTOR(float) simde__m128i;$/;"	t
simde__m128i	simde/x86/sse2.h	/^  typedef __m128i simde__m128i;$/;"	t
simde__m128i	simde/x86/sse2.h	/^  typedef simde__m128i_private simde__m128i;$/;"	t
simde__m128i_from_private	simde/x86/sse2.h	/^simde__m128i_from_private(simde__m128i_private v) {$/;"	f
simde__m128i_private	simde/x86/sse2.h	/^} simde__m128i_private;$/;"	t	typeref:union:__anon10
simde__m128i_to_private	simde/x86/sse2.h	/^simde__m128i_to_private(simde__m128i v) {$/;"	f
simde__m256	simde/x86/avx.h	/^  typedef __m256 simde__m256;$/;"	t
simde__m256	simde/x86/avx.h	/^  typedef simde__m256_private  simde__m256;$/;"	t
simde__m256_from_private	simde/x86/avx.h	/^simde__m256_from_private(simde__m256_private v) {$/;"	f
simde__m256_private	simde/x86/avx.h	/^} simde__m256_private;$/;"	t	typeref:union:__anon7
simde__m256_to_private	simde/x86/avx.h	/^simde__m256_to_private(simde__m256 v) {$/;"	f
simde__m256d	simde/x86/avx.h	/^  typedef __m256d simde__m256d;$/;"	t
simde__m256d	simde/x86/avx.h	/^  typedef simde__m256d_private simde__m256d;$/;"	t
simde__m256d_from_private	simde/x86/avx.h	/^simde__m256d_from_private(simde__m256d_private v) {$/;"	f
simde__m256d_private	simde/x86/avx.h	/^} simde__m256d_private;$/;"	t	typeref:union:__anon8
simde__m256d_to_private	simde/x86/avx.h	/^simde__m256d_to_private(simde__m256d v) {$/;"	f
simde__m256i	simde/x86/avx.h	/^  typedef __m256i simde__m256i;$/;"	t
simde__m256i	simde/x86/avx.h	/^  typedef simde__m256i_private simde__m256i;$/;"	t
simde__m256i_from_private	simde/x86/avx.h	/^simde__m256i_from_private(simde__m256i_private v) {$/;"	f
simde__m256i_private	simde/x86/avx.h	/^} simde__m256i_private;$/;"	t	typeref:union:__anon9
simde__m256i_to_private	simde/x86/avx.h	/^simde__m256i_to_private(simde__m256i v) {$/;"	f
simde__m512	simde/x86/avx512/types.h	/^    typedef simde__m512_private  simde__m512;$/;"	t
simde__m512	simde/x86/avx512/types.h	/^  typedef __m512 simde__m512;$/;"	t
simde__m512_from_private	simde/x86/avx512/types.h	/^simde__m512_from_private(simde__m512_private v) {$/;"	f
simde__m512_private	simde/x86/avx512/types.h	/^} simde__m512_private;$/;"	t	typeref:union:__anon14
simde__m512_to_private	simde/x86/avx512/types.h	/^simde__m512_to_private(simde__m512 v) {$/;"	f
simde__m512d	simde/x86/avx512/types.h	/^    typedef simde__m512d_private simde__m512d;$/;"	t
simde__m512d	simde/x86/avx512/types.h	/^  typedef __m512d simde__m512d;$/;"	t
simde__m512d_from_private	simde/x86/avx512/types.h	/^simde__m512d_from_private(simde__m512d_private v) {$/;"	f
simde__m512d_private	simde/x86/avx512/types.h	/^} simde__m512d_private;$/;"	t	typeref:union:__anon15
simde__m512d_to_private	simde/x86/avx512/types.h	/^simde__m512d_to_private(simde__m512d v) {$/;"	f
simde__m512i	simde/x86/avx512/types.h	/^    typedef simde__m512i_private simde__m512i;$/;"	t
simde__m512i	simde/x86/avx512/types.h	/^  typedef __m512i simde__m512i;$/;"	t
simde__m512i_from_private	simde/x86/avx512/types.h	/^simde__m512i_from_private(simde__m512i_private v) {$/;"	f
simde__m512i_private	simde/x86/avx512/types.h	/^} simde__m512i_private;$/;"	t	typeref:union:__anon16
simde__m512i_to_private	simde/x86/avx512/types.h	/^simde__m512i_to_private(simde__m512i v) {$/;"	f
simde__m64	simde/x86/mmx.h	/^  typedef __m64 simde__m64;$/;"	t
simde__m64	simde/x86/mmx.h	/^  typedef int32x2_t simde__m64;$/;"	t
simde__m64	simde/x86/mmx.h	/^  typedef simde__m64_private simde__m64;$/;"	t
simde__m64_from_private	simde/x86/mmx.h	/^simde__m64_from_private(simde__m64_private v) {$/;"	f
simde__m64_private	simde/x86/mmx.h	/^} simde__m64_private;$/;"	t	typeref:union:__anon17
simde__m64_to_private	simde/x86/mmx.h	/^simde__m64_to_private(simde__m64 v) {$/;"	f
simde__mmask16	simde/x86/avx512/types.h	/^  typedef __mmask16 simde__mmask16;$/;"	t
simde__mmask16	simde/x86/avx512/types.h	/^  typedef uint16_t simde__mmask16;$/;"	t
simde__mmask32	simde/x86/avx512/types.h	/^typedef uint32_t simde__mmask32;$/;"	t
simde__mmask64	simde/x86/avx512/types.h	/^typedef uint64_t simde__mmask64;$/;"	t
simde__mmask8	simde/x86/avx512/types.h	/^  typedef __mmask8 simde__mmask8;$/;"	t
simde__mmask8	simde/x86/avx512/types.h	/^  typedef uint8_t simde__mmask8;$/;"	t
simde_align_assume_to_checked_uncapped	simde/simde-align.h	/^    simde_align_assume_to_checked_uncapped(T* ptr, const size_t alignment, const char* file, int line, const char* ptrname)$/;"	f
simde_align_assume_to_unchecked	simde/simde-align.h	/^    template<typename T> HEDLEY_ALWAYS_INLINE static T* simde_align_assume_to_unchecked(T* ptr, const size_t alignment)$/;"	f
simde_assert	simde/check.h	79;"	d
simde_assert_char	simde/check.h	215;"	d
simde_assert_double	simde/check.h	241;"	d
simde_assert_double_equal	simde/check.h	94;"	d
simde_assert_false	simde/check.h	92;"	d
simde_assert_float	simde/check.h	239;"	d
simde_assert_int	simde/check.h	223;"	d
simde_assert_int16	simde/check.h	250;"	d
simde_assert_int32	simde/check.h	254;"	d
simde_assert_int64	simde/check.h	258;"	d
simde_assert_int8	simde/check.h	246;"	d
simde_assert_llong	simde/check.h	231;"	d
simde_assert_long	simde/check.h	227;"	d
simde_assert_memory_equal	simde/check.h	97;"	d
simde_assert_memory_not_equal	simde/check.h	98;"	d
simde_assert_not_null	simde/check.h	269;"	d
simde_assert_null	simde/check.h	267;"	d
simde_assert_ptr	simde/check.h	243;"	d
simde_assert_ptr_equal	simde/check.h	263;"	d
simde_assert_ptr_not_equal	simde/check.h	265;"	d
simde_assert_ptr_not_null	simde/check.h	273;"	d
simde_assert_ptr_null	simde/check.h	271;"	d
simde_assert_short	simde/check.h	219;"	d
simde_assert_size	simde/check.h	236;"	d
simde_assert_string_equal	simde/check.h	95;"	d
simde_assert_string_not_equal	simde/check.h	96;"	d
simde_assert_true	simde/check.h	91;"	d
simde_assert_type	simde/check.h	212;"	d
simde_assert_type_full	simde/check.h	93;"	d
simde_assert_uchar	simde/check.h	217;"	d
simde_assert_uint	simde/check.h	225;"	d
simde_assert_uint16	simde/check.h	252;"	d
simde_assert_uint32	simde/check.h	256;"	d
simde_assert_uint64	simde/check.h	260;"	d
simde_assert_uint8	simde/check.h	248;"	d
simde_assert_ullong	simde/check.h	233;"	d
simde_assert_ulong	simde/check.h	229;"	d
simde_assert_ushort	simde/check.h	221;"	d
simde_bswap64	simde/simde-common.h	442;"	d
simde_cfloat32	simde/simde-math.h	/^    typedef __complex__ float simde_cfloat32;$/;"	t
simde_cfloat64	simde/simde-math.h	/^    typedef __complex__ double simde_cfloat64;$/;"	t
simde_dbg_assert	simde/debug-trap.h	76;"	d
simde_dbg_assert	simde/debug-trap.h	82;"	d
simde_error	simde/check.h	73;"	d
simde_errorf	simde/check.h	66;"	d
simde_float32	simde/simde-common.h	/^typedef SIMDE_FLOAT32_TYPE simde_float32;$/;"	t
simde_float32_t	simde/arm/neon/types.h	/^  typedef     float32_t     simde_float32_t;$/;"	t
simde_float32_t	simde/arm/neon/types.h	/^  typedef simde_float32 simde_float32_t;$/;"	t
simde_float32x2_t	simde/arm/neon/types.h	/^  typedef   float32x2_t   simde_float32x2_t;$/;"	t
simde_float32x2_t	simde/arm/neon/types.h	/^  typedef simde_float32x2_private simde_float32x2_t;$/;"	t
simde_float32x2x2_t	simde/arm/neon/types.h	/^  typedef float32x2x2_t simde_float32x2x2_t;$/;"	t
simde_float32x2x2_t	simde/arm/neon/types.h	/^  typedef struct simde_float32x2x2_t {$/;"	s
simde_float32x2x2_t	simde/arm/neon/types.h	/^  } simde_float32x2x2_t;$/;"	t	typeref:struct:simde_float32x2x2_t
simde_float32x2x3_t	simde/arm/neon/types.h	/^  typedef float32x2x3_t simde_float32x2x3_t;$/;"	t
simde_float32x2x3_t	simde/arm/neon/types.h	/^  typedef struct simde_float32x2x3_t {$/;"	s
simde_float32x2x3_t	simde/arm/neon/types.h	/^  } simde_float32x2x3_t;$/;"	t	typeref:struct:simde_float32x2x3_t
simde_float32x2x4_t	simde/arm/neon/types.h	/^  typedef float32x2x4_t simde_float32x2x4_t;$/;"	t
simde_float32x2x4_t	simde/arm/neon/types.h	/^  typedef struct simde_float32x2x4_t {$/;"	s
simde_float32x2x4_t	simde/arm/neon/types.h	/^  } simde_float32x2x4_t;$/;"	t	typeref:struct:simde_float32x2x4_t
simde_float32x4_t	simde/arm/neon/types.h	/^  typedef   float32x4_t   simde_float32x4_t;$/;"	t
simde_float32x4_t	simde/arm/neon/types.h	/^  typedef simde_float32x4_private simde_float32x4_t;$/;"	t
simde_float32x4x2_t	simde/arm/neon/types.h	/^  typedef float32x4x2_t simde_float32x4x2_t;$/;"	t
simde_float32x4x2_t	simde/arm/neon/types.h	/^  typedef struct simde_float32x4x2_t {$/;"	s
simde_float32x4x2_t	simde/arm/neon/types.h	/^  } simde_float32x4x2_t;$/;"	t	typeref:struct:simde_float32x4x2_t
simde_float32x4x3_t	simde/arm/neon/types.h	/^  typedef float32x4x3_t simde_float32x4x3_t;$/;"	t
simde_float32x4x3_t	simde/arm/neon/types.h	/^  typedef struct simde_float32x4x3_t {$/;"	s
simde_float32x4x3_t	simde/arm/neon/types.h	/^  } simde_float32x4x3_t;$/;"	t	typeref:struct:simde_float32x4x3_t
simde_float32x4x4_t	simde/arm/neon/types.h	/^  typedef float32x4x4_t simde_float32x4x4_t;$/;"	t
simde_float32x4x4_t	simde/arm/neon/types.h	/^  typedef struct simde_float32x4x4_t {$/;"	s
simde_float32x4x4_t	simde/arm/neon/types.h	/^  } simde_float32x4x4_t;$/;"	t	typeref:struct:simde_float32x4x4_t
simde_float64	simde/simde-common.h	/^typedef SIMDE_FLOAT64_TYPE simde_float64;$/;"	t
simde_float64_t	simde/arm/neon/types.h	/^    typedef     float64_t     simde_float64_t;$/;"	t
simde_float64_t	simde/arm/neon/types.h	/^  typedef simde_float64 simde_float64_t;$/;"	t
simde_float64x1_t	simde/arm/neon/types.h	/^    typedef   float64x1_t   simde_float64x1_t;$/;"	t
simde_float64x1_t	simde/arm/neon/types.h	/^  typedef simde_float64x1_private simde_float64x1_t;$/;"	t
simde_float64x1x2_t	simde/arm/neon/types.h	/^    typedef float64x1x2_t simde_float64x1x2_t;$/;"	t
simde_float64x1x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_float64x1x2_t {$/;"	s
simde_float64x1x2_t	simde/arm/neon/types.h	/^  } simde_float64x1x2_t;$/;"	t	typeref:struct:simde_float64x1x2_t
simde_float64x1x3_t	simde/arm/neon/types.h	/^    typedef float64x1x3_t simde_float64x1x3_t;$/;"	t
simde_float64x1x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_float64x1x3_t {$/;"	s
simde_float64x1x3_t	simde/arm/neon/types.h	/^  } simde_float64x1x3_t;$/;"	t	typeref:struct:simde_float64x1x3_t
simde_float64x1x4_t	simde/arm/neon/types.h	/^    typedef float64x1x4_t simde_float64x1x4_t;$/;"	t
simde_float64x1x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_float64x1x4_t {$/;"	s
simde_float64x1x4_t	simde/arm/neon/types.h	/^  } simde_float64x1x4_t;$/;"	t	typeref:struct:simde_float64x1x4_t
simde_float64x2_t	simde/arm/neon/types.h	/^    typedef   float64x2_t   simde_float64x2_t;$/;"	t
simde_float64x2_t	simde/arm/neon/types.h	/^  typedef simde_float64x2_private simde_float64x2_t;$/;"	t
simde_float64x2x2_t	simde/arm/neon/types.h	/^    typedef float64x2x2_t simde_float64x2x2_t;$/;"	t
simde_float64x2x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_float64x2x2_t {$/;"	s
simde_float64x2x2_t	simde/arm/neon/types.h	/^  } simde_float64x2x2_t;$/;"	t	typeref:struct:simde_float64x2x2_t
simde_float64x2x3_t	simde/arm/neon/types.h	/^    typedef float64x2x3_t simde_float64x2x3_t;$/;"	t
simde_float64x2x3_t	simde/arm/neon/types.h	/^ typedef struct   simde_float64x2x3_t {$/;"	s
simde_float64x2x3_t	simde/arm/neon/types.h	/^ } simde_float64x2x3_t;$/;"	t	typeref:struct:simde_float64x2x3_t
simde_float64x2x4_t	simde/arm/neon/types.h	/^    typedef float64x2x4_t simde_float64x2x4_t;$/;"	t
simde_float64x2x4_t	simde/arm/neon/types.h	/^ typedef struct   simde_float64x2x4_t {$/;"	s
simde_float64x2x4_t	simde/arm/neon/types.h	/^ } simde_float64x2x4_t;$/;"	t	typeref:struct:simde_float64x2x4_t
simde_int128	simde/simde-common.h	/^typedef __int128 simde_int128;$/;"	t
simde_int16x4_t	simde/arm/neon/types.h	/^  typedef     int16x4_t     simde_int16x4_t;$/;"	t
simde_int16x4_t	simde/arm/neon/types.h	/^  typedef simde_int16x4_private simde_int16x4_t;$/;"	t
simde_int16x4x2_t	simde/arm/neon/types.h	/^  typedef   int16x4x2_t   simde_int16x4x2_t;$/;"	t
simde_int16x4x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_int16x4x2_t {$/;"	s
simde_int16x4x2_t	simde/arm/neon/types.h	/^  } simde_int16x4x2_t;$/;"	t	typeref:struct:simde_int16x4x2_t
simde_int16x4x3_t	simde/arm/neon/types.h	/^  typedef   int16x4x3_t   simde_int16x4x3_t;$/;"	t
simde_int16x4x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_int16x4x3_t {$/;"	s
simde_int16x4x3_t	simde/arm/neon/types.h	/^  } simde_int16x4x3_t;$/;"	t	typeref:struct:simde_int16x4x3_t
simde_int16x4x4_t	simde/arm/neon/types.h	/^  typedef   int16x4x4_t   simde_int16x4x4_t;$/;"	t
simde_int16x4x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_int16x4x4_t {$/;"	s
simde_int16x4x4_t	simde/arm/neon/types.h	/^  } simde_int16x4x4_t;$/;"	t	typeref:struct:simde_int16x4x4_t
simde_int16x8_t	simde/arm/neon/types.h	/^  typedef     int16x8_t     simde_int16x8_t;$/;"	t
simde_int16x8_t	simde/arm/neon/types.h	/^  typedef simde_int16x8_private simde_int16x8_t;$/;"	t
simde_int16x8x2_t	simde/arm/neon/types.h	/^  typedef   int16x8x2_t   simde_int16x8x2_t;$/;"	t
simde_int16x8x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_int16x8x2_t {$/;"	s
simde_int16x8x2_t	simde/arm/neon/types.h	/^  } simde_int16x8x2_t;$/;"	t	typeref:struct:simde_int16x8x2_t
simde_int16x8x3_t	simde/arm/neon/types.h	/^  typedef   int16x8x3_t   simde_int16x8x3_t;$/;"	t
simde_int16x8x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_int16x8x3_t {$/;"	s
simde_int16x8x3_t	simde/arm/neon/types.h	/^  } simde_int16x8x3_t;$/;"	t	typeref:struct:simde_int16x8x3_t
simde_int16x8x4_t	simde/arm/neon/types.h	/^  typedef   int16x8x4_t   simde_int16x8x4_t;$/;"	t
simde_int16x8x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_int16x8x4_t {$/;"	s
simde_int16x8x4_t	simde/arm/neon/types.h	/^  } simde_int16x8x4_t;$/;"	t	typeref:struct:simde_int16x8x4_t
simde_int32x2_t	simde/arm/neon/types.h	/^  typedef     int32x2_t     simde_int32x2_t;$/;"	t
simde_int32x2_t	simde/arm/neon/types.h	/^  typedef simde_int32x2_private simde_int32x2_t;$/;"	t
simde_int32x2x2_t	simde/arm/neon/types.h	/^  typedef   int32x2x2_t   simde_int32x2x2_t;$/;"	t
simde_int32x2x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_int32x2x2_t {$/;"	s
simde_int32x2x2_t	simde/arm/neon/types.h	/^  } simde_int32x2x2_t;$/;"	t	typeref:struct:simde_int32x2x2_t
simde_int32x2x3_t	simde/arm/neon/types.h	/^  typedef   int32x2x3_t   simde_int32x2x3_t;$/;"	t
simde_int32x2x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_int32x2x3_t {$/;"	s
simde_int32x2x3_t	simde/arm/neon/types.h	/^  } simde_int32x2x3_t;$/;"	t	typeref:struct:simde_int32x2x3_t
simde_int32x2x4_t	simde/arm/neon/types.h	/^  typedef   int32x2x4_t   simde_int32x2x4_t;$/;"	t
simde_int32x2x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_int32x2x4_t {$/;"	s
simde_int32x2x4_t	simde/arm/neon/types.h	/^  } simde_int32x2x4_t;$/;"	t	typeref:struct:simde_int32x2x4_t
simde_int32x4_t	simde/arm/neon/types.h	/^  typedef     int32x4_t     simde_int32x4_t;$/;"	t
simde_int32x4_t	simde/arm/neon/types.h	/^  typedef simde_int32x4_private simde_int32x4_t;$/;"	t
simde_int32x4x2_t	simde/arm/neon/types.h	/^  typedef   int32x4x2_t   simde_int32x4x2_t;$/;"	t
simde_int32x4x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_int32x4x2_t {$/;"	s
simde_int32x4x2_t	simde/arm/neon/types.h	/^  } simde_int32x4x2_t;$/;"	t	typeref:struct:simde_int32x4x2_t
simde_int32x4x3_t	simde/arm/neon/types.h	/^  typedef   int32x4x3_t   simde_int32x4x3_t;$/;"	t
simde_int32x4x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_int32x4x3_t {$/;"	s
simde_int32x4x3_t	simde/arm/neon/types.h	/^  } simde_int32x4x3_t;$/;"	t	typeref:struct:simde_int32x4x3_t
simde_int32x4x4_t	simde/arm/neon/types.h	/^  typedef   int32x4x4_t   simde_int32x4x4_t;$/;"	t
simde_int32x4x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_int32x4x4_t {$/;"	s
simde_int32x4x4_t	simde/arm/neon/types.h	/^  } simde_int32x4x4_t;$/;"	t	typeref:struct:simde_int32x4x4_t
simde_int64x1_t	simde/arm/neon/types.h	/^  typedef     int64x1_t     simde_int64x1_t;$/;"	t
simde_int64x1_t	simde/arm/neon/types.h	/^  typedef simde_int64x1_private simde_int64x1_t;$/;"	t
simde_int64x1x2_t	simde/arm/neon/types.h	/^  typedef   int64x1x2_t   simde_int64x1x2_t;$/;"	t
simde_int64x1x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_int64x1x2_t {$/;"	s
simde_int64x1x2_t	simde/arm/neon/types.h	/^  } simde_int64x1x2_t;$/;"	t	typeref:struct:simde_int64x1x2_t
simde_int64x1x3_t	simde/arm/neon/types.h	/^  typedef   int64x1x3_t   simde_int64x1x3_t;$/;"	t
simde_int64x1x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_int64x1x3_t {$/;"	s
simde_int64x1x3_t	simde/arm/neon/types.h	/^  } simde_int64x1x3_t;$/;"	t	typeref:struct:simde_int64x1x3_t
simde_int64x1x4_t	simde/arm/neon/types.h	/^  typedef   int64x1x4_t   simde_int64x1x4_t;$/;"	t
simde_int64x1x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_int64x1x4_t {$/;"	s
simde_int64x1x4_t	simde/arm/neon/types.h	/^  } simde_int64x1x4_t;$/;"	t	typeref:struct:simde_int64x1x4_t
simde_int64x2_t	simde/arm/neon/types.h	/^  typedef     int64x2_t     simde_int64x2_t;$/;"	t
simde_int64x2_t	simde/arm/neon/types.h	/^  typedef simde_int64x2_private simde_int64x2_t;$/;"	t
simde_int64x2x2_t	simde/arm/neon/types.h	/^  typedef   int64x2x2_t   simde_int64x2x2_t;$/;"	t
simde_int64x2x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_int64x2x2_t {$/;"	s
simde_int64x2x2_t	simde/arm/neon/types.h	/^  } simde_int64x2x2_t;$/;"	t	typeref:struct:simde_int64x2x2_t
simde_int64x2x3_t	simde/arm/neon/types.h	/^  typedef   int64x2x3_t   simde_int64x2x3_t;$/;"	t
simde_int64x2x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_int64x2x3_t {$/;"	s
simde_int64x2x3_t	simde/arm/neon/types.h	/^  } simde_int64x2x3_t;$/;"	t	typeref:struct:simde_int64x2x3_t
simde_int64x2x4_t	simde/arm/neon/types.h	/^  typedef   int64x2x4_t   simde_int64x2x4_t;$/;"	t
simde_int64x2x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_int64x2x4_t {$/;"	s
simde_int64x2x4_t	simde/arm/neon/types.h	/^  } simde_int64x2x4_t;$/;"	t	typeref:struct:simde_int64x2x4_t
simde_int8x16_t	simde/arm/neon/types.h	/^  typedef     int8x16_t     simde_int8x16_t;$/;"	t
simde_int8x16_t	simde/arm/neon/types.h	/^  typedef simde_int8x16_private simde_int8x16_t;$/;"	t
simde_int8x16x2_t	simde/arm/neon/types.h	/^  typedef   int8x16x2_t   simde_int8x16x2_t;$/;"	t
simde_int8x16x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_int8x16x2_t {$/;"	s
simde_int8x16x2_t	simde/arm/neon/types.h	/^  } simde_int8x16x2_t;$/;"	t	typeref:struct:simde_int8x16x2_t
simde_int8x16x3_t	simde/arm/neon/types.h	/^  typedef   int8x16x3_t   simde_int8x16x3_t;$/;"	t
simde_int8x16x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_int8x16x3_t {$/;"	s
simde_int8x16x3_t	simde/arm/neon/types.h	/^  } simde_int8x16x3_t;$/;"	t	typeref:struct:simde_int8x16x3_t
simde_int8x16x4_t	simde/arm/neon/types.h	/^  typedef   int8x16x4_t   simde_int8x16x4_t;$/;"	t
simde_int8x16x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_int8x16x4_t {$/;"	s
simde_int8x16x4_t	simde/arm/neon/types.h	/^  } simde_int8x16x4_t;$/;"	t	typeref:struct:simde_int8x16x4_t
simde_int8x8_t	simde/arm/neon/types.h	/^  typedef      int8x8_t      simde_int8x8_t;$/;"	t
simde_int8x8_t	simde/arm/neon/types.h	/^  typedef simde_int8x8_private simde_int8x8_t;$/;"	t
simde_int8x8x2_t	simde/arm/neon/types.h	/^  typedef    int8x8x2_t    simde_int8x8x2_t;$/;"	t
simde_int8x8x2_t	simde/arm/neon/types.h	/^  typedef struct    simde_int8x8x2_t {$/;"	s
simde_int8x8x2_t	simde/arm/neon/types.h	/^  } simde_int8x8x2_t;$/;"	t	typeref:struct:simde_int8x8x2_t
simde_int8x8x3_t	simde/arm/neon/types.h	/^  typedef    int8x8x3_t    simde_int8x8x3_t;$/;"	t
simde_int8x8x3_t	simde/arm/neon/types.h	/^  typedef struct    simde_int8x8x3_t {$/;"	s
simde_int8x8x3_t	simde/arm/neon/types.h	/^  } simde_int8x8x3_t;$/;"	t	typeref:struct:simde_int8x8x3_t
simde_int8x8x4_t	simde/arm/neon/types.h	/^  typedef    int8x8x4_t    simde_int8x8x4_t;$/;"	t
simde_int8x8x4_t	simde/arm/neon/types.h	/^  typedef struct    simde_int8x8x4_t {$/;"	s
simde_int8x8x4_t	simde/arm/neon/types.h	/^  } simde_int8x8x4_t;$/;"	t	typeref:struct:simde_int8x8x4_t
simde_kshiftli_mask16	simde/x86/avx512/kshift.h	44;"	d
simde_kshiftli_mask32	simde/x86/avx512/kshift.h	58;"	d
simde_kshiftli_mask64	simde/x86/avx512/kshift.h	72;"	d
simde_kshiftli_mask8	simde/x86/avx512/kshift.h	86;"	d
simde_kshiftri_mask16	simde/x86/avx512/kshift.h	100;"	d
simde_kshiftri_mask32	simde/x86/avx512/kshift.h	114;"	d
simde_kshiftri_mask64	simde/x86/avx512/kshift.h	128;"	d
simde_kshiftri_mask8	simde/x86/avx512/kshift.h	142;"	d
simde_m_empty	simde/x86/mmx.h	766;"	d
simde_m_from_int	simde/x86/mmx.h	704;"	d
simde_m_from_int64	simde/x86/mmx.h	727;"	d
simde_m_maskmovq	simde/x86/sse.h	2595;"	d
simde_m_packssdw	simde/x86/mmx.h	983;"	d
simde_m_packsswb	simde/x86/mmx.h	936;"	d
simde_m_packuswb	simde/x86/mmx.h	1045;"	d
simde_m_paddb	simde/x86/mmx.h	212;"	d
simde_m_paddd	simde/x86/mmx.h	276;"	d
simde_m_paddsb	simde/x86/mmx.h	313;"	d
simde_m_paddsw	simde/x86/mmx.h	383;"	d
simde_m_paddusb	simde/x86/mmx.h	347;"	d
simde_m_paddusw	simde/x86/mmx.h	417;"	d
simde_m_paddw	simde/x86/mmx.h	244;"	d
simde_m_pand	simde/x86/mmx.h	444;"	d
simde_m_pandn	simde/x86/mmx.h	473;"	d
simde_m_pavgb	simde/x86/sse.h	926;"	d
simde_m_pavgw	simde/x86/sse.h	889;"	d
simde_m_pcmpeqb	simde/x86/mmx.h	503;"	d
simde_m_pcmpeqd	simde/x86/mmx.h	563;"	d
simde_m_pcmpeqw	simde/x86/mmx.h	533;"	d
simde_m_pcmpgtb	simde/x86/mmx.h	593;"	d
simde_m_pcmpgtd	simde/x86/mmx.h	653;"	d
simde_m_pcmpgtw	simde/x86/mmx.h	623;"	d
simde_m_pextrw	simde/x86/sse.h	2347;"	d
simde_m_pinsrw	simde/x86/sse.h	2380;"	d
simde_m_pmaddwd	simde/x86/mmx.h	797;"	d
simde_m_pmaxsw	simde/x86/sse.h	2624;"	d
simde_m_pmaxub	simde/x86/sse.h	2690;"	d
simde_m_pminsw	simde/x86/sse.h	2749;"	d
simde_m_pminub	simde/x86/sse.h	2830;"	d
simde_m_pmovmskb	simde/x86/sse.h	2962;"	d
simde_m_pmulhuw	simde/x86/sse.h	3087;"	d
simde_m_pmulhw	simde/x86/mmx.h	830;"	d
simde_m_pmullw	simde/x86/mmx.h	862;"	d
simde_m_por	simde/x86/mmx.h	889;"	d
simde_m_psadbw	simde/x86/sse.h	3429;"	d
simde_m_pshufw	simde/x86/sse.h	3583;"	d
simde_m_pshufw	simde/x86/sse.h	3585;"	d
simde_m_pslld	simde/x86/mmx.h	1455;"	d
simde_m_pslldi	simde/x86/mmx.h	1523;"	d
simde_m_psllq	simde/x86/mmx.h	1581;"	d
simde_m_psllqi	simde/x86/mmx.h	1549;"	d
simde_m_psllw	simde/x86/mmx.h	1415;"	d
simde_m_psllwi	simde/x86/mmx.h	1492;"	d
simde_m_psrad	simde/x86/mmx.h	1900;"	d
simde_m_psradi	simde/x86/mmx.h	1838;"	d
simde_m_psraw	simde/x86/mmx.h	1869;"	d
simde_m_psrawi	simde/x86/mmx.h	1807;"	d
simde_m_psrld	simde/x86/mmx.h	1656;"	d
simde_m_psrldi	simde/x86/mmx.h	1718;"	d
simde_m_psrlq	simde/x86/mmx.h	1776;"	d
simde_m_psrlqi	simde/x86/mmx.h	1744;"	d
simde_m_psrlw	simde/x86/mmx.h	1621;"	d
simde_m_psrlwi	simde/x86/mmx.h	1687;"	d
simde_m_psubb	simde/x86/mmx.h	1932;"	d
simde_m_psubd	simde/x86/mmx.h	1996;"	d
simde_m_psubsb	simde/x86/mmx.h	2032;"	d
simde_m_psubsw	simde/x86/mmx.h	2105;"	d
simde_m_psubusb	simde/x86/mmx.h	2069;"	d
simde_m_psubusw	simde/x86/mmx.h	2142;"	d
simde_m_psubw	simde/x86/mmx.h	1964;"	d
simde_m_punpckhbw	simde/x86/mmx.h	2178;"	d
simde_m_punpckhdq	simde/x86/mmx.h	2240;"	d
simde_m_punpckhwd	simde/x86/mmx.h	2210;"	d
simde_m_punpcklbw	simde/x86/mmx.h	2276;"	d
simde_m_punpckldq	simde/x86/mmx.h	2338;"	d
simde_m_punpcklwd	simde/x86/mmx.h	2308;"	d
simde_m_pxor	simde/x86/mmx.h	2365;"	d
simde_m_to_int	simde/x86/mmx.h	/^simde_m_to_int (simde__m64 a) {$/;"	f
simde_m_to_int64	simde/x86/mmx.h	679;"	d
simde_math_abs	simde/simde-math.h	444;"	d
simde_math_acos	simde/simde-math.h	464;"	d
simde_math_acosf	simde/simde-math.h	474;"	d
simde_math_acosh	simde/simde-math.h	484;"	d
simde_math_acoshf	simde/simde-math.h	494;"	d
simde_math_adds_i16	simde/simde-math.h	/^simde_math_adds_i16(int16_t a, int16_t b) {$/;"	f
simde_math_adds_i32	simde/simde-math.h	/^simde_math_adds_i32(int32_t a, int32_t b) {$/;"	f
simde_math_adds_i64	simde/simde-math.h	/^simde_math_adds_i64(int64_t a, int64_t b) {$/;"	f
simde_math_adds_i8	simde/simde-math.h	/^simde_math_adds_i8(int8_t a, int8_t b) {$/;"	f
simde_math_adds_u16	simde/simde-math.h	/^simde_math_adds_u16(uint16_t a, uint16_t b) {$/;"	f
simde_math_adds_u32	simde/simde-math.h	/^simde_math_adds_u32(uint32_t a, uint32_t b) {$/;"	f
simde_math_adds_u64	simde/simde-math.h	/^simde_math_adds_u64(uint64_t a, uint64_t b) {$/;"	f
simde_math_adds_u8	simde/simde-math.h	/^simde_math_adds_u8(uint8_t a, uint8_t b) {$/;"	f
simde_math_asin	simde/simde-math.h	504;"	d
simde_math_asinf	simde/simde-math.h	514;"	d
simde_math_asinh	simde/simde-math.h	524;"	d
simde_math_asinhf	simde/simde-math.h	534;"	d
simde_math_atan	simde/simde-math.h	544;"	d
simde_math_atan2	simde/simde-math.h	554;"	d
simde_math_atan2f	simde/simde-math.h	564;"	d
simde_math_atanf	simde/simde-math.h	574;"	d
simde_math_atanh	simde/simde-math.h	584;"	d
simde_math_atanhf	simde/simde-math.h	594;"	d
simde_math_cbrt	simde/simde-math.h	604;"	d
simde_math_cbrtf	simde/simde-math.h	614;"	d
simde_math_cdfnorm	simde/simde-math.h	/^  simde_math_cdfnorm(double x) {$/;"	f
simde_math_cdfnorm	simde/simde-math.h	1326;"	d
simde_math_cdfnormf	simde/simde-math.h	/^  simde_math_cdfnormf(float x) {$/;"	f
simde_math_cdfnormf	simde/simde-math.h	1351;"	d
simde_math_cdfnorminv	simde/simde-math.h	/^  simde_math_cdfnorminv(double p) {$/;"	f
simde_math_cdfnorminv	simde/simde-math.h	1422;"	d
simde_math_cdfnorminvf	simde/simde-math.h	/^  simde_math_cdfnorminvf(float p) {$/;"	f
simde_math_cdfnorminvf	simde/simde-math.h	1485;"	d
simde_math_ceil	simde/simde-math.h	624;"	d
simde_math_ceilf	simde/simde-math.h	634;"	d
simde_math_cexp	simde/simde-math.h	1284;"	d
simde_math_cexpf	simde/simde-math.h	1294;"	d
simde_math_cimag	simde/simde-math.h	157;"	d
simde_math_cimagf	simde/simde-math.h	154;"	d
simde_math_copysign	simde/simde-math.h	644;"	d
simde_math_copysignf	simde/simde-math.h	654;"	d
simde_math_cos	simde/simde-math.h	664;"	d
simde_math_cosf	simde/simde-math.h	675;"	d
simde_math_cosh	simde/simde-math.h	690;"	d
simde_math_coshf	simde/simde-math.h	700;"	d
simde_math_creal	simde/simde-math.h	151;"	d
simde_math_crealf	simde/simde-math.h	148;"	d
simde_math_deg2rad	simde/simde-math.h	/^simde_math_deg2rad(double degrees) {$/;"	f
simde_math_deg2radf	simde/simde-math.h	/^simde_math_deg2radf(float degrees) {$/;"	f
simde_math_erf	simde/simde-math.h	710;"	d
simde_math_erfc	simde/simde-math.h	730;"	d
simde_math_erfcf	simde/simde-math.h	740;"	d
simde_math_erfcinv	simde/simde-math.h	/^  simde_math_erfcinv(double x) {$/;"	f
simde_math_erfcinv	simde/simde-math.h	1579;"	d
simde_math_erfcinvf	simde/simde-math.h	/^  simde_math_erfcinvf(float x) {$/;"	f
simde_math_erfcinvf	simde/simde-math.h	1627;"	d
simde_math_erff	simde/simde-math.h	720;"	d
simde_math_erfinv	simde/simde-math.h	/^  simde_math_erfinv(double x) {$/;"	f
simde_math_erfinv	simde/simde-math.h	1511;"	d
simde_math_erfinvf	simde/simde-math.h	/^  simde_math_erfinvf(float x) {$/;"	f
simde_math_erfinvf	simde/simde-math.h	1529;"	d
simde_math_exp	simde/simde-math.h	750;"	d
simde_math_exp10	simde/simde-math.h	809;"	d
simde_math_exp10f	simde/simde-math.h	815;"	d
simde_math_exp2	simde/simde-math.h	790;"	d
simde_math_exp2f	simde/simde-math.h	800;"	d
simde_math_expf	simde/simde-math.h	760;"	d
simde_math_expm1	simde/simde-math.h	770;"	d
simde_math_expm1f	simde/simde-math.h	780;"	d
simde_math_fabs	simde/simde-math.h	822;"	d
simde_math_fabsf	simde/simde-math.h	454;"	d
simde_math_fabsf	simde/simde-math.h	832;"	d
simde_math_floor	simde/simde-math.h	842;"	d
simde_math_floorf	simde/simde-math.h	852;"	d
simde_math_fma	simde/simde-math.h	862;"	d
simde_math_fmaf	simde/simde-math.h	872;"	d
simde_math_fmax	simde/simde-math.h	882;"	d
simde_math_fmaxf	simde/simde-math.h	892;"	d
simde_math_hypot	simde/simde-math.h	902;"	d
simde_math_hypotf	simde/simde-math.h	912;"	d
simde_math_isinf	simde/simde-math.h	341;"	d
simde_math_isinff	simde/simde-math.h	353;"	d
simde_math_isnan	simde/simde-math.h	363;"	d
simde_math_isnanf	simde/simde-math.h	376;"	d
simde_math_isnormal	simde/simde-math.h	386;"	d
simde_math_isnormalf	simde/simde-math.h	396;"	d
simde_math_log	simde/simde-math.h	922;"	d
simde_math_log10	simde/simde-math.h	1002;"	d
simde_math_log10f	simde/simde-math.h	1012;"	d
simde_math_log1p	simde/simde-math.h	962;"	d
simde_math_log1pf	simde/simde-math.h	972;"	d
simde_math_log2	simde/simde-math.h	982;"	d
simde_math_log2f	simde/simde-math.h	992;"	d
simde_math_logb	simde/simde-math.h	942;"	d
simde_math_logbf	simde/simde-math.h	952;"	d
simde_math_logf	simde/simde-math.h	932;"	d
simde_math_modf	simde/simde-math.h	1022;"	d
simde_math_modff	simde/simde-math.h	1032;"	d
simde_math_nearbyint	simde/simde-math.h	1042;"	d
simde_math_nearbyintf	simde/simde-math.h	1052;"	d
simde_math_nextafter	simde/simde-math.h	418;"	d
simde_math_nextafterf	simde/simde-math.h	432;"	d
simde_math_pow	simde/simde-math.h	1062;"	d
simde_math_powf	simde/simde-math.h	1072;"	d
simde_math_rad2deg	simde/simde-math.h	/^simde_math_rad2deg(double radians) {$/;"	f
simde_math_rad2degf	simde/simde-math.h	/^simde_math_rad2degf(float radians) {$/;"	f
simde_math_rint	simde/simde-math.h	1082;"	d
simde_math_rintf	simde/simde-math.h	1092;"	d
simde_math_round	simde/simde-math.h	1102;"	d
simde_math_roundeven	simde/simde-math.h	1124;"	d
simde_math_roundevenf	simde/simde-math.h	1144;"	d
simde_math_roundf	simde/simde-math.h	1112;"	d
simde_math_sin	simde/simde-math.h	1162;"	d
simde_math_sinf	simde/simde-math.h	1172;"	d
simde_math_sinh	simde/simde-math.h	1182;"	d
simde_math_sinhf	simde/simde-math.h	1192;"	d
simde_math_sqrt	simde/simde-math.h	1202;"	d
simde_math_sqrtf	simde/simde-math.h	1212;"	d
simde_math_subs_i16	simde/simde-math.h	/^simde_math_subs_i16(int16_t a, int16_t b) {$/;"	f
simde_math_subs_i32	simde/simde-math.h	/^simde_math_subs_i32(int32_t a, int32_t b) {$/;"	f
simde_math_subs_i64	simde/simde-math.h	/^simde_math_subs_i64(int64_t a, int64_t b) {$/;"	f
simde_math_subs_i8	simde/simde-math.h	/^simde_math_subs_i8(int8_t a, int8_t b) {$/;"	f
simde_math_subs_u16	simde/simde-math.h	/^simde_math_subs_u16(uint16_t a, uint16_t b) {$/;"	f
simde_math_subs_u32	simde/simde-math.h	/^simde_math_subs_u32(uint32_t a, uint32_t b) {$/;"	f
simde_math_subs_u64	simde/simde-math.h	/^simde_math_subs_u64(uint64_t a, uint64_t b) {$/;"	f
simde_math_subs_u8	simde/simde-math.h	/^simde_math_subs_u8(uint8_t a, uint8_t b) {$/;"	f
simde_math_tan	simde/simde-math.h	1222;"	d
simde_math_tanf	simde/simde-math.h	1232;"	d
simde_math_tanh	simde/simde-math.h	1242;"	d
simde_math_tanhf	simde/simde-math.h	1252;"	d
simde_math_trunc	simde/simde-math.h	1262;"	d
simde_math_truncf	simde/simde-math.h	1272;"	d
simde_memcmp	simde/simde-common.h	555;"	d
simde_memcmp	simde/simde-common.h	579;"	d
simde_memcmp	simde/simde-common.h	627;"	d
simde_memcmp_	simde/simde-common.h	/^      simde_memcmp_(const void *s1, const void *s2, size_t n) {$/;"	f
simde_memcpy	simde/simde-common.h	545;"	d
simde_memcpy	simde/simde-common.h	573;"	d
simde_memcpy	simde/simde-common.h	598;"	d
simde_memcpy_	simde/simde-common.h	/^      simde_memcpy_(void* dest, const void* src, size_t len) {$/;"	f
simde_memset	simde/simde-common.h	550;"	d
simde_memset	simde/simde-common.h	576;"	d
simde_memset	simde/simde-common.h	611;"	d
simde_memset_	simde/simde-common.h	/^      simde_memset_(void* s, int c, size_t len) {$/;"	f
simde_mm256_2intersect_epi32	simde/x86/avx512/2intersect.h	/^simde_mm256_2intersect_epi32(simde__m256i a, simde__m256i b, simde__mmask8 *k1, simde__mmask8 *k2) {$/;"	f
simde_mm256_2intersect_epi64	simde/x86/avx512/2intersect.h	/^simde_mm256_2intersect_epi64(simde__m256i a, simde__m256i b, simde__mmask8 *k1, simde__mmask8 *k2) {$/;"	f
simde_mm256_abs_epi16	simde/x86/avx2.h	/^simde_mm256_abs_epi16 (simde__m256i a) {$/;"	f
simde_mm256_abs_epi32	simde/x86/avx2.h	/^simde_mm256_abs_epi32(simde__m256i a) {$/;"	f
simde_mm256_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm256_abs_epi64(simde__m256i a) {$/;"	f
simde_mm256_abs_epi8	simde/x86/avx2.h	/^simde_mm256_abs_epi8 (simde__m256i a) {$/;"	f
simde_mm256_acos_pd	simde/x86/svml.h	/^simde_mm256_acos_pd (simde__m256d a) {$/;"	f
simde_mm256_acos_ps	simde/x86/svml.h	/^simde_mm256_acos_ps (simde__m256 a) {$/;"	f
simde_mm256_acosh_pd	simde/x86/svml.h	/^simde_mm256_acosh_pd (simde__m256d a) {$/;"	f
simde_mm256_acosh_ps	simde/x86/svml.h	/^simde_mm256_acosh_ps (simde__m256 a) {$/;"	f
simde_mm256_add_epi16	simde/x86/avx2.h	/^simde_mm256_add_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_add_epi32	simde/x86/avx2.h	/^simde_mm256_add_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_add_epi64	simde/x86/avx2.h	/^simde_mm256_add_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_add_epi8	simde/x86/avx2.h	/^simde_mm256_add_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_add_pd	simde/x86/avx.h	/^simde_mm256_add_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_add_ps	simde/x86/avx.h	/^simde_mm256_add_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_adds_epi16	simde/x86/avx2.h	/^simde_mm256_adds_epi16(simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_adds_epi8	simde/x86/avx2.h	/^simde_mm256_adds_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_adds_epu16	simde/x86/avx2.h	/^simde_mm256_adds_epu16(simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_adds_epu8	simde/x86/avx2.h	/^simde_mm256_adds_epu8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_addsub_pd	simde/x86/avx.h	/^simde_mm256_addsub_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_addsub_ps	simde/x86/avx.h	/^simde_mm256_addsub_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_alignr_epi8	simde/x86/avx2.h	304;"	d
simde_mm256_alignr_epi8	simde/x86/avx2.h	306;"	d
simde_mm256_and_pd	simde/x86/avx.h	/^simde_mm256_and_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_and_ps	simde/x86/avx.h	/^simde_mm256_and_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_and_si256	simde/x86/avx2.h	/^simde_mm256_and_si256 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_andnot_pd	simde/x86/avx.h	/^simde_mm256_andnot_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_andnot_ps	simde/x86/avx.h	/^simde_mm256_andnot_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_andnot_si256	simde/x86/avx2.h	/^simde_mm256_andnot_si256 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_asin_pd	simde/x86/svml.h	/^simde_mm256_asin_pd (simde__m256d a) {$/;"	f
simde_mm256_asin_ps	simde/x86/svml.h	/^simde_mm256_asin_ps (simde__m256 a) {$/;"	f
simde_mm256_asinh_pd	simde/x86/svml.h	/^simde_mm256_asinh_pd (simde__m256d a) {$/;"	f
simde_mm256_asinh_ps	simde/x86/svml.h	/^simde_mm256_asinh_ps (simde__m256 a) {$/;"	f
simde_mm256_atan2_pd	simde/x86/svml.h	/^simde_mm256_atan2_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_atan2_ps	simde/x86/svml.h	/^simde_mm256_atan2_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_atan_pd	simde/x86/svml.h	/^simde_mm256_atan_pd (simde__m256d a) {$/;"	f
simde_mm256_atan_ps	simde/x86/svml.h	/^simde_mm256_atan_ps (simde__m256 a) {$/;"	f
simde_mm256_atanh_pd	simde/x86/svml.h	/^simde_mm256_atanh_pd (simde__m256d a) {$/;"	f
simde_mm256_atanh_ps	simde/x86/svml.h	/^simde_mm256_atanh_ps (simde__m256 a) {$/;"	f
simde_mm256_avg_epu16	simde/x86/avx2.h	/^simde_mm256_avg_epu16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_avg_epu8	simde/x86/avx2.h	/^simde_mm256_avg_epu8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_blend_epi16	simde/x86/avx2.h	598;"	d
simde_mm256_blend_epi16	simde/x86/avx2.h	600;"	d
simde_mm256_blend_epi32	simde/x86/avx2.h	628;"	d
simde_mm256_blend_epi32	simde/x86/avx2.h	630;"	d
simde_mm256_blend_pd	simde/x86/avx.h	1812;"	d
simde_mm256_blend_pd	simde/x86/avx.h	1814;"	d
simde_mm256_blend_ps	simde/x86/avx.h	1784;"	d
simde_mm256_blend_ps	simde/x86/avx.h	1786;"	d
simde_mm256_blendv_epi8	simde/x86/avx2.h	/^simde_mm256_blendv_epi8(simde__m256i a, simde__m256i b, simde__m256i mask) {$/;"	f
simde_mm256_blendv_epi8	simde/x86/avx2.h	671;"	d
simde_mm256_blendv_pd	simde/x86/avx.h	/^simde_mm256_blendv_pd (simde__m256d a, simde__m256d b, simde__m256d mask) {$/;"	f
simde_mm256_blendv_ps	simde/x86/avx.h	/^simde_mm256_blendv_ps (simde__m256 a, simde__m256 b, simde__m256 mask) {$/;"	f
simde_mm256_broadcast_f32x2	simde/x86/avx512/broadcast.h	/^simde_mm256_broadcast_f32x2 (simde__m128 a) {$/;"	f
simde_mm256_broadcast_f32x4	simde/x86/avx512/broadcast.h	/^simde_mm256_broadcast_f32x4 (simde__m128 a) {$/;"	f
simde_mm256_broadcast_f64x2	simde/x86/avx512/broadcast.h	/^simde_mm256_broadcast_f64x2 (simde__m128d a) {$/;"	f
simde_mm256_broadcast_pd	simde/x86/avx.h	/^simde_mm256_broadcast_pd (simde__m128d const * mem_addr) {$/;"	f
simde_mm256_broadcast_ps	simde/x86/avx.h	/^simde_mm256_broadcast_ps (simde__m128 const * mem_addr) {$/;"	f
simde_mm256_broadcast_sd	simde/x86/avx.h	/^simde_mm256_broadcast_sd (simde_float64 const * a) {$/;"	f
simde_mm256_broadcast_ss	simde/x86/avx.h	/^simde_mm256_broadcast_ss (simde_float32 const * a) {$/;"	f
simde_mm256_broadcastb_epi8	simde/x86/avx2.h	/^simde_mm256_broadcastb_epi8 (simde__m128i a) {$/;"	f
simde_mm256_broadcastd_epi32	simde/x86/avx2.h	/^simde_mm256_broadcastd_epi32 (simde__m128i a) {$/;"	f
simde_mm256_broadcastq_epi64	simde/x86/avx2.h	/^simde_mm256_broadcastq_epi64 (simde__m128i a) {$/;"	f
simde_mm256_broadcastsd_pd	simde/x86/avx2.h	/^simde_mm256_broadcastsd_pd (simde__m128d a) {$/;"	f
simde_mm256_broadcastsi128_si256	simde/x86/avx2.h	/^simde_mm256_broadcastsi128_si256 (simde__m128i a) {$/;"	f
simde_mm256_broadcastss_ps	simde/x86/avx2.h	/^simde_mm256_broadcastss_ps (simde__m128 a) {$/;"	f
simde_mm256_broadcastw_epi16	simde/x86/avx2.h	/^simde_mm256_broadcastw_epi16 (simde__m128i a) {$/;"	f
simde_mm256_bslli_epi128	simde/x86/avx2.h	992;"	d
simde_mm256_bsrli_epi128	simde/x86/avx2.h	1030;"	d
simde_mm256_castpd128_pd256	simde/x86/avx.h	/^simde_mm256_castpd128_pd256 (simde__m128d a) {$/;"	f
simde_mm256_castpd256_pd128	simde/x86/avx.h	/^simde_mm256_castpd256_pd128 (simde__m256d a) {$/;"	f
simde_mm256_castpd_ps	simde/x86/avx.h	/^simde_mm256_castpd_ps (simde__m256d a) {$/;"	f
simde_mm256_castpd_si256	simde/x86/avx.h	/^simde_mm256_castpd_si256 (simde__m256d a) {$/;"	f
simde_mm256_castps128_ps256	simde/x86/avx.h	/^simde_mm256_castps128_ps256 (simde__m128 a) {$/;"	f
simde_mm256_castps256_ps128	simde/x86/avx.h	/^simde_mm256_castps256_ps128 (simde__m256 a) {$/;"	f
simde_mm256_castps_pd	simde/x86/avx.h	/^simde_mm256_castps_pd (simde__m256 a) {$/;"	f
simde_mm256_castps_si256	simde/x86/avx.h	/^simde_mm256_castps_si256 (simde__m256 a) {$/;"	f
simde_mm256_castsi128_si256	simde/x86/avx.h	/^simde_mm256_castsi128_si256 (simde__m128i a) {$/;"	f
simde_mm256_castsi256_pd	simde/x86/avx.h	/^simde_mm256_castsi256_pd (simde__m256i a) {$/;"	f
simde_mm256_castsi256_ps	simde/x86/avx.h	/^simde_mm256_castsi256_ps (simde__m256i a) {$/;"	f
simde_mm256_castsi256_si128	simde/x86/avx.h	/^simde_mm256_castsi256_si128 (simde__m256i a) {$/;"	f
simde_mm256_cbrt_pd	simde/x86/svml.h	/^simde_mm256_cbrt_pd (simde__m256d a) {$/;"	f
simde_mm256_cbrt_ps	simde/x86/svml.h	/^simde_mm256_cbrt_ps (simde__m256 a) {$/;"	f
simde_mm256_cdfnorm_pd	simde/x86/svml.h	/^simde_mm256_cdfnorm_pd (simde__m256d a) {$/;"	f
simde_mm256_cdfnorm_ps	simde/x86/svml.h	/^simde_mm256_cdfnorm_ps (simde__m256 a) {$/;"	f
simde_mm256_cdfnorminv_pd	simde/x86/svml.h	/^simde_mm256_cdfnorminv_pd (simde__m256d a) {$/;"	f
simde_mm256_cdfnorminv_ps	simde/x86/svml.h	/^simde_mm256_cdfnorminv_ps (simde__m256 a) {$/;"	f
simde_mm256_ceil_pd	simde/x86/avx.h	/^simde_mm256_ceil_pd (simde__m256d a) {$/;"	f
simde_mm256_ceil_ps	simde/x86/avx.h	/^simde_mm256_ceil_ps (simde__m256 a) {$/;"	f
simde_mm256_cexp_ps	simde/x86/svml.h	/^simde_mm256_cexp_ps (simde__m256 a) {$/;"	f
simde_mm256_clmulepi64_epi128	simde/x86/clmul.h	306;"	d
simde_mm256_clog_ps	simde/x86/svml.h	/^simde_mm256_clog_ps (simde__m256 a) {$/;"	f
simde_mm256_cmp_pd	simde/x86/avx.h	2887;"	d
simde_mm256_cmp_ps	simde/x86/avx.h	3156;"	d
simde_mm256_cmpeq_epi16	simde/x86/avx2.h	/^simde_mm256_cmpeq_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_cmpeq_epi32	simde/x86/avx2.h	/^simde_mm256_cmpeq_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_cmpeq_epi64	simde/x86/avx2.h	/^simde_mm256_cmpeq_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_cmpeq_epi8	simde/x86/avx2.h	/^simde_mm256_cmpeq_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_cmpgt_epi16	simde/x86/avx2.h	/^simde_mm256_cmpgt_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_cmpgt_epi32	simde/x86/avx2.h	/^simde_mm256_cmpgt_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_cmpgt_epi64	simde/x86/avx2.h	/^simde_mm256_cmpgt_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_cmpgt_epi8	simde/x86/avx2.h	/^simde_mm256_cmpgt_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_cos_pd	simde/x86/svml.h	/^simde_mm256_cos_pd (simde__m256d a) {$/;"	f
simde_mm256_cos_ps	simde/x86/svml.h	/^simde_mm256_cos_ps (simde__m256 a) {$/;"	f
simde_mm256_cosd_pd	simde/x86/svml.h	/^simde_mm256_cosd_pd (simde__m256d a) {$/;"	f
simde_mm256_cosd_ps	simde/x86/svml.h	/^simde_mm256_cosd_ps (simde__m256 a) {$/;"	f
simde_mm256_cosh_pd	simde/x86/svml.h	/^simde_mm256_cosh_pd (simde__m256d a) {$/;"	f
simde_mm256_cosh_ps	simde/x86/svml.h	/^simde_mm256_cosh_ps (simde__m256 a) {$/;"	f
simde_mm256_csqrt_ps	simde/x86/svml.h	/^simde_mm256_csqrt_ps (simde__m256 a) {$/;"	f
simde_mm256_cvtepi16_epi32	simde/x86/avx2.h	/^simde_mm256_cvtepi16_epi32 (simde__m128i a) {$/;"	f
simde_mm256_cvtepi16_epi64	simde/x86/avx2.h	/^simde_mm256_cvtepi16_epi64 (simde__m128i a) {$/;"	f
simde_mm256_cvtepi32_epi64	simde/x86/avx2.h	/^simde_mm256_cvtepi32_epi64 (simde__m128i a) {$/;"	f
simde_mm256_cvtepi32_pd	simde/x86/avx.h	/^simde_mm256_cvtepi32_pd (simde__m128i a) {$/;"	f
simde_mm256_cvtepi32_ps	simde/x86/avx.h	/^  simde_mm256_cvtepi32_ps (simde__m256i a) {$/;"	f
simde_mm256_cvtepi8_epi16	simde/x86/avx2.h	/^simde_mm256_cvtepi8_epi16 (simde__m128i a) {$/;"	f
simde_mm256_cvtepi8_epi32	simde/x86/avx2.h	/^simde_mm256_cvtepi8_epi32 (simde__m128i a) {$/;"	f
simde_mm256_cvtepi8_epi64	simde/x86/avx2.h	/^simde_mm256_cvtepi8_epi64 (simde__m128i a) {$/;"	f
simde_mm256_cvtepu16_epi32	simde/x86/avx2.h	/^simde_mm256_cvtepu16_epi32 (simde__m128i a) {$/;"	f
simde_mm256_cvtepu16_epi64	simde/x86/avx2.h	/^simde_mm256_cvtepu16_epi64 (simde__m128i a) {$/;"	f
simde_mm256_cvtepu32_epi64	simde/x86/avx2.h	/^simde_mm256_cvtepu32_epi64 (simde__m128i a) {$/;"	f
simde_mm256_cvtepu8_epi16	simde/x86/avx2.h	/^simde_mm256_cvtepu8_epi16 (simde__m128i a) {$/;"	f
simde_mm256_cvtepu8_epi32	simde/x86/avx2.h	/^simde_mm256_cvtepu8_epi32 (simde__m128i a) {$/;"	f
simde_mm256_cvtepu8_epi64	simde/x86/avx2.h	/^simde_mm256_cvtepu8_epi64 (simde__m128i a) {$/;"	f
simde_mm256_cvtpd_epi32	simde/x86/avx.h	/^simde_mm256_cvtpd_epi32 (simde__m256d a) {$/;"	f
simde_mm256_cvtpd_ps	simde/x86/avx.h	/^simde_mm256_cvtpd_ps (simde__m256d a) {$/;"	f
simde_mm256_cvtps_epi32	simde/x86/avx.h	/^simde_mm256_cvtps_epi32 (simde__m256 a) {$/;"	f
simde_mm256_cvtps_pd	simde/x86/avx.h	/^simde_mm256_cvtps_pd (simde__m128 a) {$/;"	f
simde_mm256_cvtsd_f64	simde/x86/avx.h	/^simde_mm256_cvtsd_f64 (simde__m256d a) {$/;"	f
simde_mm256_cvtsepi16_epi8	simde/x86/avx512/cvts.h	/^simde_mm256_cvtsepi16_epi8 (simde__m256i a) {$/;"	f
simde_mm256_cvtsepi32_epi16	simde/x86/avx512/cvts.h	/^simde_mm256_cvtsepi32_epi16 (simde__m256i a) {$/;"	f
simde_mm256_cvtsepi32_epi8	simde/x86/avx512/cvts.h	/^simde_mm256_cvtsepi32_epi8 (simde__m256i a) {$/;"	f
simde_mm256_cvtsepi64_epi8	simde/x86/avx512/cvts.h	/^simde_mm256_cvtsepi64_epi8 (simde__m256i a) {$/;"	f
simde_mm256_cvtsi256_si32	simde/x86/avx.h	/^simde_mm256_cvtsi256_si32 (simde__m256i a) {$/;"	f
simde_mm256_cvtss_f32	simde/x86/avx.h	/^simde_mm256_cvtss_f32 (simde__m256 a) {$/;"	f
simde_mm256_cvttpd_epi32	simde/x86/avx.h	/^simde_mm256_cvttpd_epi32 (simde__m256d a) {$/;"	f
simde_mm256_cvttps_epi32	simde/x86/avx.h	/^simde_mm256_cvttps_epi32 (simde__m256 a) {$/;"	f
simde_mm256_div_epi16	simde/x86/svml.h	/^simde_mm256_div_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_div_epi32	simde/x86/svml.h	/^simde_mm256_div_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_div_epi64	simde/x86/svml.h	/^simde_mm256_div_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_div_epi8	simde/x86/svml.h	/^simde_mm256_div_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_div_epu16	simde/x86/svml.h	/^simde_mm256_div_epu16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_div_epu32	simde/x86/svml.h	/^simde_mm256_div_epu32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_div_epu64	simde/x86/svml.h	/^simde_mm256_div_epu64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_div_epu8	simde/x86/svml.h	/^simde_mm256_div_epu8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_div_pd	simde/x86/avx.h	/^simde_mm256_div_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_div_ps	simde/x86/avx.h	/^simde_mm256_div_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_dp_ps	simde/x86/avx.h	3703;"	d
simde_mm256_dp_ps	simde/x86/avx.h	3705;"	d
simde_mm256_erf_pd	simde/x86/svml.h	/^simde_mm256_erf_pd (simde__m256d a) {$/;"	f
simde_mm256_erf_ps	simde/x86/svml.h	/^simde_mm256_erf_ps (simde__m256 a) {$/;"	f
simde_mm256_erfc_pd	simde/x86/svml.h	/^simde_mm256_erfc_pd (simde__m256d a) {$/;"	f
simde_mm256_erfc_ps	simde/x86/svml.h	/^simde_mm256_erfc_ps (simde__m256 a) {$/;"	f
simde_mm256_erfcinv_pd	simde/x86/svml.h	/^simde_mm256_erfcinv_pd (simde__m256d a) {$/;"	f
simde_mm256_erfcinv_ps	simde/x86/svml.h	/^simde_mm256_erfcinv_ps (simde__m256 a) {$/;"	f
simde_mm256_erfinv_pd	simde/x86/svml.h	/^simde_mm256_erfinv_pd (simde__m256d a) {$/;"	f
simde_mm256_erfinv_ps	simde/x86/svml.h	/^simde_mm256_erfinv_ps (simde__m256 a) {$/;"	f
simde_mm256_exp10_pd	simde/x86/svml.h	/^simde_mm256_exp10_pd (simde__m256d a) {$/;"	f
simde_mm256_exp10_ps	simde/x86/svml.h	/^simde_mm256_exp10_ps (simde__m256 a) {$/;"	f
simde_mm256_exp2_pd	simde/x86/svml.h	/^simde_mm256_exp2_pd (simde__m256d a) {$/;"	f
simde_mm256_exp2_ps	simde/x86/svml.h	/^simde_mm256_exp2_ps (simde__m256 a) {$/;"	f
simde_mm256_exp_pd	simde/x86/svml.h	/^simde_mm256_exp_pd (simde__m256d a) {$/;"	f
simde_mm256_exp_ps	simde/x86/svml.h	/^simde_mm256_exp_ps (simde__m256 a) {$/;"	f
simde_mm256_expm1_pd	simde/x86/svml.h	/^simde_mm256_expm1_pd (simde__m256d a) {$/;"	f
simde_mm256_expm1_ps	simde/x86/svml.h	/^simde_mm256_expm1_ps (simde__m256 a) {$/;"	f
simde_mm256_extract_epi16	simde/x86/avx2.h	1604;"	d
simde_mm256_extract_epi32	simde/x86/avx.h	3723;"	d
simde_mm256_extract_epi64	simde/x86/avx.h	3739;"	d
simde_mm256_extract_epi8	simde/x86/avx2.h	1589;"	d
simde_mm256_extractf128_pd	simde/x86/avx.h	3526;"	d
simde_mm256_extractf128_ps	simde/x86/avx.h	3541;"	d
simde_mm256_extractf128_si256	simde/x86/avx.h	3556;"	d
simde_mm256_extracti128_si256	simde/x86/avx2.h	1619;"	d
simde_mm256_floor_pd	simde/x86/avx.h	/^simde_mm256_floor_pd (simde__m256d a) {$/;"	f
simde_mm256_floor_ps	simde/x86/avx.h	/^simde_mm256_floor_ps (simde__m256 a) {$/;"	f
simde_mm256_fmadd_pd	simde/x86/fma.h	/^simde_mm256_fmadd_pd (simde__m256d a, simde__m256d b, simde__m256d c) {$/;"	f
simde_mm256_fmadd_ps	simde/x86/fma.h	/^simde_mm256_fmadd_ps (simde__m256 a, simde__m256 b, simde__m256 c) {$/;"	f
simde_mm256_fmaddsub_pd	simde/x86/fma.h	/^simde_mm256_fmaddsub_pd (simde__m256d a, simde__m256d b, simde__m256d c) {$/;"	f
simde_mm256_fmaddsub_ps	simde/x86/fma.h	/^simde_mm256_fmaddsub_ps (simde__m256 a, simde__m256 b, simde__m256 c) {$/;"	f
simde_mm256_fmsub_pd	simde/x86/fma.h	/^simde_mm256_fmsub_pd (simde__m256d a, simde__m256d b, simde__m256d c) {$/;"	f
simde_mm256_fmsub_ps	simde/x86/fma.h	/^simde_mm256_fmsub_ps (simde__m256 a, simde__m256 b, simde__m256 c) {$/;"	f
simde_mm256_fmsubadd_pd	simde/x86/fma.h	/^simde_mm256_fmsubadd_pd (simde__m256d a, simde__m256d b, simde__m256d c) {$/;"	f
simde_mm256_fmsubadd_ps	simde/x86/fma.h	/^simde_mm256_fmsubadd_ps (simde__m256 a, simde__m256 b, simde__m256 c) {$/;"	f
simde_mm256_fnmadd_pd	simde/x86/fma.h	/^simde_mm256_fnmadd_pd (simde__m256d a, simde__m256d b, simde__m256d c) {$/;"	f
simde_mm256_fnmadd_ps	simde/x86/fma.h	/^simde_mm256_fnmadd_ps (simde__m256 a, simde__m256 b, simde__m256 c) {$/;"	f
simde_mm256_fnmsub_pd	simde/x86/fma.h	/^simde_mm256_fnmsub_pd (simde__m256d a, simde__m256d b, simde__m256d c) {$/;"	f
simde_mm256_fnmsub_ps	simde/x86/fma.h	/^simde_mm256_fnmsub_ps (simde__m256 a, simde__m256 b, simde__m256 c) {$/;"	f
simde_mm256_gf2p8affine_epi64_epi8	simde/x86/gfni.h	357;"	d
simde_mm256_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	459;"	d
simde_mm256_gf2p8mul_epi8	simde/x86/gfni.h	/^simde_mm256_gf2p8mul_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_gf2p8mul_epi8	simde/x86/gfni.h	653;"	d
simde_mm256_hadd_epi16	simde/x86/avx2.h	/^simde_mm256_hadd_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_hadd_epi32	simde/x86/avx2.h	/^simde_mm256_hadd_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_hadd_pd	simde/x86/avx.h	/^simde_mm256_hadd_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_hadd_ps	simde/x86/avx.h	/^simde_mm256_hadd_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_hadds_epi16	simde/x86/avx2.h	/^simde_mm256_hadds_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_hsub_epi16	simde/x86/avx2.h	/^simde_mm256_hsub_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_hsub_epi32	simde/x86/avx2.h	/^simde_mm256_hsub_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_hsub_pd	simde/x86/avx.h	/^simde_mm256_hsub_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_hsub_ps	simde/x86/avx.h	/^simde_mm256_hsub_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_hsubs_epi16	simde/x86/avx2.h	/^simde_mm256_hsubs_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_hypot_pd	simde/x86/svml.h	/^simde_mm256_hypot_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_hypot_ps	simde/x86/svml.h	/^simde_mm256_hypot_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_i32gather_epi32	simde/x86/avx2.h	1710;"	d
simde_mm256_i32gather_epi64	simde/x86/avx2.h	1974;"	d
simde_mm256_i32gather_epi64	simde/x86/avx2.h	1976;"	d
simde_mm256_i32gather_pd	simde/x86/avx2.h	2513;"	d
simde_mm256_i32gather_ps	simde/x86/avx2.h	2253;"	d
simde_mm256_i64gather_epi32	simde/x86/avx2.h	1837;"	d
simde_mm256_i64gather_epi64	simde/x86/avx2.h	2117;"	d
simde_mm256_i64gather_epi64	simde/x86/avx2.h	2119;"	d
simde_mm256_i64gather_pd	simde/x86/avx2.h	2643;"	d
simde_mm256_i64gather_ps	simde/x86/avx2.h	2383;"	d
simde_mm256_idiv_epi32	simde/x86/svml.h	3024;"	d
simde_mm256_idivrem_epi32	simde/x86/svml.h	/^simde_mm256_idivrem_epi32 (simde__m256i* mem_addr, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_insert_epi16	simde/x86/avx.h	3612;"	d
simde_mm256_insert_epi32	simde/x86/avx.h	3630;"	d
simde_mm256_insert_epi64	simde/x86/avx.h	3650;"	d
simde_mm256_insert_epi8	simde/x86/avx.h	3594;"	d
simde_mm256_inserti128_si256	simde/x86/avx2.h	2698;"	d
simde_mm256_invcbrt_pd	simde/x86/svml.h	/^simde_mm256_invcbrt_pd (simde__m256d a) {$/;"	f
simde_mm256_invcbrt_ps	simde/x86/svml.h	/^simde_mm256_invcbrt_ps (simde__m256 a) {$/;"	f
simde_mm256_invsqrt_pd	simde/x86/svml.h	/^simde_mm256_invsqrt_pd (simde__m256d a) {$/;"	f
simde_mm256_invsqrt_ps	simde/x86/svml.h	/^simde_mm256_invsqrt_ps (simde__m256 a) {$/;"	f
simde_mm256_irem_epi32	simde/x86/svml.h	9237;"	d
simde_mm256_lddqu_si256	simde/x86/avx.h	/^simde_mm256_lddqu_si256 (simde__m256i const * mem_addr) {$/;"	f
simde_mm256_load_pd	simde/x86/avx.h	/^simde_mm256_load_pd (const double mem_addr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_mm256_load_ps	simde/x86/avx.h	/^simde_mm256_load_ps (const float mem_addr[HEDLEY_ARRAY_PARAM(8)]) {$/;"	f
simde_mm256_load_si256	simde/x86/avx.h	/^simde_mm256_load_si256 (simde__m256i const * mem_addr) {$/;"	f
simde_mm256_loadu2_m128	simde/x86/avx.h	/^simde_mm256_loadu2_m128 (const float hiaddr[HEDLEY_ARRAY_PARAM(4)], const float loaddr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_mm256_loadu2_m128d	simde/x86/avx.h	/^simde_mm256_loadu2_m128d (const double hiaddr[HEDLEY_ARRAY_PARAM(2)], const double loaddr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_mm256_loadu2_m128i	simde/x86/avx.h	/^simde_mm256_loadu2_m128i (const simde__m128i* hiaddr, const simde__m128i* loaddr) {$/;"	f
simde_mm256_loadu_epi16	simde/x86/avx512/loadu.h	/^simde_mm256_loadu_epi16(void const * mem_addr) {$/;"	f
simde_mm256_loadu_epi32	simde/x86/avx512/loadu.h	/^simde_mm256_loadu_epi32(void const * mem_addr) {$/;"	f
simde_mm256_loadu_epi64	simde/x86/avx512/loadu.h	/^simde_mm256_loadu_epi64(void const * mem_addr) {$/;"	f
simde_mm256_loadu_epi8	simde/x86/avx512/loadu.h	/^simde_mm256_loadu_epi8(void const * mem_addr) {$/;"	f
simde_mm256_loadu_pd	simde/x86/avx.h	/^simde_mm256_loadu_pd (const double a[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_mm256_loadu_ps	simde/x86/avx.h	/^simde_mm256_loadu_ps (const float a[HEDLEY_ARRAY_PARAM(8)]) {$/;"	f
simde_mm256_loadu_si256	simde/x86/avx.h	/^simde_mm256_loadu_si256 (void const * mem_addr) {$/;"	f
simde_mm256_log10_pd	simde/x86/svml.h	/^simde_mm256_log10_pd (simde__m256d a) {$/;"	f
simde_mm256_log10_ps	simde/x86/svml.h	/^simde_mm256_log10_ps (simde__m256 a) {$/;"	f
simde_mm256_log1p_pd	simde/x86/svml.h	/^simde_mm256_log1p_pd (simde__m256d a) {$/;"	f
simde_mm256_log1p_ps	simde/x86/svml.h	/^simde_mm256_log1p_ps (simde__m256 a) {$/;"	f
simde_mm256_log2_pd	simde/x86/svml.h	/^simde_mm256_log2_pd (simde__m256d a) {$/;"	f
simde_mm256_log2_ps	simde/x86/svml.h	/^simde_mm256_log2_ps (simde__m256 a) {$/;"	f
simde_mm256_log_pd	simde/x86/svml.h	/^simde_mm256_log_pd (simde__m256d a) {$/;"	f
simde_mm256_log_ps	simde/x86/svml.h	/^simde_mm256_log_ps (simde__m256 a) {$/;"	f
simde_mm256_logb_pd	simde/x86/svml.h	/^simde_mm256_logb_pd (simde__m256d a) {$/;"	f
simde_mm256_logb_ps	simde/x86/svml.h	/^simde_mm256_logb_ps (simde__m256 a) {$/;"	f
simde_mm256_madd_epi16	simde/x86/avx2.h	/^simde_mm256_madd_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maddubs_epi16	simde/x86/avx2.h	/^simde_mm256_maddubs_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask2_permutex2var_epi16 (simde__m256i a, simde__m256i idx, simde__mmask16 k, simde__m256i b) {$/;"	f
simde_mm256_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask2_permutex2var_epi32 (simde__m256i a, simde__m256i idx, simde__mmask8 k, simde__m256i b) {$/;"	f
simde_mm256_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask2_permutex2var_epi64 (simde__m256i a, simde__m256i idx, simde__mmask8 k, simde__m256i b) {$/;"	f
simde_mm256_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask2_permutex2var_epi8 (simde__m256i a, simde__m256i idx, simde__mmask32 k, simde__m256i b) {$/;"	f
simde_mm256_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask2_permutex2var_pd (simde__m256d a, simde__m256i idx, simde__mmask8 k, simde__m256d b) {$/;"	f
simde_mm256_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask2_permutex2var_ps (simde__m256 a, simde__m256i idx, simde__mmask8 k, simde__m256 b) {$/;"	f
simde_mm256_mask_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm256_mask_abs_epi64(simde__m256i src, simde__mmask8 k, simde__m256i a) {$/;"	f
simde_mm256_mask_add_epi16	simde/x86/avx512/add.h	/^simde_mm256_mask_add_epi16(simde__m256i src, simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_add_epi32	simde/x86/avx512/add.h	/^simde_mm256_mask_add_epi32(simde__m256i src, simde__mmask8 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_add_epi64	simde/x86/avx512/add.h	/^simde_mm256_mask_add_epi64(simde__m256i src, simde__mmask8 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_adds_epi16	simde/x86/avx512/adds.h	/^simde_mm256_mask_adds_epi16(simde__m256i src, simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_adds_epi8	simde/x86/avx512/adds.h	/^simde_mm256_mask_adds_epi8(simde__m256i src, simde__mmask32 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_avg_epu16	simde/x86/avx512/avg.h	/^simde_mm256_mask_avg_epu16(simde__m256i src, simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_avg_epu8	simde/x86/avx512/avg.h	/^simde_mm256_mask_avg_epu8(simde__m256i src, simde__mmask32 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_blend_epi16	simde/x86/avx512/blend.h	/^simde_mm256_mask_blend_epi16(simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_blend_epi32	simde/x86/avx512/blend.h	/^simde_mm256_mask_blend_epi32(simde__mmask8 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_blend_epi64	simde/x86/avx512/blend.h	/^simde_mm256_mask_blend_epi64(simde__mmask8 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_blend_epi8	simde/x86/avx512/blend.h	/^simde_mm256_mask_blend_epi8(simde__mmask32 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_blend_pd	simde/x86/avx512/blend.h	/^simde_mm256_mask_blend_pd(simde__mmask8 k, simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_mask_blend_ps	simde/x86/avx512/blend.h	/^simde_mm256_mask_blend_ps(simde__mmask8 k, simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_mask_broadcast_f32x2	simde/x86/avx512/broadcast.h	/^simde_mm256_mask_broadcast_f32x2(simde__m256 src, simde__mmask8 k, simde__m128 a) {$/;"	f
simde_mm256_mask_broadcast_f32x4	simde/x86/avx512/broadcast.h	/^simde_mm256_mask_broadcast_f32x4(simde__m256 src, simde__mmask8 k, simde__m128 a) {$/;"	f
simde_mm256_mask_broadcast_f64x2	simde/x86/avx512/broadcast.h	/^simde_mm256_mask_broadcast_f64x2(simde__m256d src, simde__mmask8 k, simde__m128d a) {$/;"	f
simde_mm256_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	389;"	d
simde_mm256_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	391;"	d
simde_mm256_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	491;"	d
simde_mm256_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	493;"	d
simde_mm256_mask_gf2p8mul_epi8	simde/x86/gfni.h	/^simde_mm256_mask_gf2p8mul_epi8 (simde__m256i src, simde__mmask32 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_i32gather_epi32	simde/x86/avx2.h	1745;"	d
simde_mm256_mask_i32gather_epi64	simde/x86/avx2.h	2014;"	d
simde_mm256_mask_i32gather_epi64	simde/x86/avx2.h	2016;"	d
simde_mm256_mask_i32gather_pd	simde/x86/avx2.h	2549;"	d
simde_mm256_mask_i32gather_ps	simde/x86/avx2.h	2289;"	d
simde_mm256_mask_i64gather_epi32	simde/x86/avx2.h	1873;"	d
simde_mm256_mask_i64gather_epi64	simde/x86/avx2.h	2156;"	d
simde_mm256_mask_i64gather_epi64	simde/x86/avx2.h	2158;"	d
simde_mm256_mask_i64gather_pd	simde/x86/avx2.h	2679;"	d
simde_mm256_mask_i64gather_ps	simde/x86/avx2.h	2419;"	d
simde_mm256_mask_madd_epi16	simde/x86/avx512/madd.h	/^simde_mm256_mask_madd_epi16 (simde__m256i src, simde__mmask8 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	/^simde_mm256_mask_maddubs_epi16 (simde__m256i src, simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mask_mov_epi16	simde/x86/avx512/mov.h	/^simde_mm256_mask_mov_epi16 (simde__m256i src, simde__mmask16 k, simde__m256i a) {$/;"	f
simde_mm256_mask_mov_epi32	simde/x86/avx512/mov.h	/^simde_mm256_mask_mov_epi32 (simde__m256i src, simde__mmask8 k, simde__m256i a) {$/;"	f
simde_mm256_mask_mov_epi64	simde/x86/avx512/mov.h	/^simde_mm256_mask_mov_epi64 (simde__m256i src, simde__mmask8 k, simde__m256i a) {$/;"	f
simde_mm256_mask_mov_epi8	simde/x86/avx512/mov.h	/^simde_mm256_mask_mov_epi8 (simde__m256i src, simde__mmask32 k, simde__m256i a) {$/;"	f
simde_mm256_mask_mov_pd	simde/x86/avx512/mov.h	/^simde_mm256_mask_mov_pd (simde__m256d src, simde__mmask8 k, simde__m256d a) {$/;"	f
simde_mm256_mask_mov_ps	simde/x86/avx512/mov.h	/^simde_mm256_mask_mov_ps (simde__m256 src, simde__mmask8 k, simde__m256 a) {$/;"	f
simde_mm256_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask_permutex2var_epi16 (simde__m256i a, simde__mmask16 k, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask_permutex2var_epi32 (simde__m256i a, simde__mmask8 k, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask_permutex2var_epi64 (simde__m256i a, simde__mmask8 k, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask_permutex2var_epi8 (simde__m256i a, simde__mmask32 k, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask_permutex2var_pd (simde__m256d a, simde__mmask8 k, simde__m256i idx, simde__m256d b) {$/;"	f
simde_mm256_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm256_mask_permutex2var_ps (simde__m256 a, simde__mmask8 k, simde__m256i idx, simde__m256 b) {$/;"	f
simde_mm256_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm256_mask_permutexvar_epi16 (simde__m256i src, simde__mmask16 k, simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_mask_permutexvar_epi32	simde/x86/avx512/permutexvar.h	/^simde_mm256_mask_permutexvar_epi32 (simde__m256i src, simde__mmask8 k, simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_mask_permutexvar_epi64	simde/x86/avx512/permutexvar.h	/^simde_mm256_mask_permutexvar_epi64 (simde__m256i src, simde__mmask8 k, simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm256_mask_permutexvar_epi8 (simde__m256i src, simde__mmask32 k, simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_mask_permutexvar_pd	simde/x86/avx512/permutexvar.h	/^simde_mm256_mask_permutexvar_pd (simde__m256d src, simde__mmask8 k, simde__m256i idx, simde__m256d a) {$/;"	f
simde_mm256_mask_permutexvar_ps	simde/x86/avx512/permutexvar.h	/^simde_mm256_mask_permutexvar_ps (simde__m256 src, simde__mmask8 k, simde__m256i idx, simde__m256 a) {$/;"	f
simde_mm256_mask_shuffle_f32x4	simde/x86/avx512/shuffle.h	124;"	d
simde_mm256_mask_shuffle_f64x2	simde/x86/avx512/shuffle.h	132;"	d
simde_mm256_mask_shuffle_i32x4	simde/x86/avx512/shuffle.h	120;"	d
simde_mm256_mask_shuffle_i64x2	simde/x86/avx512/shuffle.h	128;"	d
simde_mm256_maskload_epi32	simde/x86/avx2.h	/^simde_mm256_maskload_epi32 (const int32_t mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m256i mask) {$/;"	f
simde_mm256_maskload_epi64	simde/x86/avx2.h	/^simde_mm256_maskload_epi64 (const int64_t mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m256i mask) {$/;"	f
simde_mm256_maskload_pd	simde/x86/avx.h	/^simde_mm256_maskload_pd (const simde_float64 mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m256i mask) {$/;"	f
simde_mm256_maskload_ps	simde/x86/avx.h	/^simde_mm256_maskload_ps (const simde_float32 mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m256i mask) {$/;"	f
simde_mm256_maskstore_epi32	simde/x86/avx2.h	/^simde_mm256_maskstore_epi32 (int32_t mem_addr[HEDLEY_ARRAY_PARAM(8)], simde__m256i mask, simde__m256i a) {$/;"	f
simde_mm256_maskstore_epi64	simde/x86/avx2.h	/^simde_mm256_maskstore_epi64 (int64_t mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m256i mask, simde__m256i a) {$/;"	f
simde_mm256_maskstore_pd	simde/x86/avx.h	/^simde_mm256_maskstore_pd (simde_float64 mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m256i mask, simde__m256d a) {$/;"	f
simde_mm256_maskstore_ps	simde/x86/avx.h	/^simde_mm256_maskstore_ps (simde_float32 mem_addr[HEDLEY_ARRAY_PARAM(8)], simde__m256i mask, simde__m256 a) {$/;"	f
simde_mm256_maskz_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm256_maskz_abs_epi64(simde__mmask8 k, simde__m256i a) {$/;"	f
simde_mm256_maskz_add_epi16	simde/x86/avx512/add.h	/^simde_mm256_maskz_add_epi16(simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_add_epi32	simde/x86/avx512/add.h	/^simde_mm256_maskz_add_epi32(simde__mmask8 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_add_epi64	simde/x86/avx512/add.h	/^simde_mm256_maskz_add_epi64(simde__mmask8 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_adds_epi16	simde/x86/avx512/adds.h	/^simde_mm256_maskz_adds_epi16(simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_adds_epi8	simde/x86/avx512/adds.h	/^simde_mm256_maskz_adds_epi8(simde__mmask32 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_avg_epu16	simde/x86/avx512/avg.h	/^simde_mm256_maskz_avg_epu16(simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_avg_epu8	simde/x86/avx512/avg.h	/^simde_mm256_maskz_avg_epu8(simde__mmask32 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_broadcast_f32x2	simde/x86/avx512/broadcast.h	/^simde_mm256_maskz_broadcast_f32x2(simde__mmask8 k, simde__m128 a) {$/;"	f
simde_mm256_maskz_broadcast_f32x4	simde/x86/avx512/broadcast.h	/^simde_mm256_maskz_broadcast_f32x4(simde__mmask8 k, simde__m128 a) {$/;"	f
simde_mm256_maskz_broadcast_f64x2	simde/x86/avx512/broadcast.h	/^simde_mm256_maskz_broadcast_f64x2(simde__mmask8 k, simde__m128d a) {$/;"	f
simde_mm256_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	419;"	d
simde_mm256_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	421;"	d
simde_mm256_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	521;"	d
simde_mm256_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	523;"	d
simde_mm256_maskz_gf2p8mul_epi8	simde/x86/gfni.h	/^simde_mm256_maskz_gf2p8mul_epi8 (simde__mmask32 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_madd_epi16	simde/x86/avx512/madd.h	/^simde_mm256_maskz_madd_epi16 (simde__mmask8 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	/^simde_mm256_maskz_maddubs_epi16 (simde__mmask16 k, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_maskz_mov_epi16	simde/x86/avx512/mov.h	/^simde_mm256_maskz_mov_epi16 (simde__mmask16 k, simde__m256i a) {$/;"	f
simde_mm256_maskz_mov_epi32	simde/x86/avx512/mov.h	/^simde_mm256_maskz_mov_epi32 (simde__mmask8 k, simde__m256i a) {$/;"	f
simde_mm256_maskz_mov_epi64	simde/x86/avx512/mov.h	/^simde_mm256_maskz_mov_epi64 (simde__mmask8 k, simde__m256i a) {$/;"	f
simde_mm256_maskz_mov_epi8	simde/x86/avx512/mov.h	/^simde_mm256_maskz_mov_epi8 (simde__mmask32 k, simde__m256i a) {$/;"	f
simde_mm256_maskz_mov_pd	simde/x86/avx512/mov.h	/^simde_mm256_maskz_mov_pd (simde__mmask8 k, simde__m256d a) {$/;"	f
simde_mm256_maskz_mov_ps	simde/x86/avx512/mov.h	/^simde_mm256_maskz_mov_ps (simde__mmask8 k, simde__m256 a) {$/;"	f
simde_mm256_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm256_maskz_permutex2var_epi16 (simde__mmask16 k, simde__m256i a, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm256_maskz_permutex2var_epi32 (simde__mmask8 k, simde__m256i a, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm256_maskz_permutex2var_epi64 (simde__mmask8 k, simde__m256i a, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm256_maskz_permutex2var_epi8 (simde__mmask32 k, simde__m256i a, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm256_maskz_permutex2var_pd (simde__mmask8 k, simde__m256d a, simde__m256i idx, simde__m256d b) {$/;"	f
simde_mm256_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm256_maskz_permutex2var_ps (simde__mmask8 k, simde__m256 a, simde__m256i idx, simde__m256 b) {$/;"	f
simde_mm256_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm256_maskz_permutexvar_epi16 (simde__mmask16 k, simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_maskz_permutexvar_epi32	simde/x86/avx512/permutexvar.h	/^simde_mm256_maskz_permutexvar_epi32 (simde__mmask8 k, simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_maskz_permutexvar_epi64	simde/x86/avx512/permutexvar.h	/^simde_mm256_maskz_permutexvar_epi64 (simde__mmask8 k, simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm256_maskz_permutexvar_epi8 (simde__mmask32 k, simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_maskz_permutexvar_pd	simde/x86/avx512/permutexvar.h	/^simde_mm256_maskz_permutexvar_pd (simde__mmask8 k, simde__m256i idx, simde__m256d a) {$/;"	f
simde_mm256_maskz_permutexvar_ps	simde/x86/avx512/permutexvar.h	/^simde_mm256_maskz_permutexvar_ps (simde__mmask8 k, simde__m256i idx, simde__m256 a) {$/;"	f
simde_mm256_maskz_shuffle_f32x4	simde/x86/avx512/shuffle.h	123;"	d
simde_mm256_maskz_shuffle_f64x2	simde/x86/avx512/shuffle.h	131;"	d
simde_mm256_maskz_shuffle_i32x4	simde/x86/avx512/shuffle.h	119;"	d
simde_mm256_maskz_shuffle_i64x2	simde/x86/avx512/shuffle.h	127;"	d
simde_mm256_max_epi16	simde/x86/avx2.h	/^simde_mm256_max_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_max_epi32	simde/x86/avx2.h	/^simde_mm256_max_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_max_epi8	simde/x86/avx2.h	/^simde_mm256_max_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_max_epu16	simde/x86/avx2.h	/^simde_mm256_max_epu16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_max_epu32	simde/x86/avx2.h	/^simde_mm256_max_epu32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_max_epu8	simde/x86/avx2.h	/^simde_mm256_max_epu8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_max_pd	simde/x86/avx.h	/^simde_mm256_max_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_max_ps	simde/x86/avx.h	/^simde_mm256_max_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_min_epi16	simde/x86/avx2.h	/^simde_mm256_min_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_min_epi32	simde/x86/avx2.h	/^simde_mm256_min_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_min_epi8	simde/x86/avx2.h	/^simde_mm256_min_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_min_epu16	simde/x86/avx2.h	/^simde_mm256_min_epu16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_min_epu32	simde/x86/avx2.h	/^simde_mm256_min_epu32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_min_epu8	simde/x86/avx2.h	/^simde_mm256_min_epu8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_min_pd	simde/x86/avx.h	/^simde_mm256_min_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_min_ps	simde/x86/avx.h	/^simde_mm256_min_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_movedup_pd	simde/x86/avx.h	/^simde_mm256_movedup_pd (simde__m256d a) {$/;"	f
simde_mm256_movehdup_ps	simde/x86/avx.h	/^simde_mm256_movehdup_ps (simde__m256 a) {$/;"	f
simde_mm256_moveldup_ps	simde/x86/avx.h	/^simde_mm256_moveldup_ps (simde__m256 a) {$/;"	f
simde_mm256_movemask_epi8	simde/x86/avx2.h	/^simde_mm256_movemask_epi8 (simde__m256i a) {$/;"	f
simde_mm256_movemask_pd	simde/x86/avx.h	/^simde_mm256_movemask_pd (simde__m256d a) {$/;"	f
simde_mm256_movemask_ps	simde/x86/avx.h	/^simde_mm256_movemask_ps (simde__m256 a) {$/;"	f
simde_mm256_movepi16_mask	simde/x86/avx512/mov_mask.h	/^simde_mm256_movepi16_mask (simde__m256i a) {$/;"	f
simde_mm256_movepi32_mask	simde/x86/avx512/mov_mask.h	/^simde_mm256_movepi32_mask (simde__m256i a) {$/;"	f
simde_mm256_movepi64_mask	simde/x86/avx512/mov_mask.h	/^simde_mm256_movepi64_mask (simde__m256i a) {$/;"	f
simde_mm256_movepi8_mask	simde/x86/avx512/mov_mask.h	/^simde_mm256_movepi8_mask (simde__m256i a) {$/;"	f
simde_mm256_movm_epi16	simde/x86/avx512/movm.h	/^simde_mm256_movm_epi16 (simde__mmask16 k) {$/;"	f
simde_mm256_movm_epi32	simde/x86/avx512/movm.h	/^simde_mm256_movm_epi32 (simde__mmask8 k) {$/;"	f
simde_mm256_movm_epi64	simde/x86/avx512/movm.h	/^simde_mm256_movm_epi64 (simde__mmask8 k) {$/;"	f
simde_mm256_movm_epi8	simde/x86/avx512/movm.h	/^simde_mm256_movm_epi8 (simde__mmask32 k) {$/;"	f
simde_mm256_mpsadbw_epu8	simde/x86/avx2.h	3365;"	d
simde_mm256_mpsadbw_epu8	simde/x86/avx2.h	3367;"	d
simde_mm256_mul_epi32	simde/x86/avx2.h	/^simde_mm256_mul_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mul_epu32	simde/x86/avx2.h	/^simde_mm256_mul_epu32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mul_pd	simde/x86/avx.h	/^simde_mm256_mul_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_mul_ps	simde/x86/avx.h	/^simde_mm256_mul_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_mulhi_epi16	simde/x86/avx2.h	/^simde_mm256_mulhi_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mulhi_epu16	simde/x86/avx2.h	/^simde_mm256_mulhi_epu16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mulhrs_epi16	simde/x86/avx2.h	/^simde_mm256_mulhrs_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mullo_epi16	simde/x86/avx2.h	/^simde_mm256_mullo_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_mullo_epi32	simde/x86/avx2.h	/^simde_mm256_mullo_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_or_pd	simde/x86/avx.h	/^simde_mm256_or_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_or_ps	simde/x86/avx.h	/^simde_mm256_or_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_or_si256	simde/x86/avx2.h	/^simde_mm256_or_si256 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_packs_epi16	simde/x86/avx2.h	/^simde_mm256_packs_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_packs_epi32	simde/x86/avx2.h	/^simde_mm256_packs_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_packus_epi16	simde/x86/avx2.h	/^simde_mm256_packus_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_packus_epi32	simde/x86/avx2.h	/^simde_mm256_packus_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_permute2f128_pd	simde/x86/avx.h	4738;"	d
simde_mm256_permute2f128_ps	simde/x86/avx.h	4716;"	d
simde_mm256_permute2f128_si128	simde/x86/avx.h	4760;"	d
simde_mm256_permute2x128_si256	simde/x86/avx2.h	3752;"	d
simde_mm256_permute4x64_epi64	simde/x86/avx2.h	3775;"	d
simde_mm256_permute4x64_pd	simde/x86/avx2.h	3798;"	d
simde_mm256_permute_pd	simde/x86/avx.h	4551;"	d
simde_mm256_permute_ps	simde/x86/avx.h	4528;"	d
simde_mm256_permutevar8x32_epi32	simde/x86/avx2.h	/^simde_mm256_permutevar8x32_epi32 (simde__m256i a, simde__m256i idx) {$/;"	f
simde_mm256_permutevar8x32_ps	simde/x86/avx2.h	/^simde_mm256_permutevar8x32_ps (simde__m256 a, simde__m256i idx) {$/;"	f
simde_mm256_permutevar_pd	simde/x86/avx.h	/^simde_mm256_permutevar_pd (simde__m256d a, simde__m256i b) {$/;"	f
simde_mm256_permutevar_ps	simde/x86/avx.h	/^simde_mm256_permutevar_ps (simde__m256 a, simde__m256i b) {$/;"	f
simde_mm256_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm256_permutex2var_epi16 (simde__m256i a, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm256_permutex2var_epi32 (simde__m256i a, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm256_permutex2var_epi64 (simde__m256i a, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm256_permutex2var_epi8 (simde__m256i a, simde__m256i idx, simde__m256i b) {$/;"	f
simde_mm256_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm256_permutex2var_pd (simde__m256d a, simde__m256i idx, simde__m256d b) {$/;"	f
simde_mm256_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm256_permutex2var_ps (simde__m256 a, simde__m256i idx, simde__m256 b) {$/;"	f
simde_mm256_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm256_permutexvar_epi16 (simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_permutexvar_epi32	simde/x86/avx512/permutexvar.h	/^simde_mm256_permutexvar_epi32 (simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_permutexvar_epi64	simde/x86/avx512/permutexvar.h	/^simde_mm256_permutexvar_epi64 (simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm256_permutexvar_epi8 (simde__m256i idx, simde__m256i a) {$/;"	f
simde_mm256_permutexvar_pd	simde/x86/avx512/permutexvar.h	/^simde_mm256_permutexvar_pd (simde__m256i idx, simde__m256d a) {$/;"	f
simde_mm256_permutexvar_ps	simde/x86/avx512/permutexvar.h	/^simde_mm256_permutexvar_ps (simde__m256i idx, simde__m256 a) {$/;"	f
simde_mm256_pow_pd	simde/x86/svml.h	/^simde_mm256_pow_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_pow_ps	simde/x86/svml.h	/^simde_mm256_pow_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_rcp_ps	simde/x86/avx.h	/^simde_mm256_rcp_ps (simde__m256 a) {$/;"	f
simde_mm256_rem_epi16	simde/x86/svml.h	/^simde_mm256_rem_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_rem_epi32	simde/x86/svml.h	/^simde_mm256_rem_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_rem_epi64	simde/x86/svml.h	/^simde_mm256_rem_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_rem_epi8	simde/x86/svml.h	/^simde_mm256_rem_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_rem_epu16	simde/x86/svml.h	/^simde_mm256_rem_epu16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_rem_epu32	simde/x86/svml.h	/^simde_mm256_rem_epu32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_rem_epu64	simde/x86/svml.h	/^simde_mm256_rem_epu64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_rem_epu8	simde/x86/svml.h	/^simde_mm256_rem_epu8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_round_pd	simde/x86/avx.h	/^simde_mm256_round_pd (simde__m256d a, const int rounding) {$/;"	f
simde_mm256_round_pd	simde/x86/avx.h	2185;"	d
simde_mm256_round_ps	simde/x86/avx.h	/^simde_mm256_round_ps (simde__m256 a, const int rounding) {$/;"	f
simde_mm256_round_ps	simde/x86/avx.h	2123;"	d
simde_mm256_rsqrt_ps	simde/x86/avx.h	/^simde_mm256_rsqrt_ps (simde__m256 a) {$/;"	f
simde_mm256_sad_epu8	simde/x86/avx2.h	/^simde_mm256_sad_epu8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_set1_epi16	simde/x86/avx.h	/^simde_mm256_set1_epi16 (int16_t a) {$/;"	f
simde_mm256_set1_epi32	simde/x86/avx.h	/^simde_mm256_set1_epi32 (int32_t a) {$/;"	f
simde_mm256_set1_epi64x	simde/x86/avx.h	/^simde_mm256_set1_epi64x (int64_t a) {$/;"	f
simde_mm256_set1_epi8	simde/x86/avx.h	/^simde_mm256_set1_epi8 (int8_t a) {$/;"	f
simde_mm256_set1_pd	simde/x86/avx.h	/^simde_mm256_set1_pd (simde_float64 a) {$/;"	f
simde_mm256_set1_ps	simde/x86/avx.h	/^simde_mm256_set1_ps (simde_float32 a) {$/;"	f
simde_mm256_set_epi16	simde/x86/avx.h	/^simde_mm256_set_epi16 (int16_t e15, int16_t e14, int16_t e13, int16_t e12,$/;"	f
simde_mm256_set_epi32	simde/x86/avx.h	/^simde_mm256_set_epi32 (int32_t e7, int32_t e6, int32_t e5, int32_t e4,$/;"	f
simde_mm256_set_epi64x	simde/x86/avx.h	/^simde_mm256_set_epi64x (int64_t  e3, int64_t  e2, int64_t  e1, int64_t  e0) {$/;"	f
simde_mm256_set_epi8	simde/x86/avx.h	/^simde_mm256_set_epi8 (int8_t e31, int8_t e30, int8_t e29, int8_t e28,$/;"	f
simde_mm256_set_m128	simde/x86/avx.h	/^simde_mm256_set_m128 (simde__m128 e1, simde__m128 e0) {$/;"	f
simde_mm256_set_m128d	simde/x86/avx.h	/^simde_mm256_set_m128d (simde__m128d e1, simde__m128d e0) {$/;"	f
simde_mm256_set_m128i	simde/x86/avx.h	/^simde_mm256_set_m128i (simde__m128i e1, simde__m128i e0) {$/;"	f
simde_mm256_set_pd	simde/x86/avx.h	/^simde_mm256_set_pd (simde_float64 e3, simde_float64 e2, simde_float64 e1, simde_float64 e0) {$/;"	f
simde_mm256_set_ps	simde/x86/avx.h	/^simde_mm256_set_ps (simde_float32 e7, simde_float32 e6, simde_float32 e5, simde_float32 e4,$/;"	f
simde_mm256_setr_epi16	simde/x86/avx.h	/^simde_mm256_setr_epi16 ($/;"	f
simde_mm256_setr_epi32	simde/x86/avx.h	/^simde_mm256_setr_epi32 ($/;"	f
simde_mm256_setr_epi64x	simde/x86/avx.h	/^simde_mm256_setr_epi64x (int64_t  e3, int64_t  e2, int64_t  e1, int64_t  e0) {$/;"	f
simde_mm256_setr_epi8	simde/x86/avx.h	/^simde_mm256_setr_epi8 ($/;"	f
simde_mm256_setr_m128	simde/x86/avx.h	/^simde_mm256_setr_m128 (simde__m128 lo, simde__m128 hi) {$/;"	f
simde_mm256_setr_m128d	simde/x86/avx.h	/^simde_mm256_setr_m128d (simde__m128d lo, simde__m128d hi) {$/;"	f
simde_mm256_setr_m128i	simde/x86/avx.h	/^simde_mm256_setr_m128i (simde__m128i lo, simde__m128i hi) {$/;"	f
simde_mm256_setr_pd	simde/x86/avx.h	/^simde_mm256_setr_pd (simde_float64  e3, simde_float64  e2, simde_float64  e1, simde_float64  e0) {$/;"	f
simde_mm256_setr_ps	simde/x86/avx.h	/^simde_mm256_setr_ps ($/;"	f
simde_mm256_setzero_pd	simde/x86/avx.h	/^simde_mm256_setzero_pd (void) {$/;"	f
simde_mm256_setzero_ps	simde/x86/avx.h	/^simde_mm256_setzero_ps (void) {$/;"	f
simde_mm256_setzero_si256	simde/x86/avx.h	/^simde_mm256_setzero_si256 (void) {$/;"	f
simde_mm256_shuffle_epi32	simde/x86/avx2.h	3936;"	d
simde_mm256_shuffle_epi32	simde/x86/avx2.h	3938;"	d
simde_mm256_shuffle_epi32	simde/x86/avx2.h	3943;"	d
simde_mm256_shuffle_epi8	simde/x86/avx2.h	/^simde_mm256_shuffle_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_shuffle_f32x4	simde/x86/avx512/shuffle.h	122;"	d
simde_mm256_shuffle_f64x2	simde/x86/avx512/shuffle.h	130;"	d
simde_mm256_shuffle_i32x4	simde/x86/avx512/shuffle.h	112;"	d
simde_mm256_shuffle_i64x2	simde/x86/avx512/shuffle.h	126;"	d
simde_mm256_shuffle_pd	simde/x86/avx.h	5045;"	d
simde_mm256_shuffle_pd	simde/x86/avx.h	5047;"	d
simde_mm256_shuffle_pd	simde/x86/avx.h	5052;"	d
simde_mm256_shuffle_ps	simde/x86/avx.h	5005;"	d
simde_mm256_shuffle_ps	simde/x86/avx.h	5007;"	d
simde_mm256_shuffle_ps	simde/x86/avx.h	5012;"	d
simde_mm256_shufflehi_epi16	simde/x86/avx2.h	3964;"	d
simde_mm256_shufflehi_epi16	simde/x86/avx2.h	3966;"	d
simde_mm256_shufflehi_epi16	simde/x86/avx2.h	3971;"	d
simde_mm256_shufflehi_epi16	simde/x86/avx2.h	3989;"	d
simde_mm256_shufflelo_epi16	simde/x86/avx2.h	4000;"	d
simde_mm256_shufflelo_epi16	simde/x86/avx2.h	4002;"	d
simde_mm256_shufflelo_epi16	simde/x86/avx2.h	4007;"	d
simde_mm256_shufflelo_epi16	simde/x86/avx2.h	4024;"	d
simde_mm256_sign_epi16	simde/x86/avx2.h	/^simde_mm256_sign_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sign_epi32	simde/x86/avx2.h	/^simde_mm256_sign_epi32(simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sign_epi8	simde/x86/avx2.h	/^simde_mm256_sign_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sin_pd	simde/x86/svml.h	/^simde_mm256_sin_pd (simde__m256d a) {$/;"	f
simde_mm256_sin_ps	simde/x86/svml.h	/^simde_mm256_sin_ps (simde__m256 a) {$/;"	f
simde_mm256_sincos_pd	simde/x86/svml.h	/^simde_mm256_sincos_pd (simde__m256d* mem_addr, simde__m256d a) {$/;"	f
simde_mm256_sincos_ps	simde/x86/svml.h	/^simde_mm256_sincos_ps (simde__m256* mem_addr, simde__m256 a) {$/;"	f
simde_mm256_sind_pd	simde/x86/svml.h	/^simde_mm256_sind_pd (simde__m256d a) {$/;"	f
simde_mm256_sind_ps	simde/x86/svml.h	/^simde_mm256_sind_ps (simde__m256 a) {$/;"	f
simde_mm256_sinh_pd	simde/x86/svml.h	/^simde_mm256_sinh_pd (simde__m256d a) {$/;"	f
simde_mm256_sinh_ps	simde/x86/svml.h	/^simde_mm256_sinh_ps (simde__m256 a) {$/;"	f
simde_mm256_sll_epi16	simde/x86/avx2.h	/^simde_mm256_sll_epi16 (simde__m256i a, simde__m128i count) {$/;"	f
simde_mm256_sll_epi32	simde/x86/avx2.h	/^simde_mm256_sll_epi32 (simde__m256i a, simde__m128i count) {$/;"	f
simde_mm256_sll_epi64	simde/x86/avx2.h	/^simde_mm256_sll_epi64 (simde__m256i a, simde__m128i count) {$/;"	f
simde_mm256_slli_epi16	simde/x86/avx2.h	4252;"	d
simde_mm256_slli_epi16	simde/x86/avx2.h	4254;"	d
simde_mm256_slli_epi32	simde/x86/avx2.h	4289;"	d
simde_mm256_slli_epi32	simde/x86/avx2.h	4291;"	d
simde_mm256_slli_epi64	simde/x86/avx2.h	4321;"	d
simde_mm256_slli_epi64	simde/x86/avx2.h	4323;"	d
simde_mm256_slli_si256	simde/x86/avx2.h	4352;"	d
simde_mm256_slli_si256	simde/x86/avx2.h	4354;"	d
simde_mm256_slli_si256	simde/x86/avx2.h	4359;"	d
simde_mm256_sllv_epi32	simde/x86/avx2.h	/^simde_mm256_sllv_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sllv_epi32	simde/x86/avx2.h	4422;"	d
simde_mm256_sllv_epi64	simde/x86/avx2.h	/^simde_mm256_sllv_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sllv_epi64	simde/x86/avx2.h	4482;"	d
simde_mm256_sqrt_pd	simde/x86/avx.h	/^simde_mm256_sqrt_pd (simde__m256d a) {$/;"	f
simde_mm256_sqrt_ps	simde/x86/avx.h	/^simde_mm256_sqrt_ps (simde__m256 a) {$/;"	f
simde_mm256_sra_epi16	simde/x86/avx2.h	/^simde_mm256_sra_epi16 (simde__m256i a, simde__m128i count) {$/;"	f
simde_mm256_sra_epi32	simde/x86/avx2.h	/^simde_mm256_sra_epi32 (simde__m256i a, simde__m128i count) {$/;"	f
simde_mm256_srai_epi16	simde/x86/avx2.h	4589;"	d
simde_mm256_srai_epi16	simde/x86/avx2.h	4591;"	d
simde_mm256_srai_epi32	simde/x86/avx2.h	4624;"	d
simde_mm256_srai_epi32	simde/x86/avx2.h	4626;"	d
simde_mm256_srav_epi32	simde/x86/avx2.h	/^simde_mm256_srav_epi32 (simde__m256i a, simde__m256i count) {$/;"	f
simde_mm256_srl_epi16	simde/x86/avx2.h	/^simde_mm256_srl_epi16 (simde__m256i a, simde__m128i count) {$/;"	f
simde_mm256_srl_epi32	simde/x86/avx2.h	/^simde_mm256_srl_epi32 (simde__m256i a, simde__m128i count) {$/;"	f
simde_mm256_srl_epi64	simde/x86/avx2.h	/^simde_mm256_srl_epi64 (simde__m256i a, simde__m128i count) {$/;"	f
simde_mm256_srli_epi16	simde/x86/avx2.h	4842;"	d
simde_mm256_srli_epi16	simde/x86/avx2.h	4844;"	d
simde_mm256_srli_epi32	simde/x86/avx2.h	4879;"	d
simde_mm256_srli_epi32	simde/x86/avx2.h	4881;"	d
simde_mm256_srli_epi64	simde/x86/avx2.h	4911;"	d
simde_mm256_srli_epi64	simde/x86/avx2.h	4913;"	d
simde_mm256_srli_si256	simde/x86/avx2.h	4942;"	d
simde_mm256_srli_si256	simde/x86/avx2.h	4944;"	d
simde_mm256_srli_si256	simde/x86/avx2.h	4949;"	d
simde_mm256_srlv_epi16	simde/x86/avx512/srlv.h	/^simde_mm256_srlv_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_srlv_epi32	simde/x86/avx2.h	/^simde_mm256_srlv_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_srlv_epi32	simde/x86/avx2.h	5006;"	d
simde_mm256_srlv_epi64	simde/x86/avx2.h	/^simde_mm256_srlv_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_srlv_epi64	simde/x86/avx2.h	5060;"	d
simde_mm256_store_pd	simde/x86/avx.h	/^simde_mm256_store_pd (simde_float64 mem_addr[4], simde__m256d a) {$/;"	f
simde_mm256_store_ps	simde/x86/avx.h	/^simde_mm256_store_ps (simde_float32 mem_addr[8], simde__m256 a) {$/;"	f
simde_mm256_store_si256	simde/x86/avx.h	/^simde_mm256_store_si256 (simde__m256i* mem_addr, simde__m256i a) {$/;"	f
simde_mm256_storeu2_m128	simde/x86/avx.h	/^simde_mm256_storeu2_m128 (simde_float32 hi_addr[4], simde_float32 lo_addr[4], simde__m256 a) {$/;"	f
simde_mm256_storeu2_m128d	simde/x86/avx.h	/^simde_mm256_storeu2_m128d (simde_float64 hi_addr[2], simde_float64 lo_addr[2], simde__m256d a) {$/;"	f
simde_mm256_storeu2_m128i	simde/x86/avx.h	/^simde_mm256_storeu2_m128i (simde__m128i* hi_addr, simde__m128i* lo_addr, simde__m256i a) {$/;"	f
simde_mm256_storeu_pd	simde/x86/avx.h	/^simde_mm256_storeu_pd (simde_float64 mem_addr[4], simde__m256d a) {$/;"	f
simde_mm256_storeu_ps	simde/x86/avx.h	/^simde_mm256_storeu_ps (simde_float32 mem_addr[8], simde__m256 a) {$/;"	f
simde_mm256_storeu_si256	simde/x86/avx.h	/^simde_mm256_storeu_si256 (simde__m256i* mem_addr, simde__m256i a) {$/;"	f
simde_mm256_stream_load_si256	simde/x86/avx2.h	/^simde_mm256_stream_load_si256 (const simde__m256i* mem_addr) {$/;"	f
simde_mm256_stream_pd	simde/x86/avx.h	/^simde_mm256_stream_pd (simde_float64 mem_addr[4], simde__m256d a) {$/;"	f
simde_mm256_stream_ps	simde/x86/avx.h	/^simde_mm256_stream_ps (simde_float32 mem_addr[8], simde__m256 a) {$/;"	f
simde_mm256_stream_si256	simde/x86/avx.h	/^simde_mm256_stream_si256 (simde__m256i* mem_addr, simde__m256i a) {$/;"	f
simde_mm256_sub_epi16	simde/x86/avx2.h	/^simde_mm256_sub_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sub_epi32	simde/x86/avx2.h	/^simde_mm256_sub_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sub_epi64	simde/x86/avx2.h	/^simde_mm256_sub_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sub_epi8	simde/x86/avx2.h	/^simde_mm256_sub_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_sub_pd	simde/x86/avx.h	/^simde_mm256_sub_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_sub_ps	simde/x86/avx.h	/^simde_mm256_sub_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_subs_epi16	simde/x86/avx2.h	/^simde_mm256_subs_epi16(simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_subs_epi8	simde/x86/avx2.h	/^simde_mm256_subs_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_subs_epu16	simde/x86/avx2.h	/^simde_mm256_subs_epu16(simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_subs_epu8	simde/x86/avx2.h	/^simde_mm256_subs_epu8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_svml_ceil_pd	simde/x86/svml.h	/^simde_mm256_svml_ceil_pd (simde__m256d a) {$/;"	f
simde_mm256_svml_ceil_ps	simde/x86/svml.h	/^simde_mm256_svml_ceil_ps (simde__m256 a) {$/;"	f
simde_mm256_svml_floor_pd	simde/x86/svml.h	/^simde_mm256_svml_floor_pd (simde__m256d a) {$/;"	f
simde_mm256_svml_floor_ps	simde/x86/svml.h	/^simde_mm256_svml_floor_ps (simde__m256 a) {$/;"	f
simde_mm256_svml_round_pd	simde/x86/svml.h	/^simde_mm256_svml_round_pd (simde__m256d a) {$/;"	f
simde_mm256_svml_round_ps	simde/x86/svml.h	/^simde_mm256_svml_round_ps (simde__m256 a) {$/;"	f
simde_mm256_svml_sqrt_pd	simde/x86/svml.h	/^simde_mm256_svml_sqrt_pd (simde__m256d a) {$/;"	f
simde_mm256_svml_sqrt_ps	simde/x86/svml.h	/^simde_mm256_svml_sqrt_ps (simde__m256 a) {$/;"	f
simde_mm256_tan_pd	simde/x86/svml.h	/^simde_mm256_tan_pd (simde__m256d a) {$/;"	f
simde_mm256_tan_ps	simde/x86/svml.h	/^simde_mm256_tan_ps (simde__m256 a) {$/;"	f
simde_mm256_tand_pd	simde/x86/svml.h	/^simde_mm256_tand_pd (simde__m256d a) {$/;"	f
simde_mm256_tand_ps	simde/x86/svml.h	/^simde_mm256_tand_ps (simde__m256 a) {$/;"	f
simde_mm256_tanh_pd	simde/x86/svml.h	/^simde_mm256_tanh_pd (simde__m256d a) {$/;"	f
simde_mm256_tanh_ps	simde/x86/svml.h	/^simde_mm256_tanh_ps (simde__m256 a) {$/;"	f
simde_mm256_testc_pd	simde/x86/avx.h	/^simde_mm256_testc_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_testc_ps	simde/x86/avx.h	/^simde_mm256_testc_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_testc_si256	simde/x86/avx.h	/^simde_mm256_testc_si256 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_testnzc_pd	simde/x86/avx.h	/^simde_mm256_testnzc_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_testnzc_ps	simde/x86/avx.h	/^simde_mm256_testnzc_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_testnzc_si256	simde/x86/avx.h	/^simde_mm256_testnzc_si256 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_testz_pd	simde/x86/avx.h	/^simde_mm256_testz_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_testz_ps	simde/x86/avx.h	/^simde_mm256_testz_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_testz_si256	simde/x86/avx.h	/^simde_mm256_testz_si256 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_trunc_pd	simde/x86/svml.h	/^simde_mm256_trunc_pd (simde__m256d a) {$/;"	f
simde_mm256_trunc_ps	simde/x86/svml.h	/^simde_mm256_trunc_ps (simde__m256 a) {$/;"	f
simde_mm256_udiv_epi32	simde/x86/svml.h	3163;"	d
simde_mm256_udivrem_epi32	simde/x86/svml.h	/^simde_mm256_udivrem_epi32 (simde__m256i* mem_addr, simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_undefined_pd	simde/x86/avx.h	/^simde_mm256_undefined_pd (void) {$/;"	f
simde_mm256_undefined_ps	simde/x86/avx.h	/^simde_mm256_undefined_ps (void) {$/;"	f
simde_mm256_undefined_si256	simde/x86/avx.h	/^simde_mm256_undefined_si256 (void) {$/;"	f
simde_mm256_unpackhi_epi16	simde/x86/avx2.h	/^simde_mm256_unpackhi_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_unpackhi_epi32	simde/x86/avx2.h	/^simde_mm256_unpackhi_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_unpackhi_epi64	simde/x86/avx2.h	/^simde_mm256_unpackhi_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_unpackhi_epi8	simde/x86/avx2.h	/^simde_mm256_unpackhi_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_unpackhi_pd	simde/x86/avx.h	/^simde_mm256_unpackhi_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_unpackhi_ps	simde/x86/avx.h	/^simde_mm256_unpackhi_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_unpacklo_epi16	simde/x86/avx2.h	/^simde_mm256_unpacklo_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_unpacklo_epi32	simde/x86/avx2.h	/^simde_mm256_unpacklo_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_unpacklo_epi64	simde/x86/avx2.h	/^simde_mm256_unpacklo_epi64 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_unpacklo_epi8	simde/x86/avx2.h	/^simde_mm256_unpacklo_epi8 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_unpacklo_pd	simde/x86/avx.h	/^simde_mm256_unpacklo_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_unpacklo_ps	simde/x86/avx.h	/^simde_mm256_unpacklo_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_urem_epi32	simde/x86/svml.h	9376;"	d
simde_mm256_xor_pd	simde/x86/avx.h	/^simde_mm256_xor_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_mm256_xor_ps	simde/x86/avx.h	/^simde_mm256_xor_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_mm256_xor_si256	simde/x86/avx2.h	/^simde_mm256_xor_si256 (simde__m256i a, simde__m256i b) {$/;"	f
simde_mm256_zextpd128_pd256	simde/x86/avx.h	/^simde_mm256_zextpd128_pd256 (simde__m128d a) {$/;"	f
simde_mm256_zextps128_ps256	simde/x86/avx.h	/^simde_mm256_zextps128_ps256 (simde__m128 a) {$/;"	f
simde_mm256_zextsi128_si256	simde/x86/avx.h	/^simde_mm256_zextsi128_si256 (simde__m128i a) {$/;"	f
simde_mm512_2intersect_epi32	simde/x86/avx512/2intersect.h	/^simde_mm512_2intersect_epi32(simde__m512i a, simde__m512i b, simde__mmask16 *k1, simde__mmask16 *k2) {$/;"	f
simde_mm512_2intersect_epi64	simde/x86/avx512/2intersect.h	/^simde_mm512_2intersect_epi64(simde__m512i a, simde__m512i b, simde__mmask8 *k1, simde__mmask8 *k2) {$/;"	f
simde_mm512_abs_epi16	simde/x86/avx512/abs.h	/^simde_mm512_abs_epi16 (simde__m512i a) {$/;"	f
simde_mm512_abs_epi32	simde/x86/avx512/abs.h	/^simde_mm512_abs_epi32(simde__m512i a) {$/;"	f
simde_mm512_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm512_abs_epi64(simde__m512i a) {$/;"	f
simde_mm512_abs_epi8	simde/x86/avx512/abs.h	/^simde_mm512_abs_epi8 (simde__m512i a) {$/;"	f
simde_mm512_abs_pd	simde/x86/avx512/abs.h	/^simde_mm512_abs_pd(simde__m512d v2) {$/;"	f
simde_mm512_abs_ps	simde/x86/avx512/abs.h	/^simde_mm512_abs_ps(simde__m512 v2) {$/;"	f
simde_mm512_acos_pd	simde/x86/svml.h	/^simde_mm512_acos_pd (simde__m512d a) {$/;"	f
simde_mm512_acos_ps	simde/x86/svml.h	/^simde_mm512_acos_ps (simde__m512 a) {$/;"	f
simde_mm512_acosh_pd	simde/x86/svml.h	/^simde_mm512_acosh_pd (simde__m512d a) {$/;"	f
simde_mm512_acosh_ps	simde/x86/svml.h	/^simde_mm512_acosh_ps (simde__m512 a) {$/;"	f
simde_mm512_add_epi16	simde/x86/avx512/add.h	/^simde_mm512_add_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_add_epi32	simde/x86/avx512/add.h	/^simde_mm512_add_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_add_epi64	simde/x86/avx512/add.h	/^simde_mm512_add_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_add_epi8	simde/x86/avx512/add.h	/^simde_mm512_add_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_add_pd	simde/x86/avx512/add.h	/^simde_mm512_add_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_add_ps	simde/x86/avx512/add.h	/^simde_mm512_add_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_adds_epi16	simde/x86/avx512/adds.h	/^simde_mm512_adds_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_adds_epi8	simde/x86/avx512/adds.h	/^simde_mm512_adds_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_adds_epu16	simde/x86/avx512/adds.h	/^simde_mm512_adds_epu16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_adds_epu8	simde/x86/avx512/adds.h	/^simde_mm512_adds_epu8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_and_epi32	simde/x86/avx512/and.h	/^simde_mm512_and_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_and_epi64	simde/x86/avx512/and.h	/^simde_mm512_and_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_and_pd	simde/x86/avx512/and.h	/^simde_mm512_and_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_and_ps	simde/x86/avx512/and.h	/^simde_mm512_and_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_and_si512	simde/x86/avx512/and.h	/^simde_mm512_and_si512 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_andnot_epi32	simde/x86/avx512/andnot.h	123;"	d
simde_mm512_andnot_epi64	simde/x86/avx512/andnot.h	124;"	d
simde_mm512_andnot_pd	simde/x86/avx512/andnot.h	70;"	d
simde_mm512_andnot_ps	simde/x86/avx512/andnot.h	40;"	d
simde_mm512_andnot_si512	simde/x86/avx512/andnot.h	/^simde_mm512_andnot_si512 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_asin_pd	simde/x86/svml.h	/^simde_mm512_asin_pd (simde__m512d a) {$/;"	f
simde_mm512_asin_ps	simde/x86/svml.h	/^simde_mm512_asin_ps (simde__m512 a) {$/;"	f
simde_mm512_asinh_pd	simde/x86/svml.h	/^simde_mm512_asinh_pd (simde__m512d a) {$/;"	f
simde_mm512_asinh_ps	simde/x86/svml.h	/^simde_mm512_asinh_ps (simde__m512 a) {$/;"	f
simde_mm512_atan2_pd	simde/x86/svml.h	/^simde_mm512_atan2_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_atan2_ps	simde/x86/svml.h	/^simde_mm512_atan2_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_atan_pd	simde/x86/svml.h	/^simde_mm512_atan_pd (simde__m512d a) {$/;"	f
simde_mm512_atan_ps	simde/x86/svml.h	/^simde_mm512_atan_ps (simde__m512 a) {$/;"	f
simde_mm512_atanh_pd	simde/x86/svml.h	/^simde_mm512_atanh_pd (simde__m512d a) {$/;"	f
simde_mm512_atanh_ps	simde/x86/svml.h	/^simde_mm512_atanh_ps (simde__m512 a) {$/;"	f
simde_mm512_avg_epu16	simde/x86/avx512/avg.h	/^simde_mm512_avg_epu16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_avg_epu8	simde/x86/avx512/avg.h	/^simde_mm512_avg_epu8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_broadcast_f32x2	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcast_f32x2 (simde__m128 a) {$/;"	f
simde_mm512_broadcast_f32x4	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcast_f32x4 (simde__m128 a) {$/;"	f
simde_mm512_broadcast_f32x8	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcast_f32x8 (simde__m256 a) {$/;"	f
simde_mm512_broadcast_f64x2	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcast_f64x2 (simde__m128d a) {$/;"	f
simde_mm512_broadcast_f64x4	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcast_f64x4 (simde__m256d a) {$/;"	f
simde_mm512_broadcast_i32x4	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcast_i32x4 (simde__m128i a) {$/;"	f
simde_mm512_broadcast_i64x4	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcast_i64x4 (simde__m256i a) {$/;"	f
simde_mm512_broadcastb_epi8	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcastb_epi8 (simde__m128i a) {$/;"	f
simde_mm512_broadcastd_epi32	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcastd_epi32 (simde__m128i a) {$/;"	f
simde_mm512_broadcastq_epi64	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcastq_epi64 (simde__m128i a) {$/;"	f
simde_mm512_broadcastsd_pd	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcastsd_pd (simde__m128d a) {$/;"	f
simde_mm512_broadcastss_ps	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcastss_ps (simde__m128 a) {$/;"	f
simde_mm512_broadcastw_epi16	simde/x86/avx512/broadcast.h	/^simde_mm512_broadcastw_epi16 (simde__m128i a) {$/;"	f
simde_mm512_castpd128_pd512	simde/x86/avx512/cast.h	/^simde_mm512_castpd128_pd512 (simde__m128d a) {$/;"	f
simde_mm512_castpd256_pd512	simde/x86/avx512/cast.h	/^simde_mm512_castpd256_pd512 (simde__m256d a) {$/;"	f
simde_mm512_castpd512_pd128	simde/x86/avx512/cast.h	/^simde_mm512_castpd512_pd128 (simde__m512d a) {$/;"	f
simde_mm512_castpd512_pd256	simde/x86/avx512/cast.h	/^simde_mm512_castpd512_pd256 (simde__m512d a) {$/;"	f
simde_mm512_castpd_ps	simde/x86/avx512/cast.h	/^simde_mm512_castpd_ps (simde__m512d a) {$/;"	f
simde_mm512_castpd_si512	simde/x86/avx512/cast.h	/^simde_mm512_castpd_si512 (simde__m512d a) {$/;"	f
simde_mm512_castps128_ps512	simde/x86/avx512/cast.h	/^simde_mm512_castps128_ps512 (simde__m128 a) {$/;"	f
simde_mm512_castps256_ps512	simde/x86/avx512/cast.h	/^simde_mm512_castps256_ps512 (simde__m256 a) {$/;"	f
simde_mm512_castps512_ps128	simde/x86/avx512/cast.h	/^simde_mm512_castps512_ps128 (simde__m512 a) {$/;"	f
simde_mm512_castps512_ps256	simde/x86/avx512/cast.h	/^simde_mm512_castps512_ps256 (simde__m512 a) {$/;"	f
simde_mm512_castps_pd	simde/x86/avx512/cast.h	/^simde_mm512_castps_pd (simde__m512 a) {$/;"	f
simde_mm512_castps_si512	simde/x86/avx512/cast.h	/^simde_mm512_castps_si512 (simde__m512 a) {$/;"	f
simde_mm512_castsi128_si512	simde/x86/avx512/cast.h	/^simde_mm512_castsi128_si512 (simde__m128i a) {$/;"	f
simde_mm512_castsi256_si512	simde/x86/avx512/cast.h	/^simde_mm512_castsi256_si512 (simde__m256i a) {$/;"	f
simde_mm512_castsi512_pd	simde/x86/avx512/cast.h	/^simde_mm512_castsi512_pd (simde__m512i a) {$/;"	f
simde_mm512_castsi512_ps	simde/x86/avx512/cast.h	/^simde_mm512_castsi512_ps (simde__m512i a) {$/;"	f
simde_mm512_castsi512_si128	simde/x86/avx512/cast.h	/^simde_mm512_castsi512_si128 (simde__m512i a) {$/;"	f
simde_mm512_castsi512_si256	simde/x86/avx512/cast.h	/^simde_mm512_castsi512_si256 (simde__m512i a) {$/;"	f
simde_mm512_cbrt_pd	simde/x86/svml.h	/^simde_mm512_cbrt_pd (simde__m512d a) {$/;"	f
simde_mm512_cbrt_ps	simde/x86/svml.h	/^simde_mm512_cbrt_ps (simde__m512 a) {$/;"	f
simde_mm512_cdfnorm_pd	simde/x86/svml.h	/^simde_mm512_cdfnorm_pd (simde__m512d a) {$/;"	f
simde_mm512_cdfnorm_ps	simde/x86/svml.h	/^simde_mm512_cdfnorm_ps (simde__m512 a) {$/;"	f
simde_mm512_cdfnorminv_pd	simde/x86/svml.h	/^simde_mm512_cdfnorminv_pd (simde__m512d a) {$/;"	f
simde_mm512_cdfnorminv_ps	simde/x86/svml.h	/^simde_mm512_cdfnorminv_ps (simde__m512 a) {$/;"	f
simde_mm512_ceil_pd	simde/x86/svml.h	/^simde_mm512_ceil_pd (simde__m512d a) {$/;"	f
simde_mm512_ceil_ps	simde/x86/svml.h	/^simde_mm512_ceil_ps (simde__m512 a) {$/;"	f
simde_mm512_clmulepi64_epi128	simde/x86/clmul.h	403;"	d
simde_mm512_cmpeq_epi32_mask	simde/x86/avx512/cmpeq.h	/^simde_mm512_cmpeq_epi32_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmpeq_epi64_mask	simde/x86/avx512/cmpeq.h	/^simde_mm512_cmpeq_epi64_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmpeq_epi8_mask	simde/x86/avx512/cmpeq.h	/^simde_mm512_cmpeq_epi8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmpeq_pd_mask	simde/x86/avx512/cmpeq.h	/^simde_mm512_cmpeq_pd_mask (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_cmpeq_ps_mask	simde/x86/avx512/cmpeq.h	/^simde_mm512_cmpeq_ps_mask (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_cmpge_epi8_mask	simde/x86/avx512/cmpge.h	/^simde_mm512_cmpge_epi8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmpge_epu8_mask	simde/x86/avx512/cmpge.h	/^simde_mm512_cmpge_epu8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmpgt_epi32_mask	simde/x86/avx512/cmpgt.h	/^simde_mm512_cmpgt_epi32_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmpgt_epi64_mask	simde/x86/avx512/cmpgt.h	/^simde_mm512_cmpgt_epi64_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmpgt_epi8_mask	simde/x86/avx512/cmpgt.h	/^simde_mm512_cmpgt_epi8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmpgt_epu8_mask	simde/x86/avx512/cmpgt.h	/^simde_mm512_cmpgt_epu8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmple_epi8_mask	simde/x86/avx512/cmple.h	/^simde_mm512_cmple_epi8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmple_epu8_mask	simde/x86/avx512/cmple.h	/^simde_mm512_cmple_epu8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmplt_epi8_mask	simde/x86/avx512/cmplt.h	/^simde_mm512_cmplt_epi8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmplt_epu8_mask	simde/x86/avx512/cmplt.h	/^simde_mm512_cmplt_epu8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_cmplt_pd_mask	simde/x86/avx512/cmplt.h	/^simde_mm512_cmplt_pd_mask (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_cmplt_ps_mask	simde/x86/avx512/cmplt.h	/^simde_mm512_cmplt_ps_mask (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_cos_pd	simde/x86/svml.h	/^simde_mm512_cos_pd (simde__m512d a) {$/;"	f
simde_mm512_cos_ps	simde/x86/svml.h	/^simde_mm512_cos_ps (simde__m512 a) {$/;"	f
simde_mm512_cosd_pd	simde/x86/svml.h	/^simde_mm512_cosd_pd (simde__m512d a) {$/;"	f
simde_mm512_cosd_ps	simde/x86/svml.h	/^simde_mm512_cosd_ps (simde__m512 a) {$/;"	f
simde_mm512_cosh_pd	simde/x86/svml.h	/^simde_mm512_cosh_pd (simde__m512d a) {$/;"	f
simde_mm512_cosh_ps	simde/x86/svml.h	/^simde_mm512_cosh_ps (simde__m512 a) {$/;"	f
simde_mm512_cvtepi16_epi8	simde/x86/avx512/cvt.h	/^simde_mm512_cvtepi16_epi8 (simde__m512i a) {$/;"	f
simde_mm512_cvtepi8_epi16	simde/x86/avx512/cvt.h	/^simde_mm512_cvtepi8_epi16 (simde__m256i a) {$/;"	f
simde_mm512_cvtsepi16_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_cvtsepi16_epi8 (simde__m512i a) {$/;"	f
simde_mm512_cvtsepi32_epi16	simde/x86/avx512/cvts.h	/^simde_mm512_cvtsepi32_epi16 (simde__m512i a) {$/;"	f
simde_mm512_cvtsepi32_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_cvtsepi32_epi8 (simde__m512i a) {$/;"	f
simde_mm512_cvtsepi64_epi16	simde/x86/avx512/cvts.h	/^simde_mm512_cvtsepi64_epi16 (simde__m512i a) {$/;"	f
simde_mm512_cvtsepi64_epi32	simde/x86/avx512/cvts.h	/^simde_mm512_cvtsepi64_epi32 (simde__m512i a) {$/;"	f
simde_mm512_cvtsepi64_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_cvtsepi64_epi8 (simde__m512i a) {$/;"	f
simde_mm512_div_epi16	simde/x86/svml.h	/^simde_mm512_div_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_div_epi32	simde/x86/svml.h	/^simde_mm512_div_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_div_epi64	simde/x86/svml.h	/^simde_mm512_div_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_div_epi8	simde/x86/svml.h	/^simde_mm512_div_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_div_epu16	simde/x86/svml.h	/^simde_mm512_div_epu16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_div_epu32	simde/x86/svml.h	/^simde_mm512_div_epu32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_div_epu64	simde/x86/svml.h	/^simde_mm512_div_epu64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_div_epu8	simde/x86/svml.h	/^simde_mm512_div_epu8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_div_pd	simde/x86/avx512/div.h	/^simde_mm512_div_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_div_ps	simde/x86/avx512/div.h	/^simde_mm512_div_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_erf_pd	simde/x86/svml.h	/^simde_mm512_erf_pd (simde__m512d a) {$/;"	f
simde_mm512_erf_ps	simde/x86/svml.h	/^simde_mm512_erf_ps (simde__m512 a) {$/;"	f
simde_mm512_erfc_pd	simde/x86/svml.h	/^simde_mm512_erfc_pd (simde__m512d a) {$/;"	f
simde_mm512_erfc_ps	simde/x86/svml.h	/^simde_mm512_erfc_ps (simde__m512 a) {$/;"	f
simde_mm512_erfcinv_pd	simde/x86/svml.h	/^simde_mm512_erfcinv_pd (simde__m512d a) {$/;"	f
simde_mm512_erfcinv_ps	simde/x86/svml.h	/^simde_mm512_erfcinv_ps (simde__m512 a) {$/;"	f
simde_mm512_erfinv_pd	simde/x86/svml.h	/^simde_mm512_erfinv_pd (simde__m512d a) {$/;"	f
simde_mm512_erfinv_ps	simde/x86/svml.h	/^simde_mm512_erfinv_ps (simde__m512 a) {$/;"	f
simde_mm512_exp10_pd	simde/x86/svml.h	/^simde_mm512_exp10_pd (simde__m512d a) {$/;"	f
simde_mm512_exp10_ps	simde/x86/svml.h	/^simde_mm512_exp10_ps (simde__m512 a) {$/;"	f
simde_mm512_exp2_pd	simde/x86/svml.h	/^simde_mm512_exp2_pd (simde__m512d a) {$/;"	f
simde_mm512_exp2_ps	simde/x86/svml.h	/^simde_mm512_exp2_ps (simde__m512 a) {$/;"	f
simde_mm512_exp_pd	simde/x86/svml.h	/^simde_mm512_exp_pd (simde__m512d a) {$/;"	f
simde_mm512_exp_ps	simde/x86/svml.h	/^simde_mm512_exp_ps (simde__m512 a) {$/;"	f
simde_mm512_expm1_pd	simde/x86/svml.h	/^simde_mm512_expm1_pd (simde__m512d a) {$/;"	f
simde_mm512_expm1_ps	simde/x86/svml.h	/^simde_mm512_expm1_ps (simde__m512 a) {$/;"	f
simde_mm512_extractf32x4_ps	simde/x86/avx512/extract.h	60;"	d
simde_mm512_extractf64x4_pd	simde/x86/avx512/extract.h	96;"	d
simde_mm512_extracti32x4_epi32	simde/x86/avx512/extract.h	132;"	d
simde_mm512_extracti64x4_epi64	simde/x86/avx512/extract.h	168;"	d
simde_mm512_floor_pd	simde/x86/svml.h	/^simde_mm512_floor_pd (simde__m512d a) {$/;"	f
simde_mm512_floor_ps	simde/x86/svml.h	/^simde_mm512_floor_ps (simde__m512 a) {$/;"	f
simde_mm512_fmadd_pd	simde/x86/avx512/fmadd.h	/^simde_mm512_fmadd_pd (simde__m512d a, simde__m512d b, simde__m512d c) {$/;"	f
simde_mm512_fmadd_ps	simde/x86/avx512/fmadd.h	/^simde_mm512_fmadd_ps (simde__m512 a, simde__m512 b, simde__m512 c) {$/;"	f
simde_mm512_fmsub_pd	simde/x86/avx512/fmsub.h	/^simde_mm512_fmsub_pd (simde__m512d a, simde__m512d b, simde__m512d c) {$/;"	f
simde_mm512_fmsub_ps	simde/x86/avx512/fmsub.h	/^simde_mm512_fmsub_ps (simde__m512 a, simde__m512 b, simde__m512 c) {$/;"	f
simde_mm512_fnmadd_pd	simde/x86/avx512/fnmadd.h	/^simde_mm512_fnmadd_pd (simde__m512d a, simde__m512d b, simde__m512d c) {$/;"	f
simde_mm512_fnmadd_ps	simde/x86/avx512/fnmadd.h	/^simde_mm512_fnmadd_ps (simde__m512 a, simde__m512 b, simde__m512 c) {$/;"	f
simde_mm512_fnmsub_pd	simde/x86/avx512/fnmsub.h	/^simde_mm512_fnmsub_pd (simde__m512d a, simde__m512d b, simde__m512d c) {$/;"	f
simde_mm512_fnmsub_ps	simde/x86/avx512/fnmsub.h	/^simde_mm512_fnmsub_ps (simde__m512 a, simde__m512 b, simde__m512 c) {$/;"	f
simde_mm512_gf2p8affine_epi64_epi8	simde/x86/gfni.h	371;"	d
simde_mm512_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	473;"	d
simde_mm512_gf2p8mul_epi8	simde/x86/gfni.h	/^simde_mm512_gf2p8mul_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_gf2p8mul_epi8	simde/x86/gfni.h	707;"	d
simde_mm512_hypot_pd	simde/x86/svml.h	/^simde_mm512_hypot_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_hypot_ps	simde/x86/svml.h	/^simde_mm512_hypot_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_insertf32x4	simde/x86/avx512/insert.h	49;"	d
simde_mm512_insertf64x4	simde/x86/avx512/insert.h	87;"	d
simde_mm512_inserti32x4	simde/x86/avx512/insert.h	125;"	d
simde_mm512_inserti64x4	simde/x86/avx512/insert.h	163;"	d
simde_mm512_invsqrt_pd	simde/x86/svml.h	/^simde_mm512_invsqrt_pd (simde__m512d a) {$/;"	f
simde_mm512_invsqrt_ps	simde/x86/svml.h	/^simde_mm512_invsqrt_ps (simde__m512 a) {$/;"	f
simde_mm512_load_epi16	simde/x86/avx512/load.h	48;"	d
simde_mm512_load_epi32	simde/x86/avx512/load.h	49;"	d
simde_mm512_load_epi64	simde/x86/avx512/load.h	50;"	d
simde_mm512_load_epi8	simde/x86/avx512/load.h	47;"	d
simde_mm512_load_si512	simde/x86/avx512/load.h	/^simde_mm512_load_si512 (void const * mem_addr) {$/;"	f
simde_mm512_loadu_epi16	simde/x86/avx512/loadu.h	204;"	d
simde_mm512_loadu_epi32	simde/x86/avx512/loadu.h	205;"	d
simde_mm512_loadu_epi64	simde/x86/avx512/loadu.h	206;"	d
simde_mm512_loadu_epi8	simde/x86/avx512/loadu.h	203;"	d
simde_mm512_loadu_pd	simde/x86/avx512/loadu.h	/^simde_mm512_loadu_pd (void const * mem_addr) {$/;"	f
simde_mm512_loadu_ps	simde/x86/avx512/loadu.h	/^simde_mm512_loadu_ps (void const * mem_addr) {$/;"	f
simde_mm512_loadu_si512	simde/x86/avx512/loadu.h	/^simde_mm512_loadu_si512 (void const * mem_addr) {$/;"	f
simde_mm512_log10_pd	simde/x86/svml.h	/^simde_mm512_log10_pd (simde__m512d a) {$/;"	f
simde_mm512_log10_ps	simde/x86/svml.h	/^simde_mm512_log10_ps (simde__m512 a) {$/;"	f
simde_mm512_log1p_pd	simde/x86/svml.h	/^simde_mm512_log1p_pd (simde__m512d a) {$/;"	f
simde_mm512_log1p_ps	simde/x86/svml.h	/^simde_mm512_log1p_ps (simde__m512 a) {$/;"	f
simde_mm512_log2_pd	simde/x86/svml.h	/^simde_mm512_log2_pd (simde__m512d a) {$/;"	f
simde_mm512_log2_ps	simde/x86/svml.h	/^simde_mm512_log2_ps (simde__m512 a) {$/;"	f
simde_mm512_log_pd	simde/x86/svml.h	/^simde_mm512_log_pd (simde__m512d a) {$/;"	f
simde_mm512_log_ps	simde/x86/svml.h	/^simde_mm512_log_ps (simde__m512 a) {$/;"	f
simde_mm512_logb_pd	simde/x86/svml.h	/^simde_mm512_logb_pd (simde__m512d a) {$/;"	f
simde_mm512_logb_ps	simde/x86/svml.h	/^simde_mm512_logb_ps (simde__m512 a) {$/;"	f
simde_mm512_madd_epi16	simde/x86/avx512/madd.h	/^simde_mm512_madd_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maddubs_epi16	simde/x86/avx512/maddubs.h	/^simde_mm512_maddubs_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask2_permutex2var_epi16 (simde__m512i a, simde__m512i idx, simde__mmask32 k, simde__m512i b) {$/;"	f
simde_mm512_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask2_permutex2var_epi32 (simde__m512i a, simde__m512i idx, simde__mmask16 k, simde__m512i b) {$/;"	f
simde_mm512_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask2_permutex2var_epi64 (simde__m512i a, simde__m512i idx, simde__mmask8 k, simde__m512i b) {$/;"	f
simde_mm512_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask2_permutex2var_epi8 (simde__m512i a, simde__m512i idx, simde__mmask64 k, simde__m512i b) {$/;"	f
simde_mm512_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask2_permutex2var_pd (simde__m512d a, simde__m512i idx, simde__mmask8 k, simde__m512d b) {$/;"	f
simde_mm512_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask2_permutex2var_ps (simde__m512 a, simde__m512i idx, simde__mmask16 k, simde__m512 b) {$/;"	f
simde_mm512_mask_abs_epi16	simde/x86/avx512/abs.h	/^simde_mm512_mask_abs_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i a) {$/;"	f
simde_mm512_mask_abs_epi32	simde/x86/avx512/abs.h	/^simde_mm512_mask_abs_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a) {$/;"	f
simde_mm512_mask_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm512_mask_abs_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_mask_abs_epi8	simde/x86/avx512/abs.h	/^simde_mm512_mask_abs_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a) {$/;"	f
simde_mm512_mask_abs_pd	simde/x86/avx512/abs.h	/^simde_mm512_mask_abs_pd(simde__m512d src, simde__mmask8 k, simde__m512d v2) {$/;"	f
simde_mm512_mask_abs_ps	simde/x86/avx512/abs.h	/^simde_mm512_mask_abs_ps(simde__m512 src, simde__mmask16 k, simde__m512 v2) {$/;"	f
simde_mm512_mask_acos_pd	simde/x86/svml.h	/^simde_mm512_mask_acos_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_acos_ps	simde/x86/svml.h	/^simde_mm512_mask_acos_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_acosh_pd	simde/x86/svml.h	/^simde_mm512_mask_acosh_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_acosh_ps	simde/x86/svml.h	/^simde_mm512_mask_acosh_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_add_epi16	simde/x86/avx512/add.h	/^simde_mm512_mask_add_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_add_epi32	simde/x86/avx512/add.h	/^simde_mm512_mask_add_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_add_epi64	simde/x86/avx512/add.h	/^simde_mm512_mask_add_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_add_epi8	simde/x86/avx512/add.h	/^simde_mm512_mask_add_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_add_pd	simde/x86/avx512/add.h	/^simde_mm512_mask_add_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_add_ps	simde/x86/avx512/add.h	/^simde_mm512_mask_add_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_adds_epi16	simde/x86/avx512/adds.h	/^simde_mm512_mask_adds_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_adds_epi8	simde/x86/avx512/adds.h	/^simde_mm512_mask_adds_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_adds_epu16	simde/x86/avx512/adds.h	/^simde_mm512_mask_adds_epu16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_adds_epu8	simde/x86/avx512/adds.h	/^simde_mm512_mask_adds_epu8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_and_epi32	simde/x86/avx512/and.h	/^simde_mm512_mask_and_epi32(simde__m512i src, simde__mmask16 k, simde__m512i v2, simde__m512i v3) {$/;"	f
simde_mm512_mask_and_epi64	simde/x86/avx512/and.h	/^simde_mm512_mask_and_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_and_pd	simde/x86/avx512/and.h	/^simde_mm512_mask_and_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_and_ps	simde/x86/avx512/and.h	/^simde_mm512_mask_and_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_andnot_epi32	simde/x86/avx512/andnot.h	/^simde_mm512_mask_andnot_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_andnot_epi64	simde/x86/avx512/andnot.h	/^simde_mm512_mask_andnot_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_andnot_pd	simde/x86/avx512/andnot.h	80;"	d
simde_mm512_mask_andnot_ps	simde/x86/avx512/andnot.h	50;"	d
simde_mm512_mask_asin_pd	simde/x86/svml.h	/^simde_mm512_mask_asin_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_asin_ps	simde/x86/svml.h	/^simde_mm512_mask_asin_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_asinh_pd	simde/x86/svml.h	/^simde_mm512_mask_asinh_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_asinh_ps	simde/x86/svml.h	/^simde_mm512_mask_asinh_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_atan2_pd	simde/x86/svml.h	/^simde_mm512_mask_atan2_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_atan2_ps	simde/x86/svml.h	/^simde_mm512_mask_atan2_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_atan_pd	simde/x86/svml.h	/^simde_mm512_mask_atan_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_atan_ps	simde/x86/svml.h	/^simde_mm512_mask_atan_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_atanh_pd	simde/x86/svml.h	/^simde_mm512_mask_atanh_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_atanh_ps	simde/x86/svml.h	/^simde_mm512_mask_atanh_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_avg_epu16	simde/x86/avx512/avg.h	/^simde_mm512_mask_avg_epu16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_avg_epu8	simde/x86/avx512/avg.h	/^simde_mm512_mask_avg_epu8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_blend_epi16	simde/x86/avx512/blend.h	/^simde_mm512_mask_blend_epi16(simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_blend_epi32	simde/x86/avx512/blend.h	/^simde_mm512_mask_blend_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_blend_epi64	simde/x86/avx512/blend.h	/^simde_mm512_mask_blend_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_blend_epi8	simde/x86/avx512/blend.h	/^simde_mm512_mask_blend_epi8(simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_blend_pd	simde/x86/avx512/blend.h	/^simde_mm512_mask_blend_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_blend_ps	simde/x86/avx512/blend.h	/^simde_mm512_mask_blend_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_broadcast_f32x2	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcast_f32x2(simde__m512 src, simde__mmask16 k, simde__m128 a) {$/;"	f
simde_mm512_mask_broadcast_f32x4	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcast_f32x4(simde__m512 src, simde__mmask16 k, simde__m128 a) {$/;"	f
simde_mm512_mask_broadcast_f32x8	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcast_f32x8(simde__m512 src, simde__mmask16 k, simde__m256 a) {$/;"	f
simde_mm512_mask_broadcast_f64x2	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcast_f64x2(simde__m512d src, simde__mmask8 k, simde__m128d a) {$/;"	f
simde_mm512_mask_broadcast_f64x4	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcast_f64x4(simde__m512d src, simde__mmask8 k, simde__m256d a) {$/;"	f
simde_mm512_mask_broadcast_i32x4	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcast_i32x4(simde__m512i src, simde__mmask16 k, simde__m128i a) {$/;"	f
simde_mm512_mask_broadcast_i64x4	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcast_i64x4(simde__m512i src, simde__mmask8 k, simde__m256i a) {$/;"	f
simde_mm512_mask_broadcastb_epi8	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcastb_epi8 (simde__m512i src, simde__mmask64 k, simde__m128i a) {$/;"	f
simde_mm512_mask_broadcastd_epi32	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcastd_epi32(simde__m512i src, simde__mmask16 k, simde__m128i a) {$/;"	f
simde_mm512_mask_broadcastq_epi64	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcastq_epi64(simde__m512i src, simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm512_mask_broadcastsd_pd	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcastsd_pd(simde__m512d src, simde__mmask8 k, simde__m128d a) {$/;"	f
simde_mm512_mask_broadcastss_ps	simde/x86/avx512/broadcast.h	/^simde_mm512_mask_broadcastss_ps(simde__m512 src, simde__mmask16 k, simde__m128 a) {$/;"	f
simde_mm512_mask_cbrt_pd	simde/x86/svml.h	/^simde_mm512_mask_cbrt_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_cbrt_ps	simde/x86/svml.h	/^simde_mm512_mask_cbrt_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_cdfnorm_pd	simde/x86/svml.h	/^simde_mm512_mask_cdfnorm_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_cdfnorm_ps	simde/x86/svml.h	/^simde_mm512_mask_cdfnorm_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_cdfnorminv_pd	simde/x86/svml.h	/^simde_mm512_mask_cdfnorminv_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_cdfnorminv_ps	simde/x86/svml.h	/^simde_mm512_mask_cdfnorminv_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_ceil_pd	simde/x86/svml.h	/^simde_mm512_mask_ceil_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_ceil_ps	simde/x86/svml.h	/^simde_mm512_mask_ceil_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_cmpeq_epi32_mask	simde/x86/avx512/cmpeq.h	/^simde_mm512_mask_cmpeq_epi32_mask (simde__mmask16 k1, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_cmpeq_epi64_mask	simde/x86/avx512/cmpeq.h	/^simde_mm512_mask_cmpeq_epi64_mask (simde__mmask8 k1, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_cmpgt_epi32_mask	simde/x86/avx512/cmpgt.h	/^simde_mm512_mask_cmpgt_epi32_mask (simde__mmask16 k1, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_cmpgt_epi64_mask	simde/x86/avx512/cmpgt.h	/^simde_mm512_mask_cmpgt_epi64_mask (simde__mmask8 k1, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_cos_pd	simde/x86/svml.h	/^simde_mm512_mask_cos_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_cos_ps	simde/x86/svml.h	/^simde_mm512_mask_cos_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_cosd_pd	simde/x86/svml.h	/^simde_mm512_mask_cosd_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_cosd_ps	simde/x86/svml.h	/^simde_mm512_mask_cosd_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_cosh_pd	simde/x86/svml.h	/^simde_mm512_mask_cosh_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_cosh_ps	simde/x86/svml.h	/^simde_mm512_mask_cosh_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_cvtepi16_epi8	simde/x86/avx512/cvt.h	/^simde_mm512_mask_cvtepi16_epi8 (simde__m256i src, simde__mmask32 k, simde__m512i a) {$/;"	f
simde_mm512_mask_cvtsepi16_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_mask_cvtsepi16_epi8 (simde__m256i src, simde__mmask32 k, simde__m512i a) {$/;"	f
simde_mm512_mask_cvtsepi32_epi16	simde/x86/avx512/cvts.h	/^simde_mm512_mask_cvtsepi32_epi16 (simde__m256i src, simde__mmask16 k, simde__m512i a) {$/;"	f
simde_mm512_mask_cvtsepi32_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_mask_cvtsepi32_epi8 (simde__m128i src, simde__mmask16 k, simde__m512i a) {$/;"	f
simde_mm512_mask_cvtsepi64_epi16	simde/x86/avx512/cvts.h	/^simde_mm512_mask_cvtsepi64_epi16 (simde__m128i src, simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_mask_cvtsepi64_epi32	simde/x86/avx512/cvts.h	/^simde_mm512_mask_cvtsepi64_epi32 (simde__m256i src, simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_mask_cvtsepi64_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_mask_cvtsepi64_epi8 (simde__m128i src, simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_mask_div_epi32	simde/x86/svml.h	/^simde_mm512_mask_div_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_div_epu32	simde/x86/svml.h	/^simde_mm512_mask_div_epu32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_div_pd	simde/x86/avx512/div.h	/^simde_mm512_mask_div_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_div_ps	simde/x86/avx512/div.h	/^simde_mm512_mask_div_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_erf_pd	simde/x86/svml.h	/^simde_mm512_mask_erf_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_erf_ps	simde/x86/svml.h	/^simde_mm512_mask_erf_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_erfc_pd	simde/x86/svml.h	/^simde_mm512_mask_erfc_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_erfc_ps	simde/x86/svml.h	/^simde_mm512_mask_erfc_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_erfcinv_pd	simde/x86/svml.h	/^simde_mm512_mask_erfcinv_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_erfcinv_ps	simde/x86/svml.h	/^simde_mm512_mask_erfcinv_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_erfinv_pd	simde/x86/svml.h	/^simde_mm512_mask_erfinv_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_erfinv_ps	simde/x86/svml.h	/^simde_mm512_mask_erfinv_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_exp10_pd	simde/x86/svml.h	/^simde_mm512_mask_exp10_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_exp10_ps	simde/x86/svml.h	/^simde_mm512_mask_exp10_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_exp2_pd	simde/x86/svml.h	/^simde_mm512_mask_exp2_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_exp2_ps	simde/x86/svml.h	/^simde_mm512_mask_exp2_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_exp_pd	simde/x86/svml.h	/^simde_mm512_mask_exp_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_exp_ps	simde/x86/svml.h	/^simde_mm512_mask_exp_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_expm1_pd	simde/x86/svml.h	/^simde_mm512_mask_expm1_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_expm1_ps	simde/x86/svml.h	/^simde_mm512_mask_expm1_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_extractf32x4_ps	simde/x86/avx512/extract.h	68;"	d
simde_mm512_mask_extractf32x4_ps	simde/x86/avx512/extract.h	70;"	d
simde_mm512_mask_extractf64x4_pd	simde/x86/avx512/extract.h	104;"	d
simde_mm512_mask_extractf64x4_pd	simde/x86/avx512/extract.h	106;"	d
simde_mm512_mask_extracti32x4_epi32	simde/x86/avx512/extract.h	140;"	d
simde_mm512_mask_extracti32x4_epi32	simde/x86/avx512/extract.h	142;"	d
simde_mm512_mask_extracti64x4_epi64	simde/x86/avx512/extract.h	176;"	d
simde_mm512_mask_extracti64x4_epi64	simde/x86/avx512/extract.h	178;"	d
simde_mm512_mask_floor_pd	simde/x86/svml.h	/^simde_mm512_mask_floor_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_floor_ps	simde/x86/svml.h	/^simde_mm512_mask_floor_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_fmadd_ps	simde/x86/avx512/fmadd.h	/^simde_mm512_mask_fmadd_ps(simde__m512 a, simde__mmask16 k, simde__m512 b, simde__m512 c) {$/;"	f
simde_mm512_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	399;"	d
simde_mm512_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	401;"	d
simde_mm512_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	501;"	d
simde_mm512_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	503;"	d
simde_mm512_mask_gf2p8mul_epi8	simde/x86/gfni.h	/^simde_mm512_mask_gf2p8mul_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_hypot_pd	simde/x86/svml.h	/^simde_mm512_mask_hypot_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_hypot_ps	simde/x86/svml.h	/^simde_mm512_mask_hypot_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_insertf32x4	simde/x86/avx512/insert.h	57;"	d
simde_mm512_mask_insertf32x4	simde/x86/avx512/insert.h	59;"	d
simde_mm512_mask_insertf64x4	simde/x86/avx512/insert.h	95;"	d
simde_mm512_mask_insertf64x4	simde/x86/avx512/insert.h	97;"	d
simde_mm512_mask_inserti32x4	simde/x86/avx512/insert.h	133;"	d
simde_mm512_mask_inserti32x4	simde/x86/avx512/insert.h	135;"	d
simde_mm512_mask_inserti64x4	simde/x86/avx512/insert.h	171;"	d
simde_mm512_mask_inserti64x4	simde/x86/avx512/insert.h	173;"	d
simde_mm512_mask_invsqrt_pd	simde/x86/svml.h	/^simde_mm512_mask_invsqrt_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_invsqrt_ps	simde/x86/svml.h	/^simde_mm512_mask_invsqrt_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_log10_pd	simde/x86/svml.h	/^simde_mm512_mask_log10_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_log10_ps	simde/x86/svml.h	/^simde_mm512_mask_log10_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_log1p_pd	simde/x86/svml.h	/^simde_mm512_mask_log1p_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_log1p_ps	simde/x86/svml.h	/^simde_mm512_mask_log1p_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_log2_pd	simde/x86/svml.h	/^simde_mm512_mask_log2_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_log2_ps	simde/x86/svml.h	/^simde_mm512_mask_log2_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_log_pd	simde/x86/svml.h	/^simde_mm512_mask_log_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_log_ps	simde/x86/svml.h	/^simde_mm512_mask_log_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_logb_pd	simde/x86/svml.h	/^simde_mm512_mask_logb_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_logb_ps	simde/x86/svml.h	/^simde_mm512_mask_logb_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_madd_epi16	simde/x86/avx512/madd.h	/^simde_mm512_mask_madd_epi16 (simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	/^simde_mm512_mask_maddubs_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_epi16	simde/x86/avx512/max.h	/^simde_mm512_mask_max_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_epi32	simde/x86/avx512/max.h	/^simde_mm512_mask_max_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_epi64	simde/x86/avx512/max.h	/^simde_mm512_mask_max_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_epi8	simde/x86/avx512/max.h	/^simde_mm512_mask_max_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_epu16	simde/x86/avx512/max.h	/^simde_mm512_mask_max_epu16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_epu32	simde/x86/avx512/max.h	/^simde_mm512_mask_max_epu32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_epu64	simde/x86/avx512/max.h	/^simde_mm512_mask_max_epu64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_epu8	simde/x86/avx512/max.h	/^simde_mm512_mask_max_epu8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_max_pd	simde/x86/avx512/max.h	/^simde_mm512_mask_max_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_max_ps	simde/x86/avx512/max.h	/^simde_mm512_mask_max_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_min_epi16	simde/x86/avx512/min.h	/^simde_mm512_mask_min_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_min_epi32	simde/x86/avx512/min.h	/^simde_mm512_mask_min_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_min_epi64	simde/x86/avx512/min.h	/^simde_mm512_mask_min_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_min_epi8	simde/x86/avx512/min.h	/^simde_mm512_mask_min_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_min_epu16	simde/x86/avx512/min.h	/^simde_mm512_mask_min_epu16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_min_epu32	simde/x86/avx512/min.h	/^simde_mm512_mask_min_epu32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_min_epu64	simde/x86/avx512/min.h	/^simde_mm512_mask_min_epu64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_min_epu8	simde/x86/avx512/min.h	/^simde_mm512_mask_min_epu8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_min_pd	simde/x86/avx512/min.h	/^simde_mm512_mask_min_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_min_ps	simde/x86/avx512/min.h	/^simde_mm512_mask_min_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_mov_epi16	simde/x86/avx512/mov.h	/^simde_mm512_mask_mov_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i a) {$/;"	f
simde_mm512_mask_mov_epi32	simde/x86/avx512/mov.h	/^simde_mm512_mask_mov_epi32 (simde__m512i src, simde__mmask16 k, simde__m512i a) {$/;"	f
simde_mm512_mask_mov_epi64	simde/x86/avx512/mov.h	/^simde_mm512_mask_mov_epi64 (simde__m512i src, simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_mask_mov_epi8	simde/x86/avx512/mov.h	/^simde_mm512_mask_mov_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a) {$/;"	f
simde_mm512_mask_mov_pd	simde/x86/avx512/mov.h	/^simde_mm512_mask_mov_pd (simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_mov_ps	simde/x86/avx512/mov.h	/^simde_mm512_mask_mov_ps (simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_mul_epi32	simde/x86/avx512/mul.h	/^simde_mm512_mask_mul_epi32(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_mul_epu32	simde/x86/avx512/mul.h	/^simde_mm512_mask_mul_epu32(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_mul_pd	simde/x86/avx512/mul.h	/^simde_mm512_mask_mul_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_mul_ps	simde/x86/avx512/mul.h	/^simde_mm512_mask_mul_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_mullo_epi32	simde/x86/avx512/mullo.h	/^simde_mm512_mask_mullo_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_nearbyint_pd	simde/x86/svml.h	/^simde_mm512_mask_nearbyint_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_nearbyint_ps	simde/x86/svml.h	/^simde_mm512_mask_nearbyint_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_or_epi32	simde/x86/avx512/or.h	/^simde_mm512_mask_or_epi32(simde__m512i src, simde__mmask16 k, simde__m512i v2, simde__m512i v3) {$/;"	f
simde_mm512_mask_or_epi64	simde/x86/avx512/or.h	/^simde_mm512_mask_or_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask_permutex2var_epi16 (simde__m512i a, simde__mmask32 k, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask_permutex2var_epi32 (simde__m512i a, simde__mmask16 k, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask_permutex2var_epi64 (simde__m512i a, simde__mmask8 k, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask_permutex2var_epi8 (simde__m512i a, simde__mmask64 k, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask_permutex2var_pd (simde__m512d a, simde__mmask8 k, simde__m512i idx, simde__m512d b) {$/;"	f
simde_mm512_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm512_mask_permutex2var_ps (simde__m512 a, simde__mmask16 k, simde__m512i idx, simde__m512 b) {$/;"	f
simde_mm512_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm512_mask_permutexvar_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_mask_permutexvar_epi32	simde/x86/avx512/permutexvar.h	/^simde_mm512_mask_permutexvar_epi32 (simde__m512i src, simde__mmask16 k, simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_mask_permutexvar_epi64	simde/x86/avx512/permutexvar.h	/^simde_mm512_mask_permutexvar_epi64 (simde__m512i src, simde__mmask8 k, simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm512_mask_permutexvar_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_mask_permutexvar_pd	simde/x86/avx512/permutexvar.h	/^simde_mm512_mask_permutexvar_pd (simde__m512d src, simde__mmask8 k, simde__m512i idx, simde__m512d a) {$/;"	f
simde_mm512_mask_permutexvar_ps	simde/x86/avx512/permutexvar.h	/^simde_mm512_mask_permutexvar_ps (simde__m512 src, simde__mmask16 k, simde__m512i idx, simde__m512 a) {$/;"	f
simde_mm512_mask_pow_pd	simde/x86/svml.h	/^simde_mm512_mask_pow_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_pow_ps	simde/x86/svml.h	/^simde_mm512_mask_pow_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_recip_pd	simde/x86/svml.h	/^simde_mm512_mask_recip_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_recip_ps	simde/x86/svml.h	/^simde_mm512_mask_recip_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_rem_epi32	simde/x86/svml.h	/^simde_mm512_mask_rem_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_rem_epu32	simde/x86/svml.h	/^simde_mm512_mask_rem_epu32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_rint_pd	simde/x86/svml.h	/^simde_mm512_mask_rint_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_rint_ps	simde/x86/svml.h	/^simde_mm512_mask_rint_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_set1_epi16	simde/x86/avx512/set1.h	/^simde_mm512_mask_set1_epi16(simde__m512i src, simde__mmask32 k, int16_t a) {$/;"	f
simde_mm512_mask_set1_epi32	simde/x86/avx512/set1.h	/^simde_mm512_mask_set1_epi32(simde__m512i src, simde__mmask16 k, int32_t a) {$/;"	f
simde_mm512_mask_set1_epi64	simde/x86/avx512/set1.h	/^simde_mm512_mask_set1_epi64(simde__m512i src, simde__mmask8 k, int64_t a) {$/;"	f
simde_mm512_mask_set1_epi8	simde/x86/avx512/set1.h	/^simde_mm512_mask_set1_epi8(simde__m512i src, simde__mmask64 k, int8_t a) {$/;"	f
simde_mm512_mask_shuffle_epi8	simde/x86/avx512/shuffle.h	/^simde_mm512_mask_shuffle_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_shuffle_f32x4	simde/x86/avx512/shuffle.h	163;"	d
simde_mm512_mask_shuffle_f64x2	simde/x86/avx512/shuffle.h	171;"	d
simde_mm512_mask_shuffle_i32x4	simde/x86/avx512/shuffle.h	159;"	d
simde_mm512_mask_shuffle_i64x2	simde/x86/avx512/shuffle.h	167;"	d
simde_mm512_mask_sin_pd	simde/x86/svml.h	/^simde_mm512_mask_sin_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_sin_ps	simde/x86/svml.h	/^simde_mm512_mask_sin_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_sincos_pd	simde/x86/svml.h	/^simde_mm512_mask_sincos_pd(simde__m512d* mem_addr, simde__m512d sin_src, simde__m512d cos_src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_sincos_ps	simde/x86/svml.h	/^simde_mm512_mask_sincos_ps(simde__m512* mem_addr, simde__m512 sin_src, simde__m512 cos_src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_sind_pd	simde/x86/svml.h	/^simde_mm512_mask_sind_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_sind_ps	simde/x86/svml.h	/^simde_mm512_mask_sind_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_sinh_pd	simde/x86/svml.h	/^simde_mm512_mask_sinh_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_sinh_ps	simde/x86/svml.h	/^simde_mm512_mask_sinh_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_sll_epi16	simde/x86/avx512/sll.h	/^simde_mm512_mask_sll_epi16 (simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_mask_sll_epi32	simde/x86/avx512/sll.h	/^simde_mm512_mask_sll_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m128i b) {$/;"	f
simde_mm512_mask_sll_epi64	simde/x86/avx512/sll.h	/^simde_mm512_mask_sll_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m128i b) {$/;"	f
simde_mm512_mask_sqrt_pd	simde/x86/avx512/sqrt.h	/^simde_mm512_mask_sqrt_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_sqrt_ps	simde/x86/avx512/sqrt.h	/^simde_mm512_mask_sqrt_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_srl_epi32	simde/x86/avx512/srl.h	/^simde_mm512_mask_srl_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m128i b) {$/;"	f
simde_mm512_mask_srl_epi64	simde/x86/avx512/srl.h	/^simde_mm512_mask_srl_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m128i b) {$/;"	f
simde_mm512_mask_sub_epi32	simde/x86/avx512/sub.h	/^simde_mm512_mask_sub_epi32 (simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_sub_epi64	simde/x86/avx512/sub.h	/^simde_mm512_mask_sub_epi64 (simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_sub_epi8	simde/x86/avx512/sub.h	/^simde_mm512_mask_sub_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_sub_pd	simde/x86/avx512/sub.h	/^simde_mm512_mask_sub_pd (simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_sub_ps	simde/x86/avx512/sub.h	/^simde_mm512_mask_sub_ps (simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_subs_epi8	simde/x86/avx512/subs.h	/^simde_mm512_mask_subs_epi8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_subs_epu8	simde/x86/avx512/subs.h	/^simde_mm512_mask_subs_epu8 (simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_svml_round_pd	simde/x86/svml.h	/^simde_mm512_mask_svml_round_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_tan_pd	simde/x86/svml.h	/^simde_mm512_mask_tan_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_tan_ps	simde/x86/svml.h	/^simde_mm512_mask_tan_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_tand_pd	simde/x86/svml.h	/^simde_mm512_mask_tand_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_tand_ps	simde/x86/svml.h	/^simde_mm512_mask_tand_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_tanh_pd	simde/x86/svml.h	/^simde_mm512_mask_tanh_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_tanh_ps	simde/x86/svml.h	/^simde_mm512_mask_tanh_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_test_epi16_mask	simde/x86/avx512/test.h	/^simde_mm512_mask_test_epi16_mask (simde__mmask32 k1, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_test_epi32_mask	simde/x86/avx512/test.h	/^simde_mm512_mask_test_epi32_mask (simde__mmask16 k1, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_test_epi64_mask	simde/x86/avx512/test.h	/^simde_mm512_mask_test_epi64_mask (simde__mmask8 k1, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_test_epi8_mask	simde/x86/avx512/test.h	/^simde_mm512_mask_test_epi8_mask (simde__mmask64 k1, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_trunc_pd	simde/x86/svml.h	/^simde_mm512_mask_trunc_pd(simde__m512d src, simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_mask_trunc_ps	simde/x86/svml.h	/^simde_mm512_mask_trunc_ps(simde__m512 src, simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_mask_unpackhi_epi16	simde/x86/avx512/unpackhi.h	/^simde_mm512_mask_unpackhi_epi16(simde__m512i src, simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_unpackhi_epi32	simde/x86/avx512/unpackhi.h	/^simde_mm512_mask_unpackhi_epi32(simde__m512i src, simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_unpackhi_epi64	simde/x86/avx512/unpackhi.h	/^simde_mm512_mask_unpackhi_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_unpackhi_epi8	simde/x86/avx512/unpackhi.h	/^simde_mm512_mask_unpackhi_epi8(simde__m512i src, simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mask_unpackhi_pd	simde/x86/avx512/unpackhi.h	/^simde_mm512_mask_unpackhi_pd(simde__m512d src, simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mask_unpackhi_ps	simde/x86/avx512/unpackhi.h	/^simde_mm512_mask_unpackhi_ps(simde__m512 src, simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mask_xor_epi32	simde/x86/avx512/xor.h	/^simde_mm512_mask_xor_epi32(simde__m512i src, simde__mmask16 k, simde__m512i v2, simde__m512i v3) {$/;"	f
simde_mm512_mask_xor_epi64	simde/x86/avx512/xor.h	/^simde_mm512_mask_xor_epi64(simde__m512i src, simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_abs_epi16	simde/x86/avx512/abs.h	/^simde_mm512_maskz_abs_epi16 (simde__mmask32 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_abs_epi32	simde/x86/avx512/abs.h	/^simde_mm512_maskz_abs_epi32(simde__mmask16 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm512_maskz_abs_epi64(simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_abs_epi8	simde/x86/avx512/abs.h	/^simde_mm512_maskz_abs_epi8 (simde__mmask64 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_add_epi16	simde/x86/avx512/add.h	/^simde_mm512_maskz_add_epi16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_add_epi32	simde/x86/avx512/add.h	/^simde_mm512_maskz_add_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_add_epi64	simde/x86/avx512/add.h	/^simde_mm512_maskz_add_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_add_epi8	simde/x86/avx512/add.h	/^simde_mm512_maskz_add_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_add_pd	simde/x86/avx512/add.h	/^simde_mm512_maskz_add_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_maskz_add_ps	simde/x86/avx512/add.h	/^simde_mm512_maskz_add_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_maskz_adds_epi16	simde/x86/avx512/adds.h	/^simde_mm512_maskz_adds_epi16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_adds_epi8	simde/x86/avx512/adds.h	/^simde_mm512_maskz_adds_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_adds_epu16	simde/x86/avx512/adds.h	/^simde_mm512_maskz_adds_epu16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_adds_epu8	simde/x86/avx512/adds.h	/^simde_mm512_maskz_adds_epu8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_and_epi32	simde/x86/avx512/and.h	/^simde_mm512_maskz_and_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_and_epi64	simde/x86/avx512/and.h	/^simde_mm512_maskz_and_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_and_pd	simde/x86/avx512/and.h	/^simde_mm512_maskz_and_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_maskz_and_ps	simde/x86/avx512/and.h	/^simde_mm512_maskz_and_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_maskz_andnot_epi32	simde/x86/avx512/andnot.h	/^simde_mm512_maskz_andnot_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_andnot_epi64	simde/x86/avx512/andnot.h	/^simde_mm512_maskz_andnot_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_andnot_pd	simde/x86/avx512/andnot.h	90;"	d
simde_mm512_maskz_andnot_ps	simde/x86/avx512/andnot.h	60;"	d
simde_mm512_maskz_avg_epu16	simde/x86/avx512/avg.h	/^simde_mm512_maskz_avg_epu16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_avg_epu8	simde/x86/avx512/avg.h	/^simde_mm512_maskz_avg_epu8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_broadcast_f32x2	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcast_f32x2(simde__mmask16 k, simde__m128 a) {$/;"	f
simde_mm512_maskz_broadcast_f32x4	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcast_f32x4(simde__mmask16 k, simde__m128 a) {$/;"	f
simde_mm512_maskz_broadcast_f32x8	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcast_f32x8(simde__mmask16 k, simde__m256 a) {$/;"	f
simde_mm512_maskz_broadcast_f64x2	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcast_f64x2(simde__mmask8 k, simde__m128d a) {$/;"	f
simde_mm512_maskz_broadcast_f64x4	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcast_f64x4(simde__mmask8 k, simde__m256d a) {$/;"	f
simde_mm512_maskz_broadcast_i32x4	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcast_i32x4(simde__mmask16 k, simde__m128i a) {$/;"	f
simde_mm512_maskz_broadcast_i64x4	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcast_i64x4(simde__mmask8 k, simde__m256i a) {$/;"	f
simde_mm512_maskz_broadcastb_epi8	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcastb_epi8 (simde__mmask64 k, simde__m128i a) {$/;"	f
simde_mm512_maskz_broadcastd_epi32	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcastd_epi32(simde__mmask16 k, simde__m128i a) {$/;"	f
simde_mm512_maskz_broadcastq_epi64	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcastq_epi64(simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm512_maskz_broadcastsd_pd	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcastsd_pd(simde__mmask8 k, simde__m128d a) {$/;"	f
simde_mm512_maskz_broadcastss_ps	simde/x86/avx512/broadcast.h	/^simde_mm512_maskz_broadcastss_ps(simde__mmask16 k, simde__m128 a) {$/;"	f
simde_mm512_maskz_cvtepi16_epi8	simde/x86/avx512/cvt.h	/^simde_mm512_maskz_cvtepi16_epi8 (simde__mmask32 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_cvtsepi16_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_maskz_cvtsepi16_epi8 (simde__mmask32 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_cvtsepi32_epi16	simde/x86/avx512/cvts.h	/^simde_mm512_maskz_cvtsepi32_epi16 (simde__mmask16 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_cvtsepi32_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_maskz_cvtsepi32_epi8 (simde__mmask16 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_cvtsepi64_epi16	simde/x86/avx512/cvts.h	/^simde_mm512_maskz_cvtsepi64_epi16 (simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_cvtsepi64_epi32	simde/x86/avx512/cvts.h	/^simde_mm512_maskz_cvtsepi64_epi32 (simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_cvtsepi64_epi8	simde/x86/avx512/cvts.h	/^simde_mm512_maskz_cvtsepi64_epi8 (simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_div_pd	simde/x86/avx512/div.h	/^simde_mm512_maskz_div_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_maskz_div_ps	simde/x86/avx512/div.h	/^simde_mm512_maskz_div_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_maskz_extractf32x4_ps	simde/x86/avx512/extract.h	78;"	d
simde_mm512_maskz_extractf32x4_ps	simde/x86/avx512/extract.h	80;"	d
simde_mm512_maskz_extractf64x4_pd	simde/x86/avx512/extract.h	114;"	d
simde_mm512_maskz_extractf64x4_pd	simde/x86/avx512/extract.h	116;"	d
simde_mm512_maskz_extracti32x4_epi32	simde/x86/avx512/extract.h	150;"	d
simde_mm512_maskz_extracti32x4_epi32	simde/x86/avx512/extract.h	152;"	d
simde_mm512_maskz_extracti64x4_epi64	simde/x86/avx512/extract.h	186;"	d
simde_mm512_maskz_extracti64x4_epi64	simde/x86/avx512/extract.h	188;"	d
simde_mm512_maskz_fmadd_ps	simde/x86/avx512/fmadd.h	/^simde_mm512_maskz_fmadd_ps(simde__mmask16 k, simde__m512 a, simde__m512 b, simde__m512 c) {$/;"	f
simde_mm512_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	429;"	d
simde_mm512_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	431;"	d
simde_mm512_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	531;"	d
simde_mm512_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	533;"	d
simde_mm512_maskz_gf2p8mul_epi8	simde/x86/gfni.h	/^simde_mm512_maskz_gf2p8mul_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_insertf32x4	simde/x86/avx512/insert.h	67;"	d
simde_mm512_maskz_insertf32x4	simde/x86/avx512/insert.h	69;"	d
simde_mm512_maskz_insertf64x4	simde/x86/avx512/insert.h	105;"	d
simde_mm512_maskz_insertf64x4	simde/x86/avx512/insert.h	107;"	d
simde_mm512_maskz_inserti32x4	simde/x86/avx512/insert.h	143;"	d
simde_mm512_maskz_inserti32x4	simde/x86/avx512/insert.h	145;"	d
simde_mm512_maskz_inserti64x4	simde/x86/avx512/insert.h	181;"	d
simde_mm512_maskz_inserti64x4	simde/x86/avx512/insert.h	183;"	d
simde_mm512_maskz_madd_epi16	simde/x86/avx512/madd.h	/^simde_mm512_maskz_madd_epi16 (simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	/^simde_mm512_maskz_maddubs_epi16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_epi16	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_epi16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_epi32	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_epi64	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_epi8	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_epu16	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_epu16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_epu32	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_epu32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_epu64	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_epu64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_epu8	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_epu8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_max_pd	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_maskz_max_ps	simde/x86/avx512/max.h	/^simde_mm512_maskz_max_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_maskz_min_epi16	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_epi16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_min_epi32	simde/x86/avx512/min.h	/^  simde_mm512_maskz_min_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_min_epi64	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_min_epi8	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_min_epu16	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_epu16 (simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_min_epu32	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_epu32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_min_epu64	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_epu64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_min_epu8	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_epu8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_min_pd	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_maskz_min_ps	simde/x86/avx512/min.h	/^simde_mm512_maskz_min_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_maskz_mov_epi16	simde/x86/avx512/mov.h	/^simde_mm512_maskz_mov_epi16 (simde__mmask32 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_mov_epi32	simde/x86/avx512/mov.h	/^simde_mm512_maskz_mov_epi32 (simde__mmask16 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_mov_epi64	simde/x86/avx512/mov.h	/^simde_mm512_maskz_mov_epi64 (simde__mmask8 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_mov_epi8	simde/x86/avx512/mov.h	/^simde_mm512_maskz_mov_epi8 (simde__mmask64 k, simde__m512i a) {$/;"	f
simde_mm512_maskz_mov_pd	simde/x86/avx512/mov.h	/^simde_mm512_maskz_mov_pd (simde__mmask8 k, simde__m512d a) {$/;"	f
simde_mm512_maskz_mov_ps	simde/x86/avx512/mov.h	/^simde_mm512_maskz_mov_ps (simde__mmask16 k, simde__m512 a) {$/;"	f
simde_mm512_maskz_mul_epi32	simde/x86/avx512/mul.h	/^simde_mm512_maskz_mul_epi32(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_mul_epu32	simde/x86/avx512/mul.h	/^simde_mm512_maskz_mul_epu32(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_mul_pd	simde/x86/avx512/mul.h	/^simde_mm512_maskz_mul_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_maskz_mul_ps	simde/x86/avx512/mul.h	/^simde_mm512_maskz_mul_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_maskz_mullo_epi32	simde/x86/avx512/mullo.h	/^simde_mm512_maskz_mullo_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_or_epi32	simde/x86/avx512/or.h	/^simde_mm512_maskz_or_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_or_epi64	simde/x86/avx512/or.h	/^simde_mm512_maskz_or_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm512_maskz_permutex2var_epi16 (simde__mmask32 k, simde__m512i a, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm512_maskz_permutex2var_epi32 (simde__mmask16 k, simde__m512i a, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm512_maskz_permutex2var_epi64 (simde__mmask8 k, simde__m512i a, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm512_maskz_permutex2var_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm512_maskz_permutex2var_pd (simde__mmask8 k, simde__m512d a, simde__m512i idx, simde__m512d b) {$/;"	f
simde_mm512_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm512_maskz_permutex2var_ps (simde__mmask16 k, simde__m512 a, simde__m512i idx, simde__m512 b) {$/;"	f
simde_mm512_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm512_maskz_permutexvar_epi16 (simde__mmask32 k, simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_maskz_permutexvar_epi32	simde/x86/avx512/permutexvar.h	/^simde_mm512_maskz_permutexvar_epi32 (simde__mmask16 k, simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_maskz_permutexvar_epi64	simde/x86/avx512/permutexvar.h	/^simde_mm512_maskz_permutexvar_epi64 (simde__mmask8 k, simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm512_maskz_permutexvar_epi8 (simde__mmask64 k, simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_maskz_permutexvar_pd	simde/x86/avx512/permutexvar.h	/^simde_mm512_maskz_permutexvar_pd (simde__mmask8 k, simde__m512i idx, simde__m512d a) {$/;"	f
simde_mm512_maskz_permutexvar_ps	simde/x86/avx512/permutexvar.h	/^simde_mm512_maskz_permutexvar_ps (simde__mmask16 k, simde__m512i idx, simde__m512 a) {$/;"	f
simde_mm512_maskz_set1_epi16	simde/x86/avx512/set1.h	/^simde_mm512_maskz_set1_epi16(simde__mmask32 k, int16_t a) {$/;"	f
simde_mm512_maskz_set1_epi32	simde/x86/avx512/set1.h	/^simde_mm512_maskz_set1_epi32(simde__mmask16 k, int32_t a) {$/;"	f
simde_mm512_maskz_set1_epi64	simde/x86/avx512/set1.h	/^simde_mm512_maskz_set1_epi64(simde__mmask8 k, int64_t a) {$/;"	f
simde_mm512_maskz_set1_epi8	simde/x86/avx512/set1.h	/^simde_mm512_maskz_set1_epi8(simde__mmask64 k, int8_t a) {$/;"	f
simde_mm512_maskz_shuffle_epi8	simde/x86/avx512/shuffle.h	/^simde_mm512_maskz_shuffle_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_shuffle_f32x4	simde/x86/avx512/shuffle.h	162;"	d
simde_mm512_maskz_shuffle_f64x2	simde/x86/avx512/shuffle.h	170;"	d
simde_mm512_maskz_shuffle_i32x4	simde/x86/avx512/shuffle.h	158;"	d
simde_mm512_maskz_shuffle_i64x2	simde/x86/avx512/shuffle.h	166;"	d
simde_mm512_maskz_sll_epi16	simde/x86/avx512/sll.h	/^simde_mm512_maskz_sll_epi16 (simde__mmask32 k, simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_maskz_sll_epi32	simde/x86/avx512/sll.h	/^simde_mm512_maskz_sll_epi32(simde__mmask16 k, simde__m512i a, simde__m128i b) {$/;"	f
simde_mm512_maskz_sll_epi64	simde/x86/avx512/sll.h	/^simde_mm512_maskz_sll_epi64(simde__mmask8 k, simde__m512i a, simde__m128i b) {$/;"	f
simde_mm512_maskz_srl_epi32	simde/x86/avx512/srl.h	/^simde_mm512_maskz_srl_epi32(simde__mmask16 k, simde__m512i a, simde__m128i b) {$/;"	f
simde_mm512_maskz_srl_epi64	simde/x86/avx512/srl.h	/^simde_mm512_maskz_srl_epi64(simde__mmask8 k, simde__m512i a, simde__m128i b) {$/;"	f
simde_mm512_maskz_sub_epi32	simde/x86/avx512/sub.h	/^simde_mm512_maskz_sub_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_sub_epi64	simde/x86/avx512/sub.h	/^simde_mm512_maskz_sub_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_sub_epi8	simde/x86/avx512/sub.h	/^simde_mm512_maskz_sub_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_sub_pd	simde/x86/avx512/sub.h	/^simde_mm512_maskz_sub_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_maskz_sub_ps	simde/x86/avx512/sub.h	/^simde_mm512_maskz_sub_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_maskz_subs_epi8	simde/x86/avx512/subs.h	/^simde_mm512_maskz_subs_epi8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_subs_epu8	simde/x86/avx512/subs.h	/^simde_mm512_maskz_subs_epu8 (simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_unpackhi_epi16	simde/x86/avx512/unpackhi.h	/^simde_mm512_maskz_unpackhi_epi16(simde__mmask32 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_unpackhi_epi32	simde/x86/avx512/unpackhi.h	/^simde_mm512_maskz_unpackhi_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_unpackhi_epi64	simde/x86/avx512/unpackhi.h	/^simde_mm512_maskz_unpackhi_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_unpackhi_epi8	simde/x86/avx512/unpackhi.h	/^simde_mm512_maskz_unpackhi_epi8(simde__mmask64 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_unpackhi_pd	simde/x86/avx512/unpackhi.h	/^simde_mm512_maskz_unpackhi_pd(simde__mmask8 k, simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_maskz_unpackhi_ps	simde/x86/avx512/unpackhi.h	/^simde_mm512_maskz_unpackhi_ps(simde__mmask16 k, simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_maskz_xor_epi32	simde/x86/avx512/xor.h	/^simde_mm512_maskz_xor_epi32(simde__mmask16 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_maskz_xor_epi64	simde/x86/avx512/xor.h	/^simde_mm512_maskz_xor_epi64(simde__mmask8 k, simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_epi16	simde/x86/avx512/max.h	/^simde_mm512_max_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_epi32	simde/x86/avx512/max.h	/^simde_mm512_max_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_epi64	simde/x86/avx512/max.h	/^simde_mm512_max_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_epi8	simde/x86/avx512/max.h	/^simde_mm512_max_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_epu16	simde/x86/avx512/max.h	/^simde_mm512_max_epu16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_epu32	simde/x86/avx512/max.h	/^simde_mm512_max_epu32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_epu64	simde/x86/avx512/max.h	/^simde_mm512_max_epu64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_epu8	simde/x86/avx512/max.h	/^simde_mm512_max_epu8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_max_pd	simde/x86/avx512/max.h	/^simde_mm512_max_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_max_ps	simde/x86/avx512/max.h	/^simde_mm512_max_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_min_epi16	simde/x86/avx512/min.h	/^simde_mm512_min_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_min_epi32	simde/x86/avx512/min.h	/^simde_mm512_min_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_min_epi64	simde/x86/avx512/min.h	/^simde_mm512_min_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_min_epi8	simde/x86/avx512/min.h	/^simde_mm512_min_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_min_epu16	simde/x86/avx512/min.h	/^simde_mm512_min_epu16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_min_epu32	simde/x86/avx512/min.h	/^simde_mm512_min_epu32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_min_epu64	simde/x86/avx512/min.h	/^simde_mm512_min_epu64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_min_epu8	simde/x86/avx512/min.h	/^simde_mm512_min_epu8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_min_pd	simde/x86/avx512/min.h	/^simde_mm512_min_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_min_ps	simde/x86/avx512/min.h	/^simde_mm512_min_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_movepi16_mask	simde/x86/avx512/mov_mask.h	/^simde_mm512_movepi16_mask (simde__m512i a) {$/;"	f
simde_mm512_movepi32_mask	simde/x86/avx512/mov_mask.h	/^simde_mm512_movepi32_mask (simde__m512i a) {$/;"	f
simde_mm512_movepi64_mask	simde/x86/avx512/mov_mask.h	/^simde_mm512_movepi64_mask (simde__m512i a) {$/;"	f
simde_mm512_movepi8_mask	simde/x86/avx512/mov_mask.h	/^simde_mm512_movepi8_mask (simde__m512i a) {$/;"	f
simde_mm512_movm_epi16	simde/x86/avx512/movm.h	/^simde_mm512_movm_epi16 (simde__mmask32 k) {$/;"	f
simde_mm512_movm_epi32	simde/x86/avx512/movm.h	/^simde_mm512_movm_epi32 (simde__mmask16 k) {$/;"	f
simde_mm512_movm_epi64	simde/x86/avx512/movm.h	/^simde_mm512_movm_epi64 (simde__mmask8 k) {$/;"	f
simde_mm512_movm_epi8	simde/x86/avx512/movm.h	/^simde_mm512_movm_epi8 (simde__mmask64 k) {$/;"	f
simde_mm512_mul_epi32	simde/x86/avx512/mul.h	/^simde_mm512_mul_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mul_epu32	simde/x86/avx512/mul.h	/^simde_mm512_mul_epu32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mul_pd	simde/x86/avx512/mul.h	/^simde_mm512_mul_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_mul_ps	simde/x86/avx512/mul.h	/^simde_mm512_mul_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_mulhi_epi16	simde/x86/avx512/mulhi.h	/^simde_mm512_mulhi_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mulhrs_epi16	simde/x86/avx512/mulhrs.h	/^simde_mm512_mulhrs_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mullo_epi16	simde/x86/avx512/mullo.h	/^simde_mm512_mullo_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_mullo_epi32	simde/x86/avx512/mullo.h	/^simde_mm512_mullo_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_nearbyint_pd	simde/x86/svml.h	/^simde_mm512_nearbyint_pd (simde__m512d a) {$/;"	f
simde_mm512_nearbyint_ps	simde/x86/svml.h	/^simde_mm512_nearbyint_ps (simde__m512 a) {$/;"	f
simde_mm512_or_epi32	simde/x86/avx512/or.h	/^simde_mm512_or_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_or_epi64	simde/x86/avx512/or.h	/^simde_mm512_or_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_or_pd	simde/x86/avx512/or.h	/^simde_mm512_or_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_or_ps	simde/x86/avx512/or.h	/^simde_mm512_or_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_or_si512	simde/x86/avx512/or.h	/^simde_mm512_or_si512 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_packs_epi16	simde/x86/avx512/packs.h	/^simde_mm512_packs_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_packs_epi32	simde/x86/avx512/packs.h	/^simde_mm512_packs_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_packus_epi16	simde/x86/avx512/packus.h	/^simde_mm512_packus_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_packus_epi32	simde/x86/avx512/packus.h	/^simde_mm512_packus_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm512_permutex2var_epi16 (simde__m512i a, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm512_permutex2var_epi32 (simde__m512i a, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm512_permutex2var_epi64 (simde__m512i a, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm512_permutex2var_epi8 (simde__m512i a, simde__m512i idx, simde__m512i b) {$/;"	f
simde_mm512_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm512_permutex2var_pd (simde__m512d a, simde__m512i idx, simde__m512d b) {$/;"	f
simde_mm512_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm512_permutex2var_ps (simde__m512 a, simde__m512i idx, simde__m512 b) {$/;"	f
simde_mm512_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm512_permutexvar_epi16 (simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_permutexvar_epi32	simde/x86/avx512/permutexvar.h	/^simde_mm512_permutexvar_epi32 (simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_permutexvar_epi64	simde/x86/avx512/permutexvar.h	/^simde_mm512_permutexvar_epi64 (simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm512_permutexvar_epi8 (simde__m512i idx, simde__m512i a) {$/;"	f
simde_mm512_permutexvar_pd	simde/x86/avx512/permutexvar.h	/^simde_mm512_permutexvar_pd (simde__m512i idx, simde__m512d a) {$/;"	f
simde_mm512_permutexvar_ps	simde/x86/avx512/permutexvar.h	/^simde_mm512_permutexvar_ps (simde__m512i idx, simde__m512 a) {$/;"	f
simde_mm512_pow_pd	simde/x86/svml.h	/^simde_mm512_pow_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_pow_ps	simde/x86/svml.h	/^simde_mm512_pow_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_recip_pd	simde/x86/svml.h	/^simde_mm512_recip_pd (simde__m512d a) {$/;"	f
simde_mm512_recip_ps	simde/x86/svml.h	/^simde_mm512_recip_ps (simde__m512 a) {$/;"	f
simde_mm512_rem_epi16	simde/x86/svml.h	/^simde_mm512_rem_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_rem_epi32	simde/x86/svml.h	/^simde_mm512_rem_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_rem_epi64	simde/x86/svml.h	/^simde_mm512_rem_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_rem_epi8	simde/x86/svml.h	/^simde_mm512_rem_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_rem_epu16	simde/x86/svml.h	/^simde_mm512_rem_epu16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_rem_epu32	simde/x86/svml.h	/^simde_mm512_rem_epu32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_rem_epu64	simde/x86/svml.h	/^simde_mm512_rem_epu64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_rem_epu8	simde/x86/svml.h	/^simde_mm512_rem_epu8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_rint_pd	simde/x86/svml.h	/^simde_mm512_rint_pd (simde__m512d a) {$/;"	f
simde_mm512_rint_ps	simde/x86/svml.h	/^simde_mm512_rint_ps (simde__m512 a) {$/;"	f
simde_mm512_sad_epu8	simde/x86/avx512/sad.h	/^simde_mm512_sad_epu8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_set1_epi16	simde/x86/avx512/set1.h	/^simde_mm512_set1_epi16 (int16_t a) {$/;"	f
simde_mm512_set1_epi32	simde/x86/avx512/set1.h	/^simde_mm512_set1_epi32 (int32_t a) {$/;"	f
simde_mm512_set1_epi64	simde/x86/avx512/set1.h	/^simde_mm512_set1_epi64 (int64_t a) {$/;"	f
simde_mm512_set1_epi8	simde/x86/avx512/set1.h	/^simde_mm512_set1_epi8 (int8_t a) {$/;"	f
simde_mm512_set1_pd	simde/x86/avx512/set1.h	/^simde_mm512_set1_pd (simde_float64 a) {$/;"	f
simde_mm512_set1_ps	simde/x86/avx512/set1.h	/^simde_mm512_set1_ps (simde_float32 a) {$/;"	f
simde_mm512_set4_epi32	simde/x86/avx512/set4.h	/^simde_mm512_set4_epi32 (int32_t d, int32_t c, int32_t b, int32_t a) {$/;"	f
simde_mm512_set4_epi64	simde/x86/avx512/set4.h	/^simde_mm512_set4_epi64 (int64_t d, int64_t c, int64_t b, int64_t a) {$/;"	f
simde_mm512_set4_pd	simde/x86/avx512/set4.h	/^simde_mm512_set4_pd (simde_float64 d, simde_float64 c, simde_float64 b, simde_float64 a) {$/;"	f
simde_mm512_set4_ps	simde/x86/avx512/set4.h	/^simde_mm512_set4_ps (simde_float32 d, simde_float32 c, simde_float32 b, simde_float32 a) {$/;"	f
simde_mm512_set_epi16	simde/x86/avx512/set.h	/^simde_mm512_set_epi16 (int16_t e31, int16_t e30, int16_t e29, int16_t e28, int16_t e27, int16_t e26, int16_t e25, int16_t e24,$/;"	f
simde_mm512_set_epi32	simde/x86/avx512/set.h	/^simde_mm512_set_epi32 (int32_t e15, int32_t e14, int32_t e13, int32_t e12, int32_t e11, int32_t e10, int32_t  e9, int32_t  e8,$/;"	f
simde_mm512_set_epi64	simde/x86/avx512/set.h	/^simde_mm512_set_epi64 (int64_t e7, int64_t e6, int64_t e5, int64_t e4, int64_t e3, int64_t e2, int64_t e1, int64_t e0) {$/;"	f
simde_mm512_set_epi8	simde/x86/avx512/set.h	/^simde_mm512_set_epi8 (int8_t e63, int8_t e62, int8_t e61, int8_t e60, int8_t e59, int8_t e58, int8_t e57, int8_t e56,$/;"	f
simde_mm512_set_pd	simde/x86/avx512/set.h	/^simde_mm512_set_pd (simde_float64 e7, simde_float64 e6, simde_float64 e5, simde_float64 e4, simde_float64 e3, simde_float64 e2, simde_float64 e1, simde_float64 e0) {$/;"	f
simde_mm512_set_ps	simde/x86/avx512/set.h	/^simde_mm512_set_ps (simde_float32 e15, simde_float32 e14, simde_float32 e13, simde_float32 e12,$/;"	f
simde_mm512_setr4_epi32	simde/x86/avx512/setr4.h	/^simde_mm512_setr4_epi32 (int32_t d, int32_t c, int32_t b, int32_t a) {$/;"	f
simde_mm512_setr4_epi64	simde/x86/avx512/setr4.h	/^simde_mm512_setr4_epi64 (int64_t d, int64_t c, int64_t b, int64_t a) {$/;"	f
simde_mm512_setr4_pd	simde/x86/avx512/setr4.h	/^simde_mm512_setr4_pd (simde_float64 d, simde_float64 c, simde_float64 b, simde_float64 a) {$/;"	f
simde_mm512_setr4_ps	simde/x86/avx512/setr4.h	/^simde_mm512_setr4_ps (simde_float32 d, simde_float32 c, simde_float32 b, simde_float32 a) {$/;"	f
simde_mm512_setr_epi32	simde/x86/avx512/setr.h	/^simde_mm512_setr_epi32 (int32_t e15, int32_t e14, int32_t e13, int32_t e12, int32_t e11, int32_t e10, int32_t  e9, int32_t  e8,$/;"	f
simde_mm512_setr_epi64	simde/x86/avx512/setr.h	/^simde_mm512_setr_epi64 (int64_t e7, int64_t e6, int64_t e5, int64_t e4, int64_t e3, int64_t e2, int64_t e1, int64_t e0) {$/;"	f
simde_mm512_setr_pd	simde/x86/avx512/setr.h	/^simde_mm512_setr_pd (simde_float64 e7, simde_float64 e6, simde_float64 e5, simde_float64 e4, simde_float64 e3, simde_float64 e2, simde_float64 e1, simde_float64 e0) {$/;"	f
simde_mm512_setr_ps	simde/x86/avx512/setr.h	/^simde_mm512_setr_ps (simde_float32 e15, simde_float32 e14, simde_float32 e13, simde_float32 e12,$/;"	f
simde_mm512_setzero_epi32	simde/x86/avx512/setzero.h	51;"	d
simde_mm512_setzero_pd	simde/x86/avx512/setzero.h	/^simde_mm512_setzero_pd(void) {$/;"	f
simde_mm512_setzero_ps	simde/x86/avx512/setzero.h	/^simde_mm512_setzero_ps(void) {$/;"	f
simde_mm512_setzero_si512	simde/x86/avx512/setzero.h	/^simde_mm512_setzero_si512(void) {$/;"	f
simde_mm512_shuffle_epi8	simde/x86/avx512/shuffle.h	/^simde_mm512_shuffle_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_shuffle_f32x4	simde/x86/avx512/shuffle.h	161;"	d
simde_mm512_shuffle_f64x2	simde/x86/avx512/shuffle.h	169;"	d
simde_mm512_shuffle_i32x4	simde/x86/avx512/shuffle.h	151;"	d
simde_mm512_shuffle_i64x2	simde/x86/avx512/shuffle.h	165;"	d
simde_mm512_sin_pd	simde/x86/svml.h	/^simde_mm512_sin_pd (simde__m512d a) {$/;"	f
simde_mm512_sin_ps	simde/x86/svml.h	/^simde_mm512_sin_ps (simde__m512 a) {$/;"	f
simde_mm512_sincos_pd	simde/x86/svml.h	/^simde_mm512_sincos_pd (simde__m512d* mem_addr, simde__m512d a) {$/;"	f
simde_mm512_sincos_ps	simde/x86/svml.h	/^simde_mm512_sincos_ps (simde__m512* mem_addr, simde__m512 a) {$/;"	f
simde_mm512_sind_pd	simde/x86/svml.h	/^simde_mm512_sind_pd (simde__m512d a) {$/;"	f
simde_mm512_sind_ps	simde/x86/svml.h	/^simde_mm512_sind_ps (simde__m512 a) {$/;"	f
simde_mm512_sinh_pd	simde/x86/svml.h	/^simde_mm512_sinh_pd (simde__m512d a) {$/;"	f
simde_mm512_sinh_ps	simde/x86/svml.h	/^simde_mm512_sinh_ps (simde__m512 a) {$/;"	f
simde_mm512_sll_epi16	simde/x86/avx512/sll.h	/^simde_mm512_sll_epi16 (simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_sll_epi32	simde/x86/avx512/sll.h	/^simde_mm512_sll_epi32 (simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_sll_epi64	simde/x86/avx512/sll.h	/^simde_mm512_sll_epi64 (simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_slli_epi32	simde/x86/avx512/slli.h	/^simde_mm512_slli_epi32 (simde__m512i a, unsigned int imm8) {$/;"	f
simde_mm512_slli_epi64	simde/x86/avx512/slli.h	/^simde_mm512_slli_epi64 (simde__m512i a, unsigned int imm8) {$/;"	f
simde_mm512_sllv_epi16	simde/x86/avx512/sllv.h	/^simde_mm512_sllv_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_sllv_epi16	simde/x86/avx512/sllv.h	58;"	d
simde_mm512_sqrt_pd	simde/x86/avx512/sqrt.h	/^simde_mm512_sqrt_pd (simde__m512d a) {$/;"	f
simde_mm512_sqrt_ps	simde/x86/avx512/sqrt.h	/^simde_mm512_sqrt_ps (simde__m512 a) {$/;"	f
simde_mm512_sra_epi16	simde/x86/avx512/sra.h	/^simde_mm512_sra_epi16 (simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_srai_epi16	simde/x86/avx512/srai.h	/^simde_mm512_srai_epi16 (simde__m512i a, const int imm8) {$/;"	f
simde_mm512_srai_epi16	simde/x86/avx512/srai.h	60;"	d
simde_mm512_srav_epi16	simde/x86/avx512/srav.h	/^simde_mm512_srav_epi16 (simde__m512i a, simde__m512i count) {$/;"	f
simde_mm512_srl_epi16	simde/x86/avx512/srl.h	/^simde_mm512_srl_epi16 (simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_srl_epi32	simde/x86/avx512/srl.h	/^simde_mm512_srl_epi32 (simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_srl_epi64	simde/x86/avx512/srl.h	/^simde_mm512_srl_epi64 (simde__m512i a, simde__m128i count) {$/;"	f
simde_mm512_srli_epi16	simde/x86/avx512/srli.h	73;"	d
simde_mm512_srli_epi32	simde/x86/avx512/srli.h	/^simde_mm512_srli_epi32 (simde__m512i a, unsigned int imm8) {$/;"	f
simde_mm512_srli_epi64	simde/x86/avx512/srli.h	/^simde_mm512_srli_epi64 (simde__m512i a, unsigned int imm8) {$/;"	f
simde_mm512_srlv_epi16	simde/x86/avx512/srlv.h	/^simde_mm512_srlv_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_srlv_epi32	simde/x86/avx512/srlv.h	/^simde_mm512_srlv_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_srlv_epi64	simde/x86/avx512/srlv.h	/^simde_mm512_srlv_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_store_epi16	simde/x86/avx512/store.h	74;"	d
simde_mm512_store_epi32	simde/x86/avx512/store.h	75;"	d
simde_mm512_store_epi64	simde/x86/avx512/store.h	76;"	d
simde_mm512_store_epi8	simde/x86/avx512/store.h	73;"	d
simde_mm512_store_pd	simde/x86/avx512/store.h	/^simde_mm512_store_pd (void * mem_addr, simde__m512d a) {$/;"	f
simde_mm512_store_ps	simde/x86/avx512/store.h	/^simde_mm512_store_ps (void * mem_addr, simde__m512 a) {$/;"	f
simde_mm512_store_si512	simde/x86/avx512/store.h	/^simde_mm512_store_si512 (void * mem_addr, simde__m512i a) {$/;"	f
simde_mm512_storeu_epi16	simde/x86/avx512/storeu.h	74;"	d
simde_mm512_storeu_epi32	simde/x86/avx512/storeu.h	75;"	d
simde_mm512_storeu_epi64	simde/x86/avx512/storeu.h	76;"	d
simde_mm512_storeu_epi8	simde/x86/avx512/storeu.h	73;"	d
simde_mm512_storeu_pd	simde/x86/avx512/storeu.h	/^simde_mm512_storeu_pd (void * mem_addr, simde__m512d a) {$/;"	f
simde_mm512_storeu_ps	simde/x86/avx512/storeu.h	/^simde_mm512_storeu_ps (void * mem_addr, simde__m512 a) {$/;"	f
simde_mm512_storeu_si512	simde/x86/avx512/storeu.h	/^simde_mm512_storeu_si512 (void * mem_addr, simde__m512i a) {$/;"	f
simde_mm512_sub_epi16	simde/x86/avx512/sub.h	/^simde_mm512_sub_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_sub_epi32	simde/x86/avx512/sub.h	/^simde_mm512_sub_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_sub_epi64	simde/x86/avx512/sub.h	/^simde_mm512_sub_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_sub_epi8	simde/x86/avx512/sub.h	/^simde_mm512_sub_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_sub_pd	simde/x86/avx512/sub.h	/^simde_mm512_sub_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_sub_ps	simde/x86/avx512/sub.h	/^simde_mm512_sub_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_subs_epi16	simde/x86/avx512/subs.h	/^simde_mm512_subs_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_subs_epi8	simde/x86/avx512/subs.h	/^simde_mm512_subs_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_subs_epu16	simde/x86/avx512/subs.h	/^simde_mm512_subs_epu16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_subs_epu8	simde/x86/avx512/subs.h	/^simde_mm512_subs_epu8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_svml_round_pd	simde/x86/svml.h	/^simde_mm512_svml_round_pd (simde__m512d a) {$/;"	f
simde_mm512_svml_sqrt_pd	simde/x86/svml.h	/^simde_mm512_svml_sqrt_pd (simde__m512d a) {$/;"	f
simde_mm512_svml_sqrt_ps	simde/x86/svml.h	/^simde_mm512_svml_sqrt_ps (simde__m512 a) {$/;"	f
simde_mm512_tan_pd	simde/x86/svml.h	/^simde_mm512_tan_pd (simde__m512d a) {$/;"	f
simde_mm512_tan_ps	simde/x86/svml.h	/^simde_mm512_tan_ps (simde__m512 a) {$/;"	f
simde_mm512_tand_pd	simde/x86/svml.h	/^simde_mm512_tand_pd (simde__m512d a) {$/;"	f
simde_mm512_tand_ps	simde/x86/svml.h	/^simde_mm512_tand_ps (simde__m512 a) {$/;"	f
simde_mm512_tanh_pd	simde/x86/svml.h	/^simde_mm512_tanh_pd (simde__m512d a) {$/;"	f
simde_mm512_tanh_ps	simde/x86/svml.h	/^simde_mm512_tanh_ps (simde__m512 a) {$/;"	f
simde_mm512_test_epi16_mask	simde/x86/avx512/test.h	/^simde_mm512_test_epi16_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_test_epi32_mask	simde/x86/avx512/test.h	/^simde_mm512_test_epi32_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_test_epi64_mask	simde/x86/avx512/test.h	/^simde_mm512_test_epi64_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_test_epi8_mask	simde/x86/avx512/test.h	/^simde_mm512_test_epi8_mask (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_trunc_pd	simde/x86/svml.h	/^simde_mm512_trunc_pd (simde__m512d a) {$/;"	f
simde_mm512_trunc_ps	simde/x86/svml.h	/^simde_mm512_trunc_ps (simde__m512 a) {$/;"	f
simde_mm512_unpackhi_epi16	simde/x86/avx512/unpackhi.h	/^simde_mm512_unpackhi_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_unpackhi_epi32	simde/x86/avx512/unpackhi.h	/^simde_mm512_unpackhi_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_unpackhi_epi64	simde/x86/avx512/unpackhi.h	/^simde_mm512_unpackhi_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_unpackhi_epi8	simde/x86/avx512/unpackhi.h	/^simde_mm512_unpackhi_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_unpackhi_pd	simde/x86/avx512/unpackhi.h	/^simde_mm512_unpackhi_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_unpackhi_ps	simde/x86/avx512/unpackhi.h	/^simde_mm512_unpackhi_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_unpacklo_epi16	simde/x86/avx512/unpacklo.h	/^simde_mm512_unpacklo_epi16 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_unpacklo_epi8	simde/x86/avx512/unpacklo.h	/^simde_mm512_unpacklo_epi8 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_xor_epi32	simde/x86/avx512/xor.h	/^simde_mm512_xor_epi32 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_xor_epi64	simde/x86/avx512/xor.h	/^simde_mm512_xor_epi64 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm512_xor_pd	simde/x86/avx512/xor.h	/^simde_mm512_xor_pd (simde__m512d a, simde__m512d b) {$/;"	f
simde_mm512_xor_ps	simde/x86/avx512/xor.h	/^simde_mm512_xor_ps (simde__m512 a, simde__m512 b) {$/;"	f
simde_mm512_xor_si512	simde/x86/avx512/xor.h	/^simde_mm512_xor_si512 (simde__m512i a, simde__m512i b) {$/;"	f
simde_mm_2intersect_epi32	simde/x86/avx512/2intersect.h	/^simde_mm_2intersect_epi32(simde__m128i a, simde__m128i b, simde__mmask8 *k1, simde__mmask8 *k2) {$/;"	f
simde_mm_2intersect_epi64	simde/x86/avx512/2intersect.h	/^simde_mm_2intersect_epi64(simde__m128i a, simde__m128i b, simde__mmask8 *k1, simde__mmask8 *k2) {$/;"	f
simde_mm_abs_epi16	simde/x86/ssse3.h	/^simde_mm_abs_epi16 (simde__m128i a) {$/;"	f
simde_mm_abs_epi32	simde/x86/ssse3.h	/^simde_mm_abs_epi32 (simde__m128i a) {$/;"	f
simde_mm_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm_abs_epi64(simde__m128i a) {$/;"	f
simde_mm_abs_epi8	simde/x86/ssse3.h	/^simde_mm_abs_epi8 (simde__m128i a) {$/;"	f
simde_mm_abs_pi16	simde/x86/ssse3.h	/^simde_mm_abs_pi16 (simde__m64 a) {$/;"	f
simde_mm_abs_pi32	simde/x86/ssse3.h	/^simde_mm_abs_pi32 (simde__m64 a) {$/;"	f
simde_mm_abs_pi8	simde/x86/ssse3.h	/^simde_mm_abs_pi8 (simde__m64 a) {$/;"	f
simde_mm_acos_pd	simde/x86/svml.h	/^simde_mm_acos_pd (simde__m128d a) {$/;"	f
simde_mm_acos_ps	simde/x86/svml.h	/^simde_mm_acos_ps (simde__m128 a) {$/;"	f
simde_mm_acosh_pd	simde/x86/svml.h	/^simde_mm_acosh_pd (simde__m128d a) {$/;"	f
simde_mm_acosh_ps	simde/x86/svml.h	/^simde_mm_acosh_ps (simde__m128 a) {$/;"	f
simde_mm_add_epi16	simde/x86/sse2.h	/^simde_mm_add_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_add_epi32	simde/x86/sse2.h	/^simde_mm_add_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_add_epi64	simde/x86/sse2.h	/^simde_mm_add_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_add_epi8	simde/x86/sse2.h	/^simde_mm_add_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_add_pd	simde/x86/sse2.h	/^simde_mm_add_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_add_pi16	simde/x86/mmx.h	/^simde_mm_add_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_add_pi32	simde/x86/mmx.h	/^simde_mm_add_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_add_pi8	simde/x86/mmx.h	/^simde_mm_add_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_add_ps	simde/x86/sse.h	/^simde_mm_add_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_add_sd	simde/x86/sse2.h	/^simde_mm_add_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_add_si64	simde/x86/sse2.h	/^simde_mm_add_si64 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_add_ss	simde/x86/sse.h	/^simde_mm_add_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_adds_epi16	simde/x86/sse2.h	/^simde_mm_adds_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_adds_epi8	simde/x86/sse2.h	/^simde_mm_adds_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_adds_epu16	simde/x86/sse2.h	/^simde_mm_adds_epu16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_adds_epu8	simde/x86/sse2.h	/^simde_mm_adds_epu8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_adds_pi16	simde/x86/mmx.h	/^simde_mm_adds_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_adds_pi8	simde/x86/mmx.h	/^simde_mm_adds_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_adds_pu16	simde/x86/mmx.h	/^simde_mm_adds_pu16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_adds_pu8	simde/x86/mmx.h	/^simde_mm_adds_pu8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_addsub_pd	simde/x86/sse3.h	/^simde_mm_addsub_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_addsub_ps	simde/x86/sse3.h	/^simde_mm_addsub_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_alignr_epi8	simde/x86/ssse3.h	231;"	d
simde_mm_alignr_epi8	simde/x86/ssse3.h	233;"	d
simde_mm_alignr_pi8	simde/x86/ssse3.h	272;"	d
simde_mm_alignr_pi8	simde/x86/ssse3.h	274;"	d
simde_mm_and_pd	simde/x86/sse2.h	/^simde_mm_and_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_and_ps	simde/x86/sse.h	/^simde_mm_and_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_and_si128	simde/x86/sse2.h	/^simde_mm_and_si128 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_and_si64	simde/x86/mmx.h	/^simde_mm_and_si64 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_andnot_pd	simde/x86/sse2.h	/^simde_mm_andnot_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_andnot_ps	simde/x86/sse.h	/^simde_mm_andnot_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_andnot_si128	simde/x86/sse2.h	/^simde_mm_andnot_si128 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_andnot_si64	simde/x86/mmx.h	/^simde_mm_andnot_si64 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_asin_pd	simde/x86/svml.h	/^simde_mm_asin_pd (simde__m128d a) {$/;"	f
simde_mm_asin_ps	simde/x86/svml.h	/^simde_mm_asin_ps (simde__m128 a) {$/;"	f
simde_mm_asinh_pd	simde/x86/svml.h	/^simde_mm_asinh_pd (simde__m128d a) {$/;"	f
simde_mm_asinh_ps	simde/x86/svml.h	/^simde_mm_asinh_ps (simde__m128 a) {$/;"	f
simde_mm_atan2_pd	simde/x86/svml.h	/^simde_mm_atan2_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_atan2_ps	simde/x86/svml.h	/^simde_mm_atan2_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_atan_pd	simde/x86/svml.h	/^simde_mm_atan_pd (simde__m128d a) {$/;"	f
simde_mm_atan_ps	simde/x86/svml.h	/^simde_mm_atan_ps (simde__m128 a) {$/;"	f
simde_mm_atanh_pd	simde/x86/svml.h	/^simde_mm_atanh_pd (simde__m128d a) {$/;"	f
simde_mm_atanh_ps	simde/x86/svml.h	/^simde_mm_atanh_ps (simde__m128 a) {$/;"	f
simde_mm_avg_epu16	simde/x86/sse2.h	/^simde_mm_avg_epu16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_avg_epu8	simde/x86/sse2.h	/^simde_mm_avg_epu8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_avg_pu16	simde/x86/sse.h	/^simde_mm_avg_pu16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_avg_pu8	simde/x86/sse.h	/^simde_mm_avg_pu8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_blend_epi16	simde/x86/sse4.1.h	58;"	d
simde_mm_blend_epi16	simde/x86/sse4.1.h	60;"	d
simde_mm_blend_epi16	simde/x86/sse4.1.h	76;"	d
simde_mm_blend_epi32	simde/x86/avx2.h	571;"	d
simde_mm_blend_epi32	simde/x86/avx2.h	573;"	d
simde_mm_blend_pd	simde/x86/sse4.1.h	112;"	d
simde_mm_blend_pd	simde/x86/sse4.1.h	114;"	d
simde_mm_blend_pd	simde/x86/sse4.1.h	124;"	d
simde_mm_blend_ps	simde/x86/sse4.1.h	154;"	d
simde_mm_blend_ps	simde/x86/sse4.1.h	156;"	d
simde_mm_blend_ps	simde/x86/sse4.1.h	168;"	d
simde_mm_blendv_epi8	simde/x86/sse4.1.h	/^simde_mm_blendv_epi8 (simde__m128i a, simde__m128i b, simde__m128i mask) {$/;"	f
simde_mm_blendv_pd	simde/x86/sse4.1.h	/^simde_mm_blendv_pd (simde__m128d a, simde__m128d b, simde__m128d mask) {$/;"	f
simde_mm_blendv_ps	simde/x86/sse4.1.h	/^simde_mm_blendv_ps (simde__m128 a, simde__m128 b, simde__m128 mask) {$/;"	f
simde_mm_broadcast_ss	simde/x86/avx.h	/^simde_mm_broadcast_ss (simde_float32 const * a) {$/;"	f
simde_mm_broadcastb_epi8	simde/x86/avx2.h	/^simde_mm_broadcastb_epi8 (simde__m128i a) {$/;"	f
simde_mm_broadcastd_epi32	simde/x86/avx2.h	/^simde_mm_broadcastd_epi32 (simde__m128i a) {$/;"	f
simde_mm_broadcastq_epi64	simde/x86/avx2.h	/^simde_mm_broadcastq_epi64 (simde__m128i a) {$/;"	f
simde_mm_broadcastsd_pd	simde/x86/avx2.h	/^simde_mm_broadcastsd_pd (simde__m128d a) {$/;"	f
simde_mm_broadcastsi128_si256	simde/x86/avx2.h	953;"	d
simde_mm_broadcastss_ps	simde/x86/avx2.h	/^simde_mm_broadcastss_ps (simde__m128 a) {$/;"	f
simde_mm_broadcastw_epi16	simde/x86/avx2.h	/^simde_mm_broadcastw_epi16 (simde__m128i a) {$/;"	f
simde_mm_bslli_si128	simde/x86/sse2.h	1180;"	d
simde_mm_bslli_si128	simde/x86/sse2.h	1182;"	d
simde_mm_bslli_si128	simde/x86/sse2.h	1185;"	d
simde_mm_bsrli_si128	simde/x86/sse2.h	1252;"	d
simde_mm_bsrli_si128	simde/x86/sse2.h	1254;"	d
simde_mm_bsrli_si128	simde/x86/sse2.h	1257;"	d
simde_mm_castpd_ps	simde/x86/sse2.h	/^simde_mm_castpd_ps (simde__m128d a) {$/;"	f
simde_mm_castpd_si128	simde/x86/sse2.h	/^simde_mm_castpd_si128 (simde__m128d a) {$/;"	f
simde_mm_castps_pd	simde/x86/sse2.h	/^simde_mm_castps_pd (simde__m128 a) {$/;"	f
simde_mm_castps_si128	simde/x86/sse2.h	/^simde_mm_castps_si128 (simde__m128 a) {$/;"	f
simde_mm_castsi128_pd	simde/x86/sse2.h	/^simde_mm_castsi128_pd (simde__m128i a) {$/;"	f
simde_mm_castsi128_ps	simde/x86/sse2.h	/^simde_mm_castsi128_ps (simde__m128i a) {$/;"	f
simde_mm_cbrt_pd	simde/x86/svml.h	/^simde_mm_cbrt_pd (simde__m128d a) {$/;"	f
simde_mm_cbrt_ps	simde/x86/svml.h	/^simde_mm_cbrt_ps (simde__m128 a) {$/;"	f
simde_mm_cdfnorm_pd	simde/x86/svml.h	/^simde_mm_cdfnorm_pd (simde__m128d a) {$/;"	f
simde_mm_cdfnorm_ps	simde/x86/svml.h	/^simde_mm_cdfnorm_ps (simde__m128 a) {$/;"	f
simde_mm_cdfnorminv_pd	simde/x86/svml.h	/^simde_mm_cdfnorminv_pd (simde__m128d a) {$/;"	f
simde_mm_cdfnorminv_ps	simde/x86/svml.h	/^simde_mm_cdfnorminv_ps (simde__m128 a) {$/;"	f
simde_mm_ceil_pd	simde/x86/sse4.1.h	/^simde_mm_ceil_pd (simde__m128d a) {$/;"	f
simde_mm_ceil_ps	simde/x86/sse4.1.h	/^simde_mm_ceil_ps (simde__m128 a) {$/;"	f
simde_mm_ceil_sd	simde/x86/sse4.1.h	/^simde_mm_ceil_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_ceil_ss	simde/x86/sse4.1.h	/^simde_mm_ceil_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cexp_ps	simde/x86/svml.h	/^simde_mm_cexp_ps (simde__m128 a) {$/;"	f
simde_mm_clflush	simde/x86/sse2.h	/^simde_mm_clflush (void const* p) {$/;"	f
simde_mm_clmulepi64_si128	simde/x86/clmul.h	207;"	d
simde_mm_clmulepi64_si128	simde/x86/clmul.h	209;"	d
simde_mm_clog_ps	simde/x86/svml.h	/^simde_mm_clog_ps (simde__m128 a) {$/;"	f
simde_mm_cmp_pd	simde/x86/avx.h	2278;"	d
simde_mm_cmp_ps	simde/x86/avx.h	2350;"	d
simde_mm_cmp_sd	simde/x86/avx.h	2485;"	d
simde_mm_cmp_ss	simde/x86/avx.h	2622;"	d
simde_mm_cmpeq_epi16	simde/x86/sse2.h	/^simde_mm_cmpeq_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmpeq_epi32	simde/x86/sse2.h	/^simde_mm_cmpeq_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmpeq_epi64	simde/x86/sse4.1.h	/^simde_mm_cmpeq_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmpeq_epi8	simde/x86/sse2.h	/^simde_mm_cmpeq_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmpeq_pd	simde/x86/sse2.h	/^simde_mm_cmpeq_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpeq_pi16	simde/x86/mmx.h	/^simde_mm_cmpeq_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_cmpeq_pi32	simde/x86/mmx.h	/^simde_mm_cmpeq_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_cmpeq_pi8	simde/x86/mmx.h	/^simde_mm_cmpeq_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_cmpeq_ps	simde/x86/sse.h	/^simde_mm_cmpeq_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpeq_sd	simde/x86/sse2.h	/^simde_mm_cmpeq_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpeq_ss	simde/x86/sse.h	/^simde_mm_cmpeq_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpestrs	simde/x86/sse4.2.h	109;"	d
simde_mm_cmpestrz	simde/x86/sse4.2.h	129;"	d
simde_mm_cmpge_pd	simde/x86/sse2.h	/^simde_mm_cmpge_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpge_ps	simde/x86/sse.h	/^simde_mm_cmpge_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpge_sd	simde/x86/sse2.h	/^simde_mm_cmpge_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpge_ss	simde/x86/sse.h	/^simde_mm_cmpge_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpgt_epi16	simde/x86/sse2.h	/^simde_mm_cmpgt_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmpgt_epi32	simde/x86/sse2.h	/^simde_mm_cmpgt_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmpgt_epi64	simde/x86/sse4.2.h	/^simde_mm_cmpgt_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmpgt_epi8	simde/x86/sse2.h	/^simde_mm_cmpgt_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmpgt_pd	simde/x86/sse2.h	/^simde_mm_cmpgt_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpgt_pi16	simde/x86/mmx.h	/^simde_mm_cmpgt_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_cmpgt_pi32	simde/x86/mmx.h	/^simde_mm_cmpgt_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_cmpgt_pi8	simde/x86/mmx.h	/^simde_mm_cmpgt_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_cmpgt_ps	simde/x86/sse.h	/^simde_mm_cmpgt_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpgt_sd	simde/x86/sse2.h	/^simde_mm_cmpgt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpgt_ss	simde/x86/sse.h	/^simde_mm_cmpgt_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpistrs	simde/x86/sse4.2.h	223;"	d
simde_mm_cmpistrs	simde/x86/sse4.2.h	225;"	d
simde_mm_cmpistrs_16_	simde/x86/sse4.2.h	/^simde_mm_cmpistrs_16_(simde__m128i a) {$/;"	f
simde_mm_cmpistrs_8_	simde/x86/sse4.2.h	/^simde_mm_cmpistrs_8_(simde__m128i a) {$/;"	f
simde_mm_cmpistrz	simde/x86/sse4.2.h	264;"	d
simde_mm_cmpistrz	simde/x86/sse4.2.h	266;"	d
simde_mm_cmpistrz_16_	simde/x86/sse4.2.h	/^simde_mm_cmpistrz_16_(simde__m128i b) {$/;"	f
simde_mm_cmpistrz_8_	simde/x86/sse4.2.h	/^simde_mm_cmpistrz_8_(simde__m128i b) {$/;"	f
simde_mm_cmple_pd	simde/x86/sse2.h	/^simde_mm_cmple_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmple_ps	simde/x86/sse.h	/^simde_mm_cmple_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmple_sd	simde/x86/sse2.h	/^simde_mm_cmple_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmple_ss	simde/x86/sse.h	/^simde_mm_cmple_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmplt_epi16	simde/x86/sse2.h	/^simde_mm_cmplt_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmplt_epi32	simde/x86/sse2.h	/^simde_mm_cmplt_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmplt_epi8	simde/x86/sse2.h	/^simde_mm_cmplt_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_cmplt_pd	simde/x86/sse2.h	/^simde_mm_cmplt_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmplt_ps	simde/x86/sse.h	/^simde_mm_cmplt_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmplt_sd	simde/x86/sse2.h	/^simde_mm_cmplt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmplt_ss	simde/x86/sse.h	/^simde_mm_cmplt_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpneq_pd	simde/x86/sse2.h	/^simde_mm_cmpneq_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpneq_ps	simde/x86/sse.h	/^simde_mm_cmpneq_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpneq_sd	simde/x86/sse2.h	/^simde_mm_cmpneq_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpneq_ss	simde/x86/sse.h	/^simde_mm_cmpneq_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpnge_pd	simde/x86/sse2.h	/^simde_mm_cmpnge_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpnge_ps	simde/x86/sse.h	/^simde_mm_cmpnge_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpnge_sd	simde/x86/sse2.h	/^simde_mm_cmpnge_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpnge_ss	simde/x86/sse.h	/^simde_mm_cmpnge_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpngt_pd	simde/x86/sse2.h	/^simde_mm_cmpngt_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpngt_ps	simde/x86/sse.h	/^simde_mm_cmpngt_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpngt_sd	simde/x86/sse2.h	/^simde_mm_cmpngt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpngt_ss	simde/x86/sse.h	/^simde_mm_cmpngt_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpnle_pd	simde/x86/sse2.h	/^simde_mm_cmpnle_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpnle_ps	simde/x86/sse.h	/^simde_mm_cmpnle_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpnle_sd	simde/x86/sse2.h	/^simde_mm_cmpnle_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpnle_ss	simde/x86/sse.h	/^simde_mm_cmpnle_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpnlt_pd	simde/x86/sse2.h	/^simde_mm_cmpnlt_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpnlt_ps	simde/x86/sse.h	/^simde_mm_cmpnlt_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpnlt_sd	simde/x86/sse2.h	/^simde_mm_cmpnlt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpnlt_ss	simde/x86/sse.h	/^simde_mm_cmpnlt_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpord_pd	simde/x86/sse2.h	/^simde_mm_cmpord_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpord_ps	simde/x86/sse.h	/^simde_mm_cmpord_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpord_sd	simde/x86/sse2.h	/^simde_mm_cmpord_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpord_ss	simde/x86/sse.h	/^simde_mm_cmpord_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpunord_pd	simde/x86/sse2.h	/^simde_mm_cmpunord_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpunord_ps	simde/x86/sse.h	/^simde_mm_cmpunord_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cmpunord_sd	simde/x86/sse2.h	/^simde_mm_cmpunord_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_cmpunord_ss	simde/x86/sse.h	/^simde_mm_cmpunord_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_comieq_sd	simde/x86/sse2.h	/^simde_mm_comieq_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_comieq_ss	simde/x86/sse.h	/^simde_mm_comieq_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_comige_sd	simde/x86/sse2.h	/^simde_mm_comige_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_comige_ss	simde/x86/sse.h	/^simde_mm_comige_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_comigt_sd	simde/x86/sse2.h	/^simde_mm_comigt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_comigt_ss	simde/x86/sse.h	/^simde_mm_comigt_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_comile_sd	simde/x86/sse2.h	/^simde_mm_comile_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_comile_ss	simde/x86/sse.h	/^simde_mm_comile_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_comilt_sd	simde/x86/sse2.h	/^simde_mm_comilt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_comilt_ss	simde/x86/sse.h	/^simde_mm_comilt_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_comineq_sd	simde/x86/sse2.h	/^simde_mm_comineq_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_comineq_ss	simde/x86/sse.h	/^simde_mm_comineq_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_cos_pd	simde/x86/svml.h	/^simde_mm_cos_pd (simde__m128d a) {$/;"	f
simde_mm_cos_ps	simde/x86/svml.h	/^simde_mm_cos_ps (simde__m128 a) {$/;"	f
simde_mm_cosd_pd	simde/x86/svml.h	/^simde_mm_cosd_pd (simde__m128d a) {$/;"	f
simde_mm_cosd_ps	simde/x86/svml.h	/^simde_mm_cosd_ps (simde__m128 a) {$/;"	f
simde_mm_cosh_pd	simde/x86/svml.h	/^simde_mm_cosh_pd (simde__m128d a) {$/;"	f
simde_mm_cosh_ps	simde/x86/svml.h	/^simde_mm_cosh_ps (simde__m128 a) {$/;"	f
simde_mm_crc32_u16	simde/x86/sse4.2.h	/^simde_mm_crc32_u16(uint32_t prevcrc, uint16_t v) {$/;"	f
simde_mm_crc32_u32	simde/x86/sse4.2.h	/^simde_mm_crc32_u32(uint32_t prevcrc, uint32_t v) {$/;"	f
simde_mm_crc32_u64	simde/x86/sse4.2.h	/^simde_mm_crc32_u64(uint64_t prevcrc, uint64_t v) {$/;"	f
simde_mm_crc32_u8	simde/x86/sse4.2.h	/^simde_mm_crc32_u8(uint32_t prevcrc, uint8_t v) {$/;"	f
simde_mm_csqrt_ps	simde/x86/svml.h	/^simde_mm_csqrt_ps (simde__m128 a) {$/;"	f
simde_mm_cvt_pi2ps	simde/x86/sse.h	/^simde_mm_cvt_pi2ps (simde__m128 a, simde__m64 b) {$/;"	f
simde_mm_cvt_ps2pi	simde/x86/sse.h	/^simde_mm_cvt_ps2pi (simde__m128 a) {$/;"	f
simde_mm_cvt_si2ss	simde/x86/sse.h	/^simde_mm_cvt_si2ss (simde__m128 a, int32_t b) {$/;"	f
simde_mm_cvt_ss2si	simde/x86/sse.h	/^simde_mm_cvt_ss2si (simde__m128 a) {$/;"	f
simde_mm_cvtepi16_epi32	simde/x86/sse4.1.h	/^simde_mm_cvtepi16_epi32 (simde__m128i a) {$/;"	f
simde_mm_cvtepi16_epi64	simde/x86/sse4.1.h	/^simde_mm_cvtepi16_epi64 (simde__m128i a) {$/;"	f
simde_mm_cvtepi32_epi64	simde/x86/sse4.1.h	/^simde_mm_cvtepi32_epi64 (simde__m128i a) {$/;"	f
simde_mm_cvtepi32_pd	simde/x86/sse2.h	/^simde_mm_cvtepi32_pd (simde__m128i a) {$/;"	f
simde_mm_cvtepi32_ps	simde/x86/sse2.h	/^simde_mm_cvtepi32_ps (simde__m128i a) {$/;"	f
simde_mm_cvtepi8_epi16	simde/x86/sse4.1.h	/^simde_mm_cvtepi8_epi16 (simde__m128i a) {$/;"	f
simde_mm_cvtepi8_epi32	simde/x86/sse4.1.h	/^simde_mm_cvtepi8_epi32 (simde__m128i a) {$/;"	f
simde_mm_cvtepi8_epi64	simde/x86/sse4.1.h	/^simde_mm_cvtepi8_epi64 (simde__m128i a) {$/;"	f
simde_mm_cvtepu16_epi32	simde/x86/sse4.1.h	/^simde_mm_cvtepu16_epi32 (simde__m128i a) {$/;"	f
simde_mm_cvtepu16_epi64	simde/x86/sse4.1.h	/^simde_mm_cvtepu16_epi64 (simde__m128i a) {$/;"	f
simde_mm_cvtepu32_epi64	simde/x86/sse4.1.h	/^simde_mm_cvtepu32_epi64 (simde__m128i a) {$/;"	f
simde_mm_cvtepu8_epi16	simde/x86/sse4.1.h	/^simde_mm_cvtepu8_epi16 (simde__m128i a) {$/;"	f
simde_mm_cvtepu8_epi32	simde/x86/sse4.1.h	/^simde_mm_cvtepu8_epi32 (simde__m128i a) {$/;"	f
simde_mm_cvtepu8_epi64	simde/x86/sse4.1.h	/^simde_mm_cvtepu8_epi64 (simde__m128i a) {$/;"	f
simde_mm_cvtm64_si64	simde/x86/mmx.h	/^simde_mm_cvtm64_si64 (simde__m64 a) {$/;"	f
simde_mm_cvtpd_epi32	simde/x86/sse2.h	/^simde_mm_cvtpd_epi32 (simde__m128d a) {$/;"	f
simde_mm_cvtpd_pi32	simde/x86/sse2.h	/^simde_mm_cvtpd_pi32 (simde__m128d a) {$/;"	f
simde_mm_cvtpd_ps	simde/x86/sse2.h	/^simde_mm_cvtpd_ps (simde__m128d a) {$/;"	f
simde_mm_cvtpi16_ps	simde/x86/sse.h	/^simde_mm_cvtpi16_ps (simde__m64 a) {$/;"	f
simde_mm_cvtpi32_pd	simde/x86/sse2.h	/^simde_mm_cvtpi32_pd (simde__m64 a) {$/;"	f
simde_mm_cvtpi32_ps	simde/x86/sse.h	/^simde_mm_cvtpi32_ps (simde__m128 a, simde__m64 b) {$/;"	f
simde_mm_cvtpi32x2_ps	simde/x86/sse.h	/^simde_mm_cvtpi32x2_ps (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_cvtpi8_ps	simde/x86/sse.h	/^simde_mm_cvtpi8_ps (simde__m64 a) {$/;"	f
simde_mm_cvtps_epi32	simde/x86/sse2.h	/^simde_mm_cvtps_epi32 (simde__m128 a) {$/;"	f
simde_mm_cvtps_pd	simde/x86/sse2.h	/^simde_mm_cvtps_pd (simde__m128 a) {$/;"	f
simde_mm_cvtps_pi16	simde/x86/sse.h	/^simde_mm_cvtps_pi16 (simde__m128 a) {$/;"	f
simde_mm_cvtps_pi32	simde/x86/sse.h	/^simde_mm_cvtps_pi32 (simde__m128 a) {$/;"	f
simde_mm_cvtps_pi8	simde/x86/sse.h	/^simde_mm_cvtps_pi8 (simde__m128 a) {$/;"	f
simde_mm_cvtpu16_ps	simde/x86/sse.h	/^simde_mm_cvtpu16_ps (simde__m64 a) {$/;"	f
simde_mm_cvtpu8_ps	simde/x86/sse.h	/^simde_mm_cvtpu8_ps (simde__m64 a) {$/;"	f
simde_mm_cvtsd_f64	simde/x86/sse2.h	/^simde_mm_cvtsd_f64 (simde__m128d a) {$/;"	f
simde_mm_cvtsd_si32	simde/x86/sse2.h	/^simde_mm_cvtsd_si32 (simde__m128d a) {$/;"	f
simde_mm_cvtsd_si64	simde/x86/sse2.h	/^simde_mm_cvtsd_si64 (simde__m128d a) {$/;"	f
simde_mm_cvtsd_si64x	simde/x86/sse2.h	2703;"	d
simde_mm_cvtsd_ss	simde/x86/sse2.h	/^simde_mm_cvtsd_ss (simde__m128 a, simde__m128d b) {$/;"	f
simde_mm_cvtsepi16_epi8	simde/x86/avx512/cvts.h	/^simde_mm_cvtsepi16_epi8 (simde__m128i a) {$/;"	f
simde_mm_cvtsepi32_epi16	simde/x86/avx512/cvts.h	/^simde_mm_cvtsepi32_epi16 (simde__m128i a) {$/;"	f
simde_mm_cvtsepi32_epi8	simde/x86/avx512/cvts.h	/^simde_mm_cvtsepi32_epi8 (simde__m128i a) {$/;"	f
simde_mm_cvtsepi64_epi8	simde/x86/avx512/cvts.h	/^simde_mm_cvtsepi64_epi8 (simde__m128i a) {$/;"	f
simde_mm_cvtsi128_si32	simde/x86/sse2.h	/^simde_mm_cvtsi128_si32 (simde__m128i a) {$/;"	f
simde_mm_cvtsi128_si64	simde/x86/sse2.h	/^simde_mm_cvtsi128_si64 (simde__m128i a) {$/;"	f
simde_mm_cvtsi128_si64x	simde/x86/sse2.h	2805;"	d
simde_mm_cvtsi32_sd	simde/x86/sse2.h	/^simde_mm_cvtsi32_sd (simde__m128d a, int32_t b) {$/;"	f
simde_mm_cvtsi32_si128	simde/x86/sse2.h	/^simde_mm_cvtsi32_si128 (int32_t a) {$/;"	f
simde_mm_cvtsi32_si64	simde/x86/mmx.h	/^simde_mm_cvtsi32_si64 (int32_t a) {$/;"	f
simde_mm_cvtsi32_ss	simde/x86/sse.h	/^simde_mm_cvtsi32_ss (simde__m128 a, int32_t b) {$/;"	f
simde_mm_cvtsi64_m64	simde/x86/mmx.h	/^simde_mm_cvtsi64_m64 (int64_t a) {$/;"	f
simde_mm_cvtsi64_sd	simde/x86/sse2.h	/^simde_mm_cvtsi64_sd (simde__m128d a, int64_t b) {$/;"	f
simde_mm_cvtsi64_si128	simde/x86/sse2.h	/^simde_mm_cvtsi64_si128 (int64_t a) {$/;"	f
simde_mm_cvtsi64_si32	simde/x86/mmx.h	/^simde_mm_cvtsi64_si32 (simde__m64 a) {$/;"	f
simde_mm_cvtsi64_ss	simde/x86/sse.h	/^simde_mm_cvtsi64_ss (simde__m128 a, int64_t b) {$/;"	f
simde_mm_cvtsi64x_sd	simde/x86/sse2.h	2907;"	d
simde_mm_cvtsi64x_si128	simde/x86/sse2.h	2937;"	d
simde_mm_cvtss_f32	simde/x86/sse.h	/^simde_mm_cvtss_f32 (simde__m128 a) {$/;"	f
simde_mm_cvtss_sd	simde/x86/sse2.h	/^simde_mm_cvtss_sd (simde__m128d a, simde__m128 b) {$/;"	f
simde_mm_cvtss_si32	simde/x86/sse.h	/^simde_mm_cvtss_si32 (simde__m128 a) {$/;"	f
simde_mm_cvtss_si64	simde/x86/sse.h	/^simde_mm_cvtss_si64 (simde__m128 a) {$/;"	f
simde_mm_cvtt_ps2pi	simde/x86/sse.h	/^simde_mm_cvtt_ps2pi (simde__m128 a) {$/;"	f
simde_mm_cvtt_ss2si	simde/x86/sse.h	/^simde_mm_cvtt_ss2si (simde__m128 a) {$/;"	f
simde_mm_cvttpd_epi32	simde/x86/sse2.h	/^simde_mm_cvttpd_epi32 (simde__m128d a) {$/;"	f
simde_mm_cvttpd_pi32	simde/x86/sse2.h	/^simde_mm_cvttpd_pi32 (simde__m128d a) {$/;"	f
simde_mm_cvttps_epi32	simde/x86/sse2.h	/^simde_mm_cvttps_epi32 (simde__m128 a) {$/;"	f
simde_mm_cvttps_pi32	simde/x86/sse.h	2178;"	d
simde_mm_cvttsd_si32	simde/x86/sse2.h	/^simde_mm_cvttsd_si32 (simde__m128d a) {$/;"	f
simde_mm_cvttsd_si64	simde/x86/sse2.h	/^simde_mm_cvttsd_si64 (simde__m128d a) {$/;"	f
simde_mm_cvttsd_si64x	simde/x86/sse2.h	3064;"	d
simde_mm_cvttss_si32	simde/x86/sse.h	2199;"	d
simde_mm_cvttss_si64	simde/x86/sse.h	/^simde_mm_cvttss_si64 (simde__m128 a) {$/;"	f
simde_mm_div_epi16	simde/x86/svml.h	/^simde_mm_div_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_div_epi32	simde/x86/svml.h	/^simde_mm_div_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_div_epi64	simde/x86/svml.h	/^simde_mm_div_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_div_epi8	simde/x86/svml.h	/^simde_mm_div_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_div_epu16	simde/x86/svml.h	/^simde_mm_div_epu16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_div_epu32	simde/x86/svml.h	/^simde_mm_div_epu32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_div_epu64	simde/x86/svml.h	/^simde_mm_div_epu64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_div_epu8	simde/x86/svml.h	/^simde_mm_div_epu8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_div_pd	simde/x86/sse2.h	/^simde_mm_div_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_div_ps	simde/x86/sse.h	/^simde_mm_div_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_div_sd	simde/x86/sse2.h	/^simde_mm_div_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_div_ss	simde/x86/sse.h	/^simde_mm_div_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_dp_pd	simde/x86/sse4.1.h	1099;"	d
simde_mm_dp_ps	simde/x86/sse4.1.h	1169;"	d
simde_mm_empty	simde/x86/mmx.h	/^simde_mm_empty (void) {$/;"	f
simde_mm_erf_pd	simde/x86/svml.h	/^simde_mm_erf_pd (simde__m128d a) {$/;"	f
simde_mm_erf_ps	simde/x86/svml.h	/^simde_mm_erf_ps (simde__m128 a) {$/;"	f
simde_mm_erfc_pd	simde/x86/svml.h	/^simde_mm_erfc_pd (simde__m128d a) {$/;"	f
simde_mm_erfc_ps	simde/x86/svml.h	/^simde_mm_erfc_ps (simde__m128 a) {$/;"	f
simde_mm_erfcinv_pd	simde/x86/svml.h	/^simde_mm_erfcinv_pd (simde__m128d a) {$/;"	f
simde_mm_erfcinv_ps	simde/x86/svml.h	/^simde_mm_erfcinv_ps (simde__m128 a) {$/;"	f
simde_mm_erfinv_pd	simde/x86/svml.h	/^simde_mm_erfinv_pd (simde__m128d a) {$/;"	f
simde_mm_erfinv_ps	simde/x86/svml.h	/^simde_mm_erfinv_ps (simde__m128 a) {$/;"	f
simde_mm_exp10_pd	simde/x86/svml.h	/^simde_mm_exp10_pd (simde__m128d a) {$/;"	f
simde_mm_exp10_ps	simde/x86/svml.h	/^simde_mm_exp10_ps (simde__m128 a) {$/;"	f
simde_mm_exp2_pd	simde/x86/svml.h	/^simde_mm_exp2_pd (simde__m128d a) {$/;"	f
simde_mm_exp2_ps	simde/x86/svml.h	/^simde_mm_exp2_ps (simde__m128 a) {$/;"	f
simde_mm_exp_pd	simde/x86/svml.h	/^simde_mm_exp_pd (simde__m128d a) {$/;"	f
simde_mm_exp_ps	simde/x86/svml.h	/^simde_mm_exp_ps (simde__m128 a) {$/;"	f
simde_mm_expm1_pd	simde/x86/svml.h	/^simde_mm_expm1_pd (simde__m128d a) {$/;"	f
simde_mm_expm1_ps	simde/x86/svml.h	/^simde_mm_expm1_ps (simde__m128 a) {$/;"	f
simde_mm_extract_epi16	simde/x86/sse2.h	3149;"	d
simde_mm_extract_epi16	simde/x86/sse2.h	3151;"	d
simde_mm_extract_epi32	simde/x86/sse4.1.h	1207;"	d
simde_mm_extract_epi32	simde/x86/sse4.1.h	1227;"	d
simde_mm_extract_epi32	simde/x86/sse4.1.h	1229;"	d
simde_mm_extract_epi32	simde/x86/sse4.1.h	1231;"	d
simde_mm_extract_epi64	simde/x86/sse4.1.h	1239;"	d
simde_mm_extract_epi64	simde/x86/sse4.1.h	1259;"	d
simde_mm_extract_epi64	simde/x86/sse4.1.h	1261;"	d
simde_mm_extract_epi64	simde/x86/sse4.1.h	1263;"	d
simde_mm_extract_epi8	simde/x86/sse4.1.h	1177;"	d
simde_mm_extract_epi8	simde/x86/sse4.1.h	1197;"	d
simde_mm_extract_epi8	simde/x86/sse4.1.h	1199;"	d
simde_mm_extract_pi16	simde/x86/sse.h	2335;"	d
simde_mm_extract_pi16	simde/x86/sse.h	2342;"	d
simde_mm_extract_pi16	simde/x86/sse.h	2345;"	d
simde_mm_extract_ps	simde/x86/sse4.1.h	1271;"	d
simde_mm_extract_ps	simde/x86/sse4.1.h	1283;"	d
simde_mm_extract_ps	simde/x86/sse4.1.h	1285;"	d
simde_mm_floor_pd	simde/x86/sse4.1.h	/^simde_mm_floor_pd (simde__m128d a) {$/;"	f
simde_mm_floor_ps	simde/x86/sse4.1.h	/^simde_mm_floor_ps (simde__m128 a) {$/;"	f
simde_mm_floor_sd	simde/x86/sse4.1.h	/^simde_mm_floor_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_floor_ss	simde/x86/sse4.1.h	/^simde_mm_floor_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_fmadd_pd	simde/x86/fma.h	/^simde_mm_fmadd_pd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fmadd_ps	simde/x86/fma.h	/^simde_mm_fmadd_ps (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fmadd_sd	simde/x86/fma.h	/^simde_mm_fmadd_sd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fmadd_ss	simde/x86/fma.h	/^simde_mm_fmadd_ss (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fmaddsub_pd	simde/x86/fma.h	/^simde_mm_fmaddsub_pd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fmaddsub_ps	simde/x86/fma.h	/^simde_mm_fmaddsub_ps (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fmsub_pd	simde/x86/fma.h	/^simde_mm_fmsub_pd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fmsub_ps	simde/x86/fma.h	/^simde_mm_fmsub_ps (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fmsub_sd	simde/x86/fma.h	/^simde_mm_fmsub_sd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fmsub_ss	simde/x86/fma.h	/^simde_mm_fmsub_ss (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fmsubadd_pd	simde/x86/fma.h	/^simde_mm_fmsubadd_pd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fmsubadd_ps	simde/x86/fma.h	/^simde_mm_fmsubadd_ps (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fnmadd_pd	simde/x86/fma.h	/^simde_mm_fnmadd_pd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fnmadd_ps	simde/x86/fma.h	/^simde_mm_fnmadd_ps (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fnmadd_sd	simde/x86/fma.h	/^simde_mm_fnmadd_sd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fnmadd_ss	simde/x86/fma.h	/^simde_mm_fnmadd_ss (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fnmsub_pd	simde/x86/fma.h	/^simde_mm_fnmsub_pd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fnmsub_ps	simde/x86/fma.h	/^simde_mm_fnmsub_ps (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_fnmsub_sd	simde/x86/fma.h	/^simde_mm_fnmsub_sd (simde__m128d a, simde__m128d b, simde__m128d c) {$/;"	f
simde_mm_fnmsub_ss	simde/x86/fma.h	/^simde_mm_fnmsub_ss (simde__m128 a, simde__m128 b, simde__m128 c) {$/;"	f
simde_mm_getcsr	simde/x86/sse.h	/^simde_mm_getcsr (void) {$/;"	f
simde_mm_gf2p8affine_epi64_epi8	simde/x86/gfni.h	343;"	d
simde_mm_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	445;"	d
simde_mm_gf2p8mul_epi8	simde/x86/gfni.h	/^simde__m128i simde_mm_gf2p8mul_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_gf2p8mul_epi8	simde/x86/gfni.h	600;"	d
simde_mm_hadd_epi16	simde/x86/ssse3.h	/^simde_mm_hadd_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_hadd_epi32	simde/x86/ssse3.h	/^simde_mm_hadd_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_hadd_pd	simde/x86/sse3.h	/^simde_mm_hadd_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_hadd_pi16	simde/x86/ssse3.h	/^simde_mm_hadd_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_hadd_pi32	simde/x86/ssse3.h	/^simde_mm_hadd_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_hadd_ps	simde/x86/sse3.h	/^simde_mm_hadd_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_hadds_epi16	simde/x86/ssse3.h	/^simde_mm_hadds_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_hadds_pi16	simde/x86/ssse3.h	/^simde_mm_hadds_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_hsub_epi16	simde/x86/ssse3.h	/^simde_mm_hsub_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_hsub_epi32	simde/x86/ssse3.h	/^simde_mm_hsub_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_hsub_pd	simde/x86/sse3.h	/^simde_mm_hsub_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_hsub_pi16	simde/x86/ssse3.h	/^simde_mm_hsub_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_hsub_pi32	simde/x86/ssse3.h	/^simde_mm_hsub_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_hsub_ps	simde/x86/sse3.h	/^simde_mm_hsub_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_hsubs_epi16	simde/x86/ssse3.h	/^simde_mm_hsubs_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_hsubs_pi16	simde/x86/ssse3.h	/^simde_mm_hsubs_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_hypot_pd	simde/x86/svml.h	/^simde_mm_hypot_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_hypot_ps	simde/x86/svml.h	/^simde_mm_hypot_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_i32gather_epi32	simde/x86/avx2.h	1647;"	d
simde_mm_i32gather_epi64	simde/x86/avx2.h	1902;"	d
simde_mm_i32gather_epi64	simde/x86/avx2.h	1904;"	d
simde_mm_i32gather_pd	simde/x86/avx2.h	2448;"	d
simde_mm_i32gather_ps	simde/x86/avx2.h	2188;"	d
simde_mm_i64gather_epi32	simde/x86/avx2.h	1773;"	d
simde_mm_i64gather_epi64	simde/x86/avx2.h	2046;"	d
simde_mm_i64gather_epi64	simde/x86/avx2.h	2048;"	d
simde_mm_i64gather_pd	simde/x86/avx2.h	2578;"	d
simde_mm_i64gather_ps	simde/x86/avx2.h	2318;"	d
simde_mm_idiv_epi32	simde/x86/svml.h	2766;"	d
simde_mm_idivrem_epi32	simde/x86/svml.h	/^simde_mm_idivrem_epi32 (simde__m128i* mem_addr, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_insert_epi16	simde/x86/sse2.h	3166;"	d
simde_mm_insert_epi16	simde/x86/sse2.h	3168;"	d
simde_mm_insert_epi32	simde/x86/sse4.1.h	1409;"	d
simde_mm_insert_epi32	simde/x86/sse4.1.h	1411;"	d
simde_mm_insert_epi32	simde/x86/sse4.1.h	1414;"	d
simde_mm_insert_epi64	simde/x86/sse4.1.h	1449;"	d
simde_mm_insert_epi64	simde/x86/sse4.1.h	1451;"	d
simde_mm_insert_epi8	simde/x86/sse4.1.h	1384;"	d
simde_mm_insert_epi8	simde/x86/sse4.1.h	1386;"	d
simde_mm_insert_epi8	simde/x86/sse4.1.h	1389;"	d
simde_mm_insert_pi16	simde/x86/sse.h	2375;"	d
simde_mm_insert_pi16	simde/x86/sse.h	2378;"	d
simde_mm_insert_ps	simde/x86/sse4.1.h	1478;"	d
simde_mm_invcbrt_pd	simde/x86/svml.h	/^simde_mm_invcbrt_pd (simde__m128d a) {$/;"	f
simde_mm_invcbrt_ps	simde/x86/svml.h	/^simde_mm_invcbrt_ps (simde__m128 a) {$/;"	f
simde_mm_invsqrt_pd	simde/x86/svml.h	/^simde_mm_invsqrt_pd (simde__m128d a) {$/;"	f
simde_mm_invsqrt_ps	simde/x86/svml.h	/^simde_mm_invsqrt_ps (simde__m128 a) {$/;"	f
simde_mm_irem_epi32	simde/x86/svml.h	8989;"	d
simde_mm_lddqu_si128	simde/x86/sse3.h	/^simde_mm_lddqu_si128 (simde__m128i const* mem_addr) {$/;"	f
simde_mm_lfence	simde/x86/sse2.h	/^simde_mm_lfence (void) {$/;"	f
simde_mm_load1_pd	simde/x86/sse2.h	/^simde_mm_load1_pd (simde_float64 const* mem_addr) {$/;"	f
simde_mm_load1_ps	simde/x86/sse.h	/^simde_mm_load1_ps (simde_float32 const* mem_addr) {$/;"	f
simde_mm_load_pd	simde/x86/sse2.h	/^simde_mm_load_pd (simde_float64 const mem_addr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_mm_load_pd1	simde/x86/sse2.h	3210;"	d
simde_mm_load_ps	simde/x86/sse.h	/^simde_mm_load_ps (simde_float32 const mem_addr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_mm_load_ps1	simde/x86/sse.h	2428;"	d
simde_mm_load_sd	simde/x86/sse2.h	/^simde_mm_load_sd (simde_float64 const* mem_addr) {$/;"	f
simde_mm_load_si128	simde/x86/sse2.h	/^simde_mm_load_si128 (simde__m128i const* mem_addr) {$/;"	f
simde_mm_load_ss	simde/x86/sse.h	/^simde_mm_load_ss (simde_float32 const* mem_addr) {$/;"	f
simde_mm_loaddup_pd	simde/x86/sse3.h	/^simde_mm_loaddup_pd (simde_float64 const* mem_addr) {$/;"	f
simde_mm_loadh_pd	simde/x86/sse2.h	/^simde_mm_loadh_pd (simde__m128d a, simde_float64 const* mem_addr) {$/;"	f
simde_mm_loadh_pi	simde/x86/sse.h	/^simde_mm_loadh_pi (simde__m128 a, simde__m64 const* mem_addr) {$/;"	f
simde_mm_loadl_epi64	simde/x86/sse2.h	/^simde_mm_loadl_epi64 (simde__m128i const* mem_addr) {$/;"	f
simde_mm_loadl_pd	simde/x86/sse2.h	/^simde_mm_loadl_pd (simde__m128d a, simde_float64 const* mem_addr) {$/;"	f
simde_mm_loadl_pi	simde/x86/sse.h	/^simde_mm_loadl_pi (simde__m128 a, simde__m64 const* mem_addr) {$/;"	f
simde_mm_loadr_pd	simde/x86/sse2.h	/^simde_mm_loadr_pd (simde_float64 const mem_addr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_mm_loadr_ps	simde/x86/sse.h	/^simde_mm_loadr_ps (simde_float32 const mem_addr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_mm_loadu_epi16	simde/x86/avx512/loadu.h	/^simde_mm_loadu_epi16(void const * mem_addr) {$/;"	f
simde_mm_loadu_epi32	simde/x86/avx512/loadu.h	/^simde_mm_loadu_epi32(void const * mem_addr) {$/;"	f
simde_mm_loadu_epi64	simde/x86/avx512/loadu.h	/^simde_mm_loadu_epi64(void const * mem_addr) {$/;"	f
simde_mm_loadu_epi8	simde/x86/avx512/loadu.h	/^simde_mm_loadu_epi8(void const * mem_addr) {$/;"	f
simde_mm_loadu_pd	simde/x86/sse2.h	/^simde_mm_loadu_pd (simde_float64 const mem_addr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_mm_loadu_ps	simde/x86/sse.h	/^simde_mm_loadu_ps (simde_float32 const mem_addr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_mm_loadu_si128	simde/x86/sse2.h	/^simde_mm_loadu_si128 (void const* mem_addr) {$/;"	f
simde_mm_loadu_si16	simde/x86/sse2.h	/^simde_mm_loadu_si16 (void const* mem_addr) {$/;"	f
simde_mm_loadu_si32	simde/x86/sse2.h	/^simde_mm_loadu_si32 (void const* mem_addr) {$/;"	f
simde_mm_loadu_si64	simde/x86/sse2.h	/^simde_mm_loadu_si64 (void const* mem_addr) {$/;"	f
simde_mm_log10_pd	simde/x86/svml.h	/^simde_mm_log10_pd (simde__m128d a) {$/;"	f
simde_mm_log10_ps	simde/x86/svml.h	/^simde_mm_log10_ps (simde__m128 a) {$/;"	f
simde_mm_log1p_pd	simde/x86/svml.h	/^simde_mm_log1p_pd (simde__m128d a) {$/;"	f
simde_mm_log1p_ps	simde/x86/svml.h	/^simde_mm_log1p_ps (simde__m128 a) {$/;"	f
simde_mm_log2_pd	simde/x86/svml.h	/^simde_mm_log2_pd (simde__m128d a) {$/;"	f
simde_mm_log2_ps	simde/x86/svml.h	/^simde_mm_log2_ps (simde__m128 a) {$/;"	f
simde_mm_log_pd	simde/x86/svml.h	/^simde_mm_log_pd (simde__m128d a) {$/;"	f
simde_mm_log_ps	simde/x86/svml.h	/^simde_mm_log_ps (simde__m128 a) {$/;"	f
simde_mm_logb_pd	simde/x86/svml.h	/^simde_mm_logb_pd (simde__m128d a) {$/;"	f
simde_mm_logb_ps	simde/x86/svml.h	/^simde_mm_logb_ps (simde__m128 a) {$/;"	f
simde_mm_lzcnt_epi32	simde/x86/avx512/lzcnt.h	/^simde_mm_lzcnt_epi32(simde__m128i a) {$/;"	f
simde_mm_madd_epi16	simde/x86/sse2.h	/^simde_mm_madd_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_madd_pi16	simde/x86/mmx.h	/^simde_mm_madd_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_maddubs_epi16	simde/x86/ssse3.h	/^simde_mm_maddubs_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maddubs_pi16	simde/x86/ssse3.h	/^simde_mm_maddubs_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_mask2_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm_mask2_permutex2var_epi16 (simde__m128i a, simde__m128i idx, simde__mmask8 k, simde__m128i b) {$/;"	f
simde_mm_mask2_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm_mask2_permutex2var_epi32 (simde__m128i a, simde__m128i idx, simde__mmask8 k, simde__m128i b) {$/;"	f
simde_mm_mask2_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm_mask2_permutex2var_epi64 (simde__m128i a, simde__m128i idx, simde__mmask8 k, simde__m128i b) {$/;"	f
simde_mm_mask2_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm_mask2_permutex2var_epi8 (simde__m128i a, simde__m128i idx, simde__mmask16 k, simde__m128i b) {$/;"	f
simde_mm_mask2_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm_mask2_permutex2var_pd (simde__m128d a, simde__m128i idx, simde__mmask8 k, simde__m128d b) {$/;"	f
simde_mm_mask2_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm_mask2_permutex2var_ps (simde__m128 a, simde__m128i idx, simde__mmask8 k, simde__m128 b) {$/;"	f
simde_mm_mask_abs_epi16	simde/x86/avx512/abs.h	/^simde_mm_mask_abs_epi16(simde__m128i src, simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_mask_abs_epi32	simde/x86/avx512/abs.h	/^simde_mm_mask_abs_epi32(simde__m128i src, simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_mask_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm_mask_abs_epi64(simde__m128i src, simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_mask_abs_epi8	simde/x86/avx512/abs.h	/^simde_mm_mask_abs_epi8(simde__m128i src, simde__mmask16 k, simde__m128i a) {$/;"	f
simde_mm_mask_add_epi16	simde/x86/avx512/add.h	/^simde_mm_mask_add_epi16(simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_add_epi32	simde/x86/avx512/add.h	/^simde_mm_mask_add_epi32(simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_add_epi64	simde/x86/avx512/add.h	/^simde_mm_mask_add_epi64(simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_add_epi8	simde/x86/avx512/add.h	/^simde_mm_mask_add_epi8(simde__m128i src, simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_add_ss	simde/x86/avx512/add.h	/^simde_mm_mask_add_ss(simde__m128 src, simde__mmask8 k, simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_mask_adds_epi16	simde/x86/avx512/adds.h	/^simde_mm_mask_adds_epi16(simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_adds_epi8	simde/x86/avx512/adds.h	/^simde_mm_mask_adds_epi8(simde__m128i src, simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_avg_epu16	simde/x86/avx512/avg.h	/^simde_mm_mask_avg_epu16(simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_avg_epu8	simde/x86/avx512/avg.h	/^simde_mm_mask_avg_epu8(simde__m128i src, simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_blend_epi16	simde/x86/avx512/blend.h	/^simde_mm_mask_blend_epi16(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_blend_epi32	simde/x86/avx512/blend.h	/^simde_mm_mask_blend_epi32(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_blend_epi64	simde/x86/avx512/blend.h	/^simde_mm_mask_blend_epi64(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_blend_epi8	simde/x86/avx512/blend.h	/^simde_mm_mask_blend_epi8(simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_blend_pd	simde/x86/avx512/blend.h	/^simde_mm_mask_blend_pd(simde__mmask8 k, simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_mask_blend_ps	simde/x86/avx512/blend.h	/^simde_mm_mask_blend_ps(simde__mmask8 k, simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	379;"	d
simde_mm_mask_gf2p8affine_epi64_epi8	simde/x86/gfni.h	381;"	d
simde_mm_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	481;"	d
simde_mm_mask_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	483;"	d
simde_mm_mask_gf2p8mul_epi8	simde/x86/gfni.h	/^simde_mm_mask_gf2p8mul_epi8 (simde__m128i src, simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_i32gather_epi32	simde/x86/avx2.h	1682;"	d
simde_mm_mask_i32gather_epi64	simde/x86/avx2.h	1941;"	d
simde_mm_mask_i32gather_epi64	simde/x86/avx2.h	1943;"	d
simde_mm_mask_i32gather_pd	simde/x86/avx2.h	2484;"	d
simde_mm_mask_i32gather_ps	simde/x86/avx2.h	2224;"	d
simde_mm_mask_i64gather_epi32	simde/x86/avx2.h	1808;"	d
simde_mm_mask_i64gather_epi64	simde/x86/avx2.h	2085;"	d
simde_mm_mask_i64gather_epi64	simde/x86/avx2.h	2087;"	d
simde_mm_mask_i64gather_pd	simde/x86/avx2.h	2614;"	d
simde_mm_mask_i64gather_ps	simde/x86/avx2.h	2354;"	d
simde_mm_mask_lzcnt_epi32	simde/x86/avx512/lzcnt.h	/^simde_mm_mask_lzcnt_epi32(simde__m128i src, simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_mask_madd_epi16	simde/x86/avx512/madd.h	/^simde_mm_mask_madd_epi16 (simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_maddubs_epi16	simde/x86/avx512/maddubs.h	/^simde_mm_mask_maddubs_epi16 (simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_mov_epi16	simde/x86/avx512/mov.h	/^simde_mm_mask_mov_epi16 (simde__m128i src, simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_mask_mov_epi32	simde/x86/avx512/mov.h	/^simde_mm_mask_mov_epi32 (simde__m128i src, simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_mask_mov_epi64	simde/x86/avx512/mov.h	/^simde_mm_mask_mov_epi64 (simde__m128i src, simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_mask_mov_epi8	simde/x86/avx512/mov.h	/^simde_mm_mask_mov_epi8 (simde__m128i src, simde__mmask16 k, simde__m128i a) {$/;"	f
simde_mm_mask_mov_pd	simde/x86/avx512/mov.h	/^simde_mm_mask_mov_pd(simde__m128d src, simde__mmask8 k, simde__m128d a) {$/;"	f
simde_mm_mask_mov_ps	simde/x86/avx512/mov.h	/^simde_mm_mask_mov_ps (simde__m128 src, simde__mmask8 k, simde__m128 a) {$/;"	f
simde_mm_mask_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm_mask_permutex2var_epi16 (simde__m128i a, simde__mmask8 k, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_mask_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm_mask_permutex2var_epi32 (simde__m128i a, simde__mmask8 k, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_mask_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm_mask_permutex2var_epi64 (simde__m128i a, simde__mmask8 k, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_mask_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm_mask_permutex2var_epi8 (simde__m128i a, simde__mmask16 k, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_mask_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm_mask_permutex2var_pd (simde__m128d a, simde__mmask8 k, simde__m128i idx, simde__m128d b) {$/;"	f
simde_mm_mask_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm_mask_permutex2var_ps (simde__m128 a, simde__mmask8 k, simde__m128i idx, simde__m128 b) {$/;"	f
simde_mm_mask_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm_mask_permutexvar_epi16 (simde__m128i src, simde__mmask8 k, simde__m128i idx, simde__m128i a) {$/;"	f
simde_mm_mask_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm_mask_permutexvar_epi8 (simde__m128i src, simde__mmask16 k, simde__m128i idx, simde__m128i a) {$/;"	f
simde_mm_mask_srlv_epi16	simde/x86/avx512/srlv.h	/^simde_mm_mask_srlv_epi16(simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_srlv_epi32	simde/x86/avx512/srlv.h	/^simde_mm_mask_srlv_epi32(simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mask_srlv_epi64	simde/x86/avx512/srlv.h	/^simde_mm_mask_srlv_epi64(simde__m128i src, simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskload_epi32	simde/x86/avx2.h	/^simde_mm_maskload_epi32 (const int32_t mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m128i mask) {$/;"	f
simde_mm_maskload_epi64	simde/x86/avx2.h	/^simde_mm_maskload_epi64 (const int64_t mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m128i mask) {$/;"	f
simde_mm_maskload_pd	simde/x86/avx.h	/^simde_mm_maskload_pd (const simde_float64 mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m128i mask) {$/;"	f
simde_mm_maskload_ps	simde/x86/avx.h	/^simde_mm_maskload_ps (const simde_float32 mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m128i mask) {$/;"	f
simde_mm_maskmove_si64	simde/x86/sse.h	/^simde_mm_maskmove_si64 (simde__m64 a, simde__m64 mask, int8_t* mem_addr) {$/;"	f
simde_mm_maskmoveu_si128	simde/x86/sse2.h	/^simde_mm_maskmoveu_si128 (simde__m128i a, simde__m128i mask, int8_t mem_addr[HEDLEY_ARRAY_PARAM(16)]) {$/;"	f
simde_mm_maskstore_epi32	simde/x86/avx2.h	/^simde_mm_maskstore_epi32 (int32_t mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m128i mask, simde__m128i a) {$/;"	f
simde_mm_maskstore_epi64	simde/x86/avx2.h	/^simde_mm_maskstore_epi64 (int64_t mem_addr[HEDLEY_ARRAY_PARAM(2)], simde__m128i mask, simde__m128i a) {$/;"	f
simde_mm_maskstore_pd	simde/x86/avx.h	/^simde_mm_maskstore_pd (simde_float64 mem_addr[HEDLEY_ARRAY_PARAM(2)], simde__m128i mask, simde__m128d a) {$/;"	f
simde_mm_maskstore_ps	simde/x86/avx.h	/^simde_mm_maskstore_ps (simde_float32 mem_addr[HEDLEY_ARRAY_PARAM(4)], simde__m128i mask, simde__m128 a) {$/;"	f
simde_mm_maskz_abs_epi16	simde/x86/avx512/abs.h	/^simde_mm_maskz_abs_epi16(simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_maskz_abs_epi32	simde/x86/avx512/abs.h	/^simde_mm_maskz_abs_epi32(simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_maskz_abs_epi64	simde/x86/avx512/abs.h	/^simde_mm_maskz_abs_epi64(simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_maskz_abs_epi8	simde/x86/avx512/abs.h	/^simde_mm_maskz_abs_epi8(simde__mmask16 k, simde__m128i a) {$/;"	f
simde_mm_maskz_add_epi16	simde/x86/avx512/add.h	/^simde_mm_maskz_add_epi16(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_add_epi32	simde/x86/avx512/add.h	/^simde_mm_maskz_add_epi32(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_add_epi64	simde/x86/avx512/add.h	/^simde_mm_maskz_add_epi64(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_add_epi8	simde/x86/avx512/add.h	/^simde_mm_maskz_add_epi8(simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_add_ss	simde/x86/avx512/add.h	/^simde_mm_maskz_add_ss(simde__mmask8 k, simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_maskz_adds_epi16	simde/x86/avx512/adds.h	/^simde_mm_maskz_adds_epi16(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_adds_epi8	simde/x86/avx512/adds.h	/^simde_mm_maskz_adds_epi8(simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_avg_epu16	simde/x86/avx512/avg.h	/^simde_mm_maskz_avg_epu16(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_avg_epu8	simde/x86/avx512/avg.h	/^simde_mm_maskz_avg_epu8(simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	409;"	d
simde_mm_maskz_gf2p8affine_epi64_epi8	simde/x86/gfni.h	411;"	d
simde_mm_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	511;"	d
simde_mm_maskz_gf2p8affineinv_epi64_epi8	simde/x86/gfni.h	513;"	d
simde_mm_maskz_gf2p8mul_epi8	simde/x86/gfni.h	/^simde_mm_maskz_gf2p8mul_epi8 (simde__mmask16 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_lzcnt_epi32	simde/x86/avx512/lzcnt.h	/^simde_mm_maskz_lzcnt_epi32(simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_maskz_madd_epi16	simde/x86/avx512/madd.h	/^simde_mm_maskz_madd_epi16 (simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_maddubs_epi16	simde/x86/avx512/maddubs.h	/^simde_mm_maskz_maddubs_epi16 (simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_mov_epi16	simde/x86/avx512/mov.h	/^simde_mm_maskz_mov_epi16 (simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_maskz_mov_epi32	simde/x86/avx512/mov.h	/^simde_mm_maskz_mov_epi32 (simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_maskz_mov_epi64	simde/x86/avx512/mov.h	/^simde_mm_maskz_mov_epi64 (simde__mmask8 k, simde__m128i a) {$/;"	f
simde_mm_maskz_mov_epi8	simde/x86/avx512/mov.h	/^simde_mm_maskz_mov_epi8 (simde__mmask16 k, simde__m128i a) {$/;"	f
simde_mm_maskz_mov_pd	simde/x86/avx512/mov.h	/^simde_mm_maskz_mov_pd (simde__mmask8 k, simde__m128d a) {$/;"	f
simde_mm_maskz_mov_ps	simde/x86/avx512/mov.h	/^simde_mm_maskz_mov_ps (simde__mmask8 k, simde__m128 a) {$/;"	f
simde_mm_maskz_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm_maskz_permutex2var_epi16 (simde__mmask8 k, simde__m128i a, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_maskz_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm_maskz_permutex2var_epi32 (simde__mmask8 k, simde__m128i a, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_maskz_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm_maskz_permutex2var_epi64 (simde__mmask8 k, simde__m128i a, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_maskz_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm_maskz_permutex2var_epi8 (simde__mmask16 k, simde__m128i a, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_maskz_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm_maskz_permutex2var_pd (simde__mmask8 k, simde__m128d a, simde__m128i idx, simde__m128d b) {$/;"	f
simde_mm_maskz_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm_maskz_permutex2var_ps (simde__mmask8 k, simde__m128 a, simde__m128i idx, simde__m128 b) {$/;"	f
simde_mm_maskz_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm_maskz_permutexvar_epi16 (simde__mmask8 k, simde__m128i idx, simde__m128i a) {$/;"	f
simde_mm_maskz_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm_maskz_permutexvar_epi8 (simde__mmask16 k, simde__m128i idx, simde__m128i a) {$/;"	f
simde_mm_maskz_srlv_epi16	simde/x86/avx512/srlv.h	/^simde_mm_maskz_srlv_epi16(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_srlv_epi32	simde/x86/avx512/srlv.h	/^simde_mm_maskz_srlv_epi32(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_maskz_srlv_epi64	simde/x86/avx512/srlv.h	/^simde_mm_maskz_srlv_epi64(simde__mmask8 k, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_max_epi16	simde/x86/sse2.h	/^simde_mm_max_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_max_epi32	simde/x86/sse4.1.h	/^simde_mm_max_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_max_epi8	simde/x86/sse4.1.h	/^simde_mm_max_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_max_epu16	simde/x86/sse4.1.h	/^simde_mm_max_epu16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_max_epu32	simde/x86/sse4.1.h	/^simde_mm_max_epu32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_max_epu8	simde/x86/sse2.h	/^simde_mm_max_epu8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_max_pd	simde/x86/sse2.h	/^simde_mm_max_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_max_pi16	simde/x86/sse.h	/^simde_mm_max_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_max_ps	simde/x86/sse.h	/^simde_mm_max_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_max_pu8	simde/x86/sse.h	/^simde_mm_max_pu8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_max_sd	simde/x86/sse2.h	/^simde_mm_max_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_max_ss	simde/x86/sse.h	/^simde_mm_max_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_mfence	simde/x86/sse2.h	/^simde_mm_mfence (void) {$/;"	f
simde_mm_min_epi16	simde/x86/sse2.h	/^simde_mm_min_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_min_epi32	simde/x86/sse4.1.h	/^simde_mm_min_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_min_epi8	simde/x86/sse4.1.h	/^simde_mm_min_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_min_epu16	simde/x86/sse4.1.h	/^simde_mm_min_epu16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_min_epu32	simde/x86/sse4.1.h	/^simde_mm_min_epu32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_min_epu8	simde/x86/sse2.h	/^simde_mm_min_epu8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_min_pd	simde/x86/sse2.h	/^simde_mm_min_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_min_pi16	simde/x86/sse.h	/^simde_mm_min_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_min_ps	simde/x86/sse.h	/^simde_mm_min_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_min_pu8	simde/x86/sse.h	/^simde_mm_min_pu8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_min_sd	simde/x86/sse2.h	/^simde_mm_min_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_min_ss	simde/x86/sse.h	/^simde_mm_min_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_minpos_epu16	simde/x86/sse4.1.h	/^simde_mm_minpos_epu16 (simde__m128i a) {$/;"	f
simde_mm_move_epi64	simde/x86/sse2.h	/^simde_mm_move_epi64 (simde__m128i a) {$/;"	f
simde_mm_move_sd	simde/x86/sse2.h	/^simde_mm_move_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_move_ss	simde/x86/sse.h	/^simde_mm_move_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_movedup_pd	simde/x86/sse3.h	/^simde_mm_movedup_pd (simde__m128d a) {$/;"	f
simde_mm_movehdup_ps	simde/x86/sse3.h	/^simde_mm_movehdup_ps (simde__m128 a) {$/;"	f
simde_mm_movehl_ps	simde/x86/sse.h	/^simde_mm_movehl_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_moveldup_ps	simde/x86/sse3.h	/^simde_mm_moveldup_ps (simde__m128 a) {$/;"	f
simde_mm_movelh_ps	simde/x86/sse.h	/^simde_mm_movelh_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_movemask_epi8	simde/x86/sse2.h	/^simde_mm_movemask_epi8 (simde__m128i a) {$/;"	f
simde_mm_movemask_pd	simde/x86/sse2.h	/^simde_mm_movemask_pd (simde__m128d a) {$/;"	f
simde_mm_movemask_pi8	simde/x86/sse.h	/^simde_mm_movemask_pi8 (simde__m64 a) {$/;"	f
simde_mm_movemask_ps	simde/x86/sse.h	/^simde_mm_movemask_ps (simde__m128 a) {$/;"	f
simde_mm_movepi16_mask	simde/x86/avx512/mov_mask.h	/^simde_mm_movepi16_mask (simde__m128i a) {$/;"	f
simde_mm_movepi32_mask	simde/x86/avx512/mov_mask.h	/^simde_mm_movepi32_mask (simde__m128i a) {$/;"	f
simde_mm_movepi64_mask	simde/x86/avx512/mov_mask.h	/^simde_mm_movepi64_mask (simde__m128i a) {$/;"	f
simde_mm_movepi64_pi64	simde/x86/sse2.h	/^simde_mm_movepi64_pi64 (simde__m128i a) {$/;"	f
simde_mm_movepi8_mask	simde/x86/avx512/mov_mask.h	/^simde_mm_movepi8_mask (simde__m128i a) {$/;"	f
simde_mm_movm_epi16	simde/x86/avx512/movm.h	/^simde_mm_movm_epi16 (simde__mmask8 k) {$/;"	f
simde_mm_movm_epi32	simde/x86/avx512/movm.h	/^simde_mm_movm_epi32 (simde__mmask8 k) {$/;"	f
simde_mm_movm_epi64	simde/x86/avx512/movm.h	/^simde_mm_movm_epi64 (simde__mmask8 k) {$/;"	f
simde_mm_movm_epi8	simde/x86/avx512/movm.h	/^simde_mm_movm_epi8 (simde__mmask16 k) {$/;"	f
simde_mm_movpi64_epi64	simde/x86/sse2.h	/^simde_mm_movpi64_epi64 (simde__m64 a) {$/;"	f
simde_mm_mpsadbw_epu8	simde/x86/sse4.1.h	1786;"	d
simde_mm_mul_epi32	simde/x86/sse4.1.h	/^simde_mm_mul_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mul_epu32	simde/x86/sse2.h	/^simde_mm_mul_epu32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mul_pd	simde/x86/sse2.h	/^simde_mm_mul_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_mul_ps	simde/x86/sse.h	/^simde_mm_mul_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_mul_sd	simde/x86/sse2.h	/^simde_mm_mul_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_mul_ss	simde/x86/sse.h	/^simde_mm_mul_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_mul_su32	simde/x86/sse2.h	/^simde_mm_mul_su32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_mulhi_epi16	simde/x86/sse2.h	/^simde_mm_mulhi_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mulhi_epu16	simde/x86/sse2.h	/^simde_mm_mulhi_epu16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mulhi_pi16	simde/x86/mmx.h	/^simde_mm_mulhi_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_mulhi_pu16	simde/x86/sse.h	/^simde_mm_mulhi_pu16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_mulhrs_epi16	simde/x86/ssse3.h	/^simde_mm_mulhrs_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mulhrs_pi16	simde/x86/ssse3.h	/^simde_mm_mulhrs_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_mullo_epi16	simde/x86/sse2.h	/^simde_mm_mullo_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mullo_epi32	simde/x86/sse4.1.h	/^simde_mm_mullo_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_mullo_pi16	simde/x86/mmx.h	/^simde_mm_mullo_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_or_pd	simde/x86/sse2.h	/^simde_mm_or_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_or_ps	simde/x86/sse.h	/^simde_mm_or_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_or_si128	simde/x86/sse2.h	/^simde_mm_or_si128 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_or_si64	simde/x86/mmx.h	/^simde_mm_or_si64 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_packs_epi16	simde/x86/sse2.h	/^simde_mm_packs_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_packs_epi32	simde/x86/sse2.h	/^simde_mm_packs_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_packs_pi16	simde/x86/mmx.h	/^simde_mm_packs_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_packs_pi32	simde/x86/mmx.h	/^simde_mm_packs_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_packs_pu16	simde/x86/mmx.h	/^simde_mm_packs_pu16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_packus_epi16	simde/x86/sse2.h	/^simde_mm_packus_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_packus_epi32	simde/x86/sse4.1.h	/^simde_mm_packus_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_pause	simde/x86/sse2.h	/^simde_mm_pause (void) {$/;"	f
simde_mm_permute_pd	simde/x86/avx.h	4598;"	d
simde_mm_permute_ps	simde/x86/avx.h	4574;"	d
simde_mm_permutevar_pd	simde/x86/avx.h	/^simde_mm_permutevar_pd (simde__m128d a, simde__m128i b) {$/;"	f
simde_mm_permutevar_ps	simde/x86/avx.h	/^simde_mm_permutevar_ps (simde__m128 a, simde__m128i b) {$/;"	f
simde_mm_permutex2var_epi16	simde/x86/avx512/permutex2var.h	/^simde_mm_permutex2var_epi16 (simde__m128i a, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_permutex2var_epi32	simde/x86/avx512/permutex2var.h	/^simde_mm_permutex2var_epi32 (simde__m128i a, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_permutex2var_epi64	simde/x86/avx512/permutex2var.h	/^simde_mm_permutex2var_epi64 (simde__m128i a, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_permutex2var_epi8	simde/x86/avx512/permutex2var.h	/^simde_mm_permutex2var_epi8 (simde__m128i a, simde__m128i idx, simde__m128i b) {$/;"	f
simde_mm_permutex2var_pd	simde/x86/avx512/permutex2var.h	/^simde_mm_permutex2var_pd (simde__m128d a, simde__m128i idx, simde__m128d b) {$/;"	f
simde_mm_permutex2var_ps	simde/x86/avx512/permutex2var.h	/^simde_mm_permutex2var_ps (simde__m128 a, simde__m128i idx, simde__m128 b) {$/;"	f
simde_mm_permutexvar_epi16	simde/x86/avx512/permutexvar.h	/^simde_mm_permutexvar_epi16 (simde__m128i idx, simde__m128i a) {$/;"	f
simde_mm_permutexvar_epi8	simde/x86/avx512/permutexvar.h	/^simde_mm_permutexvar_epi8 (simde__m128i idx, simde__m128i a) {$/;"	f
simde_mm_pow_pd	simde/x86/svml.h	/^simde_mm_pow_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_pow_ps	simde/x86/svml.h	/^simde_mm_pow_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_prefetch	simde/x86/sse.h	/^simde_mm_prefetch (char const* p, int i) {$/;"	f
simde_mm_prefetch	simde/x86/sse.h	3150;"	d
simde_mm_prefetch	simde/x86/sse.h	3158;"	d
simde_mm_rcp_ps	simde/x86/sse.h	/^simde_mm_rcp_ps (simde__m128 a) {$/;"	f
simde_mm_rcp_ss	simde/x86/sse.h	/^simde_mm_rcp_ss (simde__m128 a) {$/;"	f
simde_mm_rem_epi16	simde/x86/svml.h	/^simde_mm_rem_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_rem_epi32	simde/x86/svml.h	/^simde_mm_rem_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_rem_epi64	simde/x86/svml.h	/^simde_mm_rem_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_rem_epi8	simde/x86/svml.h	/^simde_mm_rem_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_rem_epu16	simde/x86/svml.h	/^simde_mm_rem_epu16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_rem_epu32	simde/x86/svml.h	/^simde_mm_rem_epu32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_rem_epu64	simde/x86/svml.h	/^simde_mm_rem_epu64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_rem_epu8	simde/x86/svml.h	/^simde_mm_rem_epu8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_round_pd	simde/x86/sse4.1.h	475;"	d
simde_mm_round_ps	simde/x86/sse.h	493;"	d
simde_mm_round_ps	simde/x86/sse.h	495;"	d
simde_mm_round_sd	simde/x86/sse4.1.h	1958;"	d
simde_mm_round_sd	simde/x86/sse4.1.h	1960;"	d
simde_mm_round_ss	simde/x86/sse4.1.h	2008;"	d
simde_mm_round_ss	simde/x86/sse4.1.h	2010;"	d
simde_mm_rsqrt_ps	simde/x86/sse.h	/^simde_mm_rsqrt_ps (simde__m128 a) {$/;"	f
simde_mm_rsqrt_ss	simde/x86/sse.h	/^simde_mm_rsqrt_ss (simde__m128 a) {$/;"	f
simde_mm_sad_epu8	simde/x86/sse2.h	/^simde_mm_sad_epu8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sad_pu8	simde/x86/sse.h	/^simde_mm_sad_pu8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_set1_epi16	simde/x86/sse2.h	/^simde_mm_set1_epi16 (int16_t a) {$/;"	f
simde_mm_set1_epi32	simde/x86/sse2.h	/^simde_mm_set1_epi32 (int32_t a) {$/;"	f
simde_mm_set1_epi64	simde/x86/sse2.h	/^simde_mm_set1_epi64 (simde__m64 a) {$/;"	f
simde_mm_set1_epi64x	simde/x86/sse2.h	/^simde_mm_set1_epi64x (int64_t a) {$/;"	f
simde_mm_set1_epi8	simde/x86/sse2.h	/^simde_mm_set1_epi8 (int8_t a) {$/;"	f
simde_mm_set1_pd	simde/x86/sse2.h	/^simde_mm_set1_pd (simde_float64 a) {$/;"	f
simde_mm_set1_pi16	simde/x86/mmx.h	/^simde_mm_set1_pi16 (int16_t a) {$/;"	f
simde_mm_set1_pi32	simde/x86/mmx.h	/^simde_mm_set1_pi32 (int32_t a) {$/;"	f
simde_mm_set1_pi8	simde/x86/mmx.h	/^simde_mm_set1_pi8 (int8_t a) {$/;"	f
simde_mm_set1_ps	simde/x86/sse.h	542;"	d
simde_mm_set_epi16	simde/x86/sse2.h	/^simde_mm_set_epi16 (int16_t e7, int16_t e6, int16_t e5, int16_t e4,$/;"	f
simde_mm_set_epi32	simde/x86/sse2.h	/^simde_mm_set_epi32 (int32_t e3, int32_t e2, int32_t e1, int32_t e0) {$/;"	f
simde_mm_set_epi64	simde/x86/sse2.h	/^simde_mm_set_epi64 (simde__m64 e1, simde__m64 e0) {$/;"	f
simde_mm_set_epi64x	simde/x86/sse2.h	/^simde_mm_set_epi64x (int64_t e1, int64_t e0) {$/;"	f
simde_mm_set_epi8	simde/x86/sse2.h	/^simde_mm_set_epi8 (int8_t e15, int8_t e14, int8_t e13, int8_t e12,$/;"	f
simde_mm_set_pd	simde/x86/sse2.h	/^simde_mm_set_pd (simde_float64 e1, simde_float64 e0) {$/;"	f
simde_mm_set_pd1	simde/x86/sse2.h	401;"	d
simde_mm_set_pi16	simde/x86/mmx.h	/^simde_mm_set_pi16 (int16_t e3, int16_t e2, int16_t e1, int16_t e0) {$/;"	f
simde_mm_set_pi32	simde/x86/mmx.h	/^simde_mm_set_pi32 (int32_t e1, int32_t e0) {$/;"	f
simde_mm_set_pi8	simde/x86/mmx.h	/^simde_mm_set_pi8 (int8_t e7, int8_t e6, int8_t e5, int8_t e4, int8_t e3, int8_t e2, int8_t e1, int8_t e0) {$/;"	f
simde_mm_set_ps	simde/x86/sse.h	/^simde_mm_set_ps (simde_float32 e3, simde_float32 e2, simde_float32 e1, simde_float32 e0) {$/;"	f
simde_mm_set_ps1	simde/x86/sse.h	/^simde_mm_set_ps1 (simde_float32 a) {$/;"	f
simde_mm_set_sd	simde/x86/sse2.h	/^simde_mm_set_sd (simde_float64 a) {$/;"	f
simde_mm_set_ss	simde/x86/sse.h	/^simde_mm_set_ss (simde_float32 a) {$/;"	f
simde_mm_setcsr	simde/x86/sse.h	/^simde_mm_setcsr (uint32_t a) {$/;"	f
simde_mm_setr_epi16	simde/x86/sse2.h	/^simde_mm_setr_epi16 (int16_t e7, int16_t e6, int16_t e5, int16_t e4,$/;"	f
simde_mm_setr_epi32	simde/x86/sse2.h	/^simde_mm_setr_epi32 (int32_t e3, int32_t e2, int32_t e1, int32_t e0) {$/;"	f
simde_mm_setr_epi64	simde/x86/sse2.h	/^simde_mm_setr_epi64 (simde__m64 e1, simde__m64 e0) {$/;"	f
simde_mm_setr_epi8	simde/x86/sse2.h	/^simde_mm_setr_epi8 (int8_t e15, int8_t e14, int8_t e13, int8_t e12,$/;"	f
simde_mm_setr_pd	simde/x86/sse2.h	/^simde_mm_setr_pd (simde_float64 e1, simde_float64 e0) {$/;"	f
simde_mm_setr_pi16	simde/x86/mmx.h	/^simde_mm_setr_pi16 (int16_t e3, int16_t e2, int16_t e1, int16_t e0) {$/;"	f
simde_mm_setr_pi32	simde/x86/mmx.h	/^simde_mm_setr_pi32 (int32_t e1, int32_t e0) {$/;"	f
simde_mm_setr_pi8	simde/x86/mmx.h	/^simde_mm_setr_pi8 (int8_t e7, int8_t e6, int8_t e5, int8_t e4, int8_t e3, int8_t e2, int8_t e1, int8_t e0) {$/;"	f
simde_mm_setr_ps	simde/x86/sse.h	/^simde_mm_setr_ps (simde_float32 e3, simde_float32 e2, simde_float32 e1, simde_float32 e0) {$/;"	f
simde_mm_setzero_pd	simde/x86/sse2.h	/^simde_mm_setzero_pd (void) {$/;"	f
simde_mm_setzero_ps	simde/x86/sse.h	/^simde_mm_setzero_ps (void) {$/;"	f
simde_mm_setzero_si128	simde/x86/sse2.h	/^simde_mm_setzero_si128 (void) {$/;"	f
simde_mm_setzero_si64	simde/x86/mmx.h	/^simde_mm_setzero_si64 (void) {$/;"	f
simde_mm_sfence	simde/x86/sse.h	/^simde_mm_sfence (void) {$/;"	f
simde_mm_shuffle_epi32	simde/x86/sse2.h	5111;"	d
simde_mm_shuffle_epi32	simde/x86/sse2.h	5113;"	d
simde_mm_shuffle_epi32	simde/x86/sse2.h	5130;"	d
simde_mm_shuffle_epi8	simde/x86/ssse3.h	/^simde_mm_shuffle_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_shuffle_pd	simde/x86/sse2.h	5160;"	d
simde_mm_shuffle_pd	simde/x86/sse2.h	5162;"	d
simde_mm_shuffle_pi16	simde/x86/sse.h	3550;"	d
simde_mm_shuffle_pi16	simde/x86/sse.h	3552;"	d
simde_mm_shuffle_pi8	simde/x86/ssse3.h	/^simde_mm_shuffle_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_shuffle_ps	simde/x86/sse.h	3593;"	d
simde_mm_shuffle_ps	simde/x86/sse.h	3595;"	d
simde_mm_shuffle_ps	simde/x86/sse.h	3611;"	d
simde_mm_shufflehi_epi16	simde/x86/sse2.h	5193;"	d
simde_mm_shufflehi_epi16	simde/x86/sse2.h	5209;"	d
simde_mm_shufflelo_epi16	simde/x86/sse2.h	5244;"	d
simde_mm_shufflelo_epi16	simde/x86/sse2.h	5260;"	d
simde_mm_sign_epi16	simde/x86/ssse3.h	/^simde_mm_sign_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sign_epi32	simde/x86/ssse3.h	/^simde_mm_sign_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sign_epi8	simde/x86/ssse3.h	/^simde_mm_sign_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sign_pi16	simde/x86/ssse3.h	/^simde_mm_sign_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_sign_pi32	simde/x86/ssse3.h	/^simde_mm_sign_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_sign_pi8	simde/x86/ssse3.h	/^simde_mm_sign_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_sin_pd	simde/x86/svml.h	/^simde_mm_sin_pd (simde__m128d a) {$/;"	f
simde_mm_sin_ps	simde/x86/svml.h	/^simde_mm_sin_ps (simde__m128 a) {$/;"	f
simde_mm_sincos_pd	simde/x86/svml.h	/^simde_mm_sincos_pd (simde__m128d* mem_addr, simde__m128d a) {$/;"	f
simde_mm_sincos_ps	simde/x86/svml.h	/^simde_mm_sincos_ps (simde__m128* mem_addr, simde__m128 a) {$/;"	f
simde_mm_sind_pd	simde/x86/svml.h	/^simde_mm_sind_pd (simde__m128d a) {$/;"	f
simde_mm_sind_ps	simde/x86/svml.h	/^simde_mm_sind_ps (simde__m128 a) {$/;"	f
simde_mm_sinh_pd	simde/x86/svml.h	/^simde_mm_sinh_pd (simde__m128d a) {$/;"	f
simde_mm_sinh_ps	simde/x86/svml.h	/^simde_mm_sinh_ps (simde__m128 a) {$/;"	f
simde_mm_sll_epi16	simde/x86/sse2.h	/^simde_mm_sll_epi16 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_sll_epi32	simde/x86/sse2.h	/^simde_mm_sll_epi32 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_sll_epi64	simde/x86/sse2.h	/^simde_mm_sll_epi64 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_sll_pi16	simde/x86/mmx.h	/^simde_mm_sll_pi16 (simde__m64 a, simde__m64 count) {$/;"	f
simde_mm_sll_pi32	simde/x86/mmx.h	/^simde_mm_sll_pi32 (simde__m64 a, simde__m64 count) {$/;"	f
simde_mm_sll_si64	simde/x86/mmx.h	/^simde_mm_sll_si64 (simde__m64 a, simde__m64 count) {$/;"	f
simde_mm_slli_epi16	simde/x86/sse2.h	5678;"	d
simde_mm_slli_epi16	simde/x86/sse2.h	5680;"	d
simde_mm_slli_epi16	simde/x86/sse2.h	5694;"	d
simde_mm_slli_epi16	simde/x86/sse2.h	5697;"	d
simde_mm_slli_epi32	simde/x86/sse2.h	5727;"	d
simde_mm_slli_epi32	simde/x86/sse2.h	5729;"	d
simde_mm_slli_epi32	simde/x86/sse2.h	5743;"	d
simde_mm_slli_epi32	simde/x86/sse2.h	5746;"	d
simde_mm_slli_epi64	simde/x86/sse2.h	5788;"	d
simde_mm_slli_epi64	simde/x86/sse2.h	5790;"	d
simde_mm_slli_epi64	simde/x86/sse2.h	5804;"	d
simde_mm_slli_pi16	simde/x86/mmx.h	/^simde_mm_slli_pi16 (simde__m64 a, int count) {$/;"	f
simde_mm_slli_pi32	simde/x86/mmx.h	/^simde_mm_slli_pi32 (simde__m64 a, int count) {$/;"	f
simde_mm_slli_si128	simde/x86/sse2.h	1215;"	d
simde_mm_slli_si64	simde/x86/mmx.h	/^simde_mm_slli_si64 (simde__m64 a, int count) {$/;"	f
simde_mm_sllv_epi32	simde/x86/avx2.h	/^simde_mm_sllv_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sllv_epi32	simde/x86/avx2.h	4392;"	d
simde_mm_sllv_epi64	simde/x86/avx2.h	/^simde_mm_sllv_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sllv_epi64	simde/x86/avx2.h	4452;"	d
simde_mm_sqrt_pd	simde/x86/sse2.h	/^simde_mm_sqrt_pd (simde__m128d a) {$/;"	f
simde_mm_sqrt_ps	simde/x86/sse.h	/^simde_mm_sqrt_ps (simde__m128 a) {$/;"	f
simde_mm_sqrt_sd	simde/x86/sse2.h	/^simde_mm_sqrt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_sqrt_ss	simde/x86/sse.h	/^simde_mm_sqrt_ss (simde__m128 a) {$/;"	f
simde_mm_sra_epi16	simde/x86/sse2.h	/^simde_mm_sra_epi16 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_sra_epi32	simde/x86/sse2.h	/^simde_mm_sra_epi32 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_sra_pi16	simde/x86/mmx.h	/^simde_mm_sra_pi16 (simde__m64 a, simde__m64 count) {$/;"	f
simde_mm_sra_pi32	simde/x86/mmx.h	/^simde_mm_sra_pi32 (simde__m64 a, simde__m64 count) {$/;"	f
simde_mm_srai_epi16	simde/x86/sse2.h	5554;"	d
simde_mm_srai_epi32	simde/x86/sse2.h	5585;"	d
simde_mm_srai_pi16	simde/x86/mmx.h	/^simde_mm_srai_pi16 (simde__m64 a, int count) {$/;"	f
simde_mm_srai_pi32	simde/x86/mmx.h	/^simde_mm_srai_pi32 (simde__m64 a, int count) {$/;"	f
simde_mm_srav_epi32	simde/x86/avx2.h	/^simde_mm_srav_epi32 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_srl_epi16	simde/x86/sse2.h	/^simde_mm_srl_epi16 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_srl_epi32	simde/x86/sse2.h	/^simde_mm_srl_epi32 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_srl_epi64	simde/x86/sse2.h	/^simde_mm_srl_epi64 (simde__m128i a, simde__m128i count) {$/;"	f
simde_mm_srl_pi16	simde/x86/mmx.h	/^simde_mm_srl_pi16 (simde__m64 a, simde__m64 count) {$/;"	f
simde_mm_srl_pi32	simde/x86/mmx.h	/^simde_mm_srl_pi32 (simde__m64 a, simde__m64 count) {$/;"	f
simde_mm_srl_si64	simde/x86/mmx.h	/^simde_mm_srl_si64 (simde__m64 a, simde__m64 count) {$/;"	f
simde_mm_srli_epi16	simde/x86/sse2.h	5834;"	d
simde_mm_srli_epi16	simde/x86/sse2.h	5836;"	d
simde_mm_srli_epi16	simde/x86/sse2.h	5850;"	d
simde_mm_srli_epi16	simde/x86/sse2.h	5853;"	d
simde_mm_srli_epi32	simde/x86/sse2.h	5883;"	d
simde_mm_srli_epi32	simde/x86/sse2.h	5885;"	d
simde_mm_srli_epi32	simde/x86/sse2.h	5899;"	d
simde_mm_srli_epi32	simde/x86/sse2.h	5902;"	d
simde_mm_srli_epi64	simde/x86/sse2.h	5948;"	d
simde_mm_srli_epi64	simde/x86/sse2.h	5950;"	d
simde_mm_srli_epi64	simde/x86/sse2.h	5964;"	d
simde_mm_srli_pi16	simde/x86/mmx.h	/^simde_mm_srli_pi16 (simde__m64 a, int count) {$/;"	f
simde_mm_srli_pi32	simde/x86/mmx.h	/^simde_mm_srli_pi32 (simde__m64 a, int count) {$/;"	f
simde_mm_srli_si128	simde/x86/sse2.h	1287;"	d
simde_mm_srli_si64	simde/x86/mmx.h	/^simde_mm_srli_si64 (simde__m64 a, int count) {$/;"	f
simde_mm_srlv_epi16	simde/x86/avx512/srlv.h	/^simde_mm_srlv_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_srlv_epi32	simde/x86/avx2.h	/^simde_mm_srlv_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_srlv_epi32	simde/x86/avx2.h	4979;"	d
simde_mm_srlv_epi64	simde/x86/avx2.h	/^simde_mm_srlv_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_srlv_epi64	simde/x86/avx2.h	5033;"	d
simde_mm_store1_pd	simde/x86/sse2.h	/^simde_mm_store1_pd (simde_float64 mem_addr[HEDLEY_ARRAY_PARAM(2)], simde__m128d a) {$/;"	f
simde_mm_store1_ps	simde/x86/sse.h	/^simde_mm_store1_ps (simde_float32 mem_addr[4], simde__m128 a) {$/;"	f
simde_mm_store_pd	simde/x86/sse2.h	/^simde_mm_store_pd (simde_float64 mem_addr[HEDLEY_ARRAY_PARAM(2)], simde__m128d a) {$/;"	f
simde_mm_store_pd1	simde/x86/sse2.h	6004;"	d
simde_mm_store_ps	simde/x86/sse.h	/^simde_mm_store_ps (simde_float32 mem_addr[4], simde__m128 a) {$/;"	f
simde_mm_store_ps1	simde/x86/sse.h	3763;"	d
simde_mm_store_sd	simde/x86/sse2.h	/^simde_mm_store_sd (simde_float64* mem_addr, simde__m128d a) {$/;"	f
simde_mm_store_si128	simde/x86/sse2.h	/^simde_mm_store_si128 (simde__m128i* mem_addr, simde__m128i a) {$/;"	f
simde_mm_store_ss	simde/x86/sse.h	/^simde_mm_store_ss (simde_float32* mem_addr, simde__m128 a) {$/;"	f
simde_mm_storeh_pd	simde/x86/sse2.h	/^  simde_mm_storeh_pd (simde_float64* mem_addr, simde__m128d a) {$/;"	f
simde_mm_storeh_pi	simde/x86/sse.h	/^simde_mm_storeh_pi (simde__m64* mem_addr, simde__m128 a) {$/;"	f
simde_mm_storel_epi64	simde/x86/sse2.h	/^simde_mm_storel_epi64 (simde__m128i* mem_addr, simde__m128i a) {$/;"	f
simde_mm_storel_pd	simde/x86/sse2.h	/^simde_mm_storel_pd (simde_float64* mem_addr, simde__m128d a) {$/;"	f
simde_mm_storel_pi	simde/x86/sse.h	/^simde_mm_storel_pi (simde__m64* mem_addr, simde__m128 a) {$/;"	f
simde_mm_storer_pd	simde/x86/sse2.h	/^simde_mm_storer_pd (simde_float64 mem_addr[2], simde__m128d a) {$/;"	f
simde_mm_storer_ps	simde/x86/sse.h	/^simde_mm_storer_ps (simde_float32 mem_addr[4], simde__m128 a) {$/;"	f
simde_mm_storeu_pd	simde/x86/sse2.h	/^simde_mm_storeu_pd (simde_float64* mem_addr, simde__m128d a) {$/;"	f
simde_mm_storeu_ps	simde/x86/sse.h	/^simde_mm_storeu_ps (simde_float32 mem_addr[4], simde__m128 a) {$/;"	f
simde_mm_storeu_si128	simde/x86/sse2.h	/^simde_mm_storeu_si128 (simde__m128i* mem_addr, simde__m128i a) {$/;"	f
simde_mm_storeu_si16	simde/x86/sse2.h	/^simde_mm_storeu_si16 (void* mem_addr, simde__m128i a) {$/;"	f
simde_mm_storeu_si32	simde/x86/sse2.h	/^simde_mm_storeu_si32 (void* mem_addr, simde__m128i a) {$/;"	f
simde_mm_storeu_si64	simde/x86/sse2.h	/^simde_mm_storeu_si64 (void* mem_addr, simde__m128i a) {$/;"	f
simde_mm_stream_load_si128	simde/x86/sse4.1.h	/^simde_mm_stream_load_si128 (const simde__m128i* mem_addr) {$/;"	f
simde_mm_stream_pd	simde/x86/sse2.h	/^simde_mm_stream_pd (simde_float64 mem_addr[HEDLEY_ARRAY_PARAM(2)], simde__m128d a) {$/;"	f
simde_mm_stream_pi	simde/x86/sse.h	/^simde_mm_stream_pi (simde__m64* mem_addr, simde__m64 a) {$/;"	f
simde_mm_stream_ps	simde/x86/sse.h	/^simde_mm_stream_ps (simde_float32 mem_addr[4], simde__m128 a) {$/;"	f
simde_mm_stream_si128	simde/x86/sse2.h	/^simde_mm_stream_si128 (simde__m128i* mem_addr, simde__m128i a) {$/;"	f
simde_mm_stream_si32	simde/x86/sse2.h	/^simde_mm_stream_si32 (int32_t* mem_addr, int32_t a) {$/;"	f
simde_mm_stream_si64	simde/x86/sse2.h	/^simde_mm_stream_si64 (int64_t* mem_addr, int64_t a) {$/;"	f
simde_mm_stream_si64x	simde/x86/sse2.h	6273;"	d
simde_mm_sub_epi16	simde/x86/sse2.h	/^simde_mm_sub_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sub_epi32	simde/x86/sse2.h	/^simde_mm_sub_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sub_epi64	simde/x86/sse2.h	/^simde_mm_sub_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sub_epi8	simde/x86/sse2.h	/^simde_mm_sub_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_sub_pd	simde/x86/sse2.h	/^simde_mm_sub_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_sub_pi16	simde/x86/mmx.h	/^simde_mm_sub_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_sub_pi32	simde/x86/mmx.h	/^simde_mm_sub_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_sub_pi8	simde/x86/mmx.h	/^simde_mm_sub_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_sub_ps	simde/x86/sse.h	/^simde_mm_sub_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_sub_sd	simde/x86/sse2.h	/^simde_mm_sub_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_sub_si64	simde/x86/sse2.h	/^simde_mm_sub_si64 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_sub_ss	simde/x86/sse.h	/^simde_mm_sub_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_subs_epi16	simde/x86/sse2.h	/^simde_mm_subs_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_subs_epi8	simde/x86/sse2.h	/^simde_mm_subs_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_subs_epu16	simde/x86/sse2.h	/^simde_mm_subs_epu16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_subs_epu8	simde/x86/sse2.h	/^simde_mm_subs_epu8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_subs_pi16	simde/x86/mmx.h	/^simde_mm_subs_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_subs_pi8	simde/x86/mmx.h	/^simde_mm_subs_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_subs_pu16	simde/x86/mmx.h	/^simde_mm_subs_pu16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_subs_pu8	simde/x86/mmx.h	/^simde_mm_subs_pu8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_svml_ceil_pd	simde/x86/svml.h	/^simde_mm_svml_ceil_pd (simde__m128d a) {$/;"	f
simde_mm_svml_ceil_ps	simde/x86/svml.h	/^simde_mm_svml_ceil_ps (simde__m128 a) {$/;"	f
simde_mm_svml_floor_pd	simde/x86/svml.h	/^simde_mm_svml_floor_pd (simde__m128d a) {$/;"	f
simde_mm_svml_floor_ps	simde/x86/svml.h	/^simde_mm_svml_floor_ps (simde__m128 a) {$/;"	f
simde_mm_svml_round_pd	simde/x86/svml.h	/^simde_mm_svml_round_pd (simde__m128d a) {$/;"	f
simde_mm_svml_round_ps	simde/x86/svml.h	/^simde_mm_svml_round_ps (simde__m128 a) {$/;"	f
simde_mm_svml_sqrt_pd	simde/x86/svml.h	/^simde_mm_svml_sqrt_pd (simde__m128d a) {$/;"	f
simde_mm_svml_sqrt_ps	simde/x86/svml.h	/^simde_mm_svml_sqrt_ps (simde__m128 a) {$/;"	f
simde_mm_tan_pd	simde/x86/svml.h	/^simde_mm_tan_pd (simde__m128d a) {$/;"	f
simde_mm_tan_ps	simde/x86/svml.h	/^simde_mm_tan_ps (simde__m128 a) {$/;"	f
simde_mm_tand_pd	simde/x86/svml.h	/^simde_mm_tand_pd (simde__m128d a) {$/;"	f
simde_mm_tand_ps	simde/x86/svml.h	/^simde_mm_tand_ps (simde__m128 a) {$/;"	f
simde_mm_tanh_pd	simde/x86/svml.h	/^simde_mm_tanh_pd (simde__m128d a) {$/;"	f
simde_mm_tanh_ps	simde/x86/svml.h	/^simde_mm_tanh_ps (simde__m128 a) {$/;"	f
simde_mm_test_all_ones	simde/x86/sse4.1.h	/^simde_mm_test_all_ones (simde__m128i a) {$/;"	f
simde_mm_test_all_zeros	simde/x86/sse4.1.h	/^simde_mm_test_all_zeros (simde__m128i a, simde__m128i mask) {$/;"	f
simde_mm_test_mix_ones_zeros	simde/x86/sse4.1.h	/^simde_mm_test_mix_ones_zeros (simde__m128i a, simde__m128i mask) {$/;"	f
simde_mm_testc_pd	simde/x86/avx.h	/^simde_mm_testc_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_testc_ps	simde/x86/avx.h	/^simde_mm_testc_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_testc_si128	simde/x86/sse4.1.h	/^simde_mm_testc_si128 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_testnzc_pd	simde/x86/avx.h	/^simde_mm_testnzc_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_testnzc_ps	simde/x86/avx.h	/^simde_mm_testnzc_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_testnzc_si128	simde/x86/sse4.1.h	/^simde_mm_testnzc_si128 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_testz_pd	simde/x86/avx.h	/^simde_mm_testz_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_testz_ps	simde/x86/avx.h	/^simde_mm_testz_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_testz_si128	simde/x86/sse4.1.h	/^simde_mm_testz_si128 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_trunc_pd	simde/x86/svml.h	/^simde_mm_trunc_pd (simde__m128d a) {$/;"	f
simde_mm_trunc_ps	simde/x86/svml.h	/^simde_mm_trunc_ps (simde__m128 a) {$/;"	f
simde_mm_ucomieq_sd	simde/x86/sse2.h	/^simde_mm_ucomieq_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_ucomieq_ss	simde/x86/sse.h	/^simde_mm_ucomieq_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_ucomige_sd	simde/x86/sse2.h	/^simde_mm_ucomige_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_ucomige_ss	simde/x86/sse.h	/^simde_mm_ucomige_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_ucomigt_sd	simde/x86/sse2.h	/^simde_mm_ucomigt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_ucomigt_ss	simde/x86/sse.h	/^simde_mm_ucomigt_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_ucomile_sd	simde/x86/sse2.h	/^simde_mm_ucomile_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_ucomile_ss	simde/x86/sse.h	/^simde_mm_ucomile_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_ucomilt_sd	simde/x86/sse2.h	/^simde_mm_ucomilt_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_ucomilt_ss	simde/x86/sse.h	/^simde_mm_ucomilt_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_ucomineq_sd	simde/x86/sse2.h	/^simde_mm_ucomineq_sd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_ucomineq_ss	simde/x86/sse.h	/^simde_mm_ucomineq_ss (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_udiv_epi32	simde/x86/svml.h	2889;"	d
simde_mm_udivrem_epi32	simde/x86/svml.h	/^simde_mm_udivrem_epi32 (simde__m128i * mem_addr, simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_undefined_pd	simde/x86/sse2.h	/^simde_mm_undefined_pd (void) {$/;"	f
simde_mm_undefined_ps	simde/x86/sse.h	/^simde_mm_undefined_ps (void) {$/;"	f
simde_mm_undefined_si128	simde/x86/sse2.h	/^simde_mm_undefined_si128 (void) {$/;"	f
simde_mm_unpackhi_epi16	simde/x86/sse2.h	/^simde_mm_unpackhi_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_unpackhi_epi32	simde/x86/sse2.h	/^simde_mm_unpackhi_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_unpackhi_epi64	simde/x86/sse2.h	/^simde_mm_unpackhi_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_unpackhi_epi8	simde/x86/sse2.h	/^simde_mm_unpackhi_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_unpackhi_pd	simde/x86/sse2.h	/^simde_mm_unpackhi_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_unpackhi_pi16	simde/x86/mmx.h	/^simde_mm_unpackhi_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_unpackhi_pi32	simde/x86/mmx.h	/^simde_mm_unpackhi_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_unpackhi_pi8	simde/x86/mmx.h	/^simde_mm_unpackhi_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_unpackhi_ps	simde/x86/sse.h	/^simde_mm_unpackhi_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_unpacklo_epi16	simde/x86/sse2.h	/^simde_mm_unpacklo_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_unpacklo_epi32	simde/x86/sse2.h	/^simde_mm_unpacklo_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_unpacklo_epi64	simde/x86/sse2.h	/^simde_mm_unpacklo_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_unpacklo_epi8	simde/x86/sse2.h	/^simde_mm_unpacklo_epi8 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_unpacklo_pd	simde/x86/sse2.h	/^simde_mm_unpacklo_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_unpacklo_pi16	simde/x86/mmx.h	/^simde_mm_unpacklo_pi16 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_unpacklo_pi32	simde/x86/mmx.h	/^simde_mm_unpacklo_pi32 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_unpacklo_pi8	simde/x86/mmx.h	/^simde_mm_unpacklo_pi8 (simde__m64 a, simde__m64 b) {$/;"	f
simde_mm_unpacklo_ps	simde/x86/sse.h	/^simde_mm_unpacklo_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_urem_epi32	simde/x86/svml.h	9104;"	d
simde_mm_xor_pd	simde/x86/sse2.h	/^simde_mm_xor_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_mm_xor_ps	simde/x86/sse.h	/^simde_mm_xor_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_mm_xor_si128	simde/x86/sse2.h	/^simde_mm_xor_si128 (simde__m128i a, simde__m128i b) {$/;"	f
simde_mm_xor_si64	simde/x86/mmx.h	/^simde_mm_xor_si64 (simde__m64 a, simde__m64 b) {$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm int 3h; }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__(".inst 0xd4200000"); }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__(".inst 0xde01"); }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__(".inst 0xe7f001f0"); }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__(";\\n .if (.MNEMONIC)\\n ESTOP_1\\n .else\\n ESTOP_1()\\n .endif\\n NOP"); }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__("ESTOP"); }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__("NOP\\n .word 0x10000000"); }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__("SWBP 0"); }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__("bpt"); }$/;"	f
simde_trap	simde/debug-trap.h	/^     static inline void simde_trap(void) { __asm__ __volatile__("int $03"); }$/;"	f
simde_trap	simde/debug-trap.h	22;"	d
simde_trap	simde/debug-trap.h	24;"	d
simde_trap	simde/debug-trap.h	29;"	d
simde_trap	simde/debug-trap.h	31;"	d
simde_trap	simde/debug-trap.h	34;"	d
simde_trap	simde/debug-trap.h	56;"	d
simde_trap	simde/debug-trap.h	60;"	d
simde_trap	simde/debug-trap.h	62;"	d
simde_uint128	simde/simde-common.h	/^typedef unsigned __int128 simde_uint128;$/;"	t
simde_uint16x4_t	simde/arm/neon/types.h	/^  typedef    uint16x4_t    simde_uint16x4_t;$/;"	t
simde_uint16x4_t	simde/arm/neon/types.h	/^  typedef simde_uint16x4_private simde_uint16x4_t;$/;"	t
simde_uint16x4x2_t	simde/arm/neon/types.h	/^  typedef  uint16x4x2_t  simde_uint16x4x2_t;$/;"	t
simde_uint16x4x2_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint16x4x2_t {$/;"	s
simde_uint16x4x2_t	simde/arm/neon/types.h	/^  } simde_uint16x4x2_t;$/;"	t	typeref:struct:simde_uint16x4x2_t
simde_uint16x4x3_t	simde/arm/neon/types.h	/^  typedef  uint16x4x3_t  simde_uint16x4x3_t;$/;"	t
simde_uint16x4x3_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint16x4x3_t {$/;"	s
simde_uint16x4x3_t	simde/arm/neon/types.h	/^  } simde_uint16x4x3_t;$/;"	t	typeref:struct:simde_uint16x4x3_t
simde_uint16x4x4_t	simde/arm/neon/types.h	/^  typedef  uint16x4x4_t  simde_uint16x4x4_t;$/;"	t
simde_uint16x4x4_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint16x4x4_t {$/;"	s
simde_uint16x4x4_t	simde/arm/neon/types.h	/^  } simde_uint16x4x4_t;$/;"	t	typeref:struct:simde_uint16x4x4_t
simde_uint16x8_t	simde/arm/neon/types.h	/^  typedef    uint16x8_t    simde_uint16x8_t;$/;"	t
simde_uint16x8_t	simde/arm/neon/types.h	/^  typedef simde_uint16x8_private simde_uint16x8_t;$/;"	t
simde_uint16x8x2_t	simde/arm/neon/types.h	/^  typedef  uint16x8x2_t  simde_uint16x8x2_t;$/;"	t
simde_uint16x8x2_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint16x8x2_t {$/;"	s
simde_uint16x8x2_t	simde/arm/neon/types.h	/^  } simde_uint16x8x2_t;$/;"	t	typeref:struct:simde_uint16x8x2_t
simde_uint16x8x3_t	simde/arm/neon/types.h	/^  typedef  uint16x8x3_t  simde_uint16x8x3_t;$/;"	t
simde_uint16x8x3_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint16x8x3_t {$/;"	s
simde_uint16x8x3_t	simde/arm/neon/types.h	/^  } simde_uint16x8x3_t;$/;"	t	typeref:struct:simde_uint16x8x3_t
simde_uint16x8x4_t	simde/arm/neon/types.h	/^  typedef  uint16x8x4_t  simde_uint16x8x4_t;$/;"	t
simde_uint16x8x4_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint16x8x4_t {$/;"	s
simde_uint16x8x4_t	simde/arm/neon/types.h	/^  } simde_uint16x8x4_t;$/;"	t	typeref:struct:simde_uint16x8x4_t
simde_uint32x2_t	simde/arm/neon/types.h	/^  typedef    uint32x2_t    simde_uint32x2_t;$/;"	t
simde_uint32x2_t	simde/arm/neon/types.h	/^  typedef simde_uint32x2_private simde_uint32x2_t;$/;"	t
simde_uint32x2x2_t	simde/arm/neon/types.h	/^  typedef  uint32x2x2_t  simde_uint32x2x2_t;$/;"	t
simde_uint32x2x2_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint32x2x2_t {$/;"	s
simde_uint32x2x2_t	simde/arm/neon/types.h	/^  } simde_uint32x2x2_t;$/;"	t	typeref:struct:simde_uint32x2x2_t
simde_uint32x2x3_t	simde/arm/neon/types.h	/^  typedef  uint32x2x3_t  simde_uint32x2x3_t;$/;"	t
simde_uint32x2x3_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint32x2x3_t {$/;"	s
simde_uint32x2x3_t	simde/arm/neon/types.h	/^  } simde_uint32x2x3_t;$/;"	t	typeref:struct:simde_uint32x2x3_t
simde_uint32x2x4_t	simde/arm/neon/types.h	/^  typedef  uint32x2x4_t  simde_uint32x2x4_t;$/;"	t
simde_uint32x2x4_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint32x2x4_t {$/;"	s
simde_uint32x2x4_t	simde/arm/neon/types.h	/^  } simde_uint32x2x4_t;$/;"	t	typeref:struct:simde_uint32x2x4_t
simde_uint32x4_t	simde/arm/neon/types.h	/^  typedef    uint32x4_t    simde_uint32x4_t;$/;"	t
simde_uint32x4_t	simde/arm/neon/types.h	/^  typedef simde_uint32x4_private simde_uint32x4_t;$/;"	t
simde_uint32x4x2_t	simde/arm/neon/types.h	/^  typedef  uint32x4x2_t  simde_uint32x4x2_t;$/;"	t
simde_uint32x4x2_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint32x4x2_t {$/;"	s
simde_uint32x4x2_t	simde/arm/neon/types.h	/^  } simde_uint32x4x2_t;$/;"	t	typeref:struct:simde_uint32x4x2_t
simde_uint32x4x3_t	simde/arm/neon/types.h	/^  typedef  uint32x4x3_t  simde_uint32x4x3_t;$/;"	t
simde_uint32x4x3_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint32x4x3_t {$/;"	s
simde_uint32x4x3_t	simde/arm/neon/types.h	/^  } simde_uint32x4x3_t;$/;"	t	typeref:struct:simde_uint32x4x3_t
simde_uint32x4x4_t	simde/arm/neon/types.h	/^  typedef  uint32x4x4_t  simde_uint32x4x4_t;$/;"	t
simde_uint32x4x4_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint32x4x4_t {$/;"	s
simde_uint32x4x4_t	simde/arm/neon/types.h	/^  } simde_uint32x4x4_t;$/;"	t	typeref:struct:simde_uint32x4x4_t
simde_uint64x1_t	simde/arm/neon/types.h	/^  typedef    uint64x1_t    simde_uint64x1_t;$/;"	t
simde_uint64x1_t	simde/arm/neon/types.h	/^  typedef simde_uint64x1_private simde_uint64x1_t;$/;"	t
simde_uint64x1x2_t	simde/arm/neon/types.h	/^  typedef  uint64x1x2_t  simde_uint64x1x2_t;$/;"	t
simde_uint64x1x2_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint64x1x2_t {$/;"	s
simde_uint64x1x2_t	simde/arm/neon/types.h	/^  } simde_uint64x1x2_t;$/;"	t	typeref:struct:simde_uint64x1x2_t
simde_uint64x1x3_t	simde/arm/neon/types.h	/^  typedef  uint64x1x3_t  simde_uint64x1x3_t;$/;"	t
simde_uint64x1x3_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint64x1x3_t {$/;"	s
simde_uint64x1x3_t	simde/arm/neon/types.h	/^  } simde_uint64x1x3_t;$/;"	t	typeref:struct:simde_uint64x1x3_t
simde_uint64x1x4_t	simde/arm/neon/types.h	/^  typedef  uint64x1x4_t  simde_uint64x1x4_t;$/;"	t
simde_uint64x1x4_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint64x1x4_t {$/;"	s
simde_uint64x1x4_t	simde/arm/neon/types.h	/^  } simde_uint64x1x4_t;$/;"	t	typeref:struct:simde_uint64x1x4_t
simde_uint64x2_t	simde/arm/neon/types.h	/^  typedef    uint64x2_t    simde_uint64x2_t;$/;"	t
simde_uint64x2_t	simde/arm/neon/types.h	/^  typedef simde_uint64x2_private simde_uint64x2_t;$/;"	t
simde_uint64x2x2_t	simde/arm/neon/types.h	/^  typedef  uint64x2x2_t  simde_uint64x2x2_t;$/;"	t
simde_uint64x2x2_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint64x2x2_t {$/;"	s
simde_uint64x2x2_t	simde/arm/neon/types.h	/^  } simde_uint64x2x2_t;$/;"	t	typeref:struct:simde_uint64x2x2_t
simde_uint64x2x3_t	simde/arm/neon/types.h	/^  typedef  uint64x2x3_t  simde_uint64x2x3_t;$/;"	t
simde_uint64x2x3_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint64x2x3_t {$/;"	s
simde_uint64x2x3_t	simde/arm/neon/types.h	/^  } simde_uint64x2x3_t;$/;"	t	typeref:struct:simde_uint64x2x3_t
simde_uint64x2x4_t	simde/arm/neon/types.h	/^  typedef  uint64x2x4_t  simde_uint64x2x4_t;$/;"	t
simde_uint64x2x4_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint64x2x4_t {$/;"	s
simde_uint64x2x4_t	simde/arm/neon/types.h	/^  } simde_uint64x2x4_t;$/;"	t	typeref:struct:simde_uint64x2x4_t
simde_uint8x16_t	simde/arm/neon/types.h	/^  typedef    uint8x16_t    simde_uint8x16_t;$/;"	t
simde_uint8x16_t	simde/arm/neon/types.h	/^  typedef simde_uint8x16_private simde_uint8x16_t;$/;"	t
simde_uint8x16x2_t	simde/arm/neon/types.h	/^  typedef  uint8x16x2_t  simde_uint8x16x2_t;$/;"	t
simde_uint8x16x2_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint8x16x2_t {$/;"	s
simde_uint8x16x2_t	simde/arm/neon/types.h	/^  } simde_uint8x16x2_t;$/;"	t	typeref:struct:simde_uint8x16x2_t
simde_uint8x16x3_t	simde/arm/neon/types.h	/^  typedef  uint8x16x3_t  simde_uint8x16x3_t;$/;"	t
simde_uint8x16x3_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint8x16x3_t {$/;"	s
simde_uint8x16x3_t	simde/arm/neon/types.h	/^  } simde_uint8x16x3_t;$/;"	t	typeref:struct:simde_uint8x16x3_t
simde_uint8x16x4_t	simde/arm/neon/types.h	/^  typedef  uint8x16x4_t  simde_uint8x16x4_t;$/;"	t
simde_uint8x16x4_t	simde/arm/neon/types.h	/^  typedef struct  simde_uint8x16x4_t {$/;"	s
simde_uint8x16x4_t	simde/arm/neon/types.h	/^  } simde_uint8x16x4_t;$/;"	t	typeref:struct:simde_uint8x16x4_t
simde_uint8x8_t	simde/arm/neon/types.h	/^  typedef     uint8x8_t     simde_uint8x8_t;$/;"	t
simde_uint8x8_t	simde/arm/neon/types.h	/^  typedef simde_uint8x8_private simde_uint8x8_t;$/;"	t
simde_uint8x8x2_t	simde/arm/neon/types.h	/^  typedef   uint8x8x2_t   simde_uint8x8x2_t;$/;"	t
simde_uint8x8x2_t	simde/arm/neon/types.h	/^  typedef struct   simde_uint8x8x2_t {$/;"	s
simde_uint8x8x2_t	simde/arm/neon/types.h	/^  } simde_uint8x8x2_t;$/;"	t	typeref:struct:simde_uint8x8x2_t
simde_uint8x8x3_t	simde/arm/neon/types.h	/^  typedef   uint8x8x3_t   simde_uint8x8x3_t;$/;"	t
simde_uint8x8x3_t	simde/arm/neon/types.h	/^  typedef struct   simde_uint8x8x3_t {$/;"	s
simde_uint8x8x3_t	simde/arm/neon/types.h	/^  } simde_uint8x8x3_t;$/;"	t	typeref:struct:simde_uint8x8x3_t
simde_uint8x8x4_t	simde/arm/neon/types.h	/^  typedef   uint8x8x4_t   simde_uint8x8x4_t;$/;"	t
simde_uint8x8x4_t	simde/arm/neon/types.h	/^  typedef struct   simde_uint8x8x4_t {$/;"	s
simde_uint8x8x4_t	simde/arm/neon/types.h	/^  } simde_uint8x8x4_t;$/;"	t	typeref:struct:simde_uint8x8x4_t
simde_vaba_s16	simde/arm/neon/aba.h	/^simde_vaba_s16(simde_int16x4_t a, simde_int16x4_t b, simde_int16x4_t c) {$/;"	f
simde_vaba_s32	simde/arm/neon/aba.h	/^simde_vaba_s32(simde_int32x2_t a, simde_int32x2_t b, simde_int32x2_t c) {$/;"	f
simde_vaba_s8	simde/arm/neon/aba.h	/^simde_vaba_s8(simde_int8x8_t a, simde_int8x8_t b, simde_int8x8_t c) {$/;"	f
simde_vaba_u16	simde/arm/neon/aba.h	/^simde_vaba_u16(simde_uint16x4_t a, simde_uint16x4_t b, simde_uint16x4_t c) {$/;"	f
simde_vaba_u32	simde/arm/neon/aba.h	/^simde_vaba_u32(simde_uint32x2_t a, simde_uint32x2_t b, simde_uint32x2_t c) {$/;"	f
simde_vaba_u8	simde/arm/neon/aba.h	/^simde_vaba_u8(simde_uint8x8_t a, simde_uint8x8_t b, simde_uint8x8_t c) {$/;"	f
simde_vabaq_s16	simde/arm/neon/aba.h	/^simde_vabaq_s16(simde_int16x8_t a, simde_int16x8_t b, simde_int16x8_t c) {$/;"	f
simde_vabaq_s32	simde/arm/neon/aba.h	/^simde_vabaq_s32(simde_int32x4_t a, simde_int32x4_t b, simde_int32x4_t c) {$/;"	f
simde_vabaq_s8	simde/arm/neon/aba.h	/^simde_vabaq_s8(simde_int8x16_t a, simde_int8x16_t b, simde_int8x16_t c) {$/;"	f
simde_vabaq_u16	simde/arm/neon/aba.h	/^simde_vabaq_u16(simde_uint16x8_t a, simde_uint16x8_t b, simde_uint16x8_t c) {$/;"	f
simde_vabaq_u32	simde/arm/neon/aba.h	/^simde_vabaq_u32(simde_uint32x4_t a, simde_uint32x4_t b, simde_uint32x4_t c) {$/;"	f
simde_vabaq_u8	simde/arm/neon/aba.h	/^simde_vabaq_u8(simde_uint8x16_t a, simde_uint8x16_t b, simde_uint8x16_t c) {$/;"	f
simde_vabd_f32	simde/arm/neon/abd.h	/^simde_vabd_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vabd_f64	simde/arm/neon/abd.h	/^simde_vabd_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vabd_s16	simde/arm/neon/abd.h	/^simde_vabd_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vabd_s32	simde/arm/neon/abd.h	/^simde_vabd_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vabd_s8	simde/arm/neon/abd.h	/^simde_vabd_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vabd_u16	simde/arm/neon/abd.h	/^simde_vabd_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vabd_u32	simde/arm/neon/abd.h	/^simde_vabd_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vabd_u8	simde/arm/neon/abd.h	/^simde_vabd_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vabdl_s16	simde/arm/neon/abdl.h	/^simde_vabdl_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vabdl_s32	simde/arm/neon/abdl.h	/^simde_vabdl_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vabdl_s8	simde/arm/neon/abdl.h	/^simde_vabdl_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vabdl_u16	simde/arm/neon/abdl.h	/^simde_vabdl_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vabdl_u32	simde/arm/neon/abdl.h	/^simde_vabdl_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vabdl_u8	simde/arm/neon/abdl.h	/^simde_vabdl_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vabdq_f32	simde/arm/neon/abd.h	/^simde_vabdq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vabdq_f64	simde/arm/neon/abd.h	/^simde_vabdq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vabdq_s16	simde/arm/neon/abd.h	/^simde_vabdq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vabdq_s32	simde/arm/neon/abd.h	/^simde_vabdq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vabdq_s8	simde/arm/neon/abd.h	/^simde_vabdq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vabdq_u16	simde/arm/neon/abd.h	/^simde_vabdq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vabdq_u32	simde/arm/neon/abd.h	/^simde_vabdq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vabdq_u8	simde/arm/neon/abd.h	/^simde_vabdq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vabs_f32	simde/arm/neon/abs.h	/^simde_vabs_f32(simde_float32x2_t a) {$/;"	f
simde_vabs_f64	simde/arm/neon/abs.h	/^simde_vabs_f64(simde_float64x1_t a) {$/;"	f
simde_vabs_s16	simde/arm/neon/abs.h	/^simde_vabs_s16(simde_int16x4_t a) {$/;"	f
simde_vabs_s32	simde/arm/neon/abs.h	/^simde_vabs_s32(simde_int32x2_t a) {$/;"	f
simde_vabs_s64	simde/arm/neon/abs.h	/^simde_vabs_s64(simde_int64x1_t a) {$/;"	f
simde_vabs_s8	simde/arm/neon/abs.h	/^simde_vabs_s8(simde_int8x8_t a) {$/;"	f
simde_vabsq_f32	simde/arm/neon/abs.h	/^simde_vabsq_f32(simde_float32x4_t a) {$/;"	f
simde_vabsq_f64	simde/arm/neon/abs.h	/^simde_vabsq_f64(simde_float64x2_t a) {$/;"	f
simde_vabsq_s16	simde/arm/neon/abs.h	/^simde_vabsq_s16(simde_int16x8_t a) {$/;"	f
simde_vabsq_s32	simde/arm/neon/abs.h	/^simde_vabsq_s32(simde_int32x4_t a) {$/;"	f
simde_vabsq_s64	simde/arm/neon/abs.h	/^simde_vabsq_s64(simde_int64x2_t a) {$/;"	f
simde_vabsq_s8	simde/arm/neon/abs.h	/^simde_vabsq_s8(simde_int8x16_t a) {$/;"	f
simde_vadd_f32	simde/arm/neon/add.h	/^simde_vadd_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vadd_f64	simde/arm/neon/add.h	/^simde_vadd_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vadd_s16	simde/arm/neon/add.h	/^simde_vadd_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vadd_s32	simde/arm/neon/add.h	/^simde_vadd_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vadd_s64	simde/arm/neon/add.h	/^simde_vadd_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vadd_s8	simde/arm/neon/add.h	/^simde_vadd_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vadd_u16	simde/arm/neon/add.h	/^simde_vadd_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vadd_u32	simde/arm/neon/add.h	/^simde_vadd_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vadd_u64	simde/arm/neon/add.h	/^simde_vadd_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vadd_u8	simde/arm/neon/add.h	/^simde_vadd_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vaddl_high_s16	simde/arm/neon/addl_high.h	/^simde_vaddl_high_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vaddl_high_s32	simde/arm/neon/addl_high.h	/^simde_vaddl_high_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vaddl_high_s8	simde/arm/neon/addl_high.h	/^simde_vaddl_high_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vaddl_high_u16	simde/arm/neon/addl_high.h	/^simde_vaddl_high_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vaddl_high_u32	simde/arm/neon/addl_high.h	/^simde_vaddl_high_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vaddl_high_u8	simde/arm/neon/addl_high.h	/^simde_vaddl_high_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vaddl_s16	simde/arm/neon/addl.h	/^simde_vaddl_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vaddl_s32	simde/arm/neon/addl.h	/^simde_vaddl_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vaddl_s8	simde/arm/neon/addl.h	/^simde_vaddl_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vaddl_u16	simde/arm/neon/addl.h	/^simde_vaddl_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vaddl_u32	simde/arm/neon/addl.h	/^simde_vaddl_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vaddl_u8	simde/arm/neon/addl.h	/^simde_vaddl_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vaddlv_s16	simde/arm/neon/addlv.h	/^simde_vaddlv_s16(simde_int16x4_t a) {$/;"	f
simde_vaddlv_s32	simde/arm/neon/addlv.h	/^simde_vaddlv_s32(simde_int32x2_t a) {$/;"	f
simde_vaddlv_s8	simde/arm/neon/addlv.h	/^simde_vaddlv_s8(simde_int8x8_t a) {$/;"	f
simde_vaddlv_u16	simde/arm/neon/addlv.h	/^simde_vaddlv_u16(simde_uint16x4_t a) {$/;"	f
simde_vaddlv_u32	simde/arm/neon/addlv.h	/^simde_vaddlv_u32(simde_uint32x2_t a) {$/;"	f
simde_vaddlv_u8	simde/arm/neon/addlv.h	/^simde_vaddlv_u8(simde_uint8x8_t a) {$/;"	f
simde_vaddlvq_s16	simde/arm/neon/addlv.h	/^simde_vaddlvq_s16(simde_int16x8_t a) {$/;"	f
simde_vaddlvq_s32	simde/arm/neon/addlv.h	/^simde_vaddlvq_s32(simde_int32x4_t a) {$/;"	f
simde_vaddlvq_s8	simde/arm/neon/addlv.h	/^simde_vaddlvq_s8(simde_int8x16_t a) {$/;"	f
simde_vaddlvq_u16	simde/arm/neon/addlv.h	/^simde_vaddlvq_u16(simde_uint16x8_t a) {$/;"	f
simde_vaddlvq_u32	simde/arm/neon/addlv.h	/^simde_vaddlvq_u32(simde_uint32x4_t a) {$/;"	f
simde_vaddlvq_u8	simde/arm/neon/addlv.h	/^simde_vaddlvq_u8(simde_uint8x16_t a) {$/;"	f
simde_vaddq_f32	simde/arm/neon/add.h	/^simde_vaddq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vaddq_f64	simde/arm/neon/add.h	/^simde_vaddq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vaddq_s16	simde/arm/neon/add.h	/^simde_vaddq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vaddq_s32	simde/arm/neon/add.h	/^simde_vaddq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vaddq_s64	simde/arm/neon/add.h	/^simde_vaddq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vaddq_s8	simde/arm/neon/add.h	/^simde_vaddq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vaddq_u16	simde/arm/neon/add.h	/^simde_vaddq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vaddq_u32	simde/arm/neon/add.h	/^simde_vaddq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vaddq_u64	simde/arm/neon/add.h	/^simde_vaddq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vaddq_u8	simde/arm/neon/add.h	/^simde_vaddq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vaddv_f32	simde/arm/neon/addv.h	/^simde_vaddv_f32(simde_float32x2_t a) {$/;"	f
simde_vaddv_s16	simde/arm/neon/addv.h	/^simde_vaddv_s16(simde_int16x4_t a) {$/;"	f
simde_vaddv_s32	simde/arm/neon/addv.h	/^simde_vaddv_s32(simde_int32x2_t a) {$/;"	f
simde_vaddv_s8	simde/arm/neon/addv.h	/^simde_vaddv_s8(simde_int8x8_t a) {$/;"	f
simde_vaddv_u16	simde/arm/neon/addv.h	/^simde_vaddv_u16(simde_uint16x4_t a) {$/;"	f
simde_vaddv_u32	simde/arm/neon/addv.h	/^simde_vaddv_u32(simde_uint32x2_t a) {$/;"	f
simde_vaddv_u8	simde/arm/neon/addv.h	/^simde_vaddv_u8(simde_uint8x8_t a) {$/;"	f
simde_vaddvq_f32	simde/arm/neon/addv.h	/^simde_vaddvq_f32(simde_float32x4_t a) {$/;"	f
simde_vaddvq_f64	simde/arm/neon/addv.h	/^simde_vaddvq_f64(simde_float64x2_t a) {$/;"	f
simde_vaddvq_s16	simde/arm/neon/addv.h	/^simde_vaddvq_s16(simde_int16x8_t a) {$/;"	f
simde_vaddvq_s32	simde/arm/neon/addv.h	/^simde_vaddvq_s32(simde_int32x4_t a) {$/;"	f
simde_vaddvq_s64	simde/arm/neon/addv.h	/^simde_vaddvq_s64(simde_int64x2_t a) {$/;"	f
simde_vaddvq_s8	simde/arm/neon/addv.h	/^simde_vaddvq_s8(simde_int8x16_t a) {$/;"	f
simde_vaddvq_u16	simde/arm/neon/addv.h	/^simde_vaddvq_u16(simde_uint16x8_t a) {$/;"	f
simde_vaddvq_u32	simde/arm/neon/addv.h	/^simde_vaddvq_u32(simde_uint32x4_t a) {$/;"	f
simde_vaddvq_u64	simde/arm/neon/addv.h	/^simde_vaddvq_u64(simde_uint64x2_t a) {$/;"	f
simde_vaddvq_u8	simde/arm/neon/addv.h	/^simde_vaddvq_u8(simde_uint8x16_t a) {$/;"	f
simde_vaddw_high_s16	simde/arm/neon/addw_high.h	/^simde_vaddw_high_s16(simde_int32x4_t a, simde_int16x8_t b) {$/;"	f
simde_vaddw_high_s32	simde/arm/neon/addw_high.h	/^simde_vaddw_high_s32(simde_int64x2_t a, simde_int32x4_t b) {$/;"	f
simde_vaddw_high_s8	simde/arm/neon/addw_high.h	/^simde_vaddw_high_s8(simde_int16x8_t a, simde_int8x16_t b) {$/;"	f
simde_vaddw_high_u16	simde/arm/neon/addw_high.h	/^simde_vaddw_high_u16(simde_uint32x4_t a, simde_uint16x8_t b) {$/;"	f
simde_vaddw_high_u32	simde/arm/neon/addw_high.h	/^simde_vaddw_high_u32(simde_uint64x2_t a, simde_uint32x4_t b) {$/;"	f
simde_vaddw_high_u8	simde/arm/neon/addw_high.h	/^simde_vaddw_high_u8(simde_uint16x8_t a, simde_uint8x16_t b) {$/;"	f
simde_vaddw_s16	simde/arm/neon/addw.h	/^simde_vaddw_s16(simde_int32x4_t a, simde_int16x4_t b) {$/;"	f
simde_vaddw_s32	simde/arm/neon/addw.h	/^simde_vaddw_s32(simde_int64x2_t a, simde_int32x2_t b) {$/;"	f
simde_vaddw_s8	simde/arm/neon/addw.h	/^simde_vaddw_s8(simde_int16x8_t a, simde_int8x8_t b) {$/;"	f
simde_vaddw_u16	simde/arm/neon/addw.h	/^simde_vaddw_u16(simde_uint32x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vaddw_u32	simde/arm/neon/addw.h	/^simde_vaddw_u32(simde_uint64x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vaddw_u8	simde/arm/neon/addw.h	/^simde_vaddw_u8(simde_uint16x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vand_s16	simde/arm/neon/and.h	/^simde_vand_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vand_s32	simde/arm/neon/and.h	/^simde_vand_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vand_s64	simde/arm/neon/and.h	/^simde_vand_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vand_s8	simde/arm/neon/and.h	/^simde_vand_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vand_u16	simde/arm/neon/and.h	/^simde_vand_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vand_u32	simde/arm/neon/and.h	/^simde_vand_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vand_u64	simde/arm/neon/and.h	/^simde_vand_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vand_u8	simde/arm/neon/and.h	/^simde_vand_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vandq_s16	simde/arm/neon/and.h	/^simde_vandq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vandq_s32	simde/arm/neon/and.h	/^simde_vandq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vandq_s64	simde/arm/neon/and.h	/^simde_vandq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vandq_s8	simde/arm/neon/and.h	/^simde_vandq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vandq_u16	simde/arm/neon/and.h	/^simde_vandq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vandq_u32	simde/arm/neon/and.h	/^simde_vandq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vandq_u64	simde/arm/neon/and.h	/^simde_vandq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vandq_u8	simde/arm/neon/and.h	/^simde_vandq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vbic_s16	simde/arm/neon/bic.h	/^simde_vbic_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vbic_s32	simde/arm/neon/bic.h	/^simde_vbic_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vbic_s64	simde/arm/neon/bic.h	/^simde_vbic_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vbic_s8	simde/arm/neon/bic.h	/^simde_vbic_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vbic_u16	simde/arm/neon/bic.h	/^simde_vbic_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vbic_u32	simde/arm/neon/bic.h	/^simde_vbic_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vbic_u64	simde/arm/neon/bic.h	/^simde_vbic_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vbic_u8	simde/arm/neon/bic.h	/^simde_vbic_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vbicq_s16	simde/arm/neon/bic.h	/^simde_vbicq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vbicq_s32	simde/arm/neon/bic.h	/^simde_vbicq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vbicq_s64	simde/arm/neon/bic.h	/^simde_vbicq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vbicq_s8	simde/arm/neon/bic.h	/^simde_vbicq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vbicq_u16	simde/arm/neon/bic.h	/^simde_vbicq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vbicq_u32	simde/arm/neon/bic.h	/^simde_vbicq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vbicq_u64	simde/arm/neon/bic.h	/^simde_vbicq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vbicq_u8	simde/arm/neon/bic.h	/^simde_vbicq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vbsl_f32	simde/arm/neon/bsl.h	/^simde_vbsl_f32(simde_uint32x2_t a, simde_float32x2_t b, simde_float32x2_t c) {$/;"	f
simde_vbsl_f64	simde/arm/neon/bsl.h	/^simde_vbsl_f64(simde_uint64x1_t a, simde_float64x1_t b, simde_float64x1_t c) {$/;"	f
simde_vbsl_s16	simde/arm/neon/bsl.h	/^simde_vbsl_s16(simde_uint16x4_t a, simde_int16x4_t b, simde_int16x4_t c) {$/;"	f
simde_vbsl_s32	simde/arm/neon/bsl.h	/^simde_vbsl_s32(simde_uint32x2_t a, simde_int32x2_t b, simde_int32x2_t c) {$/;"	f
simde_vbsl_s64	simde/arm/neon/bsl.h	/^simde_vbsl_s64(simde_uint64x1_t a, simde_int64x1_t b, simde_int64x1_t c) {$/;"	f
simde_vbsl_s8	simde/arm/neon/bsl.h	/^simde_vbsl_s8(simde_uint8x8_t a, simde_int8x8_t b, simde_int8x8_t c) {$/;"	f
simde_vbsl_u16	simde/arm/neon/bsl.h	/^simde_vbsl_u16(simde_uint16x4_t a, simde_uint16x4_t b, simde_uint16x4_t c) {$/;"	f
simde_vbsl_u32	simde/arm/neon/bsl.h	/^simde_vbsl_u32(simde_uint32x2_t a, simde_uint32x2_t b, simde_uint32x2_t c) {$/;"	f
simde_vbsl_u64	simde/arm/neon/bsl.h	/^simde_vbsl_u64(simde_uint64x1_t a, simde_uint64x1_t b, simde_uint64x1_t c) {$/;"	f
simde_vbsl_u8	simde/arm/neon/bsl.h	/^simde_vbsl_u8(simde_uint8x8_t a, simde_uint8x8_t b, simde_uint8x8_t c) {$/;"	f
simde_vbslq_f32	simde/arm/neon/bsl.h	/^simde_vbslq_f32(simde_uint32x4_t a, simde_float32x4_t b, simde_float32x4_t c) {$/;"	f
simde_vbslq_f64	simde/arm/neon/bsl.h	/^simde_vbslq_f64(simde_uint64x2_t a, simde_float64x2_t b, simde_float64x2_t c) {$/;"	f
simde_vbslq_s16	simde/arm/neon/bsl.h	/^simde_vbslq_s16(simde_uint16x8_t a, simde_int16x8_t b, simde_int16x8_t c) {$/;"	f
simde_vbslq_s32	simde/arm/neon/bsl.h	/^simde_vbslq_s32(simde_uint32x4_t a, simde_int32x4_t b, simde_int32x4_t c) {$/;"	f
simde_vbslq_s64	simde/arm/neon/bsl.h	/^simde_vbslq_s64(simde_uint64x2_t a, simde_int64x2_t b, simde_int64x2_t c) {$/;"	f
simde_vbslq_s8	simde/arm/neon/bsl.h	/^simde_vbslq_s8(simde_uint8x16_t a, simde_int8x16_t b, simde_int8x16_t c) {$/;"	f
simde_vbslq_u16	simde/arm/neon/bsl.h	/^simde_vbslq_u16(simde_uint16x8_t a, simde_uint16x8_t b, simde_uint16x8_t c) {$/;"	f
simde_vbslq_u32	simde/arm/neon/bsl.h	/^simde_vbslq_u32(simde_uint32x4_t a, simde_uint32x4_t b, simde_uint32x4_t c) {$/;"	f
simde_vbslq_u64	simde/arm/neon/bsl.h	/^simde_vbslq_u64(simde_uint64x2_t a, simde_uint64x2_t b, simde_uint64x2_t c) {$/;"	f
simde_vbslq_u8	simde/arm/neon/bsl.h	/^simde_vbslq_u8(simde_uint8x16_t a, simde_uint8x16_t b, simde_uint8x16_t c) {$/;"	f
simde_vcagt_f32	simde/arm/neon/cagt.h	/^simde_vcagt_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vcagt_f64	simde/arm/neon/cagt.h	/^simde_vcagt_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vcagtq_f32	simde/arm/neon/cagt.h	/^simde_vcagtq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vcagtq_f64	simde/arm/neon/cagt.h	/^simde_vcagtq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vceq_f32	simde/arm/neon/ceq.h	/^simde_vceq_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vceq_f64	simde/arm/neon/ceq.h	/^simde_vceq_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vceq_s16	simde/arm/neon/ceq.h	/^simde_vceq_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vceq_s32	simde/arm/neon/ceq.h	/^simde_vceq_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vceq_s64	simde/arm/neon/ceq.h	/^simde_vceq_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vceq_s8	simde/arm/neon/ceq.h	/^simde_vceq_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vceq_u16	simde/arm/neon/ceq.h	/^simde_vceq_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vceq_u32	simde/arm/neon/ceq.h	/^simde_vceq_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vceq_u64	simde/arm/neon/ceq.h	/^simde_vceq_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vceq_u8	simde/arm/neon/ceq.h	/^simde_vceq_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vceqq_f32	simde/arm/neon/ceq.h	/^simde_vceqq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vceqq_f64	simde/arm/neon/ceq.h	/^simde_vceqq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vceqq_s16	simde/arm/neon/ceq.h	/^simde_vceqq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vceqq_s32	simde/arm/neon/ceq.h	/^simde_vceqq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vceqq_s64	simde/arm/neon/ceq.h	/^simde_vceqq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vceqq_s8	simde/arm/neon/ceq.h	/^simde_vceqq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vceqq_u16	simde/arm/neon/ceq.h	/^simde_vceqq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vceqq_u32	simde/arm/neon/ceq.h	/^simde_vceqq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vceqq_u64	simde/arm/neon/ceq.h	/^simde_vceqq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vceqq_u8	simde/arm/neon/ceq.h	/^simde_vceqq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vceqz_f32	simde/arm/neon/ceqz.h	/^simde_vceqz_f32(simde_float32x2_t a) {$/;"	f
simde_vceqz_f64	simde/arm/neon/ceqz.h	/^simde_vceqz_f64(simde_float64x1_t a) {$/;"	f
simde_vceqz_s16	simde/arm/neon/ceqz.h	/^simde_vceqz_s16(simde_int16x4_t a) {$/;"	f
simde_vceqz_s32	simde/arm/neon/ceqz.h	/^simde_vceqz_s32(simde_int32x2_t a) {$/;"	f
simde_vceqz_s64	simde/arm/neon/ceqz.h	/^simde_vceqz_s64(simde_int64x1_t a) {$/;"	f
simde_vceqz_s8	simde/arm/neon/ceqz.h	/^simde_vceqz_s8(simde_int8x8_t a) {$/;"	f
simde_vceqz_u16	simde/arm/neon/ceqz.h	/^simde_vceqz_u16(simde_uint16x4_t a) {$/;"	f
simde_vceqz_u32	simde/arm/neon/ceqz.h	/^simde_vceqz_u32(simde_uint32x2_t a) {$/;"	f
simde_vceqz_u64	simde/arm/neon/ceqz.h	/^simde_vceqz_u64(simde_uint64x1_t a) {$/;"	f
simde_vceqz_u8	simde/arm/neon/ceqz.h	/^simde_vceqz_u8(simde_uint8x8_t a) {$/;"	f
simde_vceqzq_f32	simde/arm/neon/ceqz.h	/^simde_vceqzq_f32(simde_float32x4_t a) {$/;"	f
simde_vceqzq_f64	simde/arm/neon/ceqz.h	/^simde_vceqzq_f64(simde_float64x2_t a) {$/;"	f
simde_vceqzq_s16	simde/arm/neon/ceqz.h	/^simde_vceqzq_s16(simde_int16x8_t a) {$/;"	f
simde_vceqzq_s32	simde/arm/neon/ceqz.h	/^simde_vceqzq_s32(simde_int32x4_t a) {$/;"	f
simde_vceqzq_s64	simde/arm/neon/ceqz.h	/^simde_vceqzq_s64(simde_int64x2_t a) {$/;"	f
simde_vceqzq_s8	simde/arm/neon/ceqz.h	/^simde_vceqzq_s8(simde_int8x16_t a) {$/;"	f
simde_vceqzq_u16	simde/arm/neon/ceqz.h	/^simde_vceqzq_u16(simde_uint16x8_t a) {$/;"	f
simde_vceqzq_u32	simde/arm/neon/ceqz.h	/^simde_vceqzq_u32(simde_uint32x4_t a) {$/;"	f
simde_vceqzq_u64	simde/arm/neon/ceqz.h	/^simde_vceqzq_u64(simde_uint64x2_t a) {$/;"	f
simde_vceqzq_u8	simde/arm/neon/ceqz.h	/^simde_vceqzq_u8(simde_uint8x16_t a) {$/;"	f
simde_vcge_f32	simde/arm/neon/cge.h	/^simde_vcge_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vcge_f64	simde/arm/neon/cge.h	/^simde_vcge_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vcge_s16	simde/arm/neon/cge.h	/^simde_vcge_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vcge_s32	simde/arm/neon/cge.h	/^simde_vcge_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vcge_s64	simde/arm/neon/cge.h	/^simde_vcge_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vcge_s8	simde/arm/neon/cge.h	/^simde_vcge_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vcge_u16	simde/arm/neon/cge.h	/^simde_vcge_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vcge_u32	simde/arm/neon/cge.h	/^simde_vcge_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vcge_u64	simde/arm/neon/cge.h	/^simde_vcge_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vcge_u8	simde/arm/neon/cge.h	/^simde_vcge_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vcgeq_f32	simde/arm/neon/cge.h	/^simde_vcgeq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vcgeq_f64	simde/arm/neon/cge.h	/^simde_vcgeq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vcgeq_s16	simde/arm/neon/cge.h	/^simde_vcgeq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vcgeq_s32	simde/arm/neon/cge.h	/^simde_vcgeq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vcgeq_s64	simde/arm/neon/cge.h	/^simde_vcgeq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vcgeq_s8	simde/arm/neon/cge.h	/^simde_vcgeq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vcgeq_u16	simde/arm/neon/cge.h	/^simde_vcgeq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vcgeq_u32	simde/arm/neon/cge.h	/^simde_vcgeq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vcgeq_u64	simde/arm/neon/cge.h	/^simde_vcgeq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vcgeq_u8	simde/arm/neon/cge.h	/^simde_vcgeq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vcgez_f32	simde/arm/neon/cgez.h	/^simde_vcgez_f32(simde_float32x2_t a) {$/;"	f
simde_vcgez_f64	simde/arm/neon/cgez.h	/^simde_vcgez_f64(simde_float64x1_t a) {$/;"	f
simde_vcgez_s16	simde/arm/neon/cgez.h	/^simde_vcgez_s16(simde_int16x4_t a) {$/;"	f
simde_vcgez_s32	simde/arm/neon/cgez.h	/^simde_vcgez_s32(simde_int32x2_t a) {$/;"	f
simde_vcgez_s64	simde/arm/neon/cgez.h	/^simde_vcgez_s64(simde_int64x1_t a) {$/;"	f
simde_vcgez_s8	simde/arm/neon/cgez.h	/^simde_vcgez_s8(simde_int8x8_t a) {$/;"	f
simde_vcgezq_f32	simde/arm/neon/cgez.h	/^simde_vcgezq_f32(simde_float32x4_t a) {$/;"	f
simde_vcgezq_f64	simde/arm/neon/cgez.h	/^simde_vcgezq_f64(simde_float64x2_t a) {$/;"	f
simde_vcgezq_s16	simde/arm/neon/cgez.h	/^simde_vcgezq_s16(simde_int16x8_t a) {$/;"	f
simde_vcgezq_s32	simde/arm/neon/cgez.h	/^simde_vcgezq_s32(simde_int32x4_t a) {$/;"	f
simde_vcgezq_s64	simde/arm/neon/cgez.h	/^simde_vcgezq_s64(simde_int64x2_t a) {$/;"	f
simde_vcgezq_s8	simde/arm/neon/cgez.h	/^simde_vcgezq_s8(simde_int8x16_t a) {$/;"	f
simde_vcgt_f32	simde/arm/neon/cgt.h	/^simde_vcgt_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vcgt_f64	simde/arm/neon/cgt.h	/^simde_vcgt_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vcgt_s16	simde/arm/neon/cgt.h	/^simde_vcgt_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vcgt_s32	simde/arm/neon/cgt.h	/^simde_vcgt_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vcgt_s64	simde/arm/neon/cgt.h	/^simde_vcgt_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vcgt_s8	simde/arm/neon/cgt.h	/^simde_vcgt_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vcgt_u16	simde/arm/neon/cgt.h	/^simde_vcgt_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vcgt_u32	simde/arm/neon/cgt.h	/^simde_vcgt_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vcgt_u64	simde/arm/neon/cgt.h	/^simde_vcgt_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vcgt_u8	simde/arm/neon/cgt.h	/^simde_vcgt_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vcgtq_f32	simde/arm/neon/cgt.h	/^simde_vcgtq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vcgtq_f64	simde/arm/neon/cgt.h	/^simde_vcgtq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vcgtq_s16	simde/arm/neon/cgt.h	/^simde_vcgtq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vcgtq_s32	simde/arm/neon/cgt.h	/^simde_vcgtq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vcgtq_s64	simde/arm/neon/cgt.h	/^simde_vcgtq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vcgtq_s8	simde/arm/neon/cgt.h	/^simde_vcgtq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vcgtq_u16	simde/arm/neon/cgt.h	/^simde_vcgtq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vcgtq_u32	simde/arm/neon/cgt.h	/^simde_vcgtq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vcgtq_u64	simde/arm/neon/cgt.h	/^simde_vcgtq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vcgtq_u8	simde/arm/neon/cgt.h	/^simde_vcgtq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vcgtz_f32	simde/arm/neon/cgtz.h	/^simde_vcgtz_f32(simde_float32x2_t a) {$/;"	f
simde_vcgtz_f64	simde/arm/neon/cgtz.h	/^simde_vcgtz_f64(simde_float64x1_t a) {$/;"	f
simde_vcgtz_s16	simde/arm/neon/cgtz.h	/^simde_vcgtz_s16(simde_int16x4_t a) {$/;"	f
simde_vcgtz_s32	simde/arm/neon/cgtz.h	/^simde_vcgtz_s32(simde_int32x2_t a) {$/;"	f
simde_vcgtz_s64	simde/arm/neon/cgtz.h	/^simde_vcgtz_s64(simde_int64x1_t a) {$/;"	f
simde_vcgtz_s8	simde/arm/neon/cgtz.h	/^simde_vcgtz_s8(simde_int8x8_t a) {$/;"	f
simde_vcgtzq_f32	simde/arm/neon/cgtz.h	/^simde_vcgtzq_f32(simde_float32x4_t a) {$/;"	f
simde_vcgtzq_f64	simde/arm/neon/cgtz.h	/^simde_vcgtzq_f64(simde_float64x2_t a) {$/;"	f
simde_vcgtzq_s16	simde/arm/neon/cgtz.h	/^simde_vcgtzq_s16(simde_int16x8_t a) {$/;"	f
simde_vcgtzq_s32	simde/arm/neon/cgtz.h	/^simde_vcgtzq_s32(simde_int32x4_t a) {$/;"	f
simde_vcgtzq_s64	simde/arm/neon/cgtz.h	/^simde_vcgtzq_s64(simde_int64x2_t a) {$/;"	f
simde_vcgtzq_s8	simde/arm/neon/cgtz.h	/^simde_vcgtzq_s8(simde_int8x16_t a) {$/;"	f
simde_vcle_f32	simde/arm/neon/cle.h	/^simde_vcle_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vcle_f64	simde/arm/neon/cle.h	/^simde_vcle_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vcle_s16	simde/arm/neon/cle.h	/^simde_vcle_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vcle_s32	simde/arm/neon/cle.h	/^simde_vcle_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vcle_s64	simde/arm/neon/cle.h	/^simde_vcle_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vcle_s8	simde/arm/neon/cle.h	/^simde_vcle_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vcle_u16	simde/arm/neon/cle.h	/^simde_vcle_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vcle_u32	simde/arm/neon/cle.h	/^simde_vcle_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vcle_u64	simde/arm/neon/cle.h	/^simde_vcle_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vcle_u8	simde/arm/neon/cle.h	/^simde_vcle_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vcleq_f32	simde/arm/neon/cle.h	/^simde_vcleq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vcleq_f64	simde/arm/neon/cle.h	/^simde_vcleq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vcleq_s16	simde/arm/neon/cle.h	/^simde_vcleq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vcleq_s32	simde/arm/neon/cle.h	/^simde_vcleq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vcleq_s64	simde/arm/neon/cle.h	/^simde_vcleq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vcleq_s8	simde/arm/neon/cle.h	/^simde_vcleq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vcleq_u16	simde/arm/neon/cle.h	/^simde_vcleq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vcleq_u32	simde/arm/neon/cle.h	/^simde_vcleq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vcleq_u64	simde/arm/neon/cle.h	/^simde_vcleq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vcleq_u8	simde/arm/neon/cle.h	/^simde_vcleq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vclez_f32	simde/arm/neon/clez.h	/^simde_vclez_f32(simde_float32x2_t a) {$/;"	f
simde_vclez_f64	simde/arm/neon/clez.h	/^simde_vclez_f64(simde_float64x1_t a) {$/;"	f
simde_vclez_s16	simde/arm/neon/clez.h	/^simde_vclez_s16(simde_int16x4_t a) {$/;"	f
simde_vclez_s32	simde/arm/neon/clez.h	/^simde_vclez_s32(simde_int32x2_t a) {$/;"	f
simde_vclez_s64	simde/arm/neon/clez.h	/^simde_vclez_s64(simde_int64x1_t a) {$/;"	f
simde_vclez_s8	simde/arm/neon/clez.h	/^simde_vclez_s8(simde_int8x8_t a) {$/;"	f
simde_vclezq_f32	simde/arm/neon/clez.h	/^simde_vclezq_f32(simde_float32x4_t a) {$/;"	f
simde_vclezq_f64	simde/arm/neon/clez.h	/^simde_vclezq_f64(simde_float64x2_t a) {$/;"	f
simde_vclezq_s16	simde/arm/neon/clez.h	/^simde_vclezq_s16(simde_int16x8_t a) {$/;"	f
simde_vclezq_s32	simde/arm/neon/clez.h	/^simde_vclezq_s32(simde_int32x4_t a) {$/;"	f
simde_vclezq_s64	simde/arm/neon/clez.h	/^simde_vclezq_s64(simde_int64x2_t a) {$/;"	f
simde_vclezq_s8	simde/arm/neon/clez.h	/^simde_vclezq_s8(simde_int8x16_t a) {$/;"	f
simde_vcls_s16	simde/arm/neon/cls.h	/^simde_vcls_s16(simde_int16x4_t a) {$/;"	f
simde_vcls_s32	simde/arm/neon/cls.h	/^simde_vcls_s32(simde_int32x2_t a) {$/;"	f
simde_vcls_s8	simde/arm/neon/cls.h	/^simde_vcls_s8(simde_int8x8_t a) {$/;"	f
simde_vcls_u16	simde/arm/neon/cls.h	69;"	d
simde_vcls_u32	simde/arm/neon/cls.h	86;"	d
simde_vcls_u8	simde/arm/neon/cls.h	52;"	d
simde_vclsq_s16	simde/arm/neon/cls.h	/^simde_vclsq_s16(simde_int16x8_t a) {$/;"	f
simde_vclsq_s32	simde/arm/neon/cls.h	/^simde_vclsq_s32(simde_int32x4_t a) {$/;"	f
simde_vclsq_s8	simde/arm/neon/cls.h	/^simde_vclsq_s8(simde_int8x16_t a) {$/;"	f
simde_vclsq_u16	simde/arm/neon/cls.h	120;"	d
simde_vclsq_u32	simde/arm/neon/cls.h	137;"	d
simde_vclsq_u8	simde/arm/neon/cls.h	103;"	d
simde_vclt_f32	simde/arm/neon/clt.h	/^simde_vclt_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vclt_f64	simde/arm/neon/clt.h	/^simde_vclt_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vclt_s16	simde/arm/neon/clt.h	/^simde_vclt_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vclt_s32	simde/arm/neon/clt.h	/^simde_vclt_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vclt_s64	simde/arm/neon/clt.h	/^simde_vclt_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vclt_s8	simde/arm/neon/clt.h	/^simde_vclt_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vclt_u16	simde/arm/neon/clt.h	/^simde_vclt_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vclt_u32	simde/arm/neon/clt.h	/^simde_vclt_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vclt_u64	simde/arm/neon/clt.h	/^simde_vclt_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vclt_u8	simde/arm/neon/clt.h	/^simde_vclt_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vcltq_f32	simde/arm/neon/clt.h	/^simde_vcltq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vcltq_f64	simde/arm/neon/clt.h	/^simde_vcltq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vcltq_s16	simde/arm/neon/clt.h	/^simde_vcltq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vcltq_s32	simde/arm/neon/clt.h	/^simde_vcltq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vcltq_s64	simde/arm/neon/clt.h	/^simde_vcltq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vcltq_s8	simde/arm/neon/clt.h	/^simde_vcltq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vcltq_u16	simde/arm/neon/clt.h	/^simde_vcltq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vcltq_u32	simde/arm/neon/clt.h	/^simde_vcltq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vcltq_u64	simde/arm/neon/clt.h	/^simde_vcltq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vcltq_u8	simde/arm/neon/clt.h	/^simde_vcltq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vcltz_f32	simde/arm/neon/cltz.h	/^simde_vcltz_f32(simde_float32x2_t a) {$/;"	f
simde_vcltz_f64	simde/arm/neon/cltz.h	/^simde_vcltz_f64(simde_float64x1_t a) {$/;"	f
simde_vcltz_s16	simde/arm/neon/cltz.h	/^simde_vcltz_s16(simde_int16x4_t a) {$/;"	f
simde_vcltz_s32	simde/arm/neon/cltz.h	/^simde_vcltz_s32(simde_int32x2_t a) {$/;"	f
simde_vcltz_s64	simde/arm/neon/cltz.h	/^simde_vcltz_s64(simde_int64x1_t a) {$/;"	f
simde_vcltz_s8	simde/arm/neon/cltz.h	/^simde_vcltz_s8(simde_int8x8_t a) {$/;"	f
simde_vcltzq_f32	simde/arm/neon/cltz.h	/^simde_vcltzq_f32(simde_float32x4_t a) {$/;"	f
simde_vcltzq_f64	simde/arm/neon/cltz.h	/^simde_vcltzq_f64(simde_float64x2_t a) {$/;"	f
simde_vcltzq_s16	simde/arm/neon/cltz.h	/^simde_vcltzq_s16(simde_int16x8_t a) {$/;"	f
simde_vcltzq_s32	simde/arm/neon/cltz.h	/^simde_vcltzq_s32(simde_int32x4_t a) {$/;"	f
simde_vcltzq_s64	simde/arm/neon/cltz.h	/^simde_vcltzq_s64(simde_int64x2_t a) {$/;"	f
simde_vcltzq_s8	simde/arm/neon/cltz.h	/^simde_vcltzq_s8(simde_int8x16_t a) {$/;"	f
simde_vclz_s16	simde/arm/neon/clz.h	/^simde_vclz_s16(simde_int16x4_t a) {$/;"	f
simde_vclz_s32	simde/arm/neon/clz.h	/^simde_vclz_s32(simde_int32x2_t a) {$/;"	f
simde_vclz_s8	simde/arm/neon/clz.h	/^simde_vclz_s8(simde_int8x8_t a) {$/;"	f
simde_vclz_u16	simde/arm/neon/clz.h	/^simde_vclz_u16(simde_uint16x4_t a) {$/;"	f
simde_vclz_u32	simde/arm/neon/clz.h	/^simde_vclz_u32(simde_uint32x2_t a) {$/;"	f
simde_vclz_u8	simde/arm/neon/clz.h	/^simde_vclz_u8(simde_uint8x8_t a) {$/;"	f
simde_vclzq_s16	simde/arm/neon/clz.h	/^simde_vclzq_s16(simde_int16x8_t a) {$/;"	f
simde_vclzq_s32	simde/arm/neon/clz.h	/^simde_vclzq_s32(simde_int32x4_t a) {$/;"	f
simde_vclzq_s8	simde/arm/neon/clz.h	/^simde_vclzq_s8(simde_int8x16_t a) {$/;"	f
simde_vclzq_u16	simde/arm/neon/clz.h	/^simde_vclzq_u16(simde_uint16x8_t a) {$/;"	f
simde_vclzq_u32	simde/arm/neon/clz.h	/^simde_vclzq_u32(simde_uint32x4_t a) {$/;"	f
simde_vclzq_u8	simde/arm/neon/clz.h	/^simde_vclzq_u8(simde_uint8x16_t a) {$/;"	f
simde_vcnt_s8	simde/arm/neon/cnt.h	/^simde_vcnt_s8(simde_int8x8_t a) {$/;"	f
simde_vcnt_u8	simde/arm/neon/cnt.h	/^simde_vcnt_u8(simde_uint8x8_t a) {$/;"	f
simde_vcntq_s8	simde/arm/neon/cnt.h	/^simde_vcntq_s8(simde_int8x16_t a) {$/;"	f
simde_vcntq_u8	simde/arm/neon/cnt.h	/^simde_vcntq_u8(simde_uint8x16_t a) {$/;"	f
simde_vcombine_f32	simde/arm/neon/combine.h	/^simde_vcombine_f32(simde_float32x2_t low, simde_float32x2_t high) {$/;"	f
simde_vcombine_f64	simde/arm/neon/combine.h	/^simde_vcombine_f64(simde_float64x1_t low, simde_float64x1_t high) {$/;"	f
simde_vcombine_s16	simde/arm/neon/combine.h	/^simde_vcombine_s16(simde_int16x4_t low, simde_int16x4_t high) {$/;"	f
simde_vcombine_s32	simde/arm/neon/combine.h	/^simde_vcombine_s32(simde_int32x2_t low, simde_int32x2_t high) {$/;"	f
simde_vcombine_s64	simde/arm/neon/combine.h	/^simde_vcombine_s64(simde_int64x1_t low, simde_int64x1_t high) {$/;"	f
simde_vcombine_s8	simde/arm/neon/combine.h	/^simde_vcombine_s8(simde_int8x8_t low, simde_int8x8_t high) {$/;"	f
simde_vcombine_u16	simde/arm/neon/combine.h	/^simde_vcombine_u16(simde_uint16x4_t low, simde_uint16x4_t high) {$/;"	f
simde_vcombine_u32	simde/arm/neon/combine.h	/^simde_vcombine_u32(simde_uint32x2_t low, simde_uint32x2_t high) {$/;"	f
simde_vcombine_u64	simde/arm/neon/combine.h	/^simde_vcombine_u64(simde_uint64x1_t low, simde_uint64x1_t high) {$/;"	f
simde_vcombine_u8	simde/arm/neon/combine.h	/^simde_vcombine_u8(simde_uint8x8_t low, simde_uint8x8_t high) {$/;"	f
simde_vcreate_f32	simde/arm/neon/create.h	/^simde_vcreate_f32(uint64_t a) {$/;"	f
simde_vcreate_f64	simde/arm/neon/create.h	/^simde_vcreate_f64(uint64_t a) {$/;"	f
simde_vcreate_s16	simde/arm/neon/create.h	/^simde_vcreate_s16(uint64_t a) {$/;"	f
simde_vcreate_s32	simde/arm/neon/create.h	/^simde_vcreate_s32(uint64_t a) {$/;"	f
simde_vcreate_s64	simde/arm/neon/create.h	/^simde_vcreate_s64(uint64_t a) {$/;"	f
simde_vcreate_s8	simde/arm/neon/create.h	/^simde_vcreate_s8(uint64_t a) {$/;"	f
simde_vcreate_u16	simde/arm/neon/create.h	/^simde_vcreate_u16(uint64_t a) {$/;"	f
simde_vcreate_u32	simde/arm/neon/create.h	/^simde_vcreate_u32(uint64_t a) {$/;"	f
simde_vcreate_u64	simde/arm/neon/create.h	/^simde_vcreate_u64(uint64_t a) {$/;"	f
simde_vcreate_u8	simde/arm/neon/create.h	/^simde_vcreate_u8(uint64_t a) {$/;"	f
simde_vcvt_f32_s32	simde/arm/neon/cvt.h	/^simde_vcvt_f32_s32(simde_int32x2_t a) {$/;"	f
simde_vcvt_f32_u32	simde/arm/neon/cvt.h	/^simde_vcvt_f32_u32(simde_uint32x2_t a) {$/;"	f
simde_vcvt_f64_s64	simde/arm/neon/cvt.h	/^simde_vcvt_f64_s64(simde_int64x1_t a) {$/;"	f
simde_vcvt_f64_u64	simde/arm/neon/cvt.h	/^simde_vcvt_f64_u64(simde_uint64x1_t a) {$/;"	f
simde_vcvt_s32_f32	simde/arm/neon/cvt.h	/^simde_vcvt_s32_f32(simde_float32x2_t a) {$/;"	f
simde_vcvt_s64_f64	simde/arm/neon/cvt.h	/^simde_vcvt_s64_f64(simde_float64x1_t a) {$/;"	f
simde_vcvt_u32_f32	simde/arm/neon/cvt.h	/^simde_vcvt_u32_f32(simde_float32x2_t a) {$/;"	f
simde_vcvt_u64_f64	simde/arm/neon/cvt.h	/^simde_vcvt_u64_f64(simde_float64x1_t a) {$/;"	f
simde_vcvtd_f64_s64	simde/arm/neon/cvt.h	/^simde_vcvtd_f64_s64(int64_t a) {$/;"	f
simde_vcvtd_f64_u64	simde/arm/neon/cvt.h	/^simde_vcvtd_f64_u64(uint64_t a) {$/;"	f
simde_vcvtd_s64_f64	simde/arm/neon/cvt.h	/^simde_vcvtd_s64_f64(simde_float64 a) {$/;"	f
simde_vcvtd_u64_f64	simde/arm/neon/cvt.h	/^simde_vcvtd_u64_f64(simde_float64 a) {$/;"	f
simde_vcvtq_f32_s32	simde/arm/neon/cvt.h	/^simde_vcvtq_f32_s32(simde_int32x4_t a) {$/;"	f
simde_vcvtq_f32_u32	simde/arm/neon/cvt.h	/^simde_vcvtq_f32_u32(simde_uint32x4_t a) {$/;"	f
simde_vcvtq_f64_s64	simde/arm/neon/cvt.h	/^simde_vcvtq_f64_s64(simde_int64x2_t a) {$/;"	f
simde_vcvtq_f64_u64	simde/arm/neon/cvt.h	/^simde_vcvtq_f64_u64(simde_uint64x2_t a) {$/;"	f
simde_vcvtq_s32_f32	simde/arm/neon/cvt.h	/^simde_vcvtq_s32_f32(simde_float32x4_t a) {$/;"	f
simde_vcvtq_s64_f64	simde/arm/neon/cvt.h	/^simde_vcvtq_s64_f64(simde_float64x2_t a) {$/;"	f
simde_vcvtq_u32_f32	simde/arm/neon/cvt.h	/^simde_vcvtq_u32_f32(simde_float32x4_t a) {$/;"	f
simde_vcvtq_u64_f64	simde/arm/neon/cvt.h	/^simde_vcvtq_u64_f64(simde_float64x2_t a) {$/;"	f
simde_vcvts_f32_s32	simde/arm/neon/cvt.h	/^simde_vcvts_f32_s32(int32_t a) {$/;"	f
simde_vcvts_f32_u32	simde/arm/neon/cvt.h	/^simde_vcvts_f32_u32 (uint32_t a) {$/;"	f
simde_vcvts_s32_f32	simde/arm/neon/cvt.h	/^simde_vcvts_s32_f32(simde_float32 a) {$/;"	f
simde_vcvts_u32_f32	simde/arm/neon/cvt.h	/^simde_vcvts_u32_f32(simde_float32 a) {$/;"	f
simde_vdot_s32	simde/arm/neon/dot.h	/^simde_vdot_s32(simde_int32x2_t r, simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vdot_u32	simde/arm/neon/dot.h	/^simde_vdot_u32(simde_uint32x2_t r, simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vdotq_s32	simde/arm/neon/dot.h	/^simde_vdotq_s32(simde_int32x4_t r, simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vdotq_u32	simde/arm/neon/dot.h	/^simde_vdotq_u32(simde_uint32x4_t r, simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vdup_lane_f32	simde/arm/neon/dup_lane.h	52;"	d
simde_vdup_lane_s16	simde/arm/neon/dup_lane.h	110;"	d
simde_vdup_lane_s32	simde/arm/neon/dup_lane.h	133;"	d
simde_vdup_lane_s64	simde/arm/neon/dup_lane.h	156;"	d
simde_vdup_lane_s8	simde/arm/neon/dup_lane.h	87;"	d
simde_vdup_lane_u16	simde/arm/neon/dup_lane.h	202;"	d
simde_vdup_lane_u32	simde/arm/neon/dup_lane.h	225;"	d
simde_vdup_lane_u64	simde/arm/neon/dup_lane.h	248;"	d
simde_vdup_lane_u8	simde/arm/neon/dup_lane.h	179;"	d
simde_vdup_laneq_f32	simde/arm/neon/dup_lane.h	270;"	d
simde_vdup_laneq_s16	simde/arm/neon/dup_lane.h	333;"	d
simde_vdup_laneq_s32	simde/arm/neon/dup_lane.h	355;"	d
simde_vdup_laneq_s64	simde/arm/neon/dup_lane.h	377;"	d
simde_vdup_laneq_s8	simde/arm/neon/dup_lane.h	311;"	d
simde_vdup_laneq_u16	simde/arm/neon/dup_lane.h	421;"	d
simde_vdup_laneq_u32	simde/arm/neon/dup_lane.h	443;"	d
simde_vdup_laneq_u64	simde/arm/neon/dup_lane.h	465;"	d
simde_vdup_laneq_u8	simde/arm/neon/dup_lane.h	399;"	d
simde_vdup_n_f32	simde/arm/neon/dup_n.h	/^simde_vdup_n_f32(float value) {$/;"	f
simde_vdup_n_f64	simde/arm/neon/dup_n.h	/^simde_vdup_n_f64(double value) {$/;"	f
simde_vdup_n_s16	simde/arm/neon/dup_n.h	/^simde_vdup_n_s16(int16_t value) {$/;"	f
simde_vdup_n_s32	simde/arm/neon/dup_n.h	/^simde_vdup_n_s32(int32_t value) {$/;"	f
simde_vdup_n_s64	simde/arm/neon/dup_n.h	/^simde_vdup_n_s64(int64_t value) {$/;"	f
simde_vdup_n_s8	simde/arm/neon/dup_n.h	/^simde_vdup_n_s8(int8_t value) {$/;"	f
simde_vdup_n_u16	simde/arm/neon/dup_n.h	/^simde_vdup_n_u16(uint16_t value) {$/;"	f
simde_vdup_n_u32	simde/arm/neon/dup_n.h	/^simde_vdup_n_u32(uint32_t value) {$/;"	f
simde_vdup_n_u64	simde/arm/neon/dup_n.h	/^simde_vdup_n_u64(uint64_t value) {$/;"	f
simde_vdup_n_u8	simde/arm/neon/dup_n.h	/^simde_vdup_n_u8(uint8_t value) {$/;"	f
simde_vdupq_laneq_f32	simde/arm/neon/dup_lane.h	488;"	d
simde_vdupq_laneq_s16	simde/arm/neon/dup_lane.h	554;"	d
simde_vdupq_laneq_s32	simde/arm/neon/dup_lane.h	577;"	d
simde_vdupq_laneq_s64	simde/arm/neon/dup_lane.h	600;"	d
simde_vdupq_laneq_s8	simde/arm/neon/dup_lane.h	531;"	d
simde_vdupq_laneq_u16	simde/arm/neon/dup_lane.h	646;"	d
simde_vdupq_laneq_u32	simde/arm/neon/dup_lane.h	669;"	d
simde_vdupq_laneq_u64	simde/arm/neon/dup_lane.h	692;"	d
simde_vdupq_laneq_u8	simde/arm/neon/dup_lane.h	623;"	d
simde_vdupq_n_f32	simde/arm/neon/dup_n.h	/^simde_vdupq_n_f32(float value) {$/;"	f
simde_vdupq_n_f64	simde/arm/neon/dup_n.h	/^simde_vdupq_n_f64(double value) {$/;"	f
simde_vdupq_n_s16	simde/arm/neon/dup_n.h	/^simde_vdupq_n_s16(int16_t value) {$/;"	f
simde_vdupq_n_s32	simde/arm/neon/dup_n.h	/^simde_vdupq_n_s32(int32_t value) {$/;"	f
simde_vdupq_n_s64	simde/arm/neon/dup_n.h	/^simde_vdupq_n_s64(int64_t value) {$/;"	f
simde_vdupq_n_s8	simde/arm/neon/dup_n.h	/^simde_vdupq_n_s8(int8_t value) {$/;"	f
simde_vdupq_n_u16	simde/arm/neon/dup_n.h	/^simde_vdupq_n_u16(uint16_t value) {$/;"	f
simde_vdupq_n_u32	simde/arm/neon/dup_n.h	/^simde_vdupq_n_u32(uint32_t value) {$/;"	f
simde_vdupq_n_u64	simde/arm/neon/dup_n.h	/^simde_vdupq_n_u64(uint64_t value) {$/;"	f
simde_vdupq_n_u8	simde/arm/neon/dup_n.h	/^simde_vdupq_n_u8(uint8_t value) {$/;"	f
simde_veor_s16	simde/arm/neon/eor.h	/^simde_veor_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_veor_s32	simde/arm/neon/eor.h	/^simde_veor_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_veor_s64	simde/arm/neon/eor.h	/^simde_veor_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_veor_s8	simde/arm/neon/eor.h	/^simde_veor_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_veor_u16	simde/arm/neon/eor.h	/^simde_veor_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_veor_u32	simde/arm/neon/eor.h	/^simde_veor_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_veor_u64	simde/arm/neon/eor.h	/^simde_veor_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_veor_u8	simde/arm/neon/eor.h	/^simde_veor_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_veorq_s16	simde/arm/neon/eor.h	/^simde_veorq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_veorq_s32	simde/arm/neon/eor.h	/^simde_veorq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_veorq_s64	simde/arm/neon/eor.h	/^simde_veorq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_veorq_s8	simde/arm/neon/eor.h	/^simde_veorq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_veorq_u16	simde/arm/neon/eor.h	/^simde_veorq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_veorq_u32	simde/arm/neon/eor.h	/^simde_veorq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_veorq_u64	simde/arm/neon/eor.h	/^simde_veorq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_veorq_u8	simde/arm/neon/eor.h	/^simde_veorq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vext_f32	simde/arm/neon/ext.h	58;"	d
simde_vext_f64	simde/arm/neon/ext.h	98;"	d
simde_vext_s16	simde/arm/neon/ext.h	183;"	d
simde_vext_s32	simde/arm/neon/ext.h	225;"	d
simde_vext_s64	simde/arm/neon/ext.h	265;"	d
simde_vext_s8	simde/arm/neon/ext.h	139;"	d
simde_vext_u16	simde/arm/neon/ext.h	350;"	d
simde_vext_u32	simde/arm/neon/ext.h	392;"	d
simde_vext_u64	simde/arm/neon/ext.h	432;"	d
simde_vext_u8	simde/arm/neon/ext.h	306;"	d
simde_vextq_f32	simde/arm/neon/ext.h	473;"	d
simde_vextq_f64	simde/arm/neon/ext.h	515;"	d
simde_vextq_s16	simde/arm/neon/ext.h	604;"	d
simde_vextq_s32	simde/arm/neon/ext.h	648;"	d
simde_vextq_s64	simde/arm/neon/ext.h	690;"	d
simde_vextq_s8	simde/arm/neon/ext.h	556;"	d
simde_vextq_u16	simde/arm/neon/ext.h	779;"	d
simde_vextq_u32	simde/arm/neon/ext.h	823;"	d
simde_vextq_u64	simde/arm/neon/ext.h	865;"	d
simde_vextq_u8	simde/arm/neon/ext.h	731;"	d
simde_vget_high_f32	simde/arm/neon/get_high.h	/^simde_vget_high_f32(simde_float32x4_t a) {$/;"	f
simde_vget_high_f64	simde/arm/neon/get_high.h	/^simde_vget_high_f64(simde_float64x2_t a) {$/;"	f
simde_vget_high_s16	simde/arm/neon/get_high.h	/^simde_vget_high_s16(simde_int16x8_t a) {$/;"	f
simde_vget_high_s32	simde/arm/neon/get_high.h	/^simde_vget_high_s32(simde_int32x4_t a) {$/;"	f
simde_vget_high_s64	simde/arm/neon/get_high.h	/^simde_vget_high_s64(simde_int64x2_t a) {$/;"	f
simde_vget_high_s8	simde/arm/neon/get_high.h	/^simde_vget_high_s8(simde_int8x16_t a) {$/;"	f
simde_vget_high_u16	simde/arm/neon/get_high.h	/^simde_vget_high_u16(simde_uint16x8_t a) {$/;"	f
simde_vget_high_u32	simde/arm/neon/get_high.h	/^simde_vget_high_u32(simde_uint32x4_t a) {$/;"	f
simde_vget_high_u64	simde/arm/neon/get_high.h	/^simde_vget_high_u64(simde_uint64x2_t a) {$/;"	f
simde_vget_high_u8	simde/arm/neon/get_high.h	/^simde_vget_high_u8(simde_uint8x16_t a) {$/;"	f
simde_vget_low_f32	simde/arm/neon/get_low.h	/^simde_vget_low_f32(simde_float32x4_t a) {$/;"	f
simde_vget_low_f64	simde/arm/neon/get_low.h	/^simde_vget_low_f64(simde_float64x2_t a) {$/;"	f
simde_vget_low_s16	simde/arm/neon/get_low.h	/^simde_vget_low_s16(simde_int16x8_t a) {$/;"	f
simde_vget_low_s32	simde/arm/neon/get_low.h	/^simde_vget_low_s32(simde_int32x4_t a) {$/;"	f
simde_vget_low_s64	simde/arm/neon/get_low.h	/^simde_vget_low_s64(simde_int64x2_t a) {$/;"	f
simde_vget_low_s8	simde/arm/neon/get_low.h	/^simde_vget_low_s8(simde_int8x16_t a) {$/;"	f
simde_vget_low_u16	simde/arm/neon/get_low.h	/^simde_vget_low_u16(simde_uint16x8_t a) {$/;"	f
simde_vget_low_u32	simde/arm/neon/get_low.h	/^simde_vget_low_u32(simde_uint32x4_t a) {$/;"	f
simde_vget_low_u64	simde/arm/neon/get_low.h	/^simde_vget_low_u64(simde_uint64x2_t a) {$/;"	f
simde_vget_low_u8	simde/arm/neon/get_low.h	/^simde_vget_low_u8(simde_uint8x16_t a) {$/;"	f
simde_vhadd_s16	simde/arm/neon/hadd.h	/^simde_vhadd_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vhadd_s32	simde/arm/neon/hadd.h	/^simde_vhadd_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vhadd_s8	simde/arm/neon/hadd.h	/^simde_vhadd_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vhadd_u16	simde/arm/neon/hadd.h	/^simde_vhadd_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vhadd_u32	simde/arm/neon/hadd.h	/^simde_vhadd_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vhadd_u8	simde/arm/neon/hadd.h	/^simde_vhadd_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vhaddq_s16	simde/arm/neon/hadd.h	/^simde_vhaddq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vhaddq_s32	simde/arm/neon/hadd.h	/^simde_vhaddq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vhaddq_s8	simde/arm/neon/hadd.h	/^simde_vhaddq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vhaddq_u16	simde/arm/neon/hadd.h	/^simde_vhaddq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vhaddq_u32	simde/arm/neon/hadd.h	/^simde_vhaddq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vhaddq_u8	simde/arm/neon/hadd.h	/^simde_vhaddq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vhsub_s16	simde/arm/neon/hsub.h	/^simde_vhsub_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vhsub_s32	simde/arm/neon/hsub.h	/^simde_vhsub_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vhsub_s8	simde/arm/neon/hsub.h	/^simde_vhsub_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vhsub_u16	simde/arm/neon/hsub.h	/^simde_vhsub_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vhsub_u32	simde/arm/neon/hsub.h	/^simde_vhsub_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vhsub_u8	simde/arm/neon/hsub.h	/^simde_vhsub_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vhsubq_s16	simde/arm/neon/hsub.h	/^simde_vhsubq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vhsubq_s32	simde/arm/neon/hsub.h	/^simde_vhsubq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vhsubq_s8	simde/arm/neon/hsub.h	/^simde_vhsubq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vhsubq_u16	simde/arm/neon/hsub.h	/^simde_vhsubq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vhsubq_u32	simde/arm/neon/hsub.h	/^simde_vhsubq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vhsubq_u8	simde/arm/neon/hsub.h	/^simde_vhsubq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vld1_f32	simde/arm/neon/ld1.h	/^simde_vld1_f32(simde_float32 const ptr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_vld1_f64	simde/arm/neon/ld1.h	/^simde_vld1_f64(simde_float64 const ptr[HEDLEY_ARRAY_PARAM(1)]) {$/;"	f
simde_vld1_s16	simde/arm/neon/ld1.h	/^simde_vld1_s16(int16_t const ptr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_vld1_s32	simde/arm/neon/ld1.h	/^simde_vld1_s32(int32_t const ptr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_vld1_s64	simde/arm/neon/ld1.h	/^simde_vld1_s64(int64_t const ptr[HEDLEY_ARRAY_PARAM(1)]) {$/;"	f
simde_vld1_s8	simde/arm/neon/ld1.h	/^simde_vld1_s8(int8_t const ptr[HEDLEY_ARRAY_PARAM(8)]) {$/;"	f
simde_vld1_u16	simde/arm/neon/ld1.h	/^simde_vld1_u16(uint16_t const ptr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_vld1_u32	simde/arm/neon/ld1.h	/^simde_vld1_u32(uint32_t const ptr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_vld1_u64	simde/arm/neon/ld1.h	/^simde_vld1_u64(uint64_t const ptr[HEDLEY_ARRAY_PARAM(1)]) {$/;"	f
simde_vld1_u8	simde/arm/neon/ld1.h	/^simde_vld1_u8(uint8_t const ptr[HEDLEY_ARRAY_PARAM(8)]) {$/;"	f
simde_vld1q_f32	simde/arm/neon/ld1.h	/^simde_vld1q_f32(simde_float32 const ptr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_vld1q_f64	simde/arm/neon/ld1.h	/^simde_vld1q_f64(simde_float64 const ptr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_vld1q_s16	simde/arm/neon/ld1.h	/^simde_vld1q_s16(int16_t const ptr[HEDLEY_ARRAY_PARAM(8)]) {$/;"	f
simde_vld1q_s32	simde/arm/neon/ld1.h	/^simde_vld1q_s32(int32_t const ptr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_vld1q_s64	simde/arm/neon/ld1.h	/^simde_vld1q_s64(int64_t const ptr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_vld1q_s8	simde/arm/neon/ld1.h	/^simde_vld1q_s8(int8_t const ptr[HEDLEY_ARRAY_PARAM(16)]) {$/;"	f
simde_vld1q_u16	simde/arm/neon/ld1.h	/^simde_vld1q_u16(uint16_t const ptr[HEDLEY_ARRAY_PARAM(8)]) {$/;"	f
simde_vld1q_u32	simde/arm/neon/ld1.h	/^simde_vld1q_u32(uint32_t const ptr[HEDLEY_ARRAY_PARAM(4)]) {$/;"	f
simde_vld1q_u64	simde/arm/neon/ld1.h	/^simde_vld1q_u64(uint64_t const ptr[HEDLEY_ARRAY_PARAM(2)]) {$/;"	f
simde_vld1q_u8	simde/arm/neon/ld1.h	/^simde_vld1q_u8(uint8_t const ptr[HEDLEY_ARRAY_PARAM(16)]) {$/;"	f
simde_vld3_f32	simde/arm/neon/ld3.h	/^simde_vld3_f32(simde_float32 const *ptr) {$/;"	f
simde_vld3_f64	simde/arm/neon/ld3.h	/^simde_vld3_f64(simde_float64 const *ptr) {$/;"	f
simde_vld3_s16	simde/arm/neon/ld3.h	/^simde_vld3_s16(int16_t const *ptr) {$/;"	f
simde_vld3_s32	simde/arm/neon/ld3.h	/^simde_vld3_s32(int32_t const *ptr) {$/;"	f
simde_vld3_s64	simde/arm/neon/ld3.h	/^simde_vld3_s64(int64_t const *ptr) {$/;"	f
simde_vld3_s8	simde/arm/neon/ld3.h	/^simde_vld3_s8(int8_t const *ptr) {$/;"	f
simde_vld3_u16	simde/arm/neon/ld3.h	/^simde_vld3_u16(uint16_t const *ptr) {$/;"	f
simde_vld3_u32	simde/arm/neon/ld3.h	/^simde_vld3_u32(uint32_t const *ptr) {$/;"	f
simde_vld3_u64	simde/arm/neon/ld3.h	/^simde_vld3_u64(uint64_t const *ptr) {$/;"	f
simde_vld3_u8	simde/arm/neon/ld3.h	/^simde_vld3_u8(uint8_t const *ptr) {$/;"	f
simde_vld3q_f32	simde/arm/neon/ld3.h	/^simde_vld3q_f32(simde_float32 const *ptr) {$/;"	f
simde_vld3q_f64	simde/arm/neon/ld3.h	/^simde_vld3q_f64(simde_float64 const *ptr) {$/;"	f
simde_vld3q_s16	simde/arm/neon/ld3.h	/^simde_vld3q_s16(int16_t const *ptr) {$/;"	f
simde_vld3q_s32	simde/arm/neon/ld3.h	/^simde_vld3q_s32(int32_t const *ptr) {$/;"	f
simde_vld3q_s64	simde/arm/neon/ld3.h	/^simde_vld3q_s64(int64_t const *ptr) {$/;"	f
simde_vld3q_s8	simde/arm/neon/ld3.h	/^simde_vld3q_s8(int8_t const *ptr) {$/;"	f
simde_vld3q_u16	simde/arm/neon/ld3.h	/^simde_vld3q_u16(uint16_t const *ptr) {$/;"	f
simde_vld3q_u32	simde/arm/neon/ld3.h	/^simde_vld3q_u32(uint32_t const *ptr) {$/;"	f
simde_vld3q_u64	simde/arm/neon/ld3.h	/^simde_vld3q_u64(uint64_t const *ptr) {$/;"	f
simde_vld3q_u8	simde/arm/neon/ld3.h	/^simde_vld3q_u8(uint8_t const *ptr) {$/;"	f
simde_vld4_f32	simde/arm/neon/ld4.h	/^simde_vld4_f32(simde_float32 const *ptr) {$/;"	f
simde_vld4_f64	simde/arm/neon/ld4.h	/^simde_vld4_f64(simde_float64 const *ptr) {$/;"	f
simde_vld4_s16	simde/arm/neon/ld4.h	/^simde_vld4_s16(int16_t const *ptr) {$/;"	f
simde_vld4_s32	simde/arm/neon/ld4.h	/^simde_vld4_s32(int32_t const *ptr) {$/;"	f
simde_vld4_s64	simde/arm/neon/ld4.h	/^simde_vld4_s64(int64_t const *ptr) {$/;"	f
simde_vld4_s8	simde/arm/neon/ld4.h	/^simde_vld4_s8(int8_t const *ptr) {$/;"	f
simde_vld4_u16	simde/arm/neon/ld4.h	/^simde_vld4_u16(uint16_t const *ptr) {$/;"	f
simde_vld4_u32	simde/arm/neon/ld4.h	/^simde_vld4_u32(uint32_t const *ptr) {$/;"	f
simde_vld4_u64	simde/arm/neon/ld4.h	/^simde_vld4_u64(uint64_t const *ptr) {$/;"	f
simde_vld4_u8	simde/arm/neon/ld4.h	/^simde_vld4_u8(uint8_t const *ptr) {$/;"	f
simde_vld4q_f32	simde/arm/neon/ld4.h	/^simde_vld4q_f32(simde_float32 const *ptr) {$/;"	f
simde_vld4q_f64	simde/arm/neon/ld4.h	/^simde_vld4q_f64(simde_float64 const *ptr) {$/;"	f
simde_vld4q_s16	simde/arm/neon/ld4.h	/^simde_vld4q_s16(int16_t const *ptr) {$/;"	f
simde_vld4q_s32	simde/arm/neon/ld4.h	/^simde_vld4q_s32(int32_t const *ptr) {$/;"	f
simde_vld4q_s64	simde/arm/neon/ld4.h	/^simde_vld4q_s64(int64_t const *ptr) {$/;"	f
simde_vld4q_s8	simde/arm/neon/ld4.h	/^simde_vld4q_s8(int8_t const *ptr) {$/;"	f
simde_vld4q_u16	simde/arm/neon/ld4.h	/^simde_vld4q_u16(uint16_t const *ptr) {$/;"	f
simde_vld4q_u32	simde/arm/neon/ld4.h	/^simde_vld4q_u32(uint32_t const *ptr) {$/;"	f
simde_vld4q_u64	simde/arm/neon/ld4.h	/^simde_vld4q_u64(uint64_t const *ptr) {$/;"	f
simde_vld4q_u8	simde/arm/neon/ld4.h	/^simde_vld4q_u8(uint8_t const *ptr) {$/;"	f
simde_vmax_f32	simde/arm/neon/max.h	/^simde_vmax_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vmax_f64	simde/arm/neon/max.h	/^simde_vmax_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vmax_s16	simde/arm/neon/max.h	/^simde_vmax_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vmax_s32	simde/arm/neon/max.h	/^simde_vmax_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vmax_s8	simde/arm/neon/max.h	/^simde_vmax_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vmax_u16	simde/arm/neon/max.h	/^simde_vmax_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vmax_u32	simde/arm/neon/max.h	/^simde_vmax_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vmax_u8	simde/arm/neon/max.h	/^simde_vmax_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vmaxnm_f32	simde/arm/neon/maxnm.h	/^simde_vmaxnm_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vmaxnm_f64	simde/arm/neon/maxnm.h	/^simde_vmaxnm_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vmaxnmq_f32	simde/arm/neon/maxnm.h	/^simde_vmaxnmq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vmaxnmq_f64	simde/arm/neon/maxnm.h	/^simde_vmaxnmq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vmaxq_f32	simde/arm/neon/max.h	/^simde_vmaxq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vmaxq_f64	simde/arm/neon/max.h	/^simde_vmaxq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vmaxq_s16	simde/arm/neon/max.h	/^simde_vmaxq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vmaxq_s32	simde/arm/neon/max.h	/^simde_vmaxq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vmaxq_s8	simde/arm/neon/max.h	/^simde_vmaxq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vmaxq_u16	simde/arm/neon/max.h	/^simde_vmaxq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vmaxq_u32	simde/arm/neon/max.h	/^simde_vmaxq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vmaxq_u8	simde/arm/neon/max.h	/^simde_vmaxq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vmaxv_f32	simde/arm/neon/maxv.h	/^simde_vmaxv_f32(simde_float32x2_t a) {$/;"	f
simde_vmaxv_s16	simde/arm/neon/maxv.h	/^simde_vmaxv_s16(simde_int16x4_t a) {$/;"	f
simde_vmaxv_s32	simde/arm/neon/maxv.h	/^simde_vmaxv_s32(simde_int32x2_t a) {$/;"	f
simde_vmaxv_s8	simde/arm/neon/maxv.h	/^simde_vmaxv_s8(simde_int8x8_t a) {$/;"	f
simde_vmaxv_u16	simde/arm/neon/maxv.h	/^simde_vmaxv_u16(simde_uint16x4_t a) {$/;"	f
simde_vmaxv_u32	simde/arm/neon/maxv.h	/^simde_vmaxv_u32(simde_uint32x2_t a) {$/;"	f
simde_vmaxv_u8	simde/arm/neon/maxv.h	/^simde_vmaxv_u8(simde_uint8x8_t a) {$/;"	f
simde_vmaxvq_f32	simde/arm/neon/maxv.h	/^simde_vmaxvq_f32(simde_float32x4_t a) {$/;"	f
simde_vmaxvq_f64	simde/arm/neon/maxv.h	/^simde_vmaxvq_f64(simde_float64x2_t a) {$/;"	f
simde_vmaxvq_s16	simde/arm/neon/maxv.h	/^simde_vmaxvq_s16(simde_int16x8_t a) {$/;"	f
simde_vmaxvq_s32	simde/arm/neon/maxv.h	/^simde_vmaxvq_s32(simde_int32x4_t a) {$/;"	f
simde_vmaxvq_s8	simde/arm/neon/maxv.h	/^simde_vmaxvq_s8(simde_int8x16_t a) {$/;"	f
simde_vmaxvq_u16	simde/arm/neon/maxv.h	/^simde_vmaxvq_u16(simde_uint16x8_t a) {$/;"	f
simde_vmaxvq_u32	simde/arm/neon/maxv.h	/^simde_vmaxvq_u32(simde_uint32x4_t a) {$/;"	f
simde_vmaxvq_u8	simde/arm/neon/maxv.h	/^simde_vmaxvq_u8(simde_uint8x16_t a) {$/;"	f
simde_vmin_f32	simde/arm/neon/min.h	/^simde_vmin_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vmin_f64	simde/arm/neon/min.h	/^simde_vmin_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vmin_s16	simde/arm/neon/min.h	/^simde_vmin_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vmin_s32	simde/arm/neon/min.h	/^simde_vmin_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vmin_s8	simde/arm/neon/min.h	/^simde_vmin_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vmin_u16	simde/arm/neon/min.h	/^simde_vmin_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vmin_u32	simde/arm/neon/min.h	/^simde_vmin_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vmin_u8	simde/arm/neon/min.h	/^simde_vmin_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vminnm_f32	simde/arm/neon/minnm.h	/^simde_vminnm_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vminnm_f64	simde/arm/neon/minnm.h	/^simde_vminnm_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vminnmq_f32	simde/arm/neon/minnm.h	/^simde_vminnmq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vminnmq_f64	simde/arm/neon/minnm.h	/^simde_vminnmq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vminq_f32	simde/arm/neon/min.h	/^simde_vminq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vminq_f64	simde/arm/neon/min.h	/^simde_vminq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vminq_s16	simde/arm/neon/min.h	/^simde_vminq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vminq_s32	simde/arm/neon/min.h	/^simde_vminq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vminq_s8	simde/arm/neon/min.h	/^simde_vminq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vminq_u16	simde/arm/neon/min.h	/^simde_vminq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vminq_u32	simde/arm/neon/min.h	/^simde_vminq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vminq_u8	simde/arm/neon/min.h	/^simde_vminq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vminv_f32	simde/arm/neon/minv.h	/^simde_vminv_f32(simde_float32x2_t a) {$/;"	f
simde_vminv_s16	simde/arm/neon/minv.h	/^simde_vminv_s16(simde_int16x4_t a) {$/;"	f
simde_vminv_s32	simde/arm/neon/minv.h	/^simde_vminv_s32(simde_int32x2_t a) {$/;"	f
simde_vminv_s8	simde/arm/neon/minv.h	/^simde_vminv_s8(simde_int8x8_t a) {$/;"	f
simde_vminv_u16	simde/arm/neon/minv.h	/^simde_vminv_u16(simde_uint16x4_t a) {$/;"	f
simde_vminv_u32	simde/arm/neon/minv.h	/^simde_vminv_u32(simde_uint32x2_t a) {$/;"	f
simde_vminv_u8	simde/arm/neon/minv.h	/^simde_vminv_u8(simde_uint8x8_t a) {$/;"	f
simde_vminvq_f32	simde/arm/neon/minv.h	/^simde_vminvq_f32(simde_float32x4_t a) {$/;"	f
simde_vminvq_f64	simde/arm/neon/minv.h	/^simde_vminvq_f64(simde_float64x2_t a) {$/;"	f
simde_vminvq_s16	simde/arm/neon/minv.h	/^simde_vminvq_s16(simde_int16x8_t a) {$/;"	f
simde_vminvq_s32	simde/arm/neon/minv.h	/^simde_vminvq_s32(simde_int32x4_t a) {$/;"	f
simde_vminvq_s8	simde/arm/neon/minv.h	/^simde_vminvq_s8(simde_int8x16_t a) {$/;"	f
simde_vminvq_u16	simde/arm/neon/minv.h	/^simde_vminvq_u16(simde_uint16x8_t a) {$/;"	f
simde_vminvq_u32	simde/arm/neon/minv.h	/^simde_vminvq_u32(simde_uint32x4_t a) {$/;"	f
simde_vminvq_u8	simde/arm/neon/minv.h	/^simde_vminvq_u8(simde_uint8x16_t a) {$/;"	f
simde_vmla_f32	simde/arm/neon/mla.h	/^simde_vmla_f32(simde_float32x2_t a, simde_float32x2_t b, simde_float32x2_t c) {$/;"	f
simde_vmla_f64	simde/arm/neon/mla.h	/^simde_vmla_f64(simde_float64x1_t a, simde_float64x1_t b, simde_float64x1_t c) {$/;"	f
simde_vmla_n_f32	simde/arm/neon/mla_n.h	/^simde_vmla_n_f32(simde_float32x2_t a, simde_float32x2_t b, simde_float32 c) {$/;"	f
simde_vmla_n_s16	simde/arm/neon/mla_n.h	/^simde_vmla_n_s16(simde_int16x4_t a, simde_int16x4_t b, int16_t c) {$/;"	f
simde_vmla_n_s32	simde/arm/neon/mla_n.h	/^simde_vmla_n_s32(simde_int32x2_t a, simde_int32x2_t b, int32_t c) {$/;"	f
simde_vmla_n_u16	simde/arm/neon/mla_n.h	/^simde_vmla_n_u16(simde_uint16x4_t a, simde_uint16x4_t b, uint16_t c) {$/;"	f
simde_vmla_n_u32	simde/arm/neon/mla_n.h	/^simde_vmla_n_u32(simde_uint32x2_t a, simde_uint32x2_t b, uint32_t c) {$/;"	f
simde_vmla_s16	simde/arm/neon/mla.h	/^simde_vmla_s16(simde_int16x4_t a, simde_int16x4_t b, simde_int16x4_t c) {$/;"	f
simde_vmla_s32	simde/arm/neon/mla.h	/^simde_vmla_s32(simde_int32x2_t a, simde_int32x2_t b, simde_int32x2_t c) {$/;"	f
simde_vmla_s8	simde/arm/neon/mla.h	/^simde_vmla_s8(simde_int8x8_t a, simde_int8x8_t b, simde_int8x8_t c) {$/;"	f
simde_vmla_u16	simde/arm/neon/mla.h	/^simde_vmla_u16(simde_uint16x4_t a, simde_uint16x4_t b, simde_uint16x4_t c) {$/;"	f
simde_vmla_u32	simde/arm/neon/mla.h	/^simde_vmla_u32(simde_uint32x2_t a, simde_uint32x2_t b, simde_uint32x2_t c) {$/;"	f
simde_vmla_u8	simde/arm/neon/mla.h	/^simde_vmla_u8(simde_uint8x8_t a, simde_uint8x8_t b, simde_uint8x8_t c) {$/;"	f
simde_vmlal_high_s16	simde/arm/neon/mlal_high.h	/^simde_vmlal_high_s16(simde_int32x4_t a, simde_int16x8_t b, simde_int16x8_t c) {$/;"	f
simde_vmlal_high_s32	simde/arm/neon/mlal_high.h	/^simde_vmlal_high_s32(simde_int64x2_t a, simde_int32x4_t b, simde_int32x4_t c) {$/;"	f
simde_vmlal_high_s8	simde/arm/neon/mlal_high.h	/^simde_vmlal_high_s8(simde_int16x8_t a, simde_int8x16_t b, simde_int8x16_t c) {$/;"	f
simde_vmlal_high_u16	simde/arm/neon/mlal_high.h	/^simde_vmlal_high_u16(simde_uint32x4_t a, simde_uint16x8_t b, simde_uint16x8_t c) {$/;"	f
simde_vmlal_high_u32	simde/arm/neon/mlal_high.h	/^simde_vmlal_high_u32(simde_uint64x2_t a, simde_uint32x4_t b, simde_uint32x4_t c) {$/;"	f
simde_vmlal_high_u8	simde/arm/neon/mlal_high.h	/^simde_vmlal_high_u8(simde_uint16x8_t a, simde_uint8x16_t b, simde_uint8x16_t c) {$/;"	f
simde_vmlal_n_s16	simde/arm/neon/mlal_n.h	/^simde_vmlal_n_s16(simde_int32x4_t a, simde_int16x4_t b, int16_t c) {$/;"	f
simde_vmlal_n_s32	simde/arm/neon/mlal_n.h	/^simde_vmlal_n_s32(simde_int64x2_t a, simde_int32x2_t b, int32_t c) {$/;"	f
simde_vmlal_n_u16	simde/arm/neon/mlal_n.h	/^simde_vmlal_n_u16(simde_uint32x4_t a, simde_uint16x4_t b, uint16_t c) {$/;"	f
simde_vmlal_n_u32	simde/arm/neon/mlal_n.h	/^simde_vmlal_n_u32(simde_uint64x2_t a, simde_uint32x2_t b, uint32_t c) {$/;"	f
simde_vmlal_s16	simde/arm/neon/mlal.h	/^simde_vmlal_s16(simde_int32x4_t a, simde_int16x4_t b, simde_int16x4_t c) {$/;"	f
simde_vmlal_s32	simde/arm/neon/mlal.h	/^simde_vmlal_s32(simde_int64x2_t a, simde_int32x2_t b, simde_int32x2_t c) {$/;"	f
simde_vmlal_s8	simde/arm/neon/mlal.h	/^simde_vmlal_s8(simde_int16x8_t a, simde_int8x8_t b, simde_int8x8_t c) {$/;"	f
simde_vmlal_u16	simde/arm/neon/mlal.h	/^simde_vmlal_u16(simde_uint32x4_t a, simde_uint16x4_t b, simde_uint16x4_t c) {$/;"	f
simde_vmlal_u32	simde/arm/neon/mlal.h	/^simde_vmlal_u32(simde_uint64x2_t a, simde_uint32x2_t b, simde_uint32x2_t c) {$/;"	f
simde_vmlal_u8	simde/arm/neon/mlal.h	/^simde_vmlal_u8(simde_uint16x8_t a, simde_uint8x8_t b, simde_uint8x8_t c) {$/;"	f
simde_vmlaq_f32	simde/arm/neon/mla.h	/^simde_vmlaq_f32(simde_float32x4_t a, simde_float32x4_t b, simde_float32x4_t c) {$/;"	f
simde_vmlaq_f64	simde/arm/neon/mla.h	/^simde_vmlaq_f64(simde_float64x2_t a, simde_float64x2_t b, simde_float64x2_t c) {$/;"	f
simde_vmlaq_n_f32	simde/arm/neon/mla_n.h	/^simde_vmlaq_n_f32(simde_float32x4_t a, simde_float32x4_t b, simde_float32 c) {$/;"	f
simde_vmlaq_n_s16	simde/arm/neon/mla_n.h	/^simde_vmlaq_n_s16(simde_int16x8_t a, simde_int16x8_t b, int16_t c) {$/;"	f
simde_vmlaq_n_s32	simde/arm/neon/mla_n.h	/^simde_vmlaq_n_s32(simde_int32x4_t a, simde_int32x4_t b, int32_t c) {$/;"	f
simde_vmlaq_n_u16	simde/arm/neon/mla_n.h	/^simde_vmlaq_n_u16(simde_uint16x8_t a, simde_uint16x8_t b, uint16_t c) {$/;"	f
simde_vmlaq_n_u32	simde/arm/neon/mla_n.h	/^simde_vmlaq_n_u32(simde_uint32x4_t a, simde_uint32x4_t b, uint32_t c) {$/;"	f
simde_vmlaq_s16	simde/arm/neon/mla.h	/^simde_vmlaq_s16(simde_int16x8_t a, simde_int16x8_t b, simde_int16x8_t c) {$/;"	f
simde_vmlaq_s32	simde/arm/neon/mla.h	/^simde_vmlaq_s32(simde_int32x4_t a, simde_int32x4_t b, simde_int32x4_t c) {$/;"	f
simde_vmlaq_s8	simde/arm/neon/mla.h	/^simde_vmlaq_s8(simde_int8x16_t a, simde_int8x16_t b, simde_int8x16_t c) {$/;"	f
simde_vmlaq_u16	simde/arm/neon/mla.h	/^simde_vmlaq_u16(simde_uint16x8_t a, simde_uint16x8_t b, simde_uint16x8_t c) {$/;"	f
simde_vmlaq_u32	simde/arm/neon/mla.h	/^simde_vmlaq_u32(simde_uint32x4_t a, simde_uint32x4_t b, simde_uint32x4_t c) {$/;"	f
simde_vmlaq_u8	simde/arm/neon/mla.h	/^simde_vmlaq_u8(simde_uint8x16_t a, simde_uint8x16_t b, simde_uint8x16_t c) {$/;"	f
simde_vmls_f32	simde/arm/neon/mls.h	/^simde_vmls_f32(simde_float32x2_t a, simde_float32x2_t b, simde_float32x2_t c) {$/;"	f
simde_vmls_f64	simde/arm/neon/mls.h	/^simde_vmls_f64(simde_float64x1_t a, simde_float64x1_t b, simde_float64x1_t c) {$/;"	f
simde_vmls_s16	simde/arm/neon/mls.h	/^simde_vmls_s16(simde_int16x4_t a, simde_int16x4_t b, simde_int16x4_t c) {$/;"	f
simde_vmls_s32	simde/arm/neon/mls.h	/^simde_vmls_s32(simde_int32x2_t a, simde_int32x2_t b, simde_int32x2_t c) {$/;"	f
simde_vmls_s8	simde/arm/neon/mls.h	/^simde_vmls_s8(simde_int8x8_t a, simde_int8x8_t b, simde_int8x8_t c) {$/;"	f
simde_vmls_u16	simde/arm/neon/mls.h	/^simde_vmls_u16(simde_uint16x4_t a, simde_uint16x4_t b, simde_uint16x4_t c) {$/;"	f
simde_vmls_u32	simde/arm/neon/mls.h	/^simde_vmls_u32(simde_uint32x2_t a, simde_uint32x2_t b, simde_uint32x2_t c) {$/;"	f
simde_vmls_u8	simde/arm/neon/mls.h	/^simde_vmls_u8(simde_uint8x8_t a, simde_uint8x8_t b, simde_uint8x8_t c) {$/;"	f
simde_vmlsl_high_s16	simde/arm/neon/mlsl_high.h	/^simde_vmlsl_high_s16(simde_int32x4_t a, simde_int16x8_t b, simde_int16x8_t c) {$/;"	f
simde_vmlsl_high_s32	simde/arm/neon/mlsl_high.h	/^simde_vmlsl_high_s32(simde_int64x2_t a, simde_int32x4_t b, simde_int32x4_t c) {$/;"	f
simde_vmlsl_high_s8	simde/arm/neon/mlsl_high.h	/^simde_vmlsl_high_s8(simde_int16x8_t a, simde_int8x16_t b, simde_int8x16_t c) {$/;"	f
simde_vmlsl_high_u16	simde/arm/neon/mlsl_high.h	/^simde_vmlsl_high_u16(simde_uint32x4_t a, simde_uint16x8_t b, simde_uint16x8_t c) {$/;"	f
simde_vmlsl_high_u32	simde/arm/neon/mlsl_high.h	/^simde_vmlsl_high_u32(simde_uint64x2_t a, simde_uint32x4_t b, simde_uint32x4_t c) {$/;"	f
simde_vmlsl_high_u8	simde/arm/neon/mlsl_high.h	/^simde_vmlsl_high_u8(simde_uint16x8_t a, simde_uint8x16_t b, simde_uint8x16_t c) {$/;"	f
simde_vmlsl_n_s16	simde/arm/neon/mlsl_n.h	/^simde_vmlsl_n_s16(simde_int32x4_t a, simde_int16x4_t b, int16_t c) {$/;"	f
simde_vmlsl_n_s32	simde/arm/neon/mlsl_n.h	/^simde_vmlsl_n_s32(simde_int64x2_t a, simde_int32x2_t b, int32_t c) {$/;"	f
simde_vmlsl_n_u16	simde/arm/neon/mlsl_n.h	/^simde_vmlsl_n_u16(simde_uint32x4_t a, simde_uint16x4_t b, uint16_t c) {$/;"	f
simde_vmlsl_n_u32	simde/arm/neon/mlsl_n.h	/^simde_vmlsl_n_u32(simde_uint64x2_t a, simde_uint32x2_t b, uint32_t c) {$/;"	f
simde_vmlsl_s16	simde/arm/neon/mlsl.h	/^simde_vmlsl_s16(simde_int32x4_t a, simde_int16x4_t b, simde_int16x4_t c) {$/;"	f
simde_vmlsl_s32	simde/arm/neon/mlsl.h	/^simde_vmlsl_s32(simde_int64x2_t a, simde_int32x2_t b, simde_int32x2_t c) {$/;"	f
simde_vmlsl_s8	simde/arm/neon/mlsl.h	/^simde_vmlsl_s8(simde_int16x8_t a, simde_int8x8_t b, simde_int8x8_t c) {$/;"	f
simde_vmlsl_u16	simde/arm/neon/mlsl.h	/^simde_vmlsl_u16(simde_uint32x4_t a, simde_uint16x4_t b, simde_uint16x4_t c) {$/;"	f
simde_vmlsl_u32	simde/arm/neon/mlsl.h	/^simde_vmlsl_u32(simde_uint64x2_t a, simde_uint32x2_t b, simde_uint32x2_t c) {$/;"	f
simde_vmlsl_u8	simde/arm/neon/mlsl.h	/^simde_vmlsl_u8(simde_uint16x8_t a, simde_uint8x8_t b, simde_uint8x8_t c) {$/;"	f
simde_vmlsq_f32	simde/arm/neon/mls.h	/^simde_vmlsq_f32(simde_float32x4_t a, simde_float32x4_t b, simde_float32x4_t c) {$/;"	f
simde_vmlsq_f64	simde/arm/neon/mls.h	/^simde_vmlsq_f64(simde_float64x2_t a, simde_float64x2_t b, simde_float64x2_t c) {$/;"	f
simde_vmlsq_s16	simde/arm/neon/mls.h	/^simde_vmlsq_s16(simde_int16x8_t a, simde_int16x8_t b, simde_int16x8_t c) {$/;"	f
simde_vmlsq_s32	simde/arm/neon/mls.h	/^simde_vmlsq_s32(simde_int32x4_t a, simde_int32x4_t b, simde_int32x4_t c) {$/;"	f
simde_vmlsq_s8	simde/arm/neon/mls.h	/^simde_vmlsq_s8(simde_int8x16_t a, simde_int8x16_t b, simde_int8x16_t c) {$/;"	f
simde_vmlsq_u16	simde/arm/neon/mls.h	/^simde_vmlsq_u16(simde_uint16x8_t a, simde_uint16x8_t b, simde_uint16x8_t c) {$/;"	f
simde_vmlsq_u32	simde/arm/neon/mls.h	/^simde_vmlsq_u32(simde_uint32x4_t a, simde_uint32x4_t b, simde_uint32x4_t c) {$/;"	f
simde_vmlsq_u8	simde/arm/neon/mls.h	/^simde_vmlsq_u8(simde_uint8x16_t a, simde_uint8x16_t b, simde_uint8x16_t c) {$/;"	f
simde_vmovl_high_s16	simde/arm/neon/movl_high.h	/^simde_vmovl_high_s16(simde_int16x8_t a) {$/;"	f
simde_vmovl_high_s32	simde/arm/neon/movl_high.h	/^simde_vmovl_high_s32(simde_int32x4_t a) {$/;"	f
simde_vmovl_high_s8	simde/arm/neon/movl_high.h	/^simde_vmovl_high_s8(simde_int8x16_t a) {$/;"	f
simde_vmovl_high_u16	simde/arm/neon/movl_high.h	/^simde_vmovl_high_u16(simde_uint16x8_t a) {$/;"	f
simde_vmovl_high_u32	simde/arm/neon/movl_high.h	/^simde_vmovl_high_u32(simde_uint32x4_t a) {$/;"	f
simde_vmovl_high_u8	simde/arm/neon/movl_high.h	/^simde_vmovl_high_u8(simde_uint8x16_t a) {$/;"	f
simde_vmovl_s16	simde/arm/neon/movl.h	/^simde_vmovl_s16(simde_int16x4_t a) {$/;"	f
simde_vmovl_s32	simde/arm/neon/movl.h	/^simde_vmovl_s32(simde_int32x2_t a) {$/;"	f
simde_vmovl_s8	simde/arm/neon/movl.h	/^simde_vmovl_s8(simde_int8x8_t a) {$/;"	f
simde_vmovl_u16	simde/arm/neon/movl.h	/^simde_vmovl_u16(simde_uint16x4_t a) {$/;"	f
simde_vmovl_u32	simde/arm/neon/movl.h	/^simde_vmovl_u32(simde_uint32x2_t a) {$/;"	f
simde_vmovl_u8	simde/arm/neon/movl.h	/^simde_vmovl_u8(simde_uint8x8_t a) {$/;"	f
simde_vmovn_high_s16	simde/arm/neon/movn_high.h	/^simde_vmovn_high_s16(simde_int8x8_t r, simde_int16x8_t a) {$/;"	f
simde_vmovn_high_s32	simde/arm/neon/movn_high.h	/^simde_vmovn_high_s32(simde_int16x4_t r, simde_int32x4_t a) {$/;"	f
simde_vmovn_high_s64	simde/arm/neon/movn_high.h	/^simde_vmovn_high_s64(simde_int32x2_t r, simde_int64x2_t a) {$/;"	f
simde_vmovn_high_u16	simde/arm/neon/movn_high.h	/^simde_vmovn_high_u16(simde_uint8x8_t r, simde_uint16x8_t a) {$/;"	f
simde_vmovn_high_u32	simde/arm/neon/movn_high.h	/^simde_vmovn_high_u32(simde_uint16x4_t r, simde_uint32x4_t a) {$/;"	f
simde_vmovn_high_u64	simde/arm/neon/movn_high.h	/^simde_vmovn_high_u64(simde_uint32x2_t r, simde_uint64x2_t a) {$/;"	f
simde_vmovn_s16	simde/arm/neon/movn.h	/^simde_vmovn_s16(simde_int16x8_t a) {$/;"	f
simde_vmovn_s32	simde/arm/neon/movn.h	/^simde_vmovn_s32(simde_int32x4_t a) {$/;"	f
simde_vmovn_s64	simde/arm/neon/movn.h	/^simde_vmovn_s64(simde_int64x2_t a) {$/;"	f
simde_vmovn_u16	simde/arm/neon/movn.h	/^simde_vmovn_u16(simde_uint16x8_t a) {$/;"	f
simde_vmovn_u32	simde/arm/neon/movn.h	/^simde_vmovn_u32(simde_uint32x4_t a) {$/;"	f
simde_vmovn_u64	simde/arm/neon/movn.h	/^simde_vmovn_u64(simde_uint64x2_t a) {$/;"	f
simde_vmul_f32	simde/arm/neon/mul.h	/^simde_vmul_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vmul_f64	simde/arm/neon/mul.h	/^simde_vmul_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vmul_lane_f32	simde/arm/neon/mul_lane.h	54;"	d
simde_vmul_lane_f64	simde/arm/neon/mul_lane.h	78;"	d
simde_vmul_lane_s16	simde/arm/neon/mul_lane.h	102;"	d
simde_vmul_lane_s32	simde/arm/neon/mul_lane.h	126;"	d
simde_vmul_lane_u16	simde/arm/neon/mul_lane.h	150;"	d
simde_vmul_lane_u32	simde/arm/neon/mul_lane.h	174;"	d
simde_vmul_n_f32	simde/arm/neon/mul_n.h	/^simde_vmul_n_f32(simde_float32x2_t a, simde_float32 b) {$/;"	f
simde_vmul_n_f64	simde/arm/neon/mul_n.h	/^simde_vmul_n_f64(simde_float64x1_t a, simde_float64 b) {$/;"	f
simde_vmul_n_s16	simde/arm/neon/mul_n.h	/^simde_vmul_n_s16(simde_int16x4_t a, int16_t b) {$/;"	f
simde_vmul_n_s32	simde/arm/neon/mul_n.h	/^simde_vmul_n_s32(simde_int32x2_t a, int32_t b) {$/;"	f
simde_vmul_n_u16	simde/arm/neon/mul_n.h	/^simde_vmul_n_u16(simde_uint16x4_t a, uint16_t b) {$/;"	f
simde_vmul_n_u32	simde/arm/neon/mul_n.h	/^simde_vmul_n_u32(simde_uint32x2_t a, uint32_t b) {$/;"	f
simde_vmul_s16	simde/arm/neon/mul.h	/^simde_vmul_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vmul_s32	simde/arm/neon/mul.h	/^simde_vmul_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vmul_s8	simde/arm/neon/mul.h	/^simde_vmul_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vmul_u16	simde/arm/neon/mul.h	/^simde_vmul_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vmul_u32	simde/arm/neon/mul.h	/^simde_vmul_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vmul_u8	simde/arm/neon/mul.h	/^simde_vmul_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vmull_high_s16	simde/arm/neon/mull_high.h	/^simde_vmull_high_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vmull_high_s32	simde/arm/neon/mull_high.h	/^simde_vmull_high_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vmull_high_s8	simde/arm/neon/mull_high.h	/^simde_vmull_high_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vmull_high_u16	simde/arm/neon/mull_high.h	/^simde_vmull_high_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vmull_high_u32	simde/arm/neon/mull_high.h	/^simde_vmull_high_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vmull_high_u8	simde/arm/neon/mull_high.h	/^simde_vmull_high_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vmull_n_s16	simde/arm/neon/mull_n.h	/^simde_vmull_n_s16(simde_int16x4_t a, int16_t b) {$/;"	f
simde_vmull_n_s32	simde/arm/neon/mull_n.h	/^simde_vmull_n_s32(simde_int32x2_t a, int32_t b) {$/;"	f
simde_vmull_n_u16	simde/arm/neon/mull_n.h	/^simde_vmull_n_u16(simde_uint16x4_t a, uint16_t b) {$/;"	f
simde_vmull_n_u32	simde/arm/neon/mull_n.h	/^simde_vmull_n_u32(simde_uint32x2_t a, uint32_t b) {$/;"	f
simde_vmull_s16	simde/arm/neon/mull.h	/^simde_vmull_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vmull_s32	simde/arm/neon/mull.h	/^simde_vmull_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vmull_s8	simde/arm/neon/mull.h	/^simde_vmull_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vmull_u16	simde/arm/neon/mull.h	/^simde_vmull_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vmull_u32	simde/arm/neon/mull.h	/^simde_vmull_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vmull_u8	simde/arm/neon/mull.h	/^simde_vmull_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vmulq_f32	simde/arm/neon/mul.h	/^simde_vmulq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vmulq_f64	simde/arm/neon/mul.h	/^simde_vmulq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vmulq_lane_f32	simde/arm/neon/mul_lane.h	198;"	d
simde_vmulq_lane_f64	simde/arm/neon/mul_lane.h	222;"	d
simde_vmulq_lane_s16	simde/arm/neon/mul_lane.h	246;"	d
simde_vmulq_lane_s32	simde/arm/neon/mul_lane.h	270;"	d
simde_vmulq_lane_u16	simde/arm/neon/mul_lane.h	294;"	d
simde_vmulq_lane_u32	simde/arm/neon/mul_lane.h	318;"	d
simde_vmulq_laneq_f32	simde/arm/neon/mul_lane.h	342;"	d
simde_vmulq_laneq_f64	simde/arm/neon/mul_lane.h	366;"	d
simde_vmulq_laneq_s16	simde/arm/neon/mul_lane.h	390;"	d
simde_vmulq_laneq_s32	simde/arm/neon/mul_lane.h	414;"	d
simde_vmulq_laneq_u16	simde/arm/neon/mul_lane.h	438;"	d
simde_vmulq_laneq_u32	simde/arm/neon/mul_lane.h	462;"	d
simde_vmulq_n_f32	simde/arm/neon/mul_n.h	/^simde_vmulq_n_f32(simde_float32x4_t a, simde_float32 b) {$/;"	f
simde_vmulq_n_f64	simde/arm/neon/mul_n.h	/^simde_vmulq_n_f64(simde_float64x2_t a, simde_float64 b) {$/;"	f
simde_vmulq_n_s16	simde/arm/neon/mul_n.h	/^simde_vmulq_n_s16(simde_int16x8_t a, int16_t b) {$/;"	f
simde_vmulq_n_s32	simde/arm/neon/mul_n.h	/^simde_vmulq_n_s32(simde_int32x4_t a, int32_t b) {$/;"	f
simde_vmulq_n_u16	simde/arm/neon/mul_n.h	/^simde_vmulq_n_u16(simde_uint16x8_t a, uint16_t b) {$/;"	f
simde_vmulq_n_u32	simde/arm/neon/mul_n.h	/^simde_vmulq_n_u32(simde_uint32x4_t a, uint32_t b) {$/;"	f
simde_vmulq_s16	simde/arm/neon/mul.h	/^simde_vmulq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vmulq_s32	simde/arm/neon/mul.h	/^simde_vmulq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vmulq_s8	simde/arm/neon/mul.h	/^simde_vmulq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vmulq_u16	simde/arm/neon/mul.h	/^simde_vmulq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vmulq_u32	simde/arm/neon/mul.h	/^simde_vmulq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vmulq_u8	simde/arm/neon/mul.h	/^simde_vmulq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vmvn_s16	simde/arm/neon/mvn.h	/^simde_vmvn_s16(simde_int16x4_t a) {$/;"	f
simde_vmvn_s32	simde/arm/neon/mvn.h	/^simde_vmvn_s32(simde_int32x2_t a) {$/;"	f
simde_vmvn_s8	simde/arm/neon/mvn.h	/^simde_vmvn_s8(simde_int8x8_t a) {$/;"	f
simde_vmvn_u16	simde/arm/neon/mvn.h	/^simde_vmvn_u16(simde_uint16x4_t a) {$/;"	f
simde_vmvn_u32	simde/arm/neon/mvn.h	/^simde_vmvn_u32(simde_uint32x2_t a) {$/;"	f
simde_vmvn_u8	simde/arm/neon/mvn.h	/^simde_vmvn_u8(simde_uint8x8_t a) {$/;"	f
simde_vmvnq_s16	simde/arm/neon/mvn.h	/^simde_vmvnq_s16(simde_int16x8_t a) {$/;"	f
simde_vmvnq_s32	simde/arm/neon/mvn.h	/^simde_vmvnq_s32(simde_int32x4_t a) {$/;"	f
simde_vmvnq_s8	simde/arm/neon/mvn.h	/^simde_vmvnq_s8(simde_int8x16_t a) {$/;"	f
simde_vmvnq_u16	simde/arm/neon/mvn.h	/^simde_vmvnq_u16(simde_uint16x8_t a) {$/;"	f
simde_vmvnq_u32	simde/arm/neon/mvn.h	/^simde_vmvnq_u32(simde_uint32x4_t a) {$/;"	f
simde_vmvnq_u8	simde/arm/neon/mvn.h	/^simde_vmvnq_u8(simde_uint8x16_t a) {$/;"	f
simde_vneg_f32	simde/arm/neon/neg.h	/^simde_vneg_f32(simde_float32x2_t a) {$/;"	f
simde_vneg_f64	simde/arm/neon/neg.h	/^simde_vneg_f64(simde_float64x1_t a) {$/;"	f
simde_vneg_s16	simde/arm/neon/neg.h	/^simde_vneg_s16(simde_int16x4_t a) {$/;"	f
simde_vneg_s32	simde/arm/neon/neg.h	/^simde_vneg_s32(simde_int32x2_t a) {$/;"	f
simde_vneg_s64	simde/arm/neon/neg.h	/^simde_vneg_s64(simde_int64x1_t a) {$/;"	f
simde_vneg_s8	simde/arm/neon/neg.h	/^simde_vneg_s8(simde_int8x8_t a) {$/;"	f
simde_vnegq_f32	simde/arm/neon/neg.h	/^simde_vnegq_f32(simde_float32x4_t a) {$/;"	f
simde_vnegq_f64	simde/arm/neon/neg.h	/^simde_vnegq_f64(simde_float64x2_t a) {$/;"	f
simde_vnegq_s16	simde/arm/neon/neg.h	/^simde_vnegq_s16(simde_int16x8_t a) {$/;"	f
simde_vnegq_s32	simde/arm/neon/neg.h	/^simde_vnegq_s32(simde_int32x4_t a) {$/;"	f
simde_vnegq_s64	simde/arm/neon/neg.h	/^simde_vnegq_s64(simde_int64x2_t a) {$/;"	f
simde_vnegq_s8	simde/arm/neon/neg.h	/^simde_vnegq_s8(simde_int8x16_t a) {$/;"	f
simde_vorn_s16	simde/arm/neon/orn.h	/^simde_vorn_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vorn_s32	simde/arm/neon/orn.h	/^simde_vorn_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vorn_s64	simde/arm/neon/orn.h	/^simde_vorn_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vorn_s8	simde/arm/neon/orn.h	/^simde_vorn_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vorn_u16	simde/arm/neon/orn.h	/^simde_vorn_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vorn_u32	simde/arm/neon/orn.h	/^simde_vorn_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vorn_u64	simde/arm/neon/orn.h	/^simde_vorn_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vorn_u8	simde/arm/neon/orn.h	/^simde_vorn_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vornq_s16	simde/arm/neon/orn.h	/^simde_vornq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vornq_s32	simde/arm/neon/orn.h	/^simde_vornq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vornq_s64	simde/arm/neon/orn.h	/^simde_vornq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vornq_s8	simde/arm/neon/orn.h	/^simde_vornq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vornq_u16	simde/arm/neon/orn.h	/^simde_vornq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vornq_u32	simde/arm/neon/orn.h	/^simde_vornq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vornq_u64	simde/arm/neon/orn.h	/^simde_vornq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vornq_u8	simde/arm/neon/orn.h	/^simde_vornq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vorr_s16	simde/arm/neon/orr.h	/^simde_vorr_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vorr_s32	simde/arm/neon/orr.h	/^simde_vorr_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vorr_s64	simde/arm/neon/orr.h	/^simde_vorr_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vorr_s8	simde/arm/neon/orr.h	/^simde_vorr_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vorr_u16	simde/arm/neon/orr.h	/^simde_vorr_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vorr_u32	simde/arm/neon/orr.h	/^simde_vorr_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vorr_u64	simde/arm/neon/orr.h	/^simde_vorr_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vorr_u8	simde/arm/neon/orr.h	/^simde_vorr_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vorrq_s16	simde/arm/neon/orr.h	/^simde_vorrq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vorrq_s32	simde/arm/neon/orr.h	/^simde_vorrq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vorrq_s64	simde/arm/neon/orr.h	/^simde_vorrq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vorrq_s8	simde/arm/neon/orr.h	/^simde_vorrq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vorrq_u16	simde/arm/neon/orr.h	/^simde_vorrq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vorrq_u32	simde/arm/neon/orr.h	/^simde_vorrq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vorrq_u64	simde/arm/neon/orr.h	/^simde_vorrq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vorrq_u8	simde/arm/neon/orr.h	/^simde_vorrq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vpadal_s16	simde/arm/neon/padal.h	/^simde_vpadal_s16(simde_int32x2_t a, simde_int16x4_t b) {$/;"	f
simde_vpadal_s32	simde/arm/neon/padal.h	/^simde_vpadal_s32(simde_int64x1_t a, simde_int32x2_t b) {$/;"	f
simde_vpadal_s8	simde/arm/neon/padal.h	/^simde_vpadal_s8(simde_int16x4_t a, simde_int8x8_t b) {$/;"	f
simde_vpadal_u16	simde/arm/neon/padal.h	/^simde_vpadal_u16(simde_uint32x2_t a, simde_uint16x4_t b) {$/;"	f
simde_vpadal_u32	simde/arm/neon/padal.h	/^simde_vpadal_u32(simde_uint64x1_t a, simde_uint32x2_t b) {$/;"	f
simde_vpadal_u8	simde/arm/neon/padal.h	/^simde_vpadal_u8(simde_uint16x4_t a, simde_uint8x8_t b) {$/;"	f
simde_vpadalq_s16	simde/arm/neon/padal.h	/^simde_vpadalq_s16(simde_int32x4_t a, simde_int16x8_t b) {$/;"	f
simde_vpadalq_s32	simde/arm/neon/padal.h	/^simde_vpadalq_s32(simde_int64x2_t a, simde_int32x4_t b) {$/;"	f
simde_vpadalq_s8	simde/arm/neon/padal.h	/^simde_vpadalq_s8(simde_int16x8_t a, simde_int8x16_t b) {$/;"	f
simde_vpadalq_u16	simde/arm/neon/padal.h	/^simde_vpadalq_u16(simde_uint32x4_t a, simde_uint16x8_t b) {$/;"	f
simde_vpadalq_u32	simde/arm/neon/padal.h	/^simde_vpadalq_u32(simde_uint64x2_t a, simde_uint32x4_t b) {$/;"	f
simde_vpadalq_u8	simde/arm/neon/padal.h	/^simde_vpadalq_u8(simde_uint16x8_t a, simde_uint8x16_t b) {$/;"	f
simde_vpadd_f32	simde/arm/neon/padd.h	/^simde_vpadd_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vpadd_s16	simde/arm/neon/padd.h	/^simde_vpadd_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vpadd_s32	simde/arm/neon/padd.h	/^simde_vpadd_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vpadd_s8	simde/arm/neon/padd.h	/^simde_vpadd_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vpadd_u16	simde/arm/neon/padd.h	/^simde_vpadd_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vpadd_u32	simde/arm/neon/padd.h	/^simde_vpadd_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vpadd_u8	simde/arm/neon/padd.h	/^simde_vpadd_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vpaddl_s16	simde/arm/neon/paddl.h	/^simde_vpaddl_s16(simde_int16x4_t a) {$/;"	f
simde_vpaddl_s32	simde/arm/neon/paddl.h	/^simde_vpaddl_s32(simde_int32x2_t a) {$/;"	f
simde_vpaddl_s8	simde/arm/neon/paddl.h	/^simde_vpaddl_s8(simde_int8x8_t a) {$/;"	f
simde_vpaddl_u16	simde/arm/neon/paddl.h	/^simde_vpaddl_u16(simde_uint16x4_t a) {$/;"	f
simde_vpaddl_u32	simde/arm/neon/paddl.h	/^simde_vpaddl_u32(simde_uint32x2_t a) {$/;"	f
simde_vpaddl_u8	simde/arm/neon/paddl.h	/^simde_vpaddl_u8(simde_uint8x8_t a) {$/;"	f
simde_vpaddlq_s16	simde/arm/neon/paddl.h	/^simde_vpaddlq_s16(simde_int16x8_t a) {$/;"	f
simde_vpaddlq_s32	simde/arm/neon/paddl.h	/^simde_vpaddlq_s32(simde_int32x4_t a) {$/;"	f
simde_vpaddlq_s8	simde/arm/neon/paddl.h	/^simde_vpaddlq_s8(simde_int8x16_t a) {$/;"	f
simde_vpaddlq_u16	simde/arm/neon/paddl.h	/^simde_vpaddlq_u16(simde_uint16x8_t a) {$/;"	f
simde_vpaddlq_u32	simde/arm/neon/paddl.h	/^simde_vpaddlq_u32(simde_uint32x4_t a) {$/;"	f
simde_vpaddlq_u8	simde/arm/neon/paddl.h	/^simde_vpaddlq_u8(simde_uint8x16_t a) {$/;"	f
simde_vpaddq_f32	simde/arm/neon/padd.h	/^simde_vpaddq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vpaddq_f64	simde/arm/neon/padd.h	/^simde_vpaddq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vpaddq_s16	simde/arm/neon/padd.h	/^simde_vpaddq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vpaddq_s32	simde/arm/neon/padd.h	/^simde_vpaddq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vpaddq_s64	simde/arm/neon/padd.h	/^simde_vpaddq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vpaddq_s8	simde/arm/neon/padd.h	/^simde_vpaddq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vpaddq_u16	simde/arm/neon/padd.h	/^simde_vpaddq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vpaddq_u32	simde/arm/neon/padd.h	/^simde_vpaddq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vpaddq_u64	simde/arm/neon/padd.h	/^simde_vpaddq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vpaddq_u8	simde/arm/neon/padd.h	/^simde_vpaddq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vpmax_f32	simde/arm/neon/pmax.h	/^simde_vpmax_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vpmax_s16	simde/arm/neon/pmax.h	/^simde_vpmax_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vpmax_s32	simde/arm/neon/pmax.h	/^simde_vpmax_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vpmax_s8	simde/arm/neon/pmax.h	/^simde_vpmax_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vpmax_u16	simde/arm/neon/pmax.h	/^simde_vpmax_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vpmax_u32	simde/arm/neon/pmax.h	/^simde_vpmax_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vpmax_u8	simde/arm/neon/pmax.h	/^simde_vpmax_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vpmaxq_f32	simde/arm/neon/pmax.h	/^simde_vpmaxq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vpmaxq_f64	simde/arm/neon/pmax.h	/^simde_vpmaxq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vpmaxq_s16	simde/arm/neon/pmax.h	/^simde_vpmaxq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vpmaxq_s32	simde/arm/neon/pmax.h	/^simde_vpmaxq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vpmaxq_s8	simde/arm/neon/pmax.h	/^simde_vpmaxq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vpmaxq_u16	simde/arm/neon/pmax.h	/^simde_vpmaxq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vpmaxq_u32	simde/arm/neon/pmax.h	/^simde_vpmaxq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vpmaxq_u8	simde/arm/neon/pmax.h	/^simde_vpmaxq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vpmin_f32	simde/arm/neon/pmin.h	/^simde_vpmin_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vpmin_s16	simde/arm/neon/pmin.h	/^simde_vpmin_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vpmin_s32	simde/arm/neon/pmin.h	/^simde_vpmin_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vpmin_s8	simde/arm/neon/pmin.h	/^simde_vpmin_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vpmin_u16	simde/arm/neon/pmin.h	/^simde_vpmin_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vpmin_u32	simde/arm/neon/pmin.h	/^simde_vpmin_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vpmin_u8	simde/arm/neon/pmin.h	/^simde_vpmin_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vpminq_f32	simde/arm/neon/pmin.h	/^simde_vpminq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vpminq_f64	simde/arm/neon/pmin.h	/^simde_vpminq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vpminq_s16	simde/arm/neon/pmin.h	/^simde_vpminq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vpminq_s32	simde/arm/neon/pmin.h	/^simde_vpminq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vpminq_s8	simde/arm/neon/pmin.h	/^simde_vpminq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vpminq_u16	simde/arm/neon/pmin.h	/^simde_vpminq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vpminq_u32	simde/arm/neon/pmin.h	/^simde_vpminq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vpminq_u8	simde/arm/neon/pmin.h	/^simde_vpminq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vqabs_s16	simde/arm/neon/qabs.h	/^simde_vqabs_s16(simde_int16x4_t a) {$/;"	f
simde_vqabs_s32	simde/arm/neon/qabs.h	/^simde_vqabs_s32(simde_int32x2_t a) {$/;"	f
simde_vqabs_s64	simde/arm/neon/qabs.h	/^simde_vqabs_s64(simde_int64x1_t a) {$/;"	f
simde_vqabs_s8	simde/arm/neon/qabs.h	/^simde_vqabs_s8(simde_int8x8_t a) {$/;"	f
simde_vqabsb_s8	simde/arm/neon/qabs.h	/^simde_vqabsb_s8(int8_t a) {$/;"	f
simde_vqabsd_s64	simde/arm/neon/qabs.h	/^simde_vqabsd_s64(int64_t a) {$/;"	f
simde_vqabsh_s16	simde/arm/neon/qabs.h	/^simde_vqabsh_s16(int16_t a) {$/;"	f
simde_vqabsq_s16	simde/arm/neon/qabs.h	/^simde_vqabsq_s16(simde_int16x8_t a) {$/;"	f
simde_vqabsq_s32	simde/arm/neon/qabs.h	/^simde_vqabsq_s32(simde_int32x4_t a) {$/;"	f
simde_vqabsq_s64	simde/arm/neon/qabs.h	/^simde_vqabsq_s64(simde_int64x2_t a) {$/;"	f
simde_vqabsq_s8	simde/arm/neon/qabs.h	/^simde_vqabsq_s8(simde_int8x16_t a) {$/;"	f
simde_vqabss_s32	simde/arm/neon/qabs.h	/^simde_vqabss_s32(int32_t a) {$/;"	f
simde_vqadd_s16	simde/arm/neon/qadd.h	/^simde_vqadd_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vqadd_s32	simde/arm/neon/qadd.h	/^simde_vqadd_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vqadd_s64	simde/arm/neon/qadd.h	/^simde_vqadd_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vqadd_s8	simde/arm/neon/qadd.h	/^simde_vqadd_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vqadd_u16	simde/arm/neon/qadd.h	/^simde_vqadd_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vqadd_u32	simde/arm/neon/qadd.h	/^simde_vqadd_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vqadd_u64	simde/arm/neon/qadd.h	/^simde_vqadd_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vqadd_u8	simde/arm/neon/qadd.h	/^simde_vqadd_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vqaddb_s8	simde/arm/neon/qadd.h	/^simde_vqaddb_s8(int8_t a, int8_t b) {$/;"	f
simde_vqaddb_u8	simde/arm/neon/qadd.h	/^simde_vqaddb_u8(uint8_t a, uint8_t b) {$/;"	f
simde_vqaddd_s64	simde/arm/neon/qadd.h	/^simde_vqaddd_s64(int64_t a, int64_t b) {$/;"	f
simde_vqaddd_u64	simde/arm/neon/qadd.h	/^simde_vqaddd_u64(uint64_t a, uint64_t b) {$/;"	f
simde_vqaddh_s16	simde/arm/neon/qadd.h	/^simde_vqaddh_s16(int16_t a, int16_t b) {$/;"	f
simde_vqaddh_u16	simde/arm/neon/qadd.h	/^simde_vqaddh_u16(uint16_t a, uint16_t b) {$/;"	f
simde_vqaddq_s16	simde/arm/neon/qadd.h	/^simde_vqaddq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vqaddq_s32	simde/arm/neon/qadd.h	/^simde_vqaddq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vqaddq_s64	simde/arm/neon/qadd.h	/^simde_vqaddq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vqaddq_s8	simde/arm/neon/qadd.h	/^simde_vqaddq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vqaddq_u16	simde/arm/neon/qadd.h	/^simde_vqaddq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vqaddq_u32	simde/arm/neon/qadd.h	/^simde_vqaddq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vqaddq_u64	simde/arm/neon/qadd.h	/^simde_vqaddq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vqaddq_u8	simde/arm/neon/qadd.h	/^simde_vqaddq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vqadds_s32	simde/arm/neon/qadd.h	/^simde_vqadds_s32(int32_t a, int32_t b) {$/;"	f
simde_vqadds_u32	simde/arm/neon/qadd.h	/^simde_vqadds_u32(uint32_t a, uint32_t b) {$/;"	f
simde_vqdmulh_s16	simde/arm/neon/qdmulh.h	/^simde_vqdmulh_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vqdmulh_s32	simde/arm/neon/qdmulh.h	/^simde_vqdmulh_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vqdmulhq_s16	simde/arm/neon/qdmulh.h	/^simde_vqdmulhq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vqdmulhq_s32	simde/arm/neon/qdmulh.h	/^simde_vqdmulhq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vqdmull_s16	simde/arm/neon/qdmull.h	/^simde_vqdmull_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vqdmull_s32	simde/arm/neon/qdmull.h	/^simde_vqdmull_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vqdmullh_s16	simde/arm/neon/qdmull.h	/^simde_vqdmullh_s16(int16_t a, int16_t b) {$/;"	f
simde_vqdmulls_s32	simde/arm/neon/qdmull.h	/^simde_vqdmulls_s32(int32_t a, int32_t b) {$/;"	f
simde_vqmovn_high_s16	simde/arm/neon/qmovn_high.h	/^simde_vqmovn_high_s16(simde_int8x8_t r, simde_int16x8_t a) {$/;"	f
simde_vqmovn_high_s32	simde/arm/neon/qmovn_high.h	/^simde_vqmovn_high_s32(simde_int16x4_t r, simde_int32x4_t a) {$/;"	f
simde_vqmovn_high_s64	simde/arm/neon/qmovn_high.h	/^simde_vqmovn_high_s64(simde_int32x2_t r, simde_int64x2_t a) {$/;"	f
simde_vqmovn_high_u16	simde/arm/neon/qmovn_high.h	/^simde_vqmovn_high_u16(simde_uint8x8_t r, simde_uint16x8_t a) {$/;"	f
simde_vqmovn_high_u32	simde/arm/neon/qmovn_high.h	/^simde_vqmovn_high_u32(simde_uint16x4_t r, simde_uint32x4_t a) {$/;"	f
simde_vqmovn_high_u64	simde/arm/neon/qmovn_high.h	/^simde_vqmovn_high_u64(simde_uint32x2_t r, simde_uint64x2_t a) {$/;"	f
simde_vqmovn_s16	simde/arm/neon/qmovn.h	/^simde_vqmovn_s16(simde_int16x8_t a) {$/;"	f
simde_vqmovn_s32	simde/arm/neon/qmovn.h	/^simde_vqmovn_s32(simde_int32x4_t a) {$/;"	f
simde_vqmovn_s64	simde/arm/neon/qmovn.h	/^simde_vqmovn_s64(simde_int64x2_t a) {$/;"	f
simde_vqmovn_u16	simde/arm/neon/qmovn.h	/^simde_vqmovn_u16(simde_uint16x8_t a) {$/;"	f
simde_vqmovn_u32	simde/arm/neon/qmovn.h	/^simde_vqmovn_u32(simde_uint32x4_t a) {$/;"	f
simde_vqmovn_u64	simde/arm/neon/qmovn.h	/^simde_vqmovn_u64(simde_uint64x2_t a) {$/;"	f
simde_vqmovnd_s64	simde/arm/neon/qmovn.h	/^simde_vqmovnd_s64(int64_t a) {$/;"	f
simde_vqmovnd_u64	simde/arm/neon/qmovn.h	/^simde_vqmovnd_u64(uint64_t a) {$/;"	f
simde_vqmovnh_s16	simde/arm/neon/qmovn.h	/^simde_vqmovnh_s16(int16_t a) {$/;"	f
simde_vqmovnh_u16	simde/arm/neon/qmovn.h	/^simde_vqmovnh_u16(uint16_t a) {$/;"	f
simde_vqmovns_s32	simde/arm/neon/qmovn.h	/^simde_vqmovns_s32(int32_t a) {$/;"	f
simde_vqmovns_u32	simde/arm/neon/qmovn.h	/^simde_vqmovns_u32(uint32_t a) {$/;"	f
simde_vqmovun_s16	simde/arm/neon/qmovun.h	/^simde_vqmovun_s16(simde_int16x8_t a) {$/;"	f
simde_vqmovun_s32	simde/arm/neon/qmovun.h	/^simde_vqmovun_s32(simde_int32x4_t a) {$/;"	f
simde_vqmovun_s64	simde/arm/neon/qmovun.h	/^simde_vqmovun_s64(simde_int64x2_t a) {$/;"	f
simde_vqmovund_s64	simde/arm/neon/qmovun.h	/^simde_vqmovund_s64(int64_t a) {$/;"	f
simde_vqmovunh_s16	simde/arm/neon/qmovun.h	/^simde_vqmovunh_s16(int16_t a) {$/;"	f
simde_vqmovuns_s32	simde/arm/neon/qmovun.h	/^simde_vqmovuns_s32(int32_t a) {$/;"	f
simde_vqneg_s16	simde/arm/neon/qneg.h	/^simde_vqneg_s16(simde_int16x4_t a) {$/;"	f
simde_vqneg_s32	simde/arm/neon/qneg.h	/^simde_vqneg_s32(simde_int32x2_t a) {$/;"	f
simde_vqneg_s64	simde/arm/neon/qneg.h	/^simde_vqneg_s64(simde_int64x1_t a) {$/;"	f
simde_vqneg_s8	simde/arm/neon/qneg.h	/^simde_vqneg_s8(simde_int8x8_t a) {$/;"	f
simde_vqnegb_s8	simde/arm/neon/qneg.h	/^simde_vqnegb_s8(int8_t a) {$/;"	f
simde_vqnegd_s64	simde/arm/neon/qneg.h	/^simde_vqnegd_s64(int64_t a) {$/;"	f
simde_vqnegh_s16	simde/arm/neon/qneg.h	/^simde_vqnegh_s16(int16_t a) {$/;"	f
simde_vqnegq_s16	simde/arm/neon/qneg.h	/^simde_vqnegq_s16(simde_int16x8_t a) {$/;"	f
simde_vqnegq_s32	simde/arm/neon/qneg.h	/^simde_vqnegq_s32(simde_int32x4_t a) {$/;"	f
simde_vqnegq_s64	simde/arm/neon/qneg.h	/^simde_vqnegq_s64(simde_int64x2_t a) {$/;"	f
simde_vqnegq_s8	simde/arm/neon/qneg.h	/^simde_vqnegq_s8(simde_int8x16_t a) {$/;"	f
simde_vqnegs_s32	simde/arm/neon/qneg.h	/^simde_vqnegs_s32(int32_t a) {$/;"	f
simde_vqrdmulh_n_s16	simde/arm/neon/qrdmulh_n.h	/^simde_vqrdmulh_n_s16(simde_int16x4_t a, int16_t b) {$/;"	f
simde_vqrdmulh_n_s32	simde/arm/neon/qrdmulh_n.h	/^simde_vqrdmulh_n_s32(simde_int32x2_t a, int32_t b) {$/;"	f
simde_vqrdmulh_s16	simde/arm/neon/qrdmulh.h	/^simde_vqrdmulh_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vqrdmulh_s32	simde/arm/neon/qrdmulh.h	/^simde_vqrdmulh_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vqrdmulhh_s16	simde/arm/neon/qrdmulh.h	/^simde_vqrdmulhh_s16(int16_t a, int16_t b) {$/;"	f
simde_vqrdmulhq_n_s16	simde/arm/neon/qrdmulh_n.h	/^simde_vqrdmulhq_n_s16(simde_int16x8_t a, int16_t b) {$/;"	f
simde_vqrdmulhq_n_s32	simde/arm/neon/qrdmulh_n.h	/^simde_vqrdmulhq_n_s32(simde_int32x4_t a, int32_t b) {$/;"	f
simde_vqrdmulhq_s16	simde/arm/neon/qrdmulh.h	/^simde_vqrdmulhq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vqrdmulhq_s32	simde/arm/neon/qrdmulh.h	/^simde_vqrdmulhq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vqrdmulhs_s32	simde/arm/neon/qrdmulh.h	/^simde_vqrdmulhs_s32(int32_t a, int32_t b) {$/;"	f
simde_vqshl_s16	simde/arm/neon/qshl.h	/^simde_vqshl_s16 (const simde_int16x4_t a, const simde_int16x4_t b) {$/;"	f
simde_vqshl_s32	simde/arm/neon/qshl.h	/^simde_vqshl_s32 (const simde_int32x2_t a, const simde_int32x2_t b) {$/;"	f
simde_vqshl_s64	simde/arm/neon/qshl.h	/^simde_vqshl_s64 (const simde_int64x1_t a, const simde_int64x1_t b) {$/;"	f
simde_vqshl_s8	simde/arm/neon/qshl.h	/^simde_vqshl_s8 (const simde_int8x8_t a, const simde_int8x8_t b) {$/;"	f
simde_vqshl_u16	simde/arm/neon/qshl.h	/^simde_vqshl_u16 (const simde_uint16x4_t a, const simde_int16x4_t b) {$/;"	f
simde_vqshl_u32	simde/arm/neon/qshl.h	/^simde_vqshl_u32 (const simde_uint32x2_t a, const simde_int32x2_t b) {$/;"	f
simde_vqshl_u64	simde/arm/neon/qshl.h	/^simde_vqshl_u64 (const simde_uint64x1_t a, const simde_int64x1_t b) {$/;"	f
simde_vqshl_u8	simde/arm/neon/qshl.h	/^simde_vqshl_u8 (const simde_uint8x8_t a, const simde_int8x8_t b) {$/;"	f
simde_vqshlb_s8	simde/arm/neon/qshl.h	/^simde_vqshlb_s8(int8_t a, int8_t b) {$/;"	f
simde_vqshlb_u8	simde/arm/neon/qshl.h	/^simde_vqshlb_u8(uint8_t a, int8_t b) {$/;"	f
simde_vqshld_s64	simde/arm/neon/qshl.h	/^simde_vqshld_s64(int64_t a, int64_t b) {$/;"	f
simde_vqshld_u64	simde/arm/neon/qshl.h	/^simde_vqshld_u64(uint64_t a, int64_t b) {$/;"	f
simde_vqshlh_s16	simde/arm/neon/qshl.h	/^simde_vqshlh_s16(int16_t a, int16_t b) {$/;"	f
simde_vqshlh_u16	simde/arm/neon/qshl.h	/^simde_vqshlh_u16(uint16_t a, int16_t b) {$/;"	f
simde_vqshlq_s16	simde/arm/neon/qshl.h	/^simde_vqshlq_s16 (const simde_int16x8_t a, const simde_int16x8_t b) {$/;"	f
simde_vqshlq_s32	simde/arm/neon/qshl.h	/^simde_vqshlq_s32 (const simde_int32x4_t a, const simde_int32x4_t b) {$/;"	f
simde_vqshlq_s64	simde/arm/neon/qshl.h	/^simde_vqshlq_s64 (const simde_int64x2_t a, const simde_int64x2_t b) {$/;"	f
simde_vqshlq_s8	simde/arm/neon/qshl.h	/^simde_vqshlq_s8 (const simde_int8x16_t a, const simde_int8x16_t b) {$/;"	f
simde_vqshlq_u16	simde/arm/neon/qshl.h	/^simde_vqshlq_u16 (const simde_uint16x8_t a, const simde_int16x8_t b) {$/;"	f
simde_vqshlq_u32	simde/arm/neon/qshl.h	/^simde_vqshlq_u32 (const simde_uint32x4_t a, const simde_int32x4_t b) {$/;"	f
simde_vqshlq_u64	simde/arm/neon/qshl.h	/^simde_vqshlq_u64 (const simde_uint64x2_t a, const simde_int64x2_t b) {$/;"	f
simde_vqshlq_u8	simde/arm/neon/qshl.h	/^simde_vqshlq_u8 (const simde_uint8x16_t a, const simde_int8x16_t b) {$/;"	f
simde_vqshls_s32	simde/arm/neon/qshl.h	/^simde_vqshls_s32(int32_t a, int32_t b) {$/;"	f
simde_vqshls_u32	simde/arm/neon/qshl.h	/^simde_vqshls_u32(uint32_t a, int32_t b) {$/;"	f
simde_vqsub_s16	simde/arm/neon/qsub.h	/^simde_vqsub_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vqsub_s32	simde/arm/neon/qsub.h	/^simde_vqsub_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vqsub_s64	simde/arm/neon/qsub.h	/^simde_vqsub_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vqsub_s8	simde/arm/neon/qsub.h	/^simde_vqsub_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vqsub_u16	simde/arm/neon/qsub.h	/^simde_vqsub_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vqsub_u32	simde/arm/neon/qsub.h	/^simde_vqsub_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vqsub_u64	simde/arm/neon/qsub.h	/^simde_vqsub_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vqsub_u8	simde/arm/neon/qsub.h	/^simde_vqsub_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vqsubb_s8	simde/arm/neon/qsub.h	/^simde_vqsubb_s8(int8_t a, int8_t b) {$/;"	f
simde_vqsubb_u8	simde/arm/neon/qsub.h	/^simde_vqsubb_u8(uint8_t a, uint8_t b) {$/;"	f
simde_vqsubd_s64	simde/arm/neon/qsub.h	/^simde_vqsubd_s64(int64_t a, int64_t b) {$/;"	f
simde_vqsubd_u64	simde/arm/neon/qsub.h	/^simde_vqsubd_u64(uint64_t a, uint64_t b) {$/;"	f
simde_vqsubh_s16	simde/arm/neon/qsub.h	/^simde_vqsubh_s16(int16_t a, int16_t b) {$/;"	f
simde_vqsubh_u16	simde/arm/neon/qsub.h	/^simde_vqsubh_u16(uint16_t a, uint16_t b) {$/;"	f
simde_vqsubq_s16	simde/arm/neon/qsub.h	/^simde_vqsubq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vqsubq_s32	simde/arm/neon/qsub.h	/^simde_vqsubq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vqsubq_s64	simde/arm/neon/qsub.h	/^simde_vqsubq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vqsubq_s8	simde/arm/neon/qsub.h	/^simde_vqsubq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vqsubq_u16	simde/arm/neon/qsub.h	/^simde_vqsubq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vqsubq_u32	simde/arm/neon/qsub.h	/^simde_vqsubq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vqsubq_u64	simde/arm/neon/qsub.h	/^simde_vqsubq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vqsubq_u8	simde/arm/neon/qsub.h	/^simde_vqsubq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vqsubs_s32	simde/arm/neon/qsub.h	/^simde_vqsubs_s32(int32_t a, int32_t b) {$/;"	f
simde_vqsubs_u32	simde/arm/neon/qsub.h	/^simde_vqsubs_u32(uint32_t a, uint32_t b) {$/;"	f
simde_vqtbl1_s8	simde/arm/neon/qtbl.h	/^simde_vqtbl1_s8(simde_int8x16_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbl1_u8	simde/arm/neon/qtbl.h	/^simde_vqtbl1_u8(simde_uint8x16_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbl1q_s8	simde/arm/neon/qtbl.h	/^simde_vqtbl1q_s8(simde_int8x16_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbl1q_u8	simde/arm/neon/qtbl.h	/^simde_vqtbl1q_u8(simde_uint8x16_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbl2_s8	simde/arm/neon/qtbl.h	/^simde_vqtbl2_s8(simde_int8x16x2_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbl2_u8	simde/arm/neon/qtbl.h	/^simde_vqtbl2_u8(simde_uint8x16x2_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbl2q_s8	simde/arm/neon/qtbl.h	/^simde_vqtbl2q_s8(simde_int8x16x2_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbl2q_u8	simde/arm/neon/qtbl.h	/^simde_vqtbl2q_u8(simde_uint8x16x2_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbl3_s8	simde/arm/neon/qtbl.h	/^simde_vqtbl3_s8(simde_int8x16x3_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbl3_u8	simde/arm/neon/qtbl.h	/^simde_vqtbl3_u8(simde_uint8x16x3_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbl3q_s8	simde/arm/neon/qtbl.h	/^simde_vqtbl3q_s8(simde_int8x16x3_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbl3q_u8	simde/arm/neon/qtbl.h	/^simde_vqtbl3q_u8(simde_uint8x16x3_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbl4_s8	simde/arm/neon/qtbl.h	/^simde_vqtbl4_s8(simde_int8x16x4_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbl4_u8	simde/arm/neon/qtbl.h	/^simde_vqtbl4_u8(simde_uint8x16x4_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbl4q_s8	simde/arm/neon/qtbl.h	/^simde_vqtbl4q_s8(simde_int8x16x4_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbl4q_u8	simde/arm/neon/qtbl.h	/^simde_vqtbl4q_u8(simde_uint8x16x4_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbx1_s8	simde/arm/neon/qtbx.h	/^simde_vqtbx1_s8(simde_int8x8_t a, simde_int8x16_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbx1_u8	simde/arm/neon/qtbx.h	/^simde_vqtbx1_u8(simde_uint8x8_t a, simde_uint8x16_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbx1q_s8	simde/arm/neon/qtbx.h	/^simde_vqtbx1q_s8(simde_int8x16_t a, simde_int8x16_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbx1q_u8	simde/arm/neon/qtbx.h	/^simde_vqtbx1q_u8(simde_uint8x16_t a, simde_uint8x16_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbx2_s8	simde/arm/neon/qtbx.h	/^simde_vqtbx2_s8(simde_int8x8_t a, simde_int8x16x2_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbx2_u8	simde/arm/neon/qtbx.h	/^simde_vqtbx2_u8(simde_uint8x8_t a, simde_uint8x16x2_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbx2q_s8	simde/arm/neon/qtbx.h	/^simde_vqtbx2q_s8(simde_int8x16_t a, simde_int8x16x2_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbx2q_u8	simde/arm/neon/qtbx.h	/^simde_vqtbx2q_u8(simde_uint8x16_t a, simde_uint8x16x2_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbx3_s8	simde/arm/neon/qtbx.h	/^simde_vqtbx3_s8(simde_int8x8_t a, simde_int8x16x3_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbx3_u8	simde/arm/neon/qtbx.h	/^simde_vqtbx3_u8(simde_uint8x8_t a, simde_uint8x16x3_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbx3q_s8	simde/arm/neon/qtbx.h	/^simde_vqtbx3q_s8(simde_int8x16_t a, simde_int8x16x3_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbx3q_u8	simde/arm/neon/qtbx.h	/^simde_vqtbx3q_u8(simde_uint8x16_t a, simde_uint8x16x3_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbx4_s8	simde/arm/neon/qtbx.h	/^simde_vqtbx4_s8(simde_int8x8_t a, simde_int8x16x4_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbx4_u8	simde/arm/neon/qtbx.h	/^simde_vqtbx4_u8(simde_uint8x8_t a, simde_uint8x16x4_t t, simde_uint8x8_t idx) {$/;"	f
simde_vqtbx4q_s8	simde/arm/neon/qtbx.h	/^simde_vqtbx4q_s8(simde_int8x16_t a, simde_int8x16x4_t t, simde_uint8x16_t idx) {$/;"	f
simde_vqtbx4q_u8	simde/arm/neon/qtbx.h	/^simde_vqtbx4q_u8(simde_uint8x16_t a, simde_uint8x16x4_t t, simde_uint8x16_t idx) {$/;"	f
simde_vrbit_s8	simde/arm/neon/rbit.h	/^simde_vrbit_s8(simde_int8x8_t a) {$/;"	f
simde_vrbit_u8	simde/arm/neon/rbit.h	/^simde_vrbit_u8(simde_uint8x8_t a) {$/;"	f
simde_vrbitq_s8	simde/arm/neon/rbit.h	/^simde_vrbitq_s8(simde_int8x16_t a) {$/;"	f
simde_vrbitq_u8	simde/arm/neon/rbit.h	/^simde_vrbitq_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpret_f32_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_f32_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_f32_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_f32_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_f32_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_f32_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_f32_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_f32_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpret_f32_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f32_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_f64_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_f64_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_f64_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_f64_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_f64_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_f64_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_f64_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_f64_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpret_f64_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_f64_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_s16_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_s16_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_s16_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_s16_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_s16_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_s16_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_s16_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_s16_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpret_s16_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s16_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_s32_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_s32_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_s32_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_s32_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_s32_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_s32_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_s32_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_s32_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpret_s32_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s32_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_s64_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_s64_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_s64_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_s64_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_s64_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_s64_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_s64_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_s64_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpret_s64_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s64_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_s8_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_s8_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_s8_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_s8_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_s8_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_s8_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_s8_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_s8_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpret_s8_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_s8_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_u16_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_u16_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_u16_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_u16_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_u16_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_u16_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_u16_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_u16_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpret_u16_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u16_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_u32_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_u32_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_u32_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_u32_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_u32_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_u32_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_u32_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_u32_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpret_u32_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u32_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_u64_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_u64_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_u64_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_u64_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_u64_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_u64_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_u64_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_u64_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_u64_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u64_u8(simde_uint8x8_t a) {$/;"	f
simde_vreinterpret_u8_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_f32(simde_float32x2_t a) {$/;"	f
simde_vreinterpret_u8_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_f64(simde_float64x1_t a) {$/;"	f
simde_vreinterpret_u8_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_s16(simde_int16x4_t a) {$/;"	f
simde_vreinterpret_u8_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_s32(simde_int32x2_t a) {$/;"	f
simde_vreinterpret_u8_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_s64(simde_int64x1_t a) {$/;"	f
simde_vreinterpret_u8_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_s8(simde_int8x8_t a) {$/;"	f
simde_vreinterpret_u8_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_u16(simde_uint16x4_t a) {$/;"	f
simde_vreinterpret_u8_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_u32(simde_uint32x2_t a) {$/;"	f
simde_vreinterpret_u8_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpret_u8_u64(simde_uint64x1_t a) {$/;"	f
simde_vreinterpretq_f32_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_f32_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_f32_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_f32_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_f32_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_f32_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_f32_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_f32_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_u64(simde_uint64x2_t a) {$/;"	f
simde_vreinterpretq_f32_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f32_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_f64_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_f64_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_f64_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_f64_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_f64_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_f64_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_f64_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_f64_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_u64(simde_uint64x2_t a) {$/;"	f
simde_vreinterpretq_f64_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_f64_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_s16_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_s16_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_s16_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_s16_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_s16_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_s16_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_s16_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_s16_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_u64(simde_uint64x2_t a) {$/;"	f
simde_vreinterpretq_s16_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s16_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_s32_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_s32_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_s32_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_s32_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_s32_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_s32_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_s32_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_s32_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_u64(simde_uint64x2_t a) {$/;"	f
simde_vreinterpretq_s32_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s32_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_s64_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_s64_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_s64_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_s64_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_s64_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_s64_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_s64_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_s64_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_u64(simde_uint64x2_t a) {$/;"	f
simde_vreinterpretq_s64_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s64_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_s8_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_s8_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_s8_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_s8_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_s8_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_s8_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_s8_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_s8_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_u64(simde_uint64x2_t a) {$/;"	f
simde_vreinterpretq_s8_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_s8_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_u16_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_u16_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_u16_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_u16_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_u16_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_u16_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_u16_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_u16_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_u64(simde_uint64x2_t a) {$/;"	f
simde_vreinterpretq_u16_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u16_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_u32_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_u32_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_u32_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_u32_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_u32_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_u32_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_u32_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_u32_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_u64(simde_uint64x2_t a) {$/;"	f
simde_vreinterpretq_u32_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u32_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_u64_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_u64_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_u64_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_u64_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_u64_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_u64_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_u64_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_u64_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_u64_u8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u64_u8(simde_uint8x16_t a) {$/;"	f
simde_vreinterpretq_u8_f32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_f32(simde_float32x4_t a) {$/;"	f
simde_vreinterpretq_u8_f64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_f64(simde_float64x2_t a) {$/;"	f
simde_vreinterpretq_u8_s16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_s16(simde_int16x8_t a) {$/;"	f
simde_vreinterpretq_u8_s32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_s32(simde_int32x4_t a) {$/;"	f
simde_vreinterpretq_u8_s64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_s64(simde_int64x2_t a) {$/;"	f
simde_vreinterpretq_u8_s8	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_s8(simde_int8x16_t a) {$/;"	f
simde_vreinterpretq_u8_u16	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_u16(simde_uint16x8_t a) {$/;"	f
simde_vreinterpretq_u8_u32	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_u32(simde_uint32x4_t a) {$/;"	f
simde_vreinterpretq_u8_u64	simde/arm/neon/reinterpret.h	/^simde_vreinterpretq_u8_u64(simde_uint64x2_t a) {$/;"	f
simde_vrev16_s8	simde/arm/neon/rev16.h	/^simde_vrev16_s8(simde_int8x8_t a) {$/;"	f
simde_vrev16_u8	simde/arm/neon/rev16.h	/^simde_vrev16_u8(simde_uint8x8_t a) {$/;"	f
simde_vrev16q_s8	simde/arm/neon/rev16.h	/^simde_vrev16q_s8(simde_int8x16_t a) {$/;"	f
simde_vrev16q_u8	simde/arm/neon/rev16.h	/^simde_vrev16q_u8(simde_uint8x16_t a) {$/;"	f
simde_vrev32_s16	simde/arm/neon/rev32.h	/^simde_vrev32_s16(simde_int16x4_t a) {$/;"	f
simde_vrev32_s8	simde/arm/neon/rev32.h	/^simde_vrev32_s8(simde_int8x8_t a) {$/;"	f
simde_vrev32_u16	simde/arm/neon/rev32.h	/^simde_vrev32_u16(simde_uint16x4_t a) {$/;"	f
simde_vrev32_u8	simde/arm/neon/rev32.h	/^simde_vrev32_u8(simde_uint8x8_t a) {$/;"	f
simde_vrev32q_s16	simde/arm/neon/rev32.h	/^simde_vrev32q_s16(simde_int16x8_t a) {$/;"	f
simde_vrev32q_s8	simde/arm/neon/rev32.h	/^simde_vrev32q_s8(simde_int8x16_t a) {$/;"	f
simde_vrev32q_u16	simde/arm/neon/rev32.h	/^simde_vrev32q_u16(simde_uint16x8_t a) {$/;"	f
simde_vrev32q_u8	simde/arm/neon/rev32.h	/^simde_vrev32q_u8(simde_uint8x16_t a) {$/;"	f
simde_vrev64_f32	simde/arm/neon/rev64.h	/^simde_vrev64_f32(simde_float32x2_t a) {$/;"	f
simde_vrev64_s16	simde/arm/neon/rev64.h	/^simde_vrev64_s16(simde_int16x4_t a) {$/;"	f
simde_vrev64_s32	simde/arm/neon/rev64.h	/^simde_vrev64_s32(simde_int32x2_t a) {$/;"	f
simde_vrev64_s8	simde/arm/neon/rev64.h	/^simde_vrev64_s8(simde_int8x8_t a) {$/;"	f
simde_vrev64_u16	simde/arm/neon/rev64.h	/^simde_vrev64_u16(simde_uint16x4_t a) {$/;"	f
simde_vrev64_u32	simde/arm/neon/rev64.h	/^simde_vrev64_u32(simde_uint32x2_t a) {$/;"	f
simde_vrev64_u8	simde/arm/neon/rev64.h	/^simde_vrev64_u8(simde_uint8x8_t a) {$/;"	f
simde_vrev64q_f32	simde/arm/neon/rev64.h	/^simde_vrev64q_f32(simde_float32x4_t a) {$/;"	f
simde_vrev64q_s16	simde/arm/neon/rev64.h	/^simde_vrev64q_s16(simde_int16x8_t a) {$/;"	f
simde_vrev64q_s32	simde/arm/neon/rev64.h	/^simde_vrev64q_s32(simde_int32x4_t a) {$/;"	f
simde_vrev64q_s8	simde/arm/neon/rev64.h	/^simde_vrev64q_s8(simde_int8x16_t a) {$/;"	f
simde_vrev64q_u16	simde/arm/neon/rev64.h	/^simde_vrev64q_u16(simde_uint16x8_t a) {$/;"	f
simde_vrev64q_u32	simde/arm/neon/rev64.h	/^simde_vrev64q_u32(simde_uint32x4_t a) {$/;"	f
simde_vrev64q_u8	simde/arm/neon/rev64.h	/^simde_vrev64q_u8(simde_uint8x16_t a) {$/;"	f
simde_vrhadd_s16	simde/arm/neon/rhadd.h	/^simde_vrhadd_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vrhadd_s32	simde/arm/neon/rhadd.h	/^simde_vrhadd_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vrhadd_s8	simde/arm/neon/rhadd.h	/^simde_vrhadd_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vrhadd_u16	simde/arm/neon/rhadd.h	/^simde_vrhadd_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vrhadd_u32	simde/arm/neon/rhadd.h	/^simde_vrhadd_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vrhadd_u8	simde/arm/neon/rhadd.h	/^simde_vrhadd_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vrhaddq_s16	simde/arm/neon/rhadd.h	/^simde_vrhaddq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vrhaddq_s32	simde/arm/neon/rhadd.h	/^simde_vrhaddq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vrhaddq_s8	simde/arm/neon/rhadd.h	/^simde_vrhaddq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vrhaddq_u16	simde/arm/neon/rhadd.h	/^simde_vrhaddq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vrhaddq_u32	simde/arm/neon/rhadd.h	/^simde_vrhaddq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vrhaddq_u8	simde/arm/neon/rhadd.h	/^simde_vrhaddq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vrnd_f32	simde/arm/neon/rnd.h	/^simde_vrnd_f32(simde_float32x2_t a) {$/;"	f
simde_vrnd_f64	simde/arm/neon/rnd.h	/^simde_vrnd_f64(simde_float64x1_t a) {$/;"	f
simde_vrndq_f32	simde/arm/neon/rnd.h	/^simde_vrndq_f32(simde_float32x4_t a) {$/;"	f
simde_vrndq_f64	simde/arm/neon/rnd.h	/^simde_vrndq_f64(simde_float64x2_t a) {$/;"	f
simde_vrshl_s16	simde/arm/neon/rshl.h	/^simde_vrshl_s16 (const simde_int16x4_t a, const simde_int16x4_t b) {$/;"	f
simde_vrshl_s32	simde/arm/neon/rshl.h	/^simde_vrshl_s32 (const simde_int32x2_t a, const simde_int32x2_t b) {$/;"	f
simde_vrshl_s64	simde/arm/neon/rshl.h	/^simde_vrshl_s64 (const simde_int64x1_t a, const simde_int64x1_t b) {$/;"	f
simde_vrshl_s8	simde/arm/neon/rshl.h	/^simde_vrshl_s8 (const simde_int8x8_t a, const simde_int8x8_t b) {$/;"	f
simde_vrshl_u16	simde/arm/neon/rshl.h	/^simde_vrshl_u16 (const simde_uint16x4_t a, const simde_int16x4_t b) {$/;"	f
simde_vrshl_u32	simde/arm/neon/rshl.h	/^simde_vrshl_u32 (const simde_uint32x2_t a, const simde_int32x2_t b) {$/;"	f
simde_vrshl_u64	simde/arm/neon/rshl.h	/^simde_vrshl_u64 (const simde_uint64x1_t a, const simde_int64x1_t b) {$/;"	f
simde_vrshl_u8	simde/arm/neon/rshl.h	/^simde_vrshl_u8 (const simde_uint8x8_t a, const simde_int8x8_t b) {$/;"	f
simde_vrshlq_s16	simde/arm/neon/rshl.h	/^simde_vrshlq_s16 (const simde_int16x8_t a, const simde_int16x8_t b) {$/;"	f
simde_vrshlq_s32	simde/arm/neon/rshl.h	/^simde_vrshlq_s32 (const simde_int32x4_t a, const simde_int32x4_t b) {$/;"	f
simde_vrshlq_s64	simde/arm/neon/rshl.h	/^simde_vrshlq_s64 (const simde_int64x2_t a, const simde_int64x2_t b) {$/;"	f
simde_vrshlq_s8	simde/arm/neon/rshl.h	/^simde_vrshlq_s8 (const simde_int8x16_t a, const simde_int8x16_t b) {$/;"	f
simde_vrshlq_u16	simde/arm/neon/rshl.h	/^simde_vrshlq_u16 (const simde_uint16x8_t a, const simde_int16x8_t b) {$/;"	f
simde_vrshlq_u32	simde/arm/neon/rshl.h	/^simde_vrshlq_u32 (const simde_uint32x4_t a, const simde_int32x4_t b) {$/;"	f
simde_vrshlq_u64	simde/arm/neon/rshl.h	/^simde_vrshlq_u64 (const simde_uint64x2_t a, const simde_int64x2_t b) {$/;"	f
simde_vrshlq_u8	simde/arm/neon/rshl.h	/^simde_vrshlq_u8 (const simde_uint8x16_t a, const simde_int8x16_t b) {$/;"	f
simde_vrshr_n_s16	simde/arm/neon/rshr_n.h	299;"	d
simde_vrshr_n_s16	simde/arm/neon/rshr_n.h	301;"	d
simde_vrshr_n_s32	simde/arm/neon/rshr_n.h	326;"	d
simde_vrshr_n_s32	simde/arm/neon/rshr_n.h	328;"	d
simde_vrshr_n_s64	simde/arm/neon/rshr_n.h	353;"	d
simde_vrshr_n_s64	simde/arm/neon/rshr_n.h	355;"	d
simde_vrshr_n_s8	simde/arm/neon/rshr_n.h	272;"	d
simde_vrshr_n_s8	simde/arm/neon/rshr_n.h	274;"	d
simde_vrshr_n_u16	simde/arm/neon/rshr_n.h	406;"	d
simde_vrshr_n_u16	simde/arm/neon/rshr_n.h	408;"	d
simde_vrshr_n_u32	simde/arm/neon/rshr_n.h	432;"	d
simde_vrshr_n_u32	simde/arm/neon/rshr_n.h	434;"	d
simde_vrshr_n_u64	simde/arm/neon/rshr_n.h	458;"	d
simde_vrshr_n_u64	simde/arm/neon/rshr_n.h	460;"	d
simde_vrshr_n_u8	simde/arm/neon/rshr_n.h	380;"	d
simde_vrshr_n_u8	simde/arm/neon/rshr_n.h	382;"	d
simde_vrshrq_n_s16	simde/arm/neon/rshr_n.h	87;"	d
simde_vrshrq_n_s16	simde/arm/neon/rshr_n.h	89;"	d
simde_vrshrq_n_s32	simde/arm/neon/rshr_n.h	114;"	d
simde_vrshrq_n_s32	simde/arm/neon/rshr_n.h	116;"	d
simde_vrshrq_n_s64	simde/arm/neon/rshr_n.h	141;"	d
simde_vrshrq_n_s64	simde/arm/neon/rshr_n.h	143;"	d
simde_vrshrq_n_s8	simde/arm/neon/rshr_n.h	60;"	d
simde_vrshrq_n_s8	simde/arm/neon/rshr_n.h	62;"	d
simde_vrshrq_n_u16	simde/arm/neon/rshr_n.h	194;"	d
simde_vrshrq_n_u16	simde/arm/neon/rshr_n.h	196;"	d
simde_vrshrq_n_u32	simde/arm/neon/rshr_n.h	220;"	d
simde_vrshrq_n_u32	simde/arm/neon/rshr_n.h	222;"	d
simde_vrshrq_n_u64	simde/arm/neon/rshr_n.h	246;"	d
simde_vrshrq_n_u64	simde/arm/neon/rshr_n.h	248;"	d
simde_vrshrq_n_u8	simde/arm/neon/rshr_n.h	168;"	d
simde_vrshrq_n_u8	simde/arm/neon/rshr_n.h	170;"	d
simde_vrsra_n_s16	simde/arm/neon/rsra_n.h	137;"	d
simde_vrsra_n_s32	simde/arm/neon/rsra_n.h	147;"	d
simde_vrsra_n_s64	simde/arm/neon/rsra_n.h	157;"	d
simde_vrsra_n_s8	simde/arm/neon/rsra_n.h	127;"	d
simde_vrsra_n_u16	simde/arm/neon/rsra_n.h	177;"	d
simde_vrsra_n_u32	simde/arm/neon/rsra_n.h	187;"	d
simde_vrsra_n_u64	simde/arm/neon/rsra_n.h	197;"	d
simde_vrsra_n_u8	simde/arm/neon/rsra_n.h	167;"	d
simde_vrsraq_n_s16	simde/arm/neon/rsra_n.h	57;"	d
simde_vrsraq_n_s32	simde/arm/neon/rsra_n.h	67;"	d
simde_vrsraq_n_s64	simde/arm/neon/rsra_n.h	77;"	d
simde_vrsraq_n_s8	simde/arm/neon/rsra_n.h	47;"	d
simde_vrsraq_n_u16	simde/arm/neon/rsra_n.h	97;"	d
simde_vrsraq_n_u32	simde/arm/neon/rsra_n.h	107;"	d
simde_vrsraq_n_u64	simde/arm/neon/rsra_n.h	117;"	d
simde_vrsraq_n_u8	simde/arm/neon/rsra_n.h	87;"	d
simde_vshl_n_s16	simde/arm/neon/shl_n.h	87;"	d
simde_vshl_n_s16	simde/arm/neon/shl_n.h	89;"	d
simde_vshl_n_s32	simde/arm/neon/shl_n.h	116;"	d
simde_vshl_n_s32	simde/arm/neon/shl_n.h	118;"	d
simde_vshl_n_s64	simde/arm/neon/shl_n.h	145;"	d
simde_vshl_n_s64	simde/arm/neon/shl_n.h	147;"	d
simde_vshl_n_s8	simde/arm/neon/shl_n.h	57;"	d
simde_vshl_n_s8	simde/arm/neon/shl_n.h	59;"	d
simde_vshl_n_u16	simde/arm/neon/shl_n.h	204;"	d
simde_vshl_n_u16	simde/arm/neon/shl_n.h	206;"	d
simde_vshl_n_u32	simde/arm/neon/shl_n.h	233;"	d
simde_vshl_n_u32	simde/arm/neon/shl_n.h	235;"	d
simde_vshl_n_u64	simde/arm/neon/shl_n.h	262;"	d
simde_vshl_n_u64	simde/arm/neon/shl_n.h	264;"	d
simde_vshl_n_u8	simde/arm/neon/shl_n.h	174;"	d
simde_vshl_n_u8	simde/arm/neon/shl_n.h	176;"	d
simde_vshl_s16	simde/arm/neon/shl.h	/^simde_vshl_s16 (const simde_int16x4_t a, const simde_int16x4_t b) {$/;"	f
simde_vshl_s32	simde/arm/neon/shl.h	/^simde_vshl_s32 (const simde_int32x2_t a, const simde_int32x2_t b) {$/;"	f
simde_vshl_s64	simde/arm/neon/shl.h	/^simde_vshl_s64 (const simde_int64x1_t a, const simde_int64x1_t b) {$/;"	f
simde_vshl_s8	simde/arm/neon/shl.h	/^simde_vshl_s8 (const simde_int8x8_t a, const simde_int8x8_t b) {$/;"	f
simde_vshl_u16	simde/arm/neon/shl.h	/^simde_vshl_u16 (const simde_uint16x4_t a, const simde_int16x4_t b) {$/;"	f
simde_vshl_u32	simde/arm/neon/shl.h	/^simde_vshl_u32 (const simde_uint32x2_t a, const simde_int32x2_t b) {$/;"	f
simde_vshl_u64	simde/arm/neon/shl.h	/^simde_vshl_u64 (const simde_uint64x1_t a, const simde_int64x1_t b) {$/;"	f
simde_vshl_u8	simde/arm/neon/shl.h	/^simde_vshl_u8 (const simde_uint8x8_t a, const simde_int8x8_t b) {$/;"	f
simde_vshlq_n_s16	simde/arm/neon/shl_n.h	335;"	d
simde_vshlq_n_s16	simde/arm/neon/shl_n.h	337;"	d
simde_vshlq_n_s32	simde/arm/neon/shl_n.h	370;"	d
simde_vshlq_n_s32	simde/arm/neon/shl_n.h	372;"	d
simde_vshlq_n_s64	simde/arm/neon/shl_n.h	405;"	d
simde_vshlq_n_s64	simde/arm/neon/shl_n.h	407;"	d
simde_vshlq_n_s8	simde/arm/neon/shl_n.h	300;"	d
simde_vshlq_n_s8	simde/arm/neon/shl_n.h	302;"	d
simde_vshlq_n_u16	simde/arm/neon/shl_n.h	478;"	d
simde_vshlq_n_u16	simde/arm/neon/shl_n.h	480;"	d
simde_vshlq_n_u32	simde/arm/neon/shl_n.h	513;"	d
simde_vshlq_n_u32	simde/arm/neon/shl_n.h	515;"	d
simde_vshlq_n_u64	simde/arm/neon/shl_n.h	548;"	d
simde_vshlq_n_u64	simde/arm/neon/shl_n.h	550;"	d
simde_vshlq_n_u8	simde/arm/neon/shl_n.h	443;"	d
simde_vshlq_n_u8	simde/arm/neon/shl_n.h	445;"	d
simde_vshlq_s16	simde/arm/neon/shl.h	/^simde_vshlq_s16 (const simde_int16x8_t a, const simde_int16x8_t b) {$/;"	f
simde_vshlq_s32	simde/arm/neon/shl.h	/^simde_vshlq_s32 (const simde_int32x4_t a, const simde_int32x4_t b) {$/;"	f
simde_vshlq_s64	simde/arm/neon/shl.h	/^simde_vshlq_s64 (const simde_int64x2_t a, const simde_int64x2_t b) {$/;"	f
simde_vshlq_s8	simde/arm/neon/shl.h	/^simde_vshlq_s8 (const simde_int8x16_t a, const simde_int8x16_t b) {$/;"	f
simde_vshlq_u16	simde/arm/neon/shl.h	/^simde_vshlq_u16 (const simde_uint16x8_t a, const simde_int16x8_t b) {$/;"	f
simde_vshlq_u32	simde/arm/neon/shl.h	/^simde_vshlq_u32 (const simde_uint32x4_t a, const simde_int32x4_t b) {$/;"	f
simde_vshlq_u64	simde/arm/neon/shl.h	/^simde_vshlq_u64 (const simde_uint64x2_t a, const simde_int64x2_t b) {$/;"	f
simde_vshlq_u8	simde/arm/neon/shl.h	/^simde_vshlq_u8 (const simde_uint8x16_t a, const simde_int8x16_t b) {$/;"	f
simde_vshr_n_s16	simde/arm/neon/shr_n.h	90;"	d
simde_vshr_n_s16	simde/arm/neon/shr_n.h	92;"	d
simde_vshr_n_s32	simde/arm/neon/shr_n.h	120;"	d
simde_vshr_n_s32	simde/arm/neon/shr_n.h	122;"	d
simde_vshr_n_s64	simde/arm/neon/shr_n.h	150;"	d
simde_vshr_n_s8	simde/arm/neon/shr_n.h	58;"	d
simde_vshr_n_s8	simde/arm/neon/shr_n.h	60;"	d
simde_vshr_n_u16	simde/arm/neon/shr_n.h	215;"	d
simde_vshr_n_u16	simde/arm/neon/shr_n.h	217;"	d
simde_vshr_n_u32	simde/arm/neon/shr_n.h	248;"	d
simde_vshr_n_u32	simde/arm/neon/shr_n.h	250;"	d
simde_vshr_n_u64	simde/arm/neon/shr_n.h	281;"	d
simde_vshr_n_u64	simde/arm/neon/shr_n.h	283;"	d
simde_vshr_n_u8	simde/arm/neon/shr_n.h	181;"	d
simde_vshr_n_u8	simde/arm/neon/shr_n.h	183;"	d
simde_vshrq_n_s16	simde/arm/neon/shr_n.h	365;"	d
simde_vshrq_n_s16	simde/arm/neon/shr_n.h	367;"	d
simde_vshrq_n_s32	simde/arm/neon/shr_n.h	401;"	d
simde_vshrq_n_s32	simde/arm/neon/shr_n.h	403;"	d
simde_vshrq_n_s64	simde/arm/neon/shr_n.h	436;"	d
simde_vshrq_n_s64	simde/arm/neon/shr_n.h	438;"	d
simde_vshrq_n_s8	simde/arm/neon/shr_n.h	329;"	d
simde_vshrq_n_s8	simde/arm/neon/shr_n.h	331;"	d
simde_vshrq_n_u16	simde/arm/neon/shr_n.h	519;"	d
simde_vshrq_n_u16	simde/arm/neon/shr_n.h	521;"	d
simde_vshrq_n_u32	simde/arm/neon/shr_n.h	559;"	d
simde_vshrq_n_u32	simde/arm/neon/shr_n.h	561;"	d
simde_vshrq_n_u64	simde/arm/neon/shr_n.h	599;"	d
simde_vshrq_n_u64	simde/arm/neon/shr_n.h	601;"	d
simde_vshrq_n_u8	simde/arm/neon/shr_n.h	479;"	d
simde_vshrq_n_u8	simde/arm/neon/shr_n.h	481;"	d
simde_vsra_n_s16	simde/arm/neon/sra_n.h	50;"	d
simde_vsra_n_s32	simde/arm/neon/sra_n.h	60;"	d
simde_vsra_n_s64	simde/arm/neon/sra_n.h	70;"	d
simde_vsra_n_s8	simde/arm/neon/sra_n.h	40;"	d
simde_vsra_n_u16	simde/arm/neon/sra_n.h	90;"	d
simde_vsra_n_u32	simde/arm/neon/sra_n.h	100;"	d
simde_vsra_n_u64	simde/arm/neon/sra_n.h	110;"	d
simde_vsra_n_u8	simde/arm/neon/sra_n.h	80;"	d
simde_vsraq_n_s16	simde/arm/neon/sra_n.h	130;"	d
simde_vsraq_n_s32	simde/arm/neon/sra_n.h	140;"	d
simde_vsraq_n_s64	simde/arm/neon/sra_n.h	150;"	d
simde_vsraq_n_s8	simde/arm/neon/sra_n.h	120;"	d
simde_vsraq_n_u16	simde/arm/neon/sra_n.h	170;"	d
simde_vsraq_n_u32	simde/arm/neon/sra_n.h	180;"	d
simde_vsraq_n_u64	simde/arm/neon/sra_n.h	190;"	d
simde_vsraq_n_u8	simde/arm/neon/sra_n.h	160;"	d
simde_vst1_f32	simde/arm/neon/st1.h	/^simde_vst1_f32(simde_float32_t ptr[HEDLEY_ARRAY_PARAM(2)], simde_float32x2_t val) {$/;"	f
simde_vst1_f64	simde/arm/neon/st1.h	/^simde_vst1_f64(simde_float64_t ptr[HEDLEY_ARRAY_PARAM(1)], simde_float64x1_t val) {$/;"	f
simde_vst1_s16	simde/arm/neon/st1.h	/^simde_vst1_s16(int16_t ptr[HEDLEY_ARRAY_PARAM(4)], simde_int16x4_t val) {$/;"	f
simde_vst1_s32	simde/arm/neon/st1.h	/^simde_vst1_s32(int32_t ptr[HEDLEY_ARRAY_PARAM(2)], simde_int32x2_t val) {$/;"	f
simde_vst1_s64	simde/arm/neon/st1.h	/^simde_vst1_s64(int64_t ptr[HEDLEY_ARRAY_PARAM(1)], simde_int64x1_t val) {$/;"	f
simde_vst1_s8	simde/arm/neon/st1.h	/^simde_vst1_s8(int8_t ptr[HEDLEY_ARRAY_PARAM(8)], simde_int8x8_t val) {$/;"	f
simde_vst1_u16	simde/arm/neon/st1.h	/^simde_vst1_u16(uint16_t ptr[HEDLEY_ARRAY_PARAM(4)], simde_uint16x4_t val) {$/;"	f
simde_vst1_u32	simde/arm/neon/st1.h	/^simde_vst1_u32(uint32_t ptr[HEDLEY_ARRAY_PARAM(2)], simde_uint32x2_t val) {$/;"	f
simde_vst1_u64	simde/arm/neon/st1.h	/^simde_vst1_u64(uint64_t ptr[HEDLEY_ARRAY_PARAM(1)], simde_uint64x1_t val) {$/;"	f
simde_vst1_u8	simde/arm/neon/st1.h	/^simde_vst1_u8(uint8_t ptr[HEDLEY_ARRAY_PARAM(8)], simde_uint8x8_t val) {$/;"	f
simde_vst1q_f32	simde/arm/neon/st1.h	/^simde_vst1q_f32(simde_float32_t ptr[HEDLEY_ARRAY_PARAM(4)], simde_float32x4_t val) {$/;"	f
simde_vst1q_f64	simde/arm/neon/st1.h	/^simde_vst1q_f64(simde_float64_t ptr[HEDLEY_ARRAY_PARAM(2)], simde_float64x2_t val) {$/;"	f
simde_vst1q_s16	simde/arm/neon/st1.h	/^simde_vst1q_s16(int16_t ptr[HEDLEY_ARRAY_PARAM(8)], simde_int16x8_t val) {$/;"	f
simde_vst1q_s32	simde/arm/neon/st1.h	/^simde_vst1q_s32(int32_t ptr[HEDLEY_ARRAY_PARAM(4)], simde_int32x4_t val) {$/;"	f
simde_vst1q_s64	simde/arm/neon/st1.h	/^simde_vst1q_s64(int64_t ptr[HEDLEY_ARRAY_PARAM(2)], simde_int64x2_t val) {$/;"	f
simde_vst1q_s8	simde/arm/neon/st1.h	/^simde_vst1q_s8(int8_t ptr[HEDLEY_ARRAY_PARAM(16)], simde_int8x16_t val) {$/;"	f
simde_vst1q_u16	simde/arm/neon/st1.h	/^simde_vst1q_u16(uint16_t ptr[HEDLEY_ARRAY_PARAM(8)], simde_uint16x8_t val) {$/;"	f
simde_vst1q_u32	simde/arm/neon/st1.h	/^simde_vst1q_u32(uint32_t ptr[HEDLEY_ARRAY_PARAM(4)], simde_uint32x4_t val) {$/;"	f
simde_vst1q_u64	simde/arm/neon/st1.h	/^simde_vst1q_u64(uint64_t ptr[HEDLEY_ARRAY_PARAM(2)], simde_uint64x2_t val) {$/;"	f
simde_vst1q_u8	simde/arm/neon/st1.h	/^simde_vst1q_u8(uint8_t ptr[HEDLEY_ARRAY_PARAM(16)], simde_uint8x16_t val) {$/;"	f
simde_vst3_f32	simde/arm/neon/st3.h	/^simde_vst3_f32(simde_float32_t *ptr, simde_float32x2x3_t val) {$/;"	f
simde_vst3_f64	simde/arm/neon/st3.h	/^simde_vst3_f64(simde_float64_t *ptr, simde_float64x1x3_t val) {$/;"	f
simde_vst3_s16	simde/arm/neon/st3.h	/^simde_vst3_s16(int16_t *ptr, simde_int16x4x3_t val) {$/;"	f
simde_vst3_s32	simde/arm/neon/st3.h	/^simde_vst3_s32(int32_t *ptr, simde_int32x2x3_t val) {$/;"	f
simde_vst3_s64	simde/arm/neon/st3.h	/^simde_vst3_s64(int64_t *ptr, simde_int64x1x3_t val) {$/;"	f
simde_vst3_s8	simde/arm/neon/st3.h	/^simde_vst3_s8(int8_t *ptr, simde_int8x8x3_t val) {$/;"	f
simde_vst3_u16	simde/arm/neon/st3.h	/^simde_vst3_u16(uint16_t *ptr, simde_uint16x4x3_t val) {$/;"	f
simde_vst3_u32	simde/arm/neon/st3.h	/^simde_vst3_u32(uint32_t *ptr, simde_uint32x2x3_t val) {$/;"	f
simde_vst3_u64	simde/arm/neon/st3.h	/^simde_vst3_u64(uint64_t *ptr, simde_uint64x1x3_t val) {$/;"	f
simde_vst3_u8	simde/arm/neon/st3.h	/^simde_vst3_u8(uint8_t *ptr, simde_uint8x8x3_t val) {$/;"	f
simde_vst3q_f32	simde/arm/neon/st3.h	/^simde_vst3q_f32(simde_float32_t *ptr, simde_float32x4x3_t val) {$/;"	f
simde_vst3q_f64	simde/arm/neon/st3.h	/^simde_vst3q_f64(simde_float64_t *ptr, simde_float64x2x3_t val) {$/;"	f
simde_vst3q_s16	simde/arm/neon/st3.h	/^simde_vst3q_s16(int16_t *ptr, simde_int16x8x3_t val) {$/;"	f
simde_vst3q_s32	simde/arm/neon/st3.h	/^simde_vst3q_s32(int32_t *ptr, simde_int32x4x3_t val) {$/;"	f
simde_vst3q_s64	simde/arm/neon/st3.h	/^simde_vst3q_s64(int64_t *ptr, simde_int64x2x3_t val) {$/;"	f
simde_vst3q_s8	simde/arm/neon/st3.h	/^simde_vst3q_s8(int8_t *ptr, simde_int8x16x3_t val) {$/;"	f
simde_vst3q_u16	simde/arm/neon/st3.h	/^simde_vst3q_u16(uint16_t *ptr, simde_uint16x8x3_t val) {$/;"	f
simde_vst3q_u32	simde/arm/neon/st3.h	/^simde_vst3q_u32(uint32_t *ptr, simde_uint32x4x3_t val) {$/;"	f
simde_vst3q_u64	simde/arm/neon/st3.h	/^simde_vst3q_u64(uint64_t *ptr, simde_uint64x2x3_t val) {$/;"	f
simde_vst3q_u8	simde/arm/neon/st3.h	/^simde_vst3q_u8(uint8_t *ptr, simde_uint8x16x3_t val) {$/;"	f
simde_vst4_f32	simde/arm/neon/st4.h	/^simde_vst4_f32(simde_float32_t *ptr, simde_float32x2x4_t val) {$/;"	f
simde_vst4_f64	simde/arm/neon/st4.h	/^simde_vst4_f64(simde_float64_t *ptr, simde_float64x1x4_t val) {$/;"	f
simde_vst4_s16	simde/arm/neon/st4.h	/^simde_vst4_s16(int16_t *ptr, simde_int16x4x4_t val) {$/;"	f
simde_vst4_s32	simde/arm/neon/st4.h	/^simde_vst4_s32(int32_t *ptr, simde_int32x2x4_t val) {$/;"	f
simde_vst4_s64	simde/arm/neon/st4.h	/^simde_vst4_s64(int64_t *ptr, simde_int64x1x4_t val) {$/;"	f
simde_vst4_s8	simde/arm/neon/st4.h	/^simde_vst4_s8(int8_t *ptr, simde_int8x8x4_t val) {$/;"	f
simde_vst4_u16	simde/arm/neon/st4.h	/^simde_vst4_u16(uint16_t *ptr, simde_uint16x4x4_t val) {$/;"	f
simde_vst4_u32	simde/arm/neon/st4.h	/^simde_vst4_u32(uint32_t *ptr, simde_uint32x2x4_t val) {$/;"	f
simde_vst4_u64	simde/arm/neon/st4.h	/^simde_vst4_u64(uint64_t *ptr, simde_uint64x1x4_t val) {$/;"	f
simde_vst4_u8	simde/arm/neon/st4.h	/^simde_vst4_u8(uint8_t *ptr, simde_uint8x8x4_t val) {$/;"	f
simde_vst4q_f32	simde/arm/neon/st4.h	/^simde_vst4q_f32(simde_float32_t *ptr, simde_float32x4x4_t val) {$/;"	f
simde_vst4q_f64	simde/arm/neon/st4.h	/^simde_vst4q_f64(simde_float64_t *ptr, simde_float64x2x4_t val) {$/;"	f
simde_vst4q_s16	simde/arm/neon/st4.h	/^simde_vst4q_s16(int16_t *ptr, simde_int16x8x4_t val) {$/;"	f
simde_vst4q_s32	simde/arm/neon/st4.h	/^simde_vst4q_s32(int32_t *ptr, simde_int32x4x4_t val) {$/;"	f
simde_vst4q_s64	simde/arm/neon/st4.h	/^simde_vst4q_s64(int64_t *ptr, simde_int64x2x4_t val) {$/;"	f
simde_vst4q_s8	simde/arm/neon/st4.h	/^simde_vst4q_s8(int8_t *ptr, simde_int8x16x4_t val) {$/;"	f
simde_vst4q_u16	simde/arm/neon/st4.h	/^simde_vst4q_u16(uint16_t *ptr, simde_uint16x8x4_t val) {$/;"	f
simde_vst4q_u32	simde/arm/neon/st4.h	/^simde_vst4q_u32(uint32_t *ptr, simde_uint32x4x4_t val) {$/;"	f
simde_vst4q_u64	simde/arm/neon/st4.h	/^simde_vst4q_u64(uint64_t *ptr, simde_uint64x2x4_t val) {$/;"	f
simde_vst4q_u8	simde/arm/neon/st4.h	/^simde_vst4q_u8(uint8_t *ptr, simde_uint8x16x4_t val) {$/;"	f
simde_vsub_f32	simde/arm/neon/sub.h	/^simde_vsub_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vsub_f64	simde/arm/neon/sub.h	/^simde_vsub_f64(simde_float64x1_t a, simde_float64x1_t b) {$/;"	f
simde_vsub_s16	simde/arm/neon/sub.h	/^simde_vsub_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vsub_s32	simde/arm/neon/sub.h	/^simde_vsub_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vsub_s64	simde/arm/neon/sub.h	/^simde_vsub_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vsub_s8	simde/arm/neon/sub.h	/^simde_vsub_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vsub_u16	simde/arm/neon/sub.h	/^simde_vsub_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vsub_u32	simde/arm/neon/sub.h	/^simde_vsub_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vsub_u64	simde/arm/neon/sub.h	/^simde_vsub_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vsub_u8	simde/arm/neon/sub.h	/^simde_vsub_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vsubl_s16	simde/arm/neon/subl.h	/^simde_vsubl_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vsubl_s32	simde/arm/neon/subl.h	/^simde_vsubl_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vsubl_s8	simde/arm/neon/subl.h	/^simde_vsubl_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vsubl_u16	simde/arm/neon/subl.h	/^simde_vsubl_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vsubl_u32	simde/arm/neon/subl.h	/^simde_vsubl_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vsubl_u8	simde/arm/neon/subl.h	/^simde_vsubl_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vsubq_f32	simde/arm/neon/sub.h	/^simde_vsubq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vsubq_f64	simde/arm/neon/sub.h	/^simde_vsubq_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vsubq_s16	simde/arm/neon/sub.h	/^simde_vsubq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vsubq_s32	simde/arm/neon/sub.h	/^simde_vsubq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vsubq_s64	simde/arm/neon/sub.h	/^simde_vsubq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vsubq_s8	simde/arm/neon/sub.h	/^simde_vsubq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vsubq_u16	simde/arm/neon/sub.h	/^simde_vsubq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vsubq_u32	simde/arm/neon/sub.h	/^simde_vsubq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vsubq_u64	simde/arm/neon/sub.h	/^simde_vsubq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vsubq_u8	simde/arm/neon/sub.h	/^simde_vsubq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vsubw_high_s16	simde/arm/neon/subw_high.h	/^simde_vsubw_high_s16(simde_int32x4_t a, simde_int16x8_t b) {$/;"	f
simde_vsubw_high_s32	simde/arm/neon/subw_high.h	/^simde_vsubw_high_s32(simde_int64x2_t a, simde_int32x4_t b) {$/;"	f
simde_vsubw_high_s8	simde/arm/neon/subw_high.h	/^simde_vsubw_high_s8(simde_int16x8_t a, simde_int8x16_t b) {$/;"	f
simde_vsubw_high_u16	simde/arm/neon/subw_high.h	/^simde_vsubw_high_u16(simde_uint32x4_t a, simde_uint16x8_t b) {$/;"	f
simde_vsubw_high_u32	simde/arm/neon/subw_high.h	/^simde_vsubw_high_u32(simde_uint64x2_t a, simde_uint32x4_t b) {$/;"	f
simde_vsubw_high_u8	simde/arm/neon/subw_high.h	/^simde_vsubw_high_u8(simde_uint16x8_t a, simde_uint8x16_t b) {$/;"	f
simde_vsubw_s16	simde/arm/neon/subw.h	/^simde_vsubw_s16(simde_int32x4_t a, simde_int16x4_t b) {$/;"	f
simde_vsubw_s32	simde/arm/neon/subw.h	/^simde_vsubw_s32(simde_int64x2_t a, simde_int32x2_t b) {$/;"	f
simde_vsubw_s8	simde/arm/neon/subw.h	/^simde_vsubw_s8(simde_int16x8_t a, simde_int8x8_t b) {$/;"	f
simde_vsubw_u16	simde/arm/neon/subw.h	/^simde_vsubw_u16(simde_uint32x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vsubw_u32	simde/arm/neon/subw.h	/^simde_vsubw_u32(simde_uint64x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vsubw_u8	simde/arm/neon/subw.h	/^simde_vsubw_u8(simde_uint16x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vtbl1_s8	simde/arm/neon/tbl.h	/^simde_vtbl1_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vtbl1_u8	simde/arm/neon/tbl.h	/^simde_vtbl1_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vtbl2_s8	simde/arm/neon/tbl.h	/^simde_vtbl2_s8(simde_int8x8x2_t a, simde_int8x8_t b) {$/;"	f
simde_vtbl2_u8	simde/arm/neon/tbl.h	/^simde_vtbl2_u8(simde_uint8x8x2_t a, simde_uint8x8_t b) {$/;"	f
simde_vtbl3_s8	simde/arm/neon/tbl.h	/^simde_vtbl3_s8(simde_int8x8x3_t a, simde_int8x8_t b) {$/;"	f
simde_vtbl3_u8	simde/arm/neon/tbl.h	/^simde_vtbl3_u8(simde_uint8x8x3_t a, simde_uint8x8_t b) {$/;"	f
simde_vtbl4_s8	simde/arm/neon/tbl.h	/^simde_vtbl4_s8(simde_int8x8x4_t a, simde_int8x8_t b) {$/;"	f
simde_vtbl4_u8	simde/arm/neon/tbl.h	/^simde_vtbl4_u8(simde_uint8x8x4_t a, simde_uint8x8_t b) {$/;"	f
simde_vtbx1_s8	simde/arm/neon/tbx.h	/^simde_vtbx1_s8(simde_int8x8_t a, simde_int8x8_t b, simde_int8x8_t c) {$/;"	f
simde_vtbx1_u8	simde/arm/neon/tbx.h	/^simde_vtbx1_u8(simde_uint8x8_t a, simde_uint8x8_t b, simde_uint8x8_t c) {$/;"	f
simde_vtbx2_s8	simde/arm/neon/tbx.h	/^simde_vtbx2_s8(simde_int8x8_t a, simde_int8x8x2_t b, simde_int8x8_t c) {$/;"	f
simde_vtbx2_u8	simde/arm/neon/tbx.h	/^simde_vtbx2_u8(simde_uint8x8_t a, simde_uint8x8x2_t b, simde_uint8x8_t c) {$/;"	f
simde_vtbx3_s8	simde/arm/neon/tbx.h	/^simde_vtbx3_s8(simde_int8x8_t a, simde_int8x8x3_t b, simde_int8x8_t c) {$/;"	f
simde_vtbx3_u8	simde/arm/neon/tbx.h	/^simde_vtbx3_u8(simde_uint8x8_t a, simde_uint8x8x3_t b, simde_uint8x8_t c) {$/;"	f
simde_vtbx4_s8	simde/arm/neon/tbx.h	/^simde_vtbx4_s8(simde_int8x8_t a, simde_int8x8x4_t b, simde_int8x8_t c) {$/;"	f
simde_vtbx4_u8	simde/arm/neon/tbx.h	/^simde_vtbx4_u8(simde_uint8x8_t a, simde_uint8x8x4_t b, simde_uint8x8_t c) {$/;"	f
simde_vtrn1_f32	simde/arm/neon/trn1.h	/^simde_vtrn1_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vtrn1_s16	simde/arm/neon/trn1.h	/^simde_vtrn1_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vtrn1_s32	simde/arm/neon/trn1.h	/^simde_vtrn1_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vtrn1_s8	simde/arm/neon/trn1.h	/^simde_vtrn1_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vtrn1_u16	simde/arm/neon/trn1.h	/^simde_vtrn1_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vtrn1_u32	simde/arm/neon/trn1.h	/^simde_vtrn1_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vtrn1_u8	simde/arm/neon/trn1.h	/^simde_vtrn1_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vtrn1q_f32	simde/arm/neon/trn1.h	/^simde_vtrn1q_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vtrn1q_f64	simde/arm/neon/trn1.h	/^simde_vtrn1q_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vtrn1q_s16	simde/arm/neon/trn1.h	/^simde_vtrn1q_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vtrn1q_s32	simde/arm/neon/trn1.h	/^simde_vtrn1q_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vtrn1q_s64	simde/arm/neon/trn1.h	/^simde_vtrn1q_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vtrn1q_s8	simde/arm/neon/trn1.h	/^simde_vtrn1q_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vtrn1q_u16	simde/arm/neon/trn1.h	/^simde_vtrn1q_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vtrn1q_u32	simde/arm/neon/trn1.h	/^simde_vtrn1q_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vtrn1q_u64	simde/arm/neon/trn1.h	/^simde_vtrn1q_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vtrn1q_u8	simde/arm/neon/trn1.h	/^simde_vtrn1q_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vtrn2_f32	simde/arm/neon/trn2.h	/^simde_vtrn2_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vtrn2_s16	simde/arm/neon/trn2.h	/^simde_vtrn2_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vtrn2_s32	simde/arm/neon/trn2.h	/^simde_vtrn2_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vtrn2_s8	simde/arm/neon/trn2.h	/^simde_vtrn2_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vtrn2_u16	simde/arm/neon/trn2.h	/^simde_vtrn2_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vtrn2_u32	simde/arm/neon/trn2.h	/^simde_vtrn2_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vtrn2_u8	simde/arm/neon/trn2.h	/^simde_vtrn2_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vtrn2q_f32	simde/arm/neon/trn2.h	/^simde_vtrn2q_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vtrn2q_f64	simde/arm/neon/trn2.h	/^simde_vtrn2q_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vtrn2q_s16	simde/arm/neon/trn2.h	/^simde_vtrn2q_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vtrn2q_s32	simde/arm/neon/trn2.h	/^simde_vtrn2q_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vtrn2q_s64	simde/arm/neon/trn2.h	/^simde_vtrn2q_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vtrn2q_s8	simde/arm/neon/trn2.h	/^simde_vtrn2q_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vtrn2q_u16	simde/arm/neon/trn2.h	/^simde_vtrn2q_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vtrn2q_u32	simde/arm/neon/trn2.h	/^simde_vtrn2q_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vtrn2q_u64	simde/arm/neon/trn2.h	/^simde_vtrn2q_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vtrn2q_u8	simde/arm/neon/trn2.h	/^simde_vtrn2q_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vtrn_f32	simde/arm/neon/trn.h	/^simde_vtrn_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vtrn_s16	simde/arm/neon/trn.h	/^simde_vtrn_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vtrn_s32	simde/arm/neon/trn.h	/^simde_vtrn_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vtrn_s8	simde/arm/neon/trn.h	/^simde_vtrn_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vtrn_u16	simde/arm/neon/trn.h	/^simde_vtrn_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vtrn_u32	simde/arm/neon/trn.h	/^simde_vtrn_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vtrn_u8	simde/arm/neon/trn.h	/^simde_vtrn_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vtrnq_f32	simde/arm/neon/trn.h	/^simde_vtrnq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vtrnq_s16	simde/arm/neon/trn.h	/^simde_vtrnq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vtrnq_s32	simde/arm/neon/trn.h	/^simde_vtrnq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vtrnq_s8	simde/arm/neon/trn.h	/^simde_vtrnq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vtrnq_u16	simde/arm/neon/trn.h	/^simde_vtrnq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vtrnq_u32	simde/arm/neon/trn.h	/^simde_vtrnq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vtrnq_u8	simde/arm/neon/trn.h	/^simde_vtrnq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vtst_s16	simde/arm/neon/tst.h	/^simde_vtst_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vtst_s32	simde/arm/neon/tst.h	/^simde_vtst_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vtst_s64	simde/arm/neon/tst.h	/^simde_vtst_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_vtst_s8	simde/arm/neon/tst.h	/^simde_vtst_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vtst_u16	simde/arm/neon/tst.h	/^simde_vtst_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vtst_u32	simde/arm/neon/tst.h	/^simde_vtst_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vtst_u64	simde/arm/neon/tst.h	/^simde_vtst_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vtst_u8	simde/arm/neon/tst.h	/^simde_vtst_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vtstq_s16	simde/arm/neon/tst.h	/^simde_vtstq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vtstq_s32	simde/arm/neon/tst.h	/^simde_vtstq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vtstq_s64	simde/arm/neon/tst.h	/^simde_vtstq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vtstq_s8	simde/arm/neon/tst.h	/^simde_vtstq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vtstq_u16	simde/arm/neon/tst.h	/^simde_vtstq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vtstq_u32	simde/arm/neon/tst.h	/^simde_vtstq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vtstq_u64	simde/arm/neon/tst.h	/^simde_vtstq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vtstq_u8	simde/arm/neon/tst.h	/^simde_vtstq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vuqadd_s16	simde/arm/neon/uqadd.h	/^simde_vuqadd_s16(simde_int16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vuqadd_s32	simde/arm/neon/uqadd.h	/^simde_vuqadd_s32(simde_int32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vuqadd_s64	simde/arm/neon/uqadd.h	/^simde_vuqadd_s64(simde_int64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_vuqadd_s8	simde/arm/neon/uqadd.h	/^simde_vuqadd_s8(simde_int8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vuqaddb_s8	simde/arm/neon/uqadd.h	/^simde_vuqaddb_s8(int8_t a, uint8_t b) {$/;"	f
simde_vuqaddd_s64	simde/arm/neon/uqadd.h	/^simde_vuqaddd_s64(int64_t a, uint64_t b) {$/;"	f
simde_vuqaddh_s16	simde/arm/neon/uqadd.h	/^simde_vuqaddh_s16(int16_t a, uint16_t b) {$/;"	f
simde_vuqaddq_s16	simde/arm/neon/uqadd.h	/^simde_vuqaddq_s16(simde_int16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vuqaddq_s32	simde/arm/neon/uqadd.h	/^simde_vuqaddq_s32(simde_int32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vuqaddq_s64	simde/arm/neon/uqadd.h	/^simde_vuqaddq_s64(simde_int64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vuqaddq_s8	simde/arm/neon/uqadd.h	/^simde_vuqaddq_s8(simde_int8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vuqadds_s32	simde/arm/neon/uqadd.h	/^simde_vuqadds_s32(int32_t a, uint32_t b) {$/;"	f
simde_vuzp1_f32	simde/arm/neon/uzp1.h	/^simde_vuzp1_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vuzp1_s16	simde/arm/neon/uzp1.h	/^simde_vuzp1_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vuzp1_s32	simde/arm/neon/uzp1.h	/^simde_vuzp1_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vuzp1_s8	simde/arm/neon/uzp1.h	/^simde_vuzp1_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vuzp1_u16	simde/arm/neon/uzp1.h	/^simde_vuzp1_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vuzp1_u32	simde/arm/neon/uzp1.h	/^simde_vuzp1_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vuzp1_u8	simde/arm/neon/uzp1.h	/^simde_vuzp1_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vuzp1q_f32	simde/arm/neon/uzp1.h	/^simde_vuzp1q_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vuzp1q_f64	simde/arm/neon/uzp1.h	/^simde_vuzp1q_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vuzp1q_s16	simde/arm/neon/uzp1.h	/^simde_vuzp1q_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vuzp1q_s32	simde/arm/neon/uzp1.h	/^simde_vuzp1q_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vuzp1q_s64	simde/arm/neon/uzp1.h	/^simde_vuzp1q_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vuzp1q_s8	simde/arm/neon/uzp1.h	/^simde_vuzp1q_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vuzp1q_u16	simde/arm/neon/uzp1.h	/^simde_vuzp1q_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vuzp1q_u32	simde/arm/neon/uzp1.h	/^simde_vuzp1q_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vuzp1q_u64	simde/arm/neon/uzp1.h	/^simde_vuzp1q_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vuzp1q_u8	simde/arm/neon/uzp1.h	/^simde_vuzp1q_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vuzp2_f32	simde/arm/neon/uzp2.h	/^simde_vuzp2_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vuzp2_s16	simde/arm/neon/uzp2.h	/^simde_vuzp2_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vuzp2_s32	simde/arm/neon/uzp2.h	/^simde_vuzp2_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vuzp2_s8	simde/arm/neon/uzp2.h	/^simde_vuzp2_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vuzp2_u16	simde/arm/neon/uzp2.h	/^simde_vuzp2_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vuzp2_u32	simde/arm/neon/uzp2.h	/^simde_vuzp2_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vuzp2_u8	simde/arm/neon/uzp2.h	/^simde_vuzp2_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vuzp2q_f32	simde/arm/neon/uzp2.h	/^simde_vuzp2q_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vuzp2q_f64	simde/arm/neon/uzp2.h	/^simde_vuzp2q_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vuzp2q_s16	simde/arm/neon/uzp2.h	/^simde_vuzp2q_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vuzp2q_s32	simde/arm/neon/uzp2.h	/^simde_vuzp2q_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vuzp2q_s64	simde/arm/neon/uzp2.h	/^simde_vuzp2q_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vuzp2q_s8	simde/arm/neon/uzp2.h	/^simde_vuzp2q_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vuzp2q_u16	simde/arm/neon/uzp2.h	/^simde_vuzp2q_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vuzp2q_u32	simde/arm/neon/uzp2.h	/^simde_vuzp2q_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vuzp2q_u64	simde/arm/neon/uzp2.h	/^simde_vuzp2q_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vuzp2q_u8	simde/arm/neon/uzp2.h	/^simde_vuzp2q_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vuzp_f32	simde/arm/neon/uzp.h	/^simde_vuzp_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vuzp_s16	simde/arm/neon/uzp.h	/^simde_vuzp_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vuzp_s32	simde/arm/neon/uzp.h	/^simde_vuzp_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vuzp_s8	simde/arm/neon/uzp.h	/^simde_vuzp_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vuzp_u16	simde/arm/neon/uzp.h	/^simde_vuzp_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vuzp_u32	simde/arm/neon/uzp.h	/^simde_vuzp_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vuzp_u8	simde/arm/neon/uzp.h	/^simde_vuzp_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vuzpq_f32	simde/arm/neon/uzp.h	/^simde_vuzpq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vuzpq_s16	simde/arm/neon/uzp.h	/^simde_vuzpq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vuzpq_s32	simde/arm/neon/uzp.h	/^simde_vuzpq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vuzpq_s8	simde/arm/neon/uzp.h	/^simde_vuzpq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vuzpq_u16	simde/arm/neon/uzp.h	/^simde_vuzpq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vuzpq_u32	simde/arm/neon/uzp.h	/^simde_vuzpq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vuzpq_u8	simde/arm/neon/uzp.h	/^simde_vuzpq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vzip1_f32	simde/arm/neon/zip1.h	/^simde_vzip1_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vzip1_s16	simde/arm/neon/zip1.h	/^simde_vzip1_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vzip1_s32	simde/arm/neon/zip1.h	/^simde_vzip1_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vzip1_s8	simde/arm/neon/zip1.h	/^simde_vzip1_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vzip1_u16	simde/arm/neon/zip1.h	/^simde_vzip1_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vzip1_u32	simde/arm/neon/zip1.h	/^simde_vzip1_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vzip1_u8	simde/arm/neon/zip1.h	/^simde_vzip1_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vzip1q_f32	simde/arm/neon/zip1.h	/^simde_vzip1q_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vzip1q_f64	simde/arm/neon/zip1.h	/^simde_vzip1q_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vzip1q_s16	simde/arm/neon/zip1.h	/^simde_vzip1q_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vzip1q_s32	simde/arm/neon/zip1.h	/^simde_vzip1q_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vzip1q_s64	simde/arm/neon/zip1.h	/^simde_vzip1q_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vzip1q_s8	simde/arm/neon/zip1.h	/^simde_vzip1q_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vzip1q_u16	simde/arm/neon/zip1.h	/^simde_vzip1q_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vzip1q_u32	simde/arm/neon/zip1.h	/^simde_vzip1q_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vzip1q_u64	simde/arm/neon/zip1.h	/^simde_vzip1q_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vzip1q_u8	simde/arm/neon/zip1.h	/^simde_vzip1q_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vzip2_f32	simde/arm/neon/zip2.h	/^simde_vzip2_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vzip2_s16	simde/arm/neon/zip2.h	/^simde_vzip2_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vzip2_s32	simde/arm/neon/zip2.h	/^simde_vzip2_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vzip2_s8	simde/arm/neon/zip2.h	/^simde_vzip2_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vzip2_u16	simde/arm/neon/zip2.h	/^simde_vzip2_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vzip2_u32	simde/arm/neon/zip2.h	/^simde_vzip2_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vzip2_u8	simde/arm/neon/zip2.h	/^simde_vzip2_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vzip2q_f32	simde/arm/neon/zip2.h	/^simde_vzip2q_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vzip2q_f64	simde/arm/neon/zip2.h	/^simde_vzip2q_f64(simde_float64x2_t a, simde_float64x2_t b) {$/;"	f
simde_vzip2q_s16	simde/arm/neon/zip2.h	/^simde_vzip2q_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vzip2q_s32	simde/arm/neon/zip2.h	/^simde_vzip2q_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vzip2q_s64	simde/arm/neon/zip2.h	/^simde_vzip2q_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_vzip2q_s8	simde/arm/neon/zip2.h	/^simde_vzip2q_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vzip2q_u16	simde/arm/neon/zip2.h	/^simde_vzip2q_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vzip2q_u32	simde/arm/neon/zip2.h	/^simde_vzip2q_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vzip2q_u64	simde/arm/neon/zip2.h	/^simde_vzip2q_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_vzip2q_u8	simde/arm/neon/zip2.h	/^simde_vzip2q_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_vzip_f32	simde/arm/neon/zip.h	/^simde_vzip_f32(simde_float32x2_t a, simde_float32x2_t b) {$/;"	f
simde_vzip_s16	simde/arm/neon/zip.h	/^simde_vzip_s16(simde_int16x4_t a, simde_int16x4_t b) {$/;"	f
simde_vzip_s32	simde/arm/neon/zip.h	/^simde_vzip_s32(simde_int32x2_t a, simde_int32x2_t b) {$/;"	f
simde_vzip_s8	simde/arm/neon/zip.h	/^simde_vzip_s8(simde_int8x8_t a, simde_int8x8_t b) {$/;"	f
simde_vzip_u16	simde/arm/neon/zip.h	/^simde_vzip_u16(simde_uint16x4_t a, simde_uint16x4_t b) {$/;"	f
simde_vzip_u32	simde/arm/neon/zip.h	/^simde_vzip_u32(simde_uint32x2_t a, simde_uint32x2_t b) {$/;"	f
simde_vzip_u8	simde/arm/neon/zip.h	/^simde_vzip_u8(simde_uint8x8_t a, simde_uint8x8_t b) {$/;"	f
simde_vzipq_f32	simde/arm/neon/zip.h	/^simde_vzipq_f32(simde_float32x4_t a, simde_float32x4_t b) {$/;"	f
simde_vzipq_s16	simde/arm/neon/zip.h	/^simde_vzipq_s16(simde_int16x8_t a, simde_int16x8_t b) {$/;"	f
simde_vzipq_s32	simde/arm/neon/zip.h	/^simde_vzipq_s32(simde_int32x4_t a, simde_int32x4_t b) {$/;"	f
simde_vzipq_s8	simde/arm/neon/zip.h	/^simde_vzipq_s8(simde_int8x16_t a, simde_int8x16_t b) {$/;"	f
simde_vzipq_u16	simde/arm/neon/zip.h	/^simde_vzipq_u16(simde_uint16x8_t a, simde_uint16x8_t b) {$/;"	f
simde_vzipq_u32	simde/arm/neon/zip.h	/^simde_vzipq_u32(simde_uint32x4_t a, simde_uint32x4_t b) {$/;"	f
simde_vzipq_u8	simde/arm/neon/zip.h	/^simde_vzipq_u8(simde_uint8x16_t a, simde_uint8x16_t b) {$/;"	f
simde_x_arm_neon_cntb	simde/arm/neon/cnt.h	/^simde_x_arm_neon_cntb(uint8_t v) {$/;"	f
simde_x_avx512cd_lz_lookup	simde/x86/avx512/lzcnt.h	/^  static uint8_t simde_x_avx512cd_lz_lookup(const uint8_t value) {$/;"	f
simde_x_bitreverse_u64	simde/x86/clmul.h	/^simde_x_bitreverse_u64(uint64_t v) {$/;"	f
simde_x_clmul_u64	simde/x86/clmul.h	/^simde_x_clmul_u64(uint64_t x, uint64_t y) {$/;"	f
simde_x_clz32	simde/x86/avx512/lzcnt.h	/^    static int simde_x_clz32(uint32_t x) {$/;"	f
simde_x_clz32	simde/x86/avx512/lzcnt.h	44;"	d
simde_x_clz64	simde/x86/avx512/lzcnt.h	/^    static int simde_x_clz64(uint64_t x) {$/;"	f
simde_x_clz64	simde/x86/avx512/lzcnt.h	52;"	d
simde_x_gf2p8inverse_lut	simde/x86/gfni.h	/^} simde_x_gf2p8inverse_lut = {$/;"	v	typeref:union:__anon6
simde_x_mm256_abs_pd	simde/x86/avx.h	/^simde_x_mm256_abs_pd(simde__m256d a) {$/;"	f
simde_x_mm256_abs_ps	simde/x86/avx.h	/^simde_x_mm256_abs_ps(simde__m256 a) {$/;"	f
simde_x_mm256_copysign_pd	simde/x86/avx.h	/^simde_x_mm256_copysign_pd(simde__m256d dest, simde__m256d src) {$/;"	f
simde_x_mm256_copysign_ps	simde/x86/avx.h	/^simde_x_mm256_copysign_ps(simde__m256 dest, simde__m256 src) {$/;"	f
simde_x_mm256_deg2rad_pd	simde/x86/svml.h	/^simde_x_mm256_deg2rad_pd(simde__m256d a) {$/;"	f
simde_x_mm256_deg2rad_ps	simde/x86/svml.h	/^simde_x_mm256_deg2rad_ps(simde__m256 a) {$/;"	f
simde_x_mm256_deinterleaveeven_epi16	simde/x86/avx.h	/^simde_x_mm256_deinterleaveeven_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_x_mm256_deinterleaveeven_epi32	simde/x86/avx.h	/^simde_x_mm256_deinterleaveeven_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_x_mm256_deinterleaveeven_pd	simde/x86/avx.h	/^simde_x_mm256_deinterleaveeven_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_x_mm256_deinterleaveeven_ps	simde/x86/avx.h	/^simde_x_mm256_deinterleaveeven_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_x_mm256_deinterleaveodd_epi16	simde/x86/avx.h	/^simde_x_mm256_deinterleaveodd_epi16 (simde__m256i a, simde__m256i b) {$/;"	f
simde_x_mm256_deinterleaveodd_epi32	simde/x86/avx.h	/^simde_x_mm256_deinterleaveodd_epi32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_x_mm256_deinterleaveodd_pd	simde/x86/avx.h	/^simde_x_mm256_deinterleaveodd_pd (simde__m256d a, simde__m256d b) {$/;"	f
simde_x_mm256_deinterleaveodd_ps	simde/x86/avx.h	/^simde_x_mm256_deinterleaveodd_ps (simde__m256 a, simde__m256 b) {$/;"	f
simde_x_mm256_gf2p8inverse_epi8	simde/x86/gfni.h	/^simde_x_mm256_gf2p8inverse_epi8 (simde__m256i x) {$/;"	f
simde_x_mm256_gf2p8matrix_multiply_epi64_epi8	simde/x86/gfni.h	/^simde_x_mm256_gf2p8matrix_multiply_epi64_epi8 (simde__m256i x, simde__m256i A) {$/;"	f
simde_x_mm256_gf2p8matrix_multiply_inverse_epi64_epi8	simde/x86/gfni.h	333;"	d
simde_x_mm256_loadu_epi16	simde/x86/avx.h	/^simde_x_mm256_loadu_epi16(void const* mem_addr) {$/;"	f
simde_x_mm256_loadu_epi32	simde/x86/avx.h	/^simde_x_mm256_loadu_epi32(void const* mem_addr) {$/;"	f
simde_x_mm256_loadu_epi64	simde/x86/avx.h	/^simde_x_mm256_loadu_epi64(void const* mem_addr) {$/;"	f
simde_x_mm256_loadu_epi8	simde/x86/avx.h	/^simde_x_mm256_loadu_epi8(void const* mem_addr) {$/;"	f
simde_x_mm256_mullo_epu32	simde/x86/avx2.h	/^simde_x_mm256_mullo_epu32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_x_mm256_negate_pd	simde/x86/avx.h	/^simde_x_mm256_negate_pd(simde__m256d a) {$/;"	f
simde_x_mm256_negate_ps	simde/x86/avx.h	/^simde_x_mm256_negate_ps(simde__m256 a) {$/;"	f
simde_x_mm256_not_pd	simde/x86/avx.h	/^simde_x_mm256_not_pd(simde__m256d a) {$/;"	f
simde_x_mm256_not_ps	simde/x86/avx.h	/^simde_x_mm256_not_ps(simde__m256 a) {$/;"	f
simde_x_mm256_select_pd	simde/x86/avx.h	/^simde_x_mm256_select_pd(simde__m256d a, simde__m256d b, simde__m256d mask) {$/;"	f
simde_x_mm256_select_ps	simde/x86/avx.h	/^simde_x_mm256_select_ps(simde__m256 a, simde__m256 b, simde__m256 mask) {$/;"	f
simde_x_mm256_set_epu16	simde/x86/avx.h	/^simde_x_mm256_set_epu16 (uint16_t e15, uint16_t e14, uint16_t e13, uint16_t e12,$/;"	f
simde_x_mm256_set_epu32	simde/x86/avx.h	/^simde_x_mm256_set_epu32 (uint32_t e7, uint32_t e6, uint32_t e5, uint32_t e4,$/;"	f
simde_x_mm256_set_epu64x	simde/x86/avx.h	/^simde_x_mm256_set_epu64x (uint64_t  e3, uint64_t  e2, uint64_t  e1, uint64_t  e0) {$/;"	f
simde_x_mm256_set_epu8	simde/x86/avx.h	/^simde_x_mm256_set_epu8 (uint8_t e31, uint8_t e30, uint8_t e29, uint8_t e28,$/;"	f
simde_x_mm256_setone_pd	simde/x86/avx.h	/^simde_x_mm256_setone_pd (void) {$/;"	f
simde_x_mm256_setone_ps	simde/x86/avx.h	/^simde_x_mm256_setone_ps (void) {$/;"	f
simde_x_mm256_setone_si256	simde/x86/avx.h	/^simde_x_mm256_setone_si256 (void) {$/;"	f
simde_x_mm256_sub_epu32	simde/x86/avx2.h	/^simde_x_mm256_sub_epu32 (simde__m256i a, simde__m256i b) {$/;"	f
simde_x_mm256_test_all_ones	simde/x86/avx2.h	/^simde_x_mm256_test_all_ones (simde__m256i a) {$/;"	f
simde_x_mm256_xorsign_pd	simde/x86/avx.h	/^simde_x_mm256_xorsign_pd(simde__m256d dest, simde__m256d src) {$/;"	f
simde_x_mm256_xorsign_ps	simde/x86/avx.h	/^simde_x_mm256_xorsign_ps(simde__m256 dest, simde__m256 src) {$/;"	f
simde_x_mm512_copysign_pd	simde/x86/avx512/copysign.h	/^simde_x_mm512_copysign_pd(simde__m512d dest, simde__m512d src) {$/;"	f
simde_x_mm512_copysign_ps	simde/x86/avx512/copysign.h	/^simde_x_mm512_copysign_ps(simde__m512 dest, simde__m512 src) {$/;"	f
simde_x_mm512_deg2rad_pd	simde/x86/svml.h	/^simde_x_mm512_deg2rad_pd(simde__m512d a) {$/;"	f
simde_x_mm512_deg2rad_ps	simde/x86/svml.h	/^simde_x_mm512_deg2rad_ps(simde__m512 a) {$/;"	f
simde_x_mm512_gf2p8inverse_epi8	simde/x86/gfni.h	/^simde_x_mm512_gf2p8inverse_epi8 (simde__m512i x) {$/;"	f
simde_x_mm512_gf2p8matrix_multiply_epi64_epi8	simde/x86/gfni.h	/^simde_x_mm512_gf2p8matrix_multiply_epi64_epi8 (simde__m512i x, simde__m512i A) {$/;"	f
simde_x_mm512_gf2p8matrix_multiply_inverse_epi64_epi8	simde/x86/gfni.h	334;"	d
simde_x_mm512_negate_pd	simde/x86/avx512/negate.h	/^simde_x_mm512_negate_pd(simde__m512d a) {$/;"	f
simde_x_mm512_negate_ps	simde/x86/avx512/negate.h	/^simde_x_mm512_negate_ps(simde__m512 a) {$/;"	f
simde_x_mm512_set1_epu16	simde/x86/avx512/set1.h	/^simde_x_mm512_set1_epu16 (uint16_t a) {$/;"	f
simde_x_mm512_set1_epu32	simde/x86/avx512/set1.h	/^simde_x_mm512_set1_epu32 (uint32_t a) {$/;"	f
simde_x_mm512_set1_epu64	simde/x86/avx512/set1.h	/^simde_x_mm512_set1_epu64 (uint64_t a) {$/;"	f
simde_x_mm512_set1_epu8	simde/x86/avx512/set1.h	/^simde_x_mm512_set1_epu8 (uint8_t a) {$/;"	f
simde_x_mm512_set_epu16	simde/x86/avx512/set.h	/^simde_x_mm512_set_epu16 (uint16_t e31, uint16_t e30, uint16_t e29, uint16_t e28, uint16_t e27, uint16_t e26, uint16_t e25, uint16_t e24,$/;"	f
simde_x_mm512_set_epu32	simde/x86/avx512/set.h	/^simde_x_mm512_set_epu32 (uint32_t e15, uint32_t e14, uint32_t e13, uint32_t e12, uint32_t e11, uint32_t e10, uint32_t  e9, uint32_t  e8,$/;"	f
simde_x_mm512_set_epu64	simde/x86/avx512/set.h	/^simde_x_mm512_set_epu64 (uint64_t  e7, uint64_t  e6, uint64_t  e5, uint64_t  e4, uint64_t  e3, uint64_t  e2, uint64_t  e1, uint64_t  e0) {$/;"	f
simde_x_mm512_set_epu8	simde/x86/avx512/set.h	/^simde_x_mm512_set_epu8 (uint8_t e63, uint8_t e62, uint8_t e61, uint8_t e60, uint8_t e59, uint8_t e58, uint8_t e57, uint8_t e56,$/;"	f
simde_x_mm512_set_m128i	simde/x86/avx512/set.h	/^simde_x_mm512_set_m128i (simde__m128i a, simde__m128i b, simde__m128i c, simde__m128i d) {$/;"	f
simde_x_mm512_set_m256i	simde/x86/avx512/set.h	/^simde_x_mm512_set_m256i (simde__m256i a, simde__m256i b) {$/;"	f
simde_x_mm512_setone_epi32	simde/x86/avx512/setone.h	49;"	d
simde_x_mm512_setone_pd	simde/x86/avx512/setone.h	/^simde_x_mm512_setone_pd(void) {$/;"	f
simde_x_mm512_setone_ps	simde/x86/avx512/setone.h	/^simde_x_mm512_setone_ps(void) {$/;"	f
simde_x_mm512_setone_si512	simde/x86/avx512/setone.h	/^simde_x_mm512_setone_si512(void) {$/;"	f
simde_x_mm512_xorsign_pd	simde/x86/avx512/xorsign.h	/^simde_x_mm512_xorsign_pd(simde__m512d dest, simde__m512d src) {$/;"	f
simde_x_mm512_xorsign_ps	simde/x86/avx512/xorsign.h	/^simde_x_mm512_xorsign_ps(simde__m512 dest, simde__m512 src) {$/;"	f
simde_x_mm_abs_pd	simde/x86/sse2.h	/^simde_x_mm_abs_pd(simde__m128d a) {$/;"	f
simde_x_mm_abs_ps	simde/x86/sse.h	/^simde_x_mm_abs_ps(simde__m128 a) {$/;"	f
simde_x_mm_blendv_epi16	simde/x86/sse4.1.h	/^simde_x_mm_blendv_epi16 (simde__m128i a, simde__m128i b, simde__m128i mask) {$/;"	f
simde_x_mm_blendv_epi32	simde/x86/sse4.1.h	/^simde_x_mm_blendv_epi32 (simde__m128i a, simde__m128i b, simde__m128i mask) {$/;"	f
simde_x_mm_blendv_epi64	simde/x86/sse4.1.h	/^simde_x_mm_blendv_epi64 (simde__m128i a, simde__m128i b, simde__m128i mask) {$/;"	f
simde_x_mm_copysign_pd	simde/x86/sse2.h	/^simde_x_mm_copysign_pd(simde__m128d dest, simde__m128d src) {$/;"	f
simde_x_mm_copysign_ps	simde/x86/sse.h	/^simde_x_mm_copysign_ps(simde__m128 dest, simde__m128 src) {$/;"	f
simde_x_mm_cvtsi128_si16	simde/x86/sse2.h	/^simde_x_mm_cvtsi128_si16 (simde__m128i a) {$/;"	f
simde_x_mm_cvtsi16_si128	simde/x86/sse2.h	/^simde_x_mm_cvtsi16_si128 (int16_t a) {$/;"	f
simde_x_mm_deg2rad_pd	simde/x86/svml.h	/^simde_x_mm_deg2rad_pd(simde__m128d a) {$/;"	f
simde_x_mm_deg2rad_ps	simde/x86/svml.h	/^simde_x_mm_deg2rad_ps(simde__m128 a) {$/;"	f
simde_x_mm_deinterleaveeven_epi16	simde/x86/sse3.h	/^simde_x_mm_deinterleaveeven_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_x_mm_deinterleaveeven_epi32	simde/x86/sse3.h	/^simde_x_mm_deinterleaveeven_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_x_mm_deinterleaveeven_pd	simde/x86/sse3.h	/^simde_x_mm_deinterleaveeven_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_x_mm_deinterleaveeven_ps	simde/x86/sse3.h	/^simde_x_mm_deinterleaveeven_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_x_mm_deinterleaveodd_epi16	simde/x86/sse3.h	/^simde_x_mm_deinterleaveodd_epi16 (simde__m128i a, simde__m128i b) {$/;"	f
simde_x_mm_deinterleaveodd_epi32	simde/x86/sse3.h	/^simde_x_mm_deinterleaveodd_epi32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_x_mm_deinterleaveodd_pd	simde/x86/sse3.h	/^simde_x_mm_deinterleaveodd_pd (simde__m128d a, simde__m128d b) {$/;"	f
simde_x_mm_deinterleaveodd_ps	simde/x86/sse3.h	/^simde_x_mm_deinterleaveodd_ps (simde__m128 a, simde__m128 b) {$/;"	f
simde_x_mm_gf2p8inverse_epi8	simde/x86/gfni.h	/^simde_x_mm_gf2p8inverse_epi8 (simde__m128i x) {$/;"	f
simde_x_mm_gf2p8matrix_multiply_epi64_epi8	simde/x86/gfni.h	/^simde_x_mm_gf2p8matrix_multiply_epi64_epi8 (simde__m128i x, simde__m128i A) {$/;"	f
simde_x_mm_gf2p8matrix_multiply_inverse_epi64_epi8	simde/x86/gfni.h	332;"	d
simde_x_mm_load_si64	simde/x86/mmx.h	/^simde_x_mm_load_si64 (const void* mem_addr) {$/;"	f
simde_x_mm_loadu_epi16	simde/x86/sse2.h	/^simde_x_mm_loadu_epi16(int16_t const* mem_addr) {$/;"	f
simde_x_mm_loadu_epi32	simde/x86/sse2.h	/^simde_x_mm_loadu_epi32(int32_t const* mem_addr) {$/;"	f
simde_x_mm_loadu_epi64	simde/x86/sse2.h	/^simde_x_mm_loadu_epi64(int64_t const* mem_addr) {$/;"	f
simde_x_mm_loadu_epi8	simde/x86/sse2.h	/^simde_x_mm_loadu_epi8(int8_t const* mem_addr) {$/;"	f
simde_x_mm_loadu_si64	simde/x86/mmx.h	/^simde_x_mm_loadu_si64 (const void* mem_addr) {$/;"	f
simde_x_mm_mod_epi64	simde/x86/sse2.h	/^simde_x_mm_mod_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_x_mm_mul_epi64	simde/x86/sse2.h	/^simde_x_mm_mul_epi64 (simde__m128i a, simde__m128i b) {$/;"	f
simde_x_mm_mullo_epu32	simde/x86/sse4.1.h	/^simde_x_mm_mullo_epu32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_x_mm_negate_pd	simde/x86/sse2.h	/^simde_x_mm_negate_pd(simde__m128d a) {$/;"	f
simde_x_mm_negate_ps	simde/x86/sse.h	/^simde_x_mm_negate_ps(simde__m128 a) {$/;"	f
simde_x_mm_not_pd	simde/x86/sse2.h	/^simde_x_mm_not_pd(simde__m128d a) {$/;"	f
simde_x_mm_not_ps	simde/x86/sse.h	/^simde_x_mm_not_ps(simde__m128 a) {$/;"	f
simde_x_mm_not_si128	simde/x86/sse2.h	/^simde_x_mm_not_si128 (simde__m128i a) {$/;"	f
simde_x_mm_select_pd	simde/x86/sse2.h	/^simde_x_mm_select_pd(simde__m128d a, simde__m128d b, simde__m128d mask) {$/;"	f
simde_x_mm_select_ps	simde/x86/sse.h	/^simde_x_mm_select_ps(simde__m128 a, simde__m128 b, simde__m128 mask) {$/;"	f
simde_x_mm_set1_epu16	simde/x86/sse2.h	/^simde_x_mm_set1_epu16 (uint16_t value) {$/;"	f
simde_x_mm_set1_epu32	simde/x86/sse2.h	/^simde_x_mm_set1_epu32 (uint32_t value) {$/;"	f
simde_x_mm_set1_epu64	simde/x86/sse2.h	/^simde_x_mm_set1_epu64 (uint64_t value) {$/;"	f
simde_x_mm_set1_epu8	simde/x86/sse2.h	/^simde_x_mm_set1_epu8 (uint8_t value) {$/;"	f
simde_x_mm_set_epu16	simde/x86/sse2.h	/^simde_x_mm_set_epu16 (uint16_t e7, uint16_t e6, uint16_t e5, uint16_t e4,$/;"	f
simde_x_mm_set_epu32	simde/x86/sse2.h	/^simde_x_mm_set_epu32 (uint32_t e3, uint32_t e2, uint32_t e1, uint32_t e0) {$/;"	f
simde_x_mm_set_epu64x	simde/x86/sse2.h	/^simde_x_mm_set_epu64x (uint64_t e1, uint64_t e0) {$/;"	f
simde_x_mm_set_epu8	simde/x86/sse2.h	/^simde_x_mm_set_epu8 (uint8_t e15, uint8_t e14, uint8_t e13, uint8_t e12,$/;"	f
simde_x_mm_set_f32x2	simde/x86/mmx.h	/^simde_x_mm_set_f32x2 (simde_float32 e1, simde_float32 e0) {$/;"	f
simde_x_mm_set_pi64	simde/x86/mmx.h	/^simde_x_mm_set_pi64 (int64_t e0) {$/;"	f
simde_x_mm_set_pu16	simde/x86/mmx.h	/^simde_x_mm_set_pu16 (uint16_t e3, uint16_t e2, uint16_t e1, uint16_t e0) {$/;"	f
simde_x_mm_set_pu32	simde/x86/mmx.h	/^simde_x_mm_set_pu32 (uint32_t e1, uint32_t e0) {$/;"	f
simde_x_mm_set_pu8	simde/x86/mmx.h	/^simde_x_mm_set_pu8 (uint8_t e7, uint8_t e6, uint8_t e5, uint8_t e4, uint8_t e3, uint8_t e2, uint8_t e1, uint8_t e0) {$/;"	f
simde_x_mm_setone_pd	simde/x86/sse2.h	/^simde_x_mm_setone_pd (void) {$/;"	f
simde_x_mm_setone_ps	simde/x86/sse.h	/^simde_x_mm_setone_ps (void) {$/;"	f
simde_x_mm_setone_si128	simde/x86/sse2.h	/^simde_x_mm_setone_si128 (void) {$/;"	f
simde_x_mm_setone_si64	simde/x86/mmx.h	/^simde_x_mm_setone_si64 (void) {$/;"	f
simde_x_mm_store_si64	simde/x86/mmx.h	/^simde_x_mm_store_si64 (void* mem_addr, simde__m64 value) {$/;"	f
simde_x_mm_storeu_si64	simde/x86/mmx.h	/^simde_x_mm_storeu_si64 (void* mem_addr, simde__m64 value) {$/;"	f
simde_x_mm_sub_epu32	simde/x86/sse2.h	/^simde_x_mm_sub_epu32 (simde__m128i a, simde__m128i b) {$/;"	f
simde_x_mm_xorsign_pd	simde/x86/sse2.h	/^simde_x_mm_xorsign_pd(simde__m128d dest, simde__m128d src) {$/;"	f
simde_x_mm_xorsign_ps	simde/x86/sse.h	/^simde_x_mm_xorsign_ps(simde__m128 dest, simde__m128 src) {$/;"	f
simde_x_permutex2var	simde/x86/avx512/permutex2var.h	/^simde_x_permutex2var (simde__m128i *r, const simde__m128i *a, const simde__m128i *idx, const simde__m128i *b, const unsigned int log2_index_size, const unsigned int log2_data_length) {$/;"	f
simde_x_permutex2var128	simde/x86/avx512/permutex2var.h	/^simde_x_permutex2var128 (const simde__m128i *a, const simde__m128i idx, const simde__m128i *b, const unsigned int log2_index_size, const unsigned int log2_data_length) {$/;"	f
simde_x_vclzb_s8	simde/arm/neon/clz.h	/^simde_x_vclzb_s8(int8_t a) {$/;"	f
simde_x_vclzb_u8	simde/arm/neon/clz.h	/^simde_x_vclzb_u8(uint8_t a) {$/;"	f
simde_x_vclzh_s16	simde/arm/neon/clz.h	/^simde_x_vclzh_s16(int16_t a) {$/;"	f
simde_x_vclzh_u16	simde/arm/neon/clz.h	/^simde_x_vclzh_u16(uint16_t a) {$/;"	f
simde_x_vclzs_s32	simde/arm/neon/clz.h	/^simde_x_vclzs_s32(int32_t a) {$/;"	f
simde_x_vclzs_u32	simde/arm/neon/clz.h	/^simde_x_vclzs_u32(uint32_t a) {$/;"	f
simde_x_vmax_s64	simde/arm/neon/max.h	/^simde_x_vmax_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_x_vmax_u64	simde/arm/neon/max.h	/^simde_x_vmax_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_x_vmaxq_s64	simde/arm/neon/max.h	/^simde_x_vmaxq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_x_vmaxq_u64	simde/arm/neon/max.h	/^simde_x_vmaxq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_x_vmin_s64	simde/arm/neon/min.h	/^simde_x_vmin_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_x_vmin_u64	simde/arm/neon/min.h	/^simde_x_vmin_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_x_vminq_s64	simde/arm/neon/min.h	/^simde_x_vminq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_x_vminq_u64	simde/arm/neon/min.h	/^simde_x_vminq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simde_x_vmul_s64	simde/arm/neon/mul.h	/^simde_x_vmul_s64(simde_int64x1_t a, simde_int64x1_t b) {$/;"	f
simde_x_vmul_u64	simde/arm/neon/mul.h	/^simde_x_vmul_u64(simde_uint64x1_t a, simde_uint64x1_t b) {$/;"	f
simde_x_vmulq_s64	simde/arm/neon/mul.h	/^simde_x_vmulq_s64(simde_int64x2_t a, simde_int64x2_t b) {$/;"	f
simde_x_vmulq_u64	simde/arm/neon/mul.h	/^simde_x_vmulq_u64(simde_uint64x2_t a, simde_uint64x2_t b) {$/;"	f
simple_offsets_in_paths	algorithms/nearest_offsets_in_paths.cpp	/^path_offset_collection_t simple_offsets_in_paths(const PathPositionHandleGraph* graph, pos_t pos) {$/;"	f	namespace:vg::algorithms
simple_sds_load	recombinator.cpp	/^void Haplotypes::Subchain::simple_sds_load(std::istream& in) {$/;"	f	class:vg::Haplotypes::Subchain
simple_sds_load	recombinator.cpp	/^void Haplotypes::TopLevelChain::simple_sds_load(std::istream& in) {$/;"	f	class:vg::Haplotypes::TopLevelChain
simple_sds_load	recombinator.cpp	/^void Haplotypes::simple_sds_load(std::istream& in) {$/;"	f	class:vg::Haplotypes
simple_sds_serialize	recombinator.cpp	/^void Haplotypes::Subchain::simple_sds_serialize(std::ostream& out) const {$/;"	f	class:vg::Haplotypes::Subchain
simple_sds_serialize	recombinator.cpp	/^void Haplotypes::TopLevelChain::simple_sds_serialize(std::ostream& out) const {$/;"	f	class:vg::Haplotypes::TopLevelChain
simple_sds_serialize	recombinator.cpp	/^void Haplotypes::simple_sds_serialize(std::ostream& out) const {$/;"	f	class:vg::Haplotypes
simple_sds_size	recombinator.cpp	/^size_t Haplotypes::Subchain::simple_sds_size() const {$/;"	f	class:vg::Haplotypes::Subchain
simple_sds_size	recombinator.cpp	/^size_t Haplotypes::TopLevelChain::simple_sds_size() const {$/;"	f	class:vg::Haplotypes::TopLevelChain
simple_sds_size	recombinator.cpp	/^size_t Haplotypes::simple_sds_size() const {$/;"	f	class:vg::Haplotypes
simplify	alignment.cpp	/^Alignment simplify(const Alignment& a, bool trim_internal_deletions) {$/;"	f	namespace:vg
simplify	path.cpp	/^Mapping simplify(const Mapping& m, bool trim_internal_deletions) {$/;"	f	namespace:vg
simplify	path.cpp	/^Path simplify(const Path& p, bool trim_internal_deletions) {$/;"	f	namespace:vg
simplify	rare_variant_simplifier.cpp	/^void RareVariantSimplifier::simplify() {$/;"	f	class:vg::RareVariantSimplifier
simplify	small_snarl_simplifier.cpp	/^void SmallSnarlSimplifier::simplify() {$/;"	f	class:vg::SmallSnarlSimplifier
simplify_cigar	alignment.cpp	/^void simplify_cigar(vector<pair<int, char>>& cigar) {$/;"	f	namespace:vg
simplify_complicated_multipath_alignment	multipath_mapper.cpp	/^    void MultipathMapper::simplify_complicated_multipath_alignment(multipath_alignment_t& multipath_aln) const {$/;"	f	class:vg::MultipathMapper
simplify_filtered_edits	augment.cpp	/^bool simplify_filtered_edits(HandleGraph* graph, Alignment& aln, Path& path, const map<pos_t, id_t>& node_translation,$/;"	f	namespace:vg
simplify_once	small_snarl_simplifier.cpp	/^pair<size_t, size_t> SmallSnarlSimplifier::simplify_once(size_t iteration) {$/;"	f	class:vg::SmallSnarlSimplifier
simplify_siblings	algorithms/simplify_siblings.cpp	/^bool simplify_siblings(handlegraph::MutablePathDeletableHandleGraph* graph,$/;"	f	namespace:vg::algorithms
simplify_topologies	multipath_mapper.hpp	/^        bool simplify_topologies = false;$/;"	m	class:vg::MultipathMapper
simultaneous_pair_alignment	mapper.hpp	/^    bool simultaneous_pair_alignment;$/;"	m	class:vg::Mapper
since_last_fragment_length_estimate	mapper.hpp	/^    int64_t since_last_fragment_length_estimate = 0;$/;"	m	class:vg::FragmentLengthStatistics
sink_fwd	source_sink_overlay.hpp	/^    const handle_t sink_fwd = as_handle(2);$/;"	m	class:vg::SourceSinkOverlay
sink_id	source_sink_overlay.hpp	/^    id_t sink_id;$/;"	m	class:vg::SourceSinkOverlay
sink_nodes	banded_global_aligner.hpp	/^        vector<handle_t> sink_nodes;$/;"	m	class:vg::BandedGlobalAligner
sink_rev	source_sink_overlay.hpp	/^    const handle_t sink_rev = as_handle(3);$/;"	m	class:vg::SourceSinkOverlay
site_ends	phased_genome.hpp	/^        unordered_map<int64_t, const Snarl*> site_ends;$/;"	m	class:vg::PhasedGenome
site_manager	small_snarl_simplifier.hpp	/^    SnarlManager site_manager;$/;"	m	class:vg::SmallSnarlSimplifier
site_starts	phased_genome.hpp	/^        unordered_map<int64_t, const Snarl*> site_starts;$/;"	m	class:vg::PhasedGenome
sites	phased_genome.hpp	/^        unordered_map<const Snarl*, pair<HaplotypeNode*, HaplotypeNode*> > sites;$/;"	m	class:vg::PhasedGenome::Haplotype
size	algorithms/chain_items.hpp	/^    size_t size;$/;"	m	class:vg::algorithms::Anchor
size	dozeu_interface.cpp	/^size_t DozeuInterface::OrderedGraph::size() const {$/;"	f	class:DozeuInterface::OrderedGraph
size	gbwt_extender.cpp	/^        size_t size() const {$/;"	f	struct:vg::MatchPos::PathList
size	gbwt_extender.cpp	/^    uint32_t size() const { return this->nodes.size(); }$/;"	f	class:vg::WFATree
size	genome_state.cpp	/^size_t SnarlState::size() const {$/;"	f	class:vg::SnarlState
size	haplotypes.cpp	/^int64_t int_itvl_t::size() const {$/;"	f	class:haplo::int_itvl_t
size	haplotypes.cpp	/^size_t gbwt_thread_t::size() const {$/;"	f	class:haplo::gbwt_thread_t
size	haplotypes.cpp	/^size_t linear_haplo_structure::SNVvector::size() const {$/;"	f	class:haplo::linear_haplo_structure::SNVvector
size	integrated_snarl_finder.cpp	/^    inline size_t size() const {$/;"	f	class:vg::HandleGraphNodeSet
size	multipath_alignment_graph.cpp	/^    size_t MultipathAlignmentGraph::size() const {$/;"	f	class:vg::MultipathAlignmentGraph
size	option.hpp	/^    size_t size() const {$/;"	f	class:vg::Option
size	path.cpp	/^size_t Paths::size(void) const {$/;"	f	class:vg::Paths
size	small_bitset.hpp	/^        size_t size() const { return this->universe_size; }$/;"	f	class:vg::SmallBitset
size	sparse_union_find.cpp	/^    size_t SparseUnionFind::size() {$/;"	f	class:vg::SparseUnionFind
size	subcommand/gbwt_main.cpp	/^    size_t size;$/;"	m	struct:job_type	file:
size	utility.hpp	/^    inline size_t size() const {$/;"	f	struct:vg::VectorView
size	vg.cpp	/^size_t VG::size(void) {$/;"	f	class:vg::VG
size_t_is_nonzero	subcommand/options.cpp	/^const ValidatorFunction<size_t> size_t_is_nonzero = [](const size_t& s) {$/;"	m	namespace:vg::subcommand	file:
skip_alt	traversal_finder.hpp	/^    function<bool(const SnarlTraversal& alt_path, int iteration)> skip_alt;$/;"	m	class:vg::VCFTraversalFinder
skip_structural_duplications	variant_adder.hpp	/^    bool skip_structural_duplications = true;$/;"	m	class:vg::VariantAdder
slope	statistics.cpp	/^double slope(const std::vector<double>& x, const std::vector<double>& y) {$/;"	f	namespace:vg
small	small_bitset.hpp	/^        bool small() const { return (this->size() <= VALUE_BITS); }$/;"	f	class:vg::SmallBitset
smart_align	variant_adder.cpp	/^Alignment VariantAdder::smart_align(vg::VG& graph, pair<NodeSide, NodeSide> endpoints, const string& to_align, size_t max_span) {$/;"	f	class:vg::VariantAdder
sn_deletion_between_ref	haplotypes.cpp	/^bool linear_haplo_structure::sn_deletion_between_ref(int64_t left, int64_t right) const {$/;"	f	class:haplo::linear_haplo_structure
snarl	genome_state.hpp	/^    const Snarl* snarl;$/;"	m	struct:vg::ReplaceSnarlHaplotypeCommand
snarl_boundary_index	snarls.cpp	/^unordered_map<pair<int64_t, bool>, const Snarl*> SnarlManager::snarl_boundary_index() const {$/;"	f	class:vg::SnarlManager
snarl_caller	graph_caller.hpp	/^    SnarlCaller& snarl_caller;$/;"	m	class:vg::GraphCaller
snarl_end_index	snarls.cpp	/^unordered_map<pair<int64_t, bool>, const Snarl*> SnarlManager::snarl_end_index() const {$/;"	f	class:vg::SnarlManager
snarl_into	snarls.hpp	/^    unordered_map<pair<int64_t, bool>, const Snarl*> snarl_into;$/;"	m	class:vg::SnarlManager
snarl_is_complex	clip.cpp	/^static bool snarl_is_complex(PathPositionHandleGraph* graph, const Snarl* snarl,$/;"	f	namespace:vg
snarl_less	traversal_support.hpp	/^    struct snarl_less {$/;"	s	class:vg::NestedCachedPackedTraversalSupportFinder
snarl_manager	deconstructor.hpp	/^    SnarlManager* snarl_manager;$/;"	m	class:vg::Deconstructor
snarl_manager	graph_caller.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::GraphCaller
snarl_manager	graph_caller.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::SnarlGraph
snarl_manager	mcmc_caller.hpp	/^        SnarlManager& snarl_manager;$/;"	m	class:vg::MCMCCaller
snarl_manager	multipath_mapper.hpp	/^        SnarlManager* snarl_manager;$/;"	m	class:vg::MultipathMapper
snarl_manager	nested_traversal_finder.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::NestedTraversalFinder
snarl_manager	phased_genome.hpp	/^        const SnarlManager* snarl_manager;$/;"	m	class:vg::PhasedGenome
snarl_manager	region_expander.hpp	/^        const SnarlManager* snarl_manager = nullptr;$/;"	m	class:vg::RegionExpander
snarl_manager	snarl_caller.hpp	/^    SnarlManager& snarl_manager;    $/;"	m	class:vg::SupportBasedSnarlCaller
snarl_manager	traversal_finder.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::ExhaustiveTraversalFinder
snarl_manager	traversal_finder.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::FlowTraversalFinder
snarl_manager	traversal_finder.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::PathRestrictedTraversalFinder
snarl_manager	traversal_finder.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::PathTraversalFinder
snarl_manager	traversal_finder.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::ReadRestrictedTraversalFinder
snarl_manager	traversal_finder.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::RepresentativeTraversalFinder
snarl_manager	traversal_finder.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::VCFTraversalFinder
snarl_manager	traversal_support.hpp	/^    SnarlManager& snarl_manager;$/;"	m	class:vg::TraversalSupportFinder
snarl_number	snarls.hpp	/^    inline size_t snarl_number(const Snarl* snarl) const{$/;"	f	class:vg::SnarlManager
snarl_reference_length_histogram	genotyper.hpp	/^    unordered_map<size_t, size_t> snarl_reference_length_histogram;$/;"	m	class:vg::Genotyper
snarl_sharing_end	snarls.cpp	/^const Snarl* SnarlManager::snarl_sharing_end(const Snarl* here) const {$/;"	f	class:vg::SnarlManager
snarl_sharing_start	snarls.cpp	/^const Snarl* SnarlManager::snarl_sharing_start(const Snarl* here) const {$/;"	f	class:vg::SnarlManager
snarl_start_index	snarls.cpp	/^unordered_map<pair<int64_t, bool>, const Snarl*> SnarlManager::snarl_start_index() const {$/;"	f	class:vg::SnarlManager
snarl_traversals	genotyper.hpp	/^    unordered_set<const Snarl*> snarl_traversals;$/;"	m	class:vg::Genotyper
snarlmanager	traversal_finder.hpp	/^    SnarlManager& snarlmanager;$/;"	m	class:vg::PathBasedTraversalFinder
snarls	graph_caller.hpp	/^    unordered_map<handle_t, pair<handle_t, bool>> snarls;$/;"	m	class:vg::SnarlGraph
snarls	mcmc_genotyper.hpp	/^    SnarlManager& snarls; $/;"	m	class:vg::MCMCGenotyper
snarls	snarls.hpp	/^    deque<SnarlRecord> snarls;$/;"	m	class:vg::SnarlManager
sniff_gfa	io/register_loader_saver_gfa.cpp	/^static bool sniff_gfa(istream& stream) {$/;"	f	namespace:vg::io
snv	haplotypes.hpp	/^    snv,$/;"	e	enum:haplo::linear_haplo_structure::nodeType
soft_clip_filter	filter.cpp	/^    bool Filter::soft_clip_filter(Alignment& aln){$/;"	f	class:vg::Filter
soft_clip_limit	filter.hpp	/^        int soft_clip_limit = -1;$/;"	m	class:vg::Filter
softclip_end	alignment.cpp	/^int softclip_end(const Alignment& alignment) {$/;"	f	namespace:vg
softclip_end	path.cpp	/^int softclip_end(const Mapping& mapping) {$/;"	f	namespace:vg
softclip_start	alignment.cpp	/^int softclip_start(const Alignment& alignment) {$/;"	f	namespace:vg
softclip_start	path.cpp	/^int softclip_start(const Mapping& mapping) {$/;"	f	namespace:vg
softclip_threshold	mapper.hpp	/^    int softclip_threshold; \/\/ if more than this many bp are clipped, try extension algorithm$/;"	m	class:vg::Mapper
softclip_trim	alignment.cpp	/^int softclip_trim(Alignment& alignment) {$/;"	f	namespace:vg
sort	stream_sorter.hpp	/^void StreamSorter<Message>::sort(vector<Message>& msgs) const {$/;"	f	class:vg::StreamSorter
sort	vg.cpp	/^void VG::sort() {$/;"	f	class:vg::VG
sort_and_compute_mapping_quality	multipath_mapper.cpp	/^    void MultipathMapper::sort_and_compute_mapping_quality(vector<multipath_alignment_t>& multipath_alns,$/;"	f	class:vg::MultipathMapper
sort_and_compute_mapping_quality	multipath_mapper.cpp	/^    void MultipathMapper::sort_and_compute_mapping_quality(vector<pair<multipath_alignment_t, multipath_alignment_t>>& multipath_aln_pairs,$/;"	f	class:vg::MultipathMapper
sort_and_shadow	algorithms/chain_items.cpp	/^void sort_and_shadow(const std::vector<Anchor>& items, std::vector<size_t>& indexes) {$/;"	f	namespace:vg::algorithms
sort_and_shadow	algorithms/chain_items.cpp	/^void sort_and_shadow(std::vector<Anchor>& items) {$/;"	f	namespace:vg::algorithms
sort_by_id	graph.cpp	/^void sort_by_id(Graph& graph) {$/;"	f	namespace:vg
sort_by_id_dedup_and_clean	graph.cpp	/^void sort_by_id_dedup_and_clean(Graph& graph) {$/;"	f	namespace:vg
sort_by_mapping_rank	path.cpp	/^void Paths::sort_by_mapping_rank(void) {$/;"	f	class:vg::Paths
sort_compact_nodes	transcriptome.cpp	/^bool Transcriptome::sort_compact_nodes() {$/;"	f	class:vg::Transcriptome
sort_edges_by_id	graph.cpp	/^void sort_edges_by_id(Graph& graph) {$/;"	f	namespace:vg
sort_minimizers_by_score	minimizer_mapper.cpp	/^std::vector<size_t> MinimizerMapper::sort_minimizers_by_score(const std::vector<Minimizer>& minimizers) const {$/;"	f	class:vg::MinimizerMapper
sort_nodes_by_id	graph.cpp	/^void sort_nodes_by_id(Graph& graph) {$/;"	f	namespace:vg
sort_pair_by_second	transcriptome.cpp	/^bool sort_pair_by_second(const pair<uint32_t, uint32_t> & lhs, const pair<uint32_t, uint32_t> & rhs) {$/;"	f	namespace:vg
sort_path_offsets	algorithms/intersect_path_offsets.cpp	/^void sort_path_offsets(path_offset_collection_t& offsets) {$/;"	f	namespace:vg::algorithms
sort_permutation	utility.hpp	/^std::vector<size_t> sort_permutation(const Iterator& begin, const Iterator& end) {$/;"	f	namespace:vg
sort_permutation	utility.hpp	/^std::vector<size_t> sort_permutation(const Iterator& begin,$/;"	f	namespace:vg
sort_shuffling_ties	utility.hpp	/^void sort_shuffling_ties(RandomIt begin, RandomIt end, Compare comp) {$/;"	f	namespace:vg
sort_shuffling_ties	utility.hpp	/^void sort_shuffling_ties(RandomIt begin, RandomIt end, Compare comp, LazyRNG& rng) {$/;"	f	namespace:vg
sort_transcript_paths_by_name	transcriptome.cpp	/^bool sort_transcript_paths_by_name(const CompletedTranscriptPath & lhs, const CompletedTranscriptPath & rhs) {$/;"	f	namespace:vg
sort_transcript_paths_update_copy_id	transcriptome.cpp	/^void Transcriptome::sort_transcript_paths_update_copy_id() {$/;"	f	class:vg::Transcriptome
sorted_id_ranges	algorithms/sorted_id_ranges.cpp	/^vector<pair<id_t, id_t>> sorted_id_ranges(const HandleGraph* graph) {$/;"	f	namespace:vg::algorithms
source	algorithms/chain_items.hpp	/^    size_t source;$/;"	m	class:vg::algorithms::TracedScore
source	gff_reader.hpp	/^        string source;$/;"	m	struct:vg::GFFRecord
source	snarl_seed_clusterer.hpp	/^            size_t source; \/\/ Source minimizer.$/;"	m	struct:vg::SnarlDistanceIndexClusterer::Seed
source_fwd	source_sink_overlay.hpp	/^    const handle_t source_fwd = as_handle(0);$/;"	m	class:vg::SourceSinkOverlay
source_id	source_sink_overlay.hpp	/^    id_t source_id;$/;"	m	class:vg::SourceSinkOverlay
source_nodes	banded_global_aligner.hpp	/^        vector<handle_t> source_nodes;$/;"	m	class:vg::BandedGlobalAligner
source_paths	sampler.hpp	/^    vector<string> source_paths;$/;"	m	class:vg::NGSSimulator
source_paths	sampler.hpp	/^    vector<string> source_paths;$/;"	m	class:vg::Sampler
source_rev	source_sink_overlay.hpp	/^    const handle_t source_rev = as_handle(1);$/;"	m	class:vg::SourceSinkOverlay
spaced_primes	cluster.hpp	/^static constexpr size_t spaced_primes[62] = {2ull, 5ull, 13ull, 29ull, 53ull, 127ull, 227ull, 487ull, 967ull, 2039ull, 4093ull, 8191ull, 16381ull, 32749ull, 65521ull, 131071ull, 262139ull, 524287ull, 1048573ull, 2097143ull, 4194301ull, 8388593ull, 16777213ull, 33554393ull, 67108859ull, 134217689ull, 268435399ull, 536870909ull, 1073741789ull, 2147483647ull, 4294967291ull, 8589934583ull, 17179869143ull, 34359738337ull, 68719476731ull, 137438953447ull, 274877906899ull, 549755813881ull, 1099511627689ull, 2199023255531ull, 4398046511093ull, 8796093022151ull, 17592186044399ull, 35184372088777ull, 70368744177643ull, 140737488355213ull, 281474976710597ull, 562949953421231ull, 1125899906842597ull, 2251799813685119ull, 4503599627370449ull, 9007199254740881ull, 18014398509481951ull, 36028797018963913ull, 72057594037927931ull, 144115188075855859ull, 288230376151711717ull, 576460752303423433ull, 1152921504606846883ull, 2305843009213693951ull, 4611686018427387847ull, 9223372036854775783ull};$/;"	m	namespace:vg
sparse_to_dense	sparse_union_find.hpp	/^        unordered_map<size_t, size_t> sparse_to_dense;\/\/incoming $/;"	m	class:vg::SparseUnionFind
splice_rescue_graph_std_devs	multipath_mapper.hpp	/^        double splice_rescue_graph_std_devs = 3.0;$/;"	m	class:vg::MultipathMapper
splice_stats	multipath_mapper.hpp	/^        SpliceStats splice_stats;$/;"	m	class:vg::MultipathMapper
spliced_cigar_against_path	hts_alignment_emitter.cpp	/^vector<pair<int, char>> SplicedHTSAlignmentEmitter::spliced_cigar_against_path(const Alignment& aln,$/;"	f	class:vg::SplicedHTSAlignmentEmitter
spliced_surject	surjector.cpp	/^    multipath_alignment_t Surjector::spliced_surject(const PathPositionHandleGraph* path_position_graph,$/;"	f	class:vg::Surjector
split	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
split_delims	utility.cpp	/^std::vector<std::string> &split_delims(const std::string &s, const std::string& delims, std::vector<std::string> &elems, size_t max_cuts) {$/;"	f	namespace:vg
split_delims	utility.cpp	/^std::vector<std::string> split_delims(const std::string &s, const std::string& delims, size_t max_cuts) {$/;"	f	namespace:vg
split_ext	utility.cpp	/^pair<string, string> split_ext(const string& filename) {$/;"	f	namespace:vg
split_gam	subcommand/chunk_main.cpp	/^int split_gam(istream& gam_stream, size_t chunk_size, const string& out_prefix, size_t gam_buffer_size) {$/;"	f
split_multicomponent_alignments	multipath_mapper.cpp	/^    void MultipathMapper::split_multicomponent_alignments(const Alignment& alignment1, const Alignment& alignment2,$/;"	f	class:vg::MultipathMapper
split_multicomponent_alignments	multipath_mapper.cpp	/^    void MultipathMapper::split_multicomponent_alignments(vector<multipath_alignment_t>& multipath_alns_out,$/;"	f	class:vg::MultipathMapper
split_read_filter	filter.cpp	/^    bool Filter::split_read_filter(Alignment& aln){$/;"	f	class:vg::Filter
split_read_limit	filter.hpp	/^        int split_read_limit = -1;$/;"	m	class:vg::Filter
split_splice_segment	splicing.cpp	/^pair<pair<path_t, int32_t>, pair<path_t, int32_t>> split_splice_segment(const Alignment& splice_segment,$/;"	f	namespace:vg
split_supports	filter.hpp	/^    int split_supports = 0;$/;"	m	struct:vg::BREAKPOINT
ssimde_mm_insert_pi16	simde/x86/sse.h	2368;"	d
ssw_to_vg	ssw_aligner.cpp	/^Alignment SSWAligner::ssw_to_vg(const StripedSmithWaterman::Alignment& ssw_aln,$/;"	f	class:vg::SSWAligner
stack_permutations	utility.cpp	/^std::vector<size_t> stack_permutations(const std::vector<size_t>& bottom, const std::vector<size_t>& top) {$/;"	f	namespace:vg
stack_up_valid_walks	traversal_finder.cpp	/^void ExhaustiveTraversalFinder::stack_up_valid_walks(handle_t walk_head, vector<Visit>& stack) {$/;"	f	class:vg::ExhaustiveTraversalFinder
stacktrace_manually	crash.cpp	/^void stacktrace_manually(ostream& out, int signalNumber, void* ip, void** bp) {$/;"	f	namespace:vg
stage	funnel.cpp	/^void Funnel::stage(const string& name) {$/;"	f	class:vg::Funnel
stage_name	funnel.hpp	/^    string stage_name;$/;"	m	class:vg::Funnel::State
stage_start_time	funnel.hpp	/^    time_point stage_start_time;$/;"	m	class:vg::Funnel::State
stage_stop	funnel.cpp	/^void Funnel::stage_stop() {$/;"	f	class:vg::Funnel
stages	funnel.hpp	/^    vector<Stage> stages;$/;"	m	class:vg::Funnel::State
standard_extend	haplotypes.hpp	/^void haplo_DP_column::standard_extend(accessorType& ga) {$/;"	f	class:haplo::haplo_DP_column
start	algorithms/chain_items.hpp	/^    size_t start;$/;"	m	class:vg::algorithms::Anchor
start	filter.hpp	/^    int64_t start = -1;$/;"	m	struct:vg::BREAKPOINT
start	funnel.cpp	/^void Funnel::start(const string& name) {$/;"	f	class:vg::Funnel
start	gff_reader.hpp	/^        int64_t start = -1;$/;"	m	struct:vg::GFFRecord
start	graph_synchronizer.hpp	/^        size_t start = 0;$/;"	m	class:vg::GraphSynchronizer::Lock
start	multipath_alignment.hpp	/^    inline const vector<uint32_t>& multipath_alignment_t::start() const {$/;"	f	class:vg::multipath_alignment_t
start	multipath_alignment.hpp	/^    inline uint32_t multipath_alignment_t::start(size_t i) const {$/;"	f	class:vg::multipath_alignment_t
start	recombinator.hpp	/^        gbwt::node_type start, end;$/;"	m	struct:vg::Haplotypes::Subchain
start	recombinator.hpp	/^        handle_t start;$/;"	m	struct:vg::HaplotypePartitioner::Subchain
start	region.hpp	/^    int64_t start = -1;$/;"	m	struct:vg::Region
start	snarls.hpp	/^    handle_t start;$/;"	m	class:vg::NetGraph
start	subcommand/gamcompare_main.cpp	/^    pos_t  start; \/\/ Starting position in the graph.$/;"	m	struct:MappingRun	file:
start	subcommand/haplotypes_main.cpp	/^    size_t start, end;$/;"	m	struct:ReferenceInterval	file:
start_backward	snarls.cpp	/^bool start_backward(const Chain& chain) {$/;"	f	namespace:vg
start_degree	vg.cpp	/^int VG::start_degree(Node* node) {$/;"	f	class:vg::VG
start_handle	recombinator.hpp	/^        handle_t start_handle() const { return gbwtgraph::GBWTGraph::node_to_handle(this->start); }$/;"	f	struct:vg::Haplotypes::Subchain
start_link	crash.cpp	/^static void start_link(const std::string& url) {$/;"	f	namespace:vg
start_pos	cluster.hpp	/^    pos_t start_pos;$/;"	m	class:vg::MEMClusterer::HitNode
start_pos_samplers	sampler.hpp	/^    vector<vg::uniform_int_distribution<size_t>> start_pos_samplers;$/;"	m	class:vg::NGSSimulator
start_size	multipath_alignment.hpp	/^    inline size_t multipath_alignment_t::start_size() const {$/;"	f	class:vg::multipath_alignment_t
start_time	funnel.hpp	/^    time_point start_time;$/;"	m	class:vg::Funnel::State
start_vcf	genotyper.cpp	/^vcflib::VariantCallFile* Genotyper::start_vcf(std::ostream& stream, const PathIndex& index, const string& sample_name, const string& contig_name, size_t contig_size) {$/;"	f	class:vg::Genotyper
start_vg_link	crash.cpp	/^static void start_vg_link(const std::string& file_path, int line) {$/;"	f	namespace:vg
starting_position	gbwt_extender.cpp	/^Position GaplessExtension::starting_position(const HandleGraph& graph) const {$/;"	f	class:vg::GaplessExtension
starts_by_node	gbwt_extender.cpp	/^    std::unordered_map<gbwt::node_type, size_t> starts_by_node;$/;"	m	struct:vg::WFANode	file:
starts_with	utility.cpp	/^bool starts_with(const std::string& value, const std::string& prefix) {$/;"	f	namespace:vg
state	gbwt_extender.hpp	/^    gbwt::BidirectionalState  state;$/;"	m	struct:vg::GaplessExtension
state	genome_state.hpp	/^    unordered_map<const Snarl*, SnarlState> state;$/;"	m	class:vg::GenomeState
state	haplotypes.hpp	/^  gen_range_t state = make_pair(1, 0);$/;"	m	struct:haplo::haplo_DP_rectangle
state	watchdog.hpp	/^    vector<thread_state_t> state;$/;"	m	class:vg::Watchdog
state_hash	gbwt_extender.cpp	/^struct state_hash {$/;"	s	namespace:vg	file:
state_type	phase_unfolder.hpp	/^    typedef std::pair<search_type, path_type> state_type;$/;"	t	class:vg::PhaseUnfolder
states	gbwt_extender.cpp	/^    std::vector<gbwt::SearchState> states;$/;"	m	struct:vg::WFANode	file:
states	phase_unfolder.hpp	/^    std::stack<state_type> states;$/;"	m	class:vg::PhaseUnfolder
states_by_start	gbwt_extender.cpp	/^    std::map<size_t, size_t> states_by_start;$/;"	m	struct:vg::WFANode	file:
std	algorithms/chain_items.hpp	/^namespace std {$/;"	n
std	gbwt_extender.cpp	/^namespace std {$/;"	n	file:
std	gbwt_extender.hpp	/^namespace std {$/;"	n
std	hash_map.hpp	/^namespace std {$/;"	n
std	index_registry.cpp	/^namespace std {$/;"	n	file:
std	nodeside.hpp	/^namespace std {$/;"	n
std	nodetraversal.hpp	/^namespace std {$/;"	n
std	phased_genome.hpp	/^namespace std{$/;"	n
std	snarls.hpp	/^namespace std {$/;"	n
std	types.hpp	/^namespace std {$/;"	n
std	unittest/mem_accelerator.cpp	/^namespace std {$/;"	n	file:
std_dev	mapper.cpp	/^double FragmentLengthDistribution::std_dev() const {$/;"	f	class:vg::FragmentLengthDistribution
stddev	statistics.hpp	/^    T stddev() const {$/;"	f	class:vg::normal_distribution
stddev	statistics.hpp	/^    T stddev() const {$/;"	f	class:vg::truncated_normal_distribution
stdev	statistics.hpp	/^    double stdev;$/;"	m	struct:vg::SummaryStatistics
stdev	statistics.hpp	/^double stdev(const T& v) {$/;"	f	namespace:vg
step	subcommand/options.hpp	/^    Number step = 1;$/;"	m	struct:vg::Range
step_1_build_gbwts	subcommand/gbwt_main.cpp	/^void step_1_build_gbwts(GBWTHandler& gbwts, GraphHandler& graphs, GBWTConfig& config) {$/;"	f
step_2_merge_gbwts	subcommand/gbwt_main.cpp	/^void step_2_merge_gbwts(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f
step_3_alter_gbwt	subcommand/gbwt_main.cpp	/^void step_3_alter_gbwt(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f
step_4_path_cover	subcommand/gbwt_main.cpp	/^void step_4_path_cover(GBWTHandler& gbwts, GraphHandler& graphs, GBWTConfig& config) {$/;"	f
step_5_gbwtgraph	subcommand/gbwt_main.cpp	/^void step_5_gbwtgraph(GBWTHandler& gbwts, GraphHandler& graphs, GBWTConfig& config) {$/;"	f
step_6_r_index	subcommand/gbwt_main.cpp	/^void step_6_r_index(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f
step_7_metadata	subcommand/gbwt_main.cpp	/^void step_7_metadata(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f
step_8_threads	subcommand/gbwt_main.cpp	/^void step_8_threads(GBWTHandler& gbwts, GBWTConfig& config) {$/;"	f
step_in_path	traversal_finder.cpp	/^pair<step_handle_t, bool> VCFTraversalFinder::step_in_path(handle_t handle, path_handle_t path_handle) const {$/;"	f	class:vg::VCFTraversalFinder
steps	index_registry.hpp	/^    vector<RecipeName> steps;$/;"	m	class:vg::IndexingPlan
steps_of_handle	memoizing_graph.cpp	/^    std::vector<step_handle_t> MemoizingGraph::steps_of_handle(const handle_t& handle,$/;"	f	class:vg::MemoizingGraph
steps_of_handle_memo	memoizing_graph.hpp	/^        unordered_map<handle_t, vector<step_handle_t>> steps_of_handle_memo;$/;"	m	class:vg::MemoizingGraph
stop	funnel.cpp	/^void Funnel::stop() {$/;"	f	class:vg::Funnel
stop_link	crash.cpp	/^static void stop_link() {$/;"	f	namespace:vg
stop_on_duplicate_paths	algorithms/gfa_to_handle.hpp	/^    bool stop_on_duplicate_paths = false;$/;"	m	class:vg::algorithms::GFAParser
stop_time	funnel.hpp	/^    time_point stop_time;$/;"	m	class:vg::Funnel::State
stop_watcher	watchdog.hpp	/^    atomic<bool> stop_watcher;$/;"	m	class:vg::Watchdog
stored_crash_context	crash.cpp	/^thread_local std::string stored_crash_context;$/;"	m	namespace:vg	file:
stored_length	gbwt_extender.cpp	/^    size_t stored_length;$/;"	m	struct:vg::WFANode	file:
strand_is_rev	gff_reader.hpp	/^        bool strand_is_rev = false;$/;"	m	struct:vg::GFFRecord
strand_sampler	sampler.hpp	/^    vg::uniform_int_distribution<uint8_t> strand_sampler;$/;"	m	class:vg::NGSSimulator
stream_sort	stream_sorter.hpp	/^void StreamSorter<Message>::stream_sort(istream& stream_in, ostream& stream_out, StreamIndex<Message>* index_to) {$/;"	f	class:vg::StreamSorter
streaming_merge	stream_sorter.hpp	/^vector<string> StreamSorter<Message>::streaming_merge(const vector<string>& temp_files_in, unordered_map<string, size_t>* messages_per_file) {$/;"	f	class:vg::StreamSorter
streaming_merge	stream_sorter.hpp	/^void StreamSorter<Message>::streaming_merge(list<cursor_t>& cursors, emitter_t& emitter, size_t expected_messages) {$/;"	f	class:vg::StreamSorter
strict_conflict_checking	deconstructor.hpp	/^    bool strict_conflict_checking = false;$/;"	m	class:vg::Deconstructor
string	unittest/catch.hpp	/^        auto str() const -> std::string;$/;"	m	class:Catch::ReusableStringStream::std
string	unittest/catch.hpp	/^    auto operator += ( std::string& lhs, StringRef const& sr ) -> std::string&;$/;"	m	class:Catch::std
string_hash_map	hash_map.hpp	/^    string_hash_map() {$/;"	f	class:vg::string_hash_map
string_hash_map	hash_map.hpp	/^class string_hash_map : public google::dense_hash_map<K, V>$/;"	c	namespace:vg
string_hash_set	hash_map.hpp	/^    string_hash_set() {$/;"	f	class:vg::string_hash_set
string_hash_set	hash_map.hpp	/^class string_hash_set : public google::dense_hash_set<K>$/;"	c	namespace:vg
string_to_graph	unittest/vg.cpp	/^VG string_to_graph(const string& json) {$/;"	f	namespace:vg::unittest
stringify	unittest/catch.hpp	/^        inline std::string stringify( NSString* nsstring ) {$/;"	f	namespace:Catch::Detail
stringify	unittest/catch.hpp	/^        std::string stringify(const T& e) {$/;"	f	namespace:Catch::Detail
strip_bonuses	mapper.hpp	/^    bool strip_bonuses; $/;"	m	class:vg::BaseMapper
strip_from_end	alignment.cpp	/^Alignment strip_from_end(const Alignment& aln, size_t drop) {$/;"	f	namespace:vg
strip_from_start	alignment.cpp	/^Alignment strip_from_start(const Alignment& aln, size_t drop) {$/;"	f	namespace:vg
strip_full_length_bonuses	multipath_mapper.cpp	/^    void MultipathMapper::strip_full_length_bonuses(multipath_alignment_t& multipath_aln) const {$/;"	f	class:vg::MultipathMapper
strip_subrange	path.cpp	/^string Paths::strip_subrange(const string& path_name, subrange_t* out_subrange) {$/;"	f	class:vg::Paths
strip_suffixes	subcommand/giraffe_main.cpp	/^std::string strip_suffixes(std::string filename, const std::vector<std::string>& suffixes) {$/;"	f
stripped_match_alg_max_length	multipath_mapper.hpp	/^        size_t stripped_match_alg_max_length = 0;$/;"	m	class:vg::MultipathMapper
stripped_match_alg_strip_length	multipath_mapper.hpp	/^        size_t stripped_match_alg_strip_length = 16;$/;"	m	class:vg::MultipathMapper
stripped_match_alg_target_count	multipath_mapper.hpp	/^        size_t stripped_match_alg_target_count = 5;$/;"	m	class:vg::MultipathMapper
stubbify_ref_paths	clip.cpp	/^void stubbify_ref_paths(MutablePathMutableHandleGraph* graph, const vector<string>& ref_prefixes, int64_t min_fragment_len, bool verbose) {$/;"	f	namespace:vg
sub_mem_count_thinning	mapper.hpp	/^    int sub_mem_count_thinning = 4; \/\/ count every this many bases to verify sub-MEM count$/;"	m	class:vg::BaseMapper
sub_mem_thinning_burn_in	mapper.hpp	/^    int sub_mem_thinning_burn_in = 16; \/\/ start counting at this many bases to verify sub-MEM count$/;"	m	class:vg::BaseMapper
sub_overlaps_of_first_aln	mapper.cpp	/^int sub_overlaps_of_first_aln(const vector<Alignment>& alns, float overlap_fraction) {$/;"	f	namespace:vg
sub_poly_rate	sampler.hpp	/^    const double sub_poly_rate;$/;"	m	class:vg::NGSSimulator
sub_score	readfilter.hpp	/^    bool sub_score = false;$/;"	m	class:vg::ReadFilter
subchain_id	subcommand/haplotypes_main.cpp	/^    size_t subchain_id = std::numeric_limits<size_t>::max();$/;"	m	struct:HaplotypesConfig	file:
subchain_intervals	subcommand/haplotypes_main.cpp	/^std::vector<ReferenceInterval> subchain_intervals(const gbwtgraph::GBZ& gbz, const Haplotypes& haplotypes, gbwt::size_type sequence_id, size_t chain_id, bool reverse) {$/;"	f
subchain_length	recombinator.hpp	/^        size_t subchain_length = SUBCHAIN_LENGTH;$/;"	m	struct:vg::HaplotypePartitioner::Parameters
subchain_to_string	subcommand/haplotypes_main.cpp	/^std::string subchain_to_string(size_t chain_id, size_t subchain_id, const Haplotypes::Subchain& subchain) {$/;"	f
subchains	recombinator.hpp	/^        size_t subchains = 0;$/;"	m	struct:vg::Recombinator::Statistics
subchains	recombinator.hpp	/^        std::vector<Subchain> subchains;$/;"	m	struct:vg::Haplotypes::TopLevelChain
subcommand	subcommand/options.cpp	/^namespace subcommand {$/;"	n	namespace:vg	file:
subcommand	subcommand/options.hpp	/^namespace subcommand {$/;"	n	namespace:vg
subcommand	subcommand/subcommand.cpp	/^namespace subcommand {$/;"	n	namespace:vg	file:
subcommand	subcommand/subcommand.hpp	/^namespace subcommand {$/;"	n	namespace:vg
subgraph	graph_synchronizer.hpp	/^        VG subgraph;$/;"	m	class:vg::GraphSynchronizer::Lock
subgraph	splicing.hpp	/^    IncrementalSubgraph subgraph;$/;"	m	class:vg::SpliceRegion
subgraph_containing_path_snarls	snarl_distance_index.cpp	/^void subgraph_containing_path_snarls(const SnarlDistanceIndex& distance_index, const HandleGraph* graph, const Path& path, std::unordered_set<nid_t>& subgraph) {$/;"	f	namespace:vg
subgraph_in_distance_range	snarl_distance_index.cpp	/^void subgraph_in_distance_range(const SnarlDistanceIndex& distance_index, const Path& path, const HandleGraph* super_graph, size_t min_distance,$/;"	f	namespace:vg
subgraph_in_distance_range_walk_across_chain	snarl_distance_index.cpp	/^void subgraph_in_distance_range_walk_across_chain (const SnarlDistanceIndex& distance_index, const HandleGraph* super_graph,$/;"	f	namespace:vg
subgraph_in_distance_range_walk_graph	snarl_distance_index.cpp	/^void subgraph_in_distance_range_walk_graph(const HandleGraph* super_graph, size_t min_distance, size_t max_distance,$/;"	f	namespace:vg
subgraph_min	subcommand/prune_main.cpp	/^    static std::map<PruningMode, size_t> subgraph_min;$/;"	m	struct:PruningParameters	file:
subgraph_prune	variant_adder.hpp	/^    size_t subgraph_prune = 0;$/;"	m	class:vg::VariantAdder
subgroups	subcommand/options.hpp	/^    std::vector<std::unique_ptr<BaseOptionGroup>> subgroups;$/;"	m	struct:vg::subcommand::GroupedOptionGroup
subpath	multipath_alignment.hpp	/^    inline const subpath_t& multipath_alignment_t::subpath(size_t i) const {$/;"	f	class:vg::multipath_alignment_t
subpath	multipath_alignment.hpp	/^    inline const vector<subpath_t>& multipath_alignment_t::subpath() const {$/;"	f	class:vg::multipath_alignment_t
subpath_size	multipath_alignment.hpp	/^    inline size_t multipath_alignment_t::subpath_size() const {$/;"	f	class:vg::multipath_alignment_t
subpath_t	multipath_alignment.hpp	/^    class subpath_t {$/;"	c	namespace:vg
subpath_to_length	hts_alignment_emitter.hpp	/^    unordered_map<string, int64_t> subpath_to_length;$/;"	m	class:vg::HTSWriter
subpath_topological_order	multipath_alignment.cpp	/^    vector<size_t> subpath_topological_order(const multipath_alignment_t& multipath_aln,$/;"	f	namespace:vg
subsequence	readfilter.hpp	/^        min_end_matches, min_mapq, split, repeat, defray, defray_all, random, min_base_qual, subsequence, filtered,$/;"	e	enum:vg::Counts::FilterName
subsequences	readfilter.hpp	/^    vector<string> subsequences;$/;"	m	class:vg::ReadFilter
substage	funnel.cpp	/^void Funnel::substage(const string& name) {$/;"	f	class:vg::Funnel
substage_name	funnel.hpp	/^    string substage_name;$/;"	m	class:vg::Funnel::State
substage_stop	funnel.cpp	/^void Funnel::substage_stop() {$/;"	f	class:vg::Funnel
subtract_log	statistics.hpp	/^inline double subtract_log(double log_x, double log_y) {$/;"	f	namespace:vg
successor_offset	gbwt_extender.cpp	/^    void successor_offset(MatchPos& pos) const {$/;"	f	class:vg::WFATree
suffix	gbwt_extender.cpp	/^WFAAlignment WFAExtender::suffix(const std::string& sequence, pos_t from) const {$/;"	f	class:vg::WFAExtender
suffix	index_registry.hpp	/^    const string suffix;$/;"	m	class:vg::IndexFile
suffix	recombinator.cpp	/^void RecombinatorHaplotype::suffix(const gbwt::GBWT& index) {$/;"	f	class:vg::RecombinatorHaplotype
suffix	recombinator.hpp	/^            suffix = 2,$/;"	m	struct:vg::Haplotypes::Subchain	typeref:enum:vg::Haplotypes::Subchain::
suffixes	phase_unfolder.hpp	/^    pair_hash_map<std::pair<gbwt::node_type, gbwt::node_type>, gbwt::node_type> prefixes, suffixes;$/;"	m	class:vg::PhaseUnfolder
suggest_edge	explainer.cpp	/^void DiagramExplainer::suggest_edge(const std::string& a_id, const std::string& b_id, const std::string& category, double importance, const annotation_t& annotations) {$/;"	f	class:vg::DiagramExplainer
sum	haplotypes.hpp	/^  double sum;$/;"	m	struct:haplo::haplo_DP_column
sum	utility.hpp	/^typename Collection::value_type sum(const Collection& collection) {$/;"	f	namespace:vg
summary_statistics	statistics.hpp	/^SummaryStatistics summary_statistics(const std::map<Number, size_t>& values) {$/;"	f	namespace:vg
super	path_subgraph.hpp	/^        const HandleGraph* super = nullptr;$/;"	m	class:vg::PathSubgraph
super	subgraph.hpp	/^        const HandleGraph* super = nullptr;$/;"	m	class:vg::SubHandleGraph
super	tree_subgraph.hpp	/^        const HandleGraph* super;$/;"	m	class:vg::TreeSubgraph
support_finder	snarl_caller.hpp	/^    TraversalSupportFinder& support_finder;$/;"	m	class:vg::SupportBasedSnarlCaller
support_max	genotypekit.cpp	/^Support support_max(const Support& a, const Support& b) {$/;"	f	namespace:vg
support_min	genotypekit.cpp	/^Support support_min(const Support& a, const Support& b) {$/;"	f	namespace:vg
support_val	snarl_caller.hpp	/^    static double support_val(const Support& support) { return total(support); };$/;"	f	class:vg::SupportBasedSnarlCaller
support_val	traversal_support.hpp	/^    static double support_val(const Support& support) { return total(support); };$/;"	f	class:vg::TraversalSupportFinder
suppress_cluster_merging	multipath_mapper.hpp	/^        bool suppress_cluster_merging = false;$/;"	m	class:vg::MultipathMapper
suppress_mismapping_detection	multipath_mapper.hpp	/^        bool suppress_mismapping_detection = false;$/;"	m	class:vg::MultipathMapper
suppress_multicomponent_splitting	multipath_mapper.hpp	/^        bool suppress_multicomponent_splitting = false;$/;"	m	class:vg::MultipathMapper
suppress_p_value_memoization	multipath_mapper.hpp	/^        bool suppress_p_value_memoization = false;$/;"	m	class:vg::MultipathMapper
suppress_tail_anchors	multipath_mapper.hpp	/^        bool suppress_tail_anchors = false;$/;"	m	class:vg::MultipathMapper
surface	viz.hpp	/^    cairo_surface_t *surface = nullptr;$/;"	m	class:vg::Viz
surject	surjector.cpp	/^    Alignment Surjector::surject(const Alignment& source, const unordered_set<path_handle_t>& paths, string& path_name_out,$/;"	f	class:vg::Surjector
surject	surjector.cpp	/^    Alignment Surjector::surject(const Alignment& source, const unordered_set<path_handle_t>& paths,$/;"	f	class:vg::Surjector
surject	surjector.cpp	/^    multipath_alignment_t Surjector::surject(const multipath_alignment_t& source, const unordered_set<path_handle_t>& paths,$/;"	f	class:vg::Surjector
surject_alignments_in_place	surjecting_alignment_emitter.cpp	/^void SurjectingAlignmentEmitter::surject_alignments_in_place(vector<Alignment>& alns) const {$/;"	f	class:vg::SurjectingAlignmentEmitter
surject_internal	surjector.cpp	/^    void Surjector::surject_internal(const Alignment* source_aln, const multipath_alignment_t* source_mp_aln,$/;"	f	class:vg::Surjector
surject_subpath_global	surjecting_alignment_emitter.hpp	/^    bool surject_subpath_global = true;$/;"	m	class:vg::SurjectingAlignmentEmitter
surjector	surjecting_alignment_emitter.hpp	/^    Surjector surjector;$/;"	m	class:vg::SurjectingAlignmentEmitter
swap	genome_state.cpp	/^void SnarlState::swap(size_t lane1, size_t lane2) {$/;"	f	class:vg::SnarlState
swap_alleles	phased_genome.cpp	/^    void PhasedGenome::swap_alleles(const Snarl& site, int haplotype_1, int haplotype_2) {$/;"	f	class:vg::PhasedGenome
swap_endianness	endianness.hpp	/^    inline IntType endianness<IntType>::swap_endianness(IntType value) {$/;"	f	class:vg::endianness
swap_handles	vg.cpp	/^void VG::swap_handles(const handle_t& a, const handle_t& b) {$/;"	f	class:vg::VG
swap_haplotypes	genome_state.cpp	/^SwapHaplotypesCommand GenomeState::swap_haplotypes(const SwapHaplotypesCommand& c) {$/;"	f	class:vg::GenomeState
swap_label	phased_genome.cpp	/^    void PhasedGenome::swap_label(const Snarl& site, Haplotype& haplotype_1, Haplotype& haplotype_2) {$/;"	f	class:vg::PhasedGenome
swap_node_id	vg.cpp	/^void VG::swap_node_id(Node* node, nid_t new_id) {$/;"	f	class:vg::VG
swap_node_id	vg.cpp	/^void VG::swap_node_id(nid_t node_id, nid_t new_id) {$/;"	f	class:vg::VG
swap_node_ids	path.cpp	/^void Paths::swap_node_ids(const std::function<nid_t(const nid_t&)>& get_new_id) {$/;"	f	class:vg::Paths
swap_node_ids	path.cpp	/^void Paths::swap_node_ids(hash_map<id_t, id_t>& id_mapping) {$/;"	f	class:vg::Paths
swap_nodes	vg.cpp	/^void VG::swap_nodes(Node* a, Node* b) {$/;"	f	class:vg::VG
swap_remove	swap_remove.hpp	/^bool swap_remove(std::vector<T>& v, const T& e) {$/;"	f
symbol_count	pictographs.hpp	/^    const int symbol_count = 766;$/;"	m	class:vg::Pictographs
symbolic_allele_warnings	constructor.hpp	/^    set<string> symbolic_allele_warnings;$/;"	m	class:vg::Constructor
symbols	pictographs.hpp	/^    const string symbols = "🌀🌁🌂🌃🌄🌅🌆🌇🌈🌉🌊🌋🌌🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝🌞🌟🌠🌡🌢🌣🌤🌥🌦🌧🌨🌩🌪🌫🌬🌭🌮🌯🌰🌱🌲🌳🌴🌵🌶🌷🌸🌹🌺🌻🌼🌽🌾🌿🍀🍁🍂🍃🍄🍅🍆🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍔🍕🍖🍗🍘🍙🍚🍛🍜🍝🍞🍟🍠🍡🍢🍣🍤🍥🍦🍧🍨🍩🍪🍫🍬🍭🍮🍯🍰🍱🍲🍳🍴🍵🍶🍷🍸🍹🍺🍻🍼🍽🍾🍿🎀🎁🎂🎃🎄🎅🎆🎇🎈🎉🎊🎋🎌🎍🎎🎏🎐🎑🎒🎓🎔🎕🎖🎗🎘🎙🎚🎛🎜🎝🎞🎟🎠🎡🎢🎣🎤🎥🎦🎧🎨🎩🎪🎫🎬🎭🎮🎯🎰🎱🎲🎳🎴🎵🎶🎷🎸🎹🎺🎻🎼🎽🎾🎿🏀🏁🏂🏃🏄🏅🏆🏇🏈🏉🏊🏋🏌🏍🏎🏏🏐🏑🏒🏓🏔🏕🏖🏗🏘🏙🏚🏛🏜🏝🏞🏟🏠🏡🏢🏣🏤🏥🏦🏧🏨🏩🏪🏫🏬🏭🏮🏯🏰🏱🏲🏳🏴🏵🏶🏷🏸🏹🏺🏻🏼🏽🏾🏿🐀🐁🐂🐃🐄🐅🐆🐇🐈🐉🐊🐋🐌🐍🐎🐏🐐🐑🐒🐓🐔🐕🐖🐗🐘🐙🐚🐛🐜🐝🐞🐟🐠🐡🐢🐣🐤🐥🐦🐧🐨🐩🐪🐫🐬🐭🐮🐯🐰🐱🐲🐳🐴🐵🐶🐷🐸🐹🐺🐻🐼🐽🐾🐿👀👁👂👃👄👅👆👇👈👉👊👋👌👍👎👏👐👑👒👓👔👕👖👗👘👙👚👛👜👝👞👟👠👡👢👣👤👥👦👧👨👩👪👫👬👭👮👯👰👱👲👳👴👵👶👷👸👹👺👻👼👽👾👿💀💁💂💃💄💅💆💇💈💉💊💋💌💍💎💏💐💑💒💓💔💕💖💗💘💙💚💛💜💝💞💟💠💡💢💣💤💥💦💧💨💩💪💫💬💭💮💯💰💱💲💳💴💵💶💷💸💹💺💻💼💽💾💿📀📁📂📃📄📅📆📇📈📉📊📋📌📍📎📏📐📑📒📓📔📕📖📗📘📙📚📛📜📝📞📟📠📡📢📣📤📥📦📧📨📩📪📫📬📭📮📯📰📱📲📳📴📵📶📷📸📹📺📻📼📽📾📿🔀🔁🔂🔃🔄🔅🔆🔇🔈🔉🔊🔋🔌🔍🔎🔏🔐🔑🔒🔓🔔🔕🔖🔗🔘🔙🔚🔛🔜🔝🔞🔟🔠🔡🔢🔣🔤🔥🔦🔧🔨🔩🔪🔫🔬🔭🔮🔯🔰🔱🔲🔳🔴🔵🔶🔷🔸🔹🔺🔻🔼🔽🔾🔿🕀🕁🕂🕃🕄🕅🕆🕇🕈🕉🕊🕋🕌🕍🕎🕏🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧🕨🕩🕪🕫🕬🕭🕮🕯🕰🕱🕲🕳🕴🕵🕶🕷🕸🕹🕻🕼🕽🕾🕿🖀🖁🖂🖃🖄🖅🖆🖇🖈🖉🖊🖋🖌🖍🖎🖏🖐🖑🖒🖓🖔🖕🖖🖗🖘🖙🖚🖛🖜🖝🖞🖟🖠🖡🖢🖣🖥🖦🖧🖨🖩🖪🖫🖬🖭🖮🖯🖰🖱🖲🖳🖴🖵🖶🖷🖸🖹🖺🖻🖼🖽🖾🖿🗀🗁🗂🗃🗄🗅🗆🗇🗈🗉🗊🗋🗌🗍🗎🗏🗐🗑🗒🗓🗔🗕🗖🗗🗘🗙🗚🗛🗜🗝🗞🗟🗠🗡🗢🗣🗤🗥🗦🗧🗨🗩🗪🗫🗬🗭🗮🗯🗰🗱🗲🗳🗴🗵🗶🗷🗸🗹🗺🗻🗼🗽🗾🗿💩";$/;"	m	class:vg::Pictographs
sync	variant_adder.hpp	/^    GraphSynchronizer sync;$/;"	m	class:vg::VariantAdder
sync_paths	vg.cpp	/^void VG::sync_paths(void) {$/;"	f	class:vg::VG
synchronizer	graph_synchronizer.hpp	/^        GraphSynchronizer& synchronizer;$/;"	m	class:vg::GraphSynchronizer::Lock
synthesize_tail_anchors	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::synthesize_tail_anchors(const Alignment& alignment, const HandleGraph& align_graph, const GSSWAligner* aligner,$/;"	f	class:vg::MultipathAlignmentGraph
tag	funnel.cpp	/^void Funnel::tag(size_t item, State state, size_t tag_start, size_t tag_length) {$/;"	f	class:vg::Funnel
tag	funnel.hpp	/^        State tag = State::NONE;$/;"	m	struct:vg::Funnel::State::Item
tag	funnel.hpp	/^        State tag = State::NONE;$/;"	m	struct:vg::Funnel::State::Stage
tag_correct	funnel.cpp	/^void Funnel::tag_correct(size_t item, size_t tag_start, size_t tag_length) {$/;"	f	class:vg::Funnel
tag_length	funnel.hpp	/^        size_t tag_length = 0;$/;"	m	struct:vg::Funnel::State::Item
tag_seeds	minimizer_mapper.cpp	/^void MinimizerMapper::tag_seeds(const Alignment& aln, const std::vector<Seed>::const_iterator& begin, const std::vector<Seed>::const_iterator& end, const VectorView<Minimizer>& minimizers, size_t funnel_offset, Funnel& funnel) const { $/;"	f	class:vg::MinimizerMapper
tag_space	funnel.hpp	/^        PaintableSpace tag_space;$/;"	m	struct:vg::Funnel::State::Stage
tag_start	funnel.hpp	/^        size_t tag_start = std::numeric_limits<size_t>::max();$/;"	m	struct:vg::Funnel::State::Item
tags	subcommand/gbwt_main.cpp	/^    bool metadata = false, contigs = false, haplotypes = false, samples = false, list_names = false, thread_names = false, tags = false;$/;"	m	struct:GBWTConfig	file:
tags	unittest/catch.hpp	/^    StringRef tags;$/;"	m	struct:Catch::NameAndTags
tags_to_set	subcommand/gbwt_main.cpp	/^    std::map<std::string, std::string> tags_to_set; \/\/ Tag changes to apply to the GBWT$/;"	m	struct:GBWTConfig	file:
tail_gap_memo_max_size	multipath_alignment_graph.cpp	/^    const size_t MultipathAlignmentGraph::tail_gap_memo_max_size = 1000;$/;"	m	class:vg::MultipathAlignmentGraph	file:
tail_gap_memo_max_size	multipath_alignment_graph.hpp	/^        static const size_t tail_gap_memo_max_size;$/;"	m	class:vg::MultipathAlignmentGraph
tail_nodes	vg.cpp	/^vector<Node*> VG::tail_nodes(void) {$/;"	f	class:vg::VG
tail_nodes	vg.cpp	/^void VG::tail_nodes(vector<Node*>& nodes) {$/;"	f	class:vg::VG
tail_offset	gbwt_extender.cpp	/^size_t GaplessExtension::tail_offset(const HandleGraph& graph) const {$/;"	f	class:vg::GaplessExtension
tail_position	gbwt_extender.cpp	/^Position GaplessExtension::tail_position(const HandleGraph& graph) const {$/;"	f	class:vg::GaplessExtension
take	recombinator.cpp	/^void RecombinatorHaplotype::take($/;"	f	class:vg::RecombinatorHaplotype
take_character	algorithms/gfa_to_handle.cpp	/^static void take_character(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, char value, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_flag_character	algorithms/gfa_to_handle.cpp	/^static bool take_flag_character(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, char true_value, char false_value, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_number	algorithms/gfa_to_handle.cpp	/^static int64_t take_number(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, int64_t default_value, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_optional_range	algorithms/gfa_to_handle.cpp	/^static GFAParser::chars_t take_optional_range(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_optional_string	algorithms/gfa_to_handle.cpp	/^static string take_optional_string(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_optional_tab	algorithms/gfa_to_handle.cpp	/^static bool take_optional_tab(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_range	algorithms/gfa_to_handle.cpp	/^static GFAParser::chars_t take_range(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_range_until	algorithms/gfa_to_handle.cpp	/^static GFAParser::chars_t take_range_until(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, const char* end_chars, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_range_until_optional	algorithms/gfa_to_handle.cpp	/^static GFAParser::chars_t take_range_until_optional(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, const char* end_chars, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_string	algorithms/gfa_to_handle.cpp	/^static string take_string(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_tab	algorithms/gfa_to_handle.cpp	/^static void take_tab(GFAParser::cursor_t& cursor, const GFAParser::cursor_t& end, const char* parsing_state = nullptr) {$/;"	f	namespace:vg::algorithms
take_unique_minimizers	recombinator.cpp	/^std::vector<HaplotypePartitioner::kmer_type> take_unique_minimizers(const std::string& sequence, const HaplotypePartitioner::minimizer_index_type& minimizer_index) {$/;"	f	namespace:vg
target	index_registry.hpp	/^    IndexName target;$/;"	m	class:vg::InsufficientInputException
target_alignment	alignment.cpp	/^Alignment target_alignment(const PathPositionHandleGraph* graph, const path_handle_t& path, size_t pos1, size_t pos2,$/;"	f	namespace:vg
target_memory_usage	index_registry.cpp	/^int64_t IndexingPlan::target_memory_usage() const {$/;"	f	class:vg::IndexingPlan
target_memory_usage	index_registry.hpp	/^    int64_t target_memory_usage = numeric_limits<int64_t>::max();$/;"	m	class:vg::IndexRegistry
target_offset	gbwt_extender.cpp	/^    int32_t target_offset() const {$/;"	f	struct:vg::WFAPoint
targets	index_registry.hpp	/^    set<IndexName> targets;$/;"	m	class:vg::IndexingPlan
task_name	watchdog.hpp	/^        string task_name;$/;"	m	struct:vg::Watchdog::thread_state_t
telomere_pair	genome_state.hpp	/^    pair<const Snarl*, const Snarl*> telomere_pair;$/;"	m	struct:vg::SwapHaplotypesCommand
telomeres	genome_state.hpp	/^    unordered_set<pair<const Snarl*, const Snarl*>> telomeres;$/;"	m	class:vg::GenomeState
temp_dir	utility.cpp	/^static string temp_dir;$/;"	m	namespace:vg::temp_file	file:
temp_file	utility.cpp	/^namespace temp_file {$/;"	n	namespace:vg	file:
temp_file	utility.hpp	/^namespace temp_file {$/;"	n	namespace:vg
test_mean	benchmark.hpp	/^    benchtime test_mean;$/;"	m	struct:vg::BenchmarkResult
test_seed_source	unittest/randomness.hpp	/^inline unsigned int test_seed_source() {$/;"	f	namespace:vg::unittest
test_splice_candidates	multipath_mapper.cpp	/^    bool MultipathMapper::test_splice_candidates(const Alignment& alignment, bool searching_left,$/;"	f	class:vg::MultipathMapper
test_stddev	benchmark.hpp	/^    benchtime test_stddev;$/;"	m	struct:vg::BenchmarkResult
thin_alignment_cutoff	variant_adder.hpp	/^    size_t thin_alignment_cutoff = 10000;$/;"	m	class:vg::VariantAdder
thread_chunk_inflation_factor	index_registry.cpp	/^double IndexingParameters::thread_chunk_inflation_factor = 2.0;$/;"	m	class:vg::IndexingParameters	file:
thread_chunk_inflation_factor	index_registry.hpp	/^    static double thread_chunk_inflation_factor;$/;"	m	struct:vg::IndexingParameters
thread_extension	mapper.hpp	/^    int thread_extension; \/\/ add this many nodes in id space to the end of the thread when building thread into a subgraph$/;"	m	class:vg::Mapper
thread_ids_t	transcriptome.hpp	/^typedef vector<gbwt::size_type> thread_ids_t;$/;"	t	namespace:vg
thread_mode	subcommand/gbwt_main.cpp	/^    bool metadata_mode = false, thread_mode = false;$/;"	m	struct:GBWTConfig	file:
thread_names	subcommand/gbwt_main.cpp	/^    bool metadata = false, contigs = false, haplotypes = false, samples = false, list_names = false, thread_names = false, tags = false;$/;"	m	struct:GBWTConfig	file:
thread_output	subcommand/gbwt_main.cpp	/^    std::string thread_output; \/\/ Threads in SDSL format.$/;"	m	struct:GBWTConfig	file:
thread_state_t	watchdog.hpp	/^    struct thread_state_t {$/;"	s	class:vg::Watchdog
thread_to_graph_spanned	haplotype_extracter.cpp	/^void thread_to_graph_spanned(thread_t& t, Graph& g, const HandleGraph& source) {$/;"	f	namespace:vg
threads	readfilter.hpp	/^    int threads = -1;$/;"	m	class:vg::ReadFilter
threads	subcommand/haplotypes_main.cpp	/^    size_t threads = haplotypes_default_threads();$/;"	m	struct:HaplotypesConfig	file:
threads_for_contig	gbwt_helper.cpp	/^std::vector<gbwt::size_type> threads_for_contig(const gbwt::GBWT& gbwt_index, const std::string& contig_name) {$/;"	f	namespace:vg
threads_for_sample	gbwt_helper.cpp	/^std::vector<gbwt::size_type> threads_for_sample(const gbwt::GBWT& gbwt_index, const std::string& sample_name) {$/;"	f	namespace:vg
threads_to_jobs	subcommand/haplotypes_main.cpp	/^size_t threads_to_jobs(size_t threads) {$/;"	f
three_edge_connected_component_merges	algorithms/three_edge_connected_components.hpp	/^void three_edge_connected_component_merges(const function<void(const function<void(TECCNode)>&)>& for_each_node,$/;"	f	namespace:vg::algorithms
three_edge_connected_component_merges_dense	algorithms/three_edge_connected_components.cpp	/^void three_edge_connected_component_merges_dense(size_t node_count, size_t first_root, $/;"	f	namespace:vg::algorithms
three_edge_connected_components	algorithms/three_edge_connected_components.hpp	/^void three_edge_connected_components(const function<void(const function<void(TECCNode)>&)>& for_each_node,$/;"	f	namespace:vg::algorithms
three_edge_connected_components_dense	algorithms/three_edge_connected_components.cpp	/^void three_edge_connected_components_dense(size_t node_count, size_t first_root,$/;"	f	namespace:vg::algorithms
three_edge_connected_components_dense_cactus	algorithms/three_edge_connected_components.cpp	/^void three_edge_connected_components_dense_cactus(size_t node_count, $/;"	f	namespace:vg::algorithms
tick	subcommand/options.hpp	/^    bool tick() {$/;"	f	struct:vg::Range
tick_chain	subcommand/options.cpp	/^bool TickChainLink::tick_chain() {$/;"	f	class:vg::subcommand::TickChainLink
tick_chain	subcommand/options.hpp	/^    bool tick_chain() {$/;"	f	struct:vg::Range
tick_chain_parent	subcommand/options.hpp	/^    std::function<bool(void)> tick_chain_parent = []() {$/;"	m	struct:vg::subcommand::TickChainLink
timed_out	watchdog.hpp	/^        bool timed_out = false;$/;"	m	struct:vg::Watchdog::thread_state_t
timeout	watchdog.hpp	/^    duration timeout;$/;"	m	class:vg::Watchdog
tmpfstream_locks	packer.hpp	/^    std::mutex* tmpfstream_locks;$/;"	m	class:vg::Packer
tmpfstreams	packer.hpp	/^    vector<ofstream*> tmpfstreams;$/;"	m	class:vg::Packer
toString	unittest/genotypekit.cpp	/^std::string toString(vg::Edge* const& value) {$/;"	f	namespace:Catch
toString	unittest/genotypekit.cpp	/^std::string toString(vg::Node* const& value) {$/;"	f	namespace:Catch
toUppercase	utility.cpp	/^string toUppercase(const string& s) {$/;"	f	namespace:vg
toUppercaseInPlace	utility.cpp	/^void toUppercaseInPlace(string& s) {$/;"	f	namespace:vg
to_alignment	readfilter.hpp	/^Alignment ReadFilter<Read>::to_alignment(const MultipathAlignment& multipath_aln) const {$/;"	f	class:vg::ReadFilter
to_alignment	snarls.hpp	/^inline Alignment to_alignment(const SnarlTraversal& trav, const HandleGraph& graph) {$/;"	f	namespace:vg
to_anchor	minimizer_mapper_from_chains.cpp	/^algorithms::Anchor MinimizerMapper::to_anchor(const Alignment& aln, const VectorView<Minimizer>& minimizers, const Seed& seed) const {$/;"	f	class:vg::MinimizerMapper
to_anchors	minimizer_mapper_from_chains.cpp	/^std::vector<algorithms::Anchor> MinimizerMapper::to_anchors(const Alignment& aln, const VectorView<Minimizer>& minimizers, const std::vector<Seed>& seeds) const {$/;"	f	class:vg::MinimizerMapper
to_backing	extra_node_graph.hpp	/^    inline handle_t to_backing(const handle_t& our_handle) const {$/;"	f	class:vg::ExtraNodeGraph
to_backing	source_sink_overlay.hpp	/^    inline handle_t to_backing(const handle_t& our_handle) const {$/;"	f	class:vg::SourceSinkOverlay
to_big_endian	endianness.hpp	/^    inline IntType endianness<IntType>::to_big_endian(IntType value) {$/;"	f	class:vg::endianness
to_dot	funnel.cpp	/^void Funnel::to_dot(ostream& out) const {$/;"	f	class:vg::Funnel
to_dot	index_registry.cpp	/^string IndexRegistry::to_dot() const {$/;"	f	class:vg::IndexRegistry
to_dot	index_registry.cpp	/^string IndexRegistry::to_dot(const vector<IndexName>& targets) const {$/;"	f	class:vg::IndexRegistry
to_dot	integrated_snarl_finder.cpp	/^void IntegratedSnarlFinder::MergedAdjacencyGraph::to_dot(ostream& out) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
to_dot	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::to_dot(ostream& out, const Alignment* alignment) const {$/;"	f	class:vg::MultipathAlignmentGraph
to_dot	vg.cpp	/^void VG::to_dot(ostream& out,$/;"	f	class:vg::VG
to_edge	snarls.cpp	/^edge_t to_edge(const HandleGraph& graph, const Visit& v1, const Visit& v2) {$/;"	f	namespace:vg
to_graph	path.cpp	/^void Paths::to_graph(Graph& g) {$/;"	f	class:vg::Paths
to_idx	cluster.hpp	/^    size_t to_idx;$/;"	m	class:vg::MEMClusterer::HitEdge
to_json	path.cpp	/^void Paths::to_json(ostream& out) {$/;"	f	class:vg::Paths
to_left_side	snarls.hpp	/^inline NodeSide to_left_side(const Visit& visit) {$/;"	f	namespace:vg
to_length	path.cpp	/^int to_length(const Mapping& m) {$/;"	f	namespace:vg
to_length	path.hpp	/^inline int32_t edit_t::to_length() const {$/;"	f	class:vg::edit_t
to_length_after_pos	alignment.cpp	/^size_t to_length_after_pos(const Alignment& aln, const Position& pos) {$/;"	f	namespace:vg
to_length_before_pos	alignment.cpp	/^size_t to_length_before_pos(const Alignment& aln, const Position& pos) {$/;"	f	namespace:vg
to_mapping	path.cpp	/^Mapping mapping_t::to_mapping(void) const {$/;"	f	class:vg::mapping_t
to_mapping	snarls.hpp	/^inline Mapping to_mapping(const Visit& visit, const HandleGraph& graph) {$/;"	f	namespace:vg
to_mapping	snarls.hpp	/^inline Mapping to_mapping(const Visit& visit, std::function<size_t(id_t)> node_length) {$/;"	f	namespace:vg
to_matrix	banded_global_aligner.hpp	/^        const matrix_t to_matrix;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack::Deflection
to_multipath_alignment	multipath_alignment.cpp	/^    void to_multipath_alignment(const Alignment& aln, multipath_alignment_t& multipath_aln_out) {$/;"	f	namespace:vg
to_node_id	banded_global_aligner.hpp	/^        const int64_t to_node_id;$/;"	m	class:vg::BandedGlobalAligner::AltTracebackStack::Deflection
to_node_traversal	snarls.hpp	/^inline NodeTraversal to_node_traversal(const Visit& visit, VG& graph) {$/;"	f	namespace:vg
to_path	gbwt_extender.cpp	/^Path GaplessExtension::to_path(const HandleGraph& graph, const std::string& sequence) const {$/;"	f	class:vg::GaplessExtension
to_path	gbwt_extender.cpp	/^Path WFAAlignment::to_path(const HandleGraph& graph, const std::string& sequence) const {$/;"	f	class:vg::WFAAlignment
to_path	minimizer_mapper.cpp	/^Path MinimizerMapper::to_path(const ImmutablePath& path) {$/;"	f	class:vg::MinimizerMapper
to_proto_edit	path.cpp	/^void to_proto_edit(const edit_t& edit, Edit& proto_edit) {$/;"	f	namespace:vg
to_proto_mapping	path.cpp	/^void to_proto_mapping(const path_mapping_t& mapping, Mapping& proto_mapping) {$/;"	f	namespace:vg
to_proto_multipath_alignment	multipath_alignment.cpp	/^    void to_proto_multipath_alignment(const multipath_alignment_t& multipath_aln,$/;"	f	namespace:vg
to_proto_path	path.cpp	/^void to_proto_path(const path_t& path, Path& proto_path) {$/;"	f	namespace:vg
to_remove	subcommand/gbwt_main.cpp	/^    std::set<std::string> to_remove; \/\/ Sample names to remove.$/;"	m	struct:GBWTConfig	file:
to_rev_node_traversal	snarls.hpp	/^inline NodeTraversal to_rev_node_traversal(const Visit& visit, VG& graph) {$/;"	f	namespace:vg
to_rev_visit	snarls.hpp	/^inline Visit to_rev_visit(const NodeTraversal& node_traversal) {$/;"	f	namespace:vg
to_right_side	snarls.hpp	/^inline NodeSide to_right_side(const Visit& visit) {$/;"	f	namespace:vg
to_seed	gbwt_extender.hpp	/^    static seed_type to_seed(pos_t pos, size_t read_offset) {$/;"	f	class:vg::GaplessExtender
to_simple_reverse	flow_sort.cpp	/^id_t FlowSort::to_simple_reverse(Edge* &e)$/;"	f	class:vg::FlowSort
to_simple_reverse_orientation	flow_sort.cpp	/^id_t FlowSort::to_simple_reverse_orientation(Edge* &e)$/;"	f	class:vg::FlowSort
to_string	filter.hpp	/^    inline string to_string(){$/;"	f	struct:vg::BREAKPOINT
to_string	gbwt_extender.cpp	/^std::string to_string(const vg::WFAAlignment::Edit& edit) {$/;"	f	namespace:std
to_string	index_registry.cpp	/^static string to_string(const vg::IndexGroup& name) {$/;"	f	namespace:std
to_string	recombinator.cpp	/^std::string Haplotypes::Subchain::to_string() const {$/;"	f	class:vg::Haplotypes::Subchain
to_string	recombinator.cpp	/^std::string to_string(handle_t handle) {$/;"	f	namespace:vg
to_string	snarl_caller.hpp	/^inline string to_string(const HandleGraph& graph, edge_t edge) {$/;"	f	namespace:vg
to_string	snarl_caller.hpp	/^inline string to_string(const HandleGraph& graph, handle_t handle) {$/;"	f	namespace:vg
to_string	subcommand/haplotypes_main.cpp	/^    std::string to_string() const {$/;"	f	struct:ReferenceInterval
to_string	types.hpp	/^inline string to_string(const vg::pos_t& pos) {$/;"	f	namespace:std
to_string	unittest/mem_accelerator.cpp	/^static std::string to_string(const gcsa::range_type& range) {$/;"	f	namespace:std
to_string_gbwtgraph	gbwtgraph_helper.cpp	/^std::string to_string_gbwtgraph(gbwt::node_type node) {$/;"	f	namespace:vg
to_string_gbwtgraph	gbwtgraph_helper.cpp	/^std::string to_string_gbwtgraph(handle_t handle) {$/;"	f	namespace:vg
to_swap	genome_state.hpp	/^    pair<size_t, size_t> to_swap;$/;"	m	struct:vg::SwapHaplotypesCommand
to_turtle	vg.cpp	/^void VG::to_turtle(ostream& out, const string& rdf_base_uri, bool precompress) {$/;"	f	class:vg::VG
to_vcf_genotype	genotypekit.cpp	/^string to_vcf_genotype(const Genotype& gt) {$/;"	f	namespace:vg
to_visit	nodeside.hpp	/^    inline Visit to_visit() const {$/;"	f	class:vg::NodeSide
to_visit	snarls.hpp	/^inline Visit to_visit(const Mapping& mapping, bool make_full_node_match) {$/;"	f	namespace:vg
to_visit	snarls.hpp	/^inline Visit to_visit(const NodeTraversal& node_traversal) {$/;"	f	namespace:vg
to_visit	snarls.hpp	/^inline Visit to_visit(const Snarl& snarl) {$/;"	f	namespace:vg
to_visit	snarls.hpp	/^inline Visit to_visit(const handlegraph::HandleGraph& graph, const handle_t& handle) {$/;"	f	namespace:vg
to_visit	snarls.hpp	/^inline Visit to_visit(id_t node_id, bool is_reverse) {$/;"	f	namespace:vg
to_wfa_alignment	minimizer_mapper_from_chains.cpp	/^WFAAlignment MinimizerMapper::to_wfa_alignment(const algorithms::Anchor& anchor) const {$/;"	f	class:vg::MinimizerMapper
to_xg	vg_set.cpp	/^void VGset::to_xg(xg::XG& index) {$/;"	f	class:vg::VGset
to_xg	vg_set.cpp	/^void VGset::to_xg(xg::XG& index, const function<bool(const string&)>& paths_to_remove, map<string, Path>* removed_paths) {$/;"	f	class:vg::VGset
top	gbwt_extender.cpp	/^        const uint32_t& top() const {$/;"	f	struct:vg::MatchPos::PathList
top	gbwt_extender.cpp	/^        uint32_t& top() {$/;"	f	struct:vg::MatchPos::PathList
top	haplotypes.hpp	/^  int64_t top;$/;"	m	struct:haplo::int_itvl_t
top_border	viz.hpp	/^    int top_border = 0;$/;"	m	class:vg::Viz
top_diag	banded_global_aligner.hpp	/^        int64_t top_diag;$/;"	m	class:vg::BandedGlobalAligner::BAMatrix
top_down_genotype	graph_caller.cpp	/^pair<vector<SnarlTraversal>, vector<int>> LegacyCaller::top_down_genotype(const Snarl& snarl, TraversalFinder& trav_finder, int ploidy,$/;"	f	class:vg::LegacyCaller
top_k	snarl_caller.hpp	/^    size_t top_k = 20;$/;"	m	class:vg::PoissonSupportSnarlCaller
top_level_chains	recombinator.hpp	/^        std::uint64_t top_level_chains = 0;$/;"	m	struct:vg::Haplotypes::Header
top_level_snarls	snarls.cpp	/^const vector<const Snarl*>& SnarlManager::top_level_snarls() const {$/;"	f	class:vg::SnarlManager
top_m	snarl_caller.hpp	/^    size_t top_m = 100;$/;"	m	class:vg::PoissonSupportSnarlCaller
top_tracebacks	multipath_mapper.hpp	/^        bool top_tracebacks = false;$/;"	m	class:vg::MultipathMapper
topological_order	banded_global_aligner.hpp	/^        vector<handle_t> topological_order;$/;"	m	class:vg::BandedGlobalAligner
topological_order	cluster.cpp	/^void MEMClusterer::HitGraph::topological_order(vector<size_t>& order_out) const {$/;"	f	class:vg::MEMClusterer::HitGraph
topological_sort	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::topological_sort(vector<size_t>& order_out) {$/;"	f	class:vg::MultipathAlignmentGraph
topologically_order_subpaths	multipath_alignment.cpp	/^    void topologically_order_subpaths(multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
total	genotypekit.cpp	/^double total(const Support& support) {$/;"	f	namespace:vg
total_kmers	recombinator.hpp	/^        std::uint64_t total_kmers = 0;$/;"	m	struct:vg::Haplotypes::Header
total_node_quality	packer.cpp	/^size_t Packer::total_node_quality(size_t i) const {$/;"	f	class:vg::Packer
total_seq_length	mapper.hpp	/^    size_t total_seq_length = 0;$/;"	m	class:vg::BaseMapper
total_seq_length	sampler.hpp	/^    size_t total_seq_length = 0;$/;"	m	class:vg::NGSSimulator
total_seq_length	sampler.hpp	/^    size_t total_seq_length = 0;$/;"	m	class:vg::Sampler
total_size	gbwt_helper.hpp	/^    size_t total_size = 0;$/;"	m	struct:vg::RebuildJob
total_subchains	recombinator.hpp	/^        std::uint64_t total_subchains = 0;$/;"	m	struct:vg::Haplotypes::Header
total_supports	filter.hpp	/^    inline int total_supports(){$/;"	f	struct:vg::BREAKPOINT
trace	genome_state.cpp	/^void SnarlState::trace(size_t overall_lane, bool backward, const function<void(const handle_t&, size_t)>& iteratee) const {$/;"	f	class:vg::SnarlState
trace	qual_adj_xdrop_aligner.cpp	/^dz_alignment_s* QualAdjXdropAligner::trace(const dz_forefront_s* forefront) {$/;"	f	class:QualAdjXdropAligner
trace	xdrop_aligner.cpp	/^dz_alignment_s* XdropAligner::trace(const dz_forefront_s* forefront) {$/;"	f	class:XdropAligner
trace_haplotype	genome_state.cpp	/^void GenomeState::trace_haplotype(const pair<const Snarl*, const Snarl*>& telomere_pair,$/;"	f	class:vg::GenomeState
trace_haplotypes_and_paths	haplotype_extracter.cpp	/^void trace_haplotypes_and_paths(const PathHandleGraph& source, const gbwt::GBWT& haplotype_database,$/;"	f	namespace:vg
trace_path	multipath_alignment.cpp	/^    trace_path(const multipath_alignment_t& multipath_aln, const Path& path,$/;"	f	namespace:vg
trace_path	subcommand/haplotypes_main.cpp	/^bool trace_path(const gbwt::GBWT& index, gbwt::node_type start, gbwt::size_type offset, gbwt::node_type end) {$/;"	f
trace_to_alignment	deletion_aligner.cpp	/^void DeletionAligner::trace_to_alignment(Alignment& aln, const vector<handle_t>& trace,$/;"	f	class:vg::DeletionAligner
traceback	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BAMatrix::traceback(const HandleGraph& graph, BABuilder& builder,$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
traceback	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::traceback(int8_t* score_mat, int8_t* nt_table, int8_t gap_open, int8_t gap_extend, IntType min_inf) {$/;"	f	class:vg::BandedGlobalAligner
traceback	cluster.cpp	/^vector<vector<MaximalExactMatch> > MEMChainModel::traceback(int alt_alns, bool paired, bool debug) {$/;"	f	class:vg::MEMChainModel
traceback	deletion_aligner.cpp	/^vector<vector<handle_t>> DeletionAligner::traceback(const vector<handle_t>& order,$/;"	f	class:vg::DeletionAligner
traceback	mapper.cpp	/^vector<Alignment> AlignmentChainModel::traceback(const Alignment& read, int alt_alns, bool paired, bool debug) {$/;"	f	class:vg::AlignmentChainModel
traceback_over_edge	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BAMatrix::traceback_over_edge(const HandleGraph& graph, BABuilder& builder,$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
track_components	cluster.hpp	/^    bool track_components;$/;"	m	class:vg::MEMClusterer::HitGraph
track_correctness	minimizer_mapper.hpp	/^    bool track_correctness = default_track_correctness;$/;"	m	class:vg::MinimizerMapper
track_provenance	minimizer_mapper.hpp	/^    bool track_provenance = default_track_provenance;$/;"	m	class:vg::MinimizerMapper
trailing_zeros	subcommand/minimizer_main.cpp	/^size_t trailing_zeros(size_t value) {$/;"	f
transcript_file_nonempty	index_registry.cpp	/^bool transcript_file_nonempty(const string& transcripts) {$/;"	f	namespace:vg
transcript_names	transcriptome.hpp	/^    vector<string> transcript_names;$/;"	m	struct:vg::TranscriptPath
transcript_paths	transcriptome.cpp	/^const vector<CompletedTranscriptPath> & Transcriptome::transcript_paths() const {$/;"	f	class:vg::Transcriptome
transcript_paths_to_int_vectors	unittest/transcriptome.cpp	/^        vector<vector<uint64_t> > transcript_paths_to_int_vectors(const vector<CompletedTranscriptPath> & transcript_paths) {$/;"	f	namespace:vg::unittest
transcript_paths_to_sequences	unittest/transcriptome.cpp	/^        vector<string> transcript_paths_to_sequences(const vector<CompletedTranscriptPath> & transcript_paths, const MutablePathDeletableHandleGraph & graph) {$/;"	f	namespace:vg::unittest
transcript_tag	transcriptome.hpp	/^        string transcript_tag = "transcript_id";$/;"	m	class:vg::Transcriptome
transfer_between_proto_annotation	multipath_alignment.cpp	/^    void transfer_between_proto_annotation(const ProtoAlignment1& from, ProtoAlignment2& to) {$/;"	f	namespace:vg
transfer_boundary_info	snarls.hpp	/^inline void transfer_boundary_info(const Snarl& from, Snarl& to) {$/;"	f	namespace:vg
transfer_from_proto_annotation	multipath_alignment.cpp	/^    void transfer_from_proto_annotation(const ProtoAlignment& from, multipath_alignment_t& to) {$/;"	f	namespace:vg
transfer_proto_metadata	multipath_alignment.cpp	/^    void transfer_proto_metadata(const Alignment& from, MultipathAlignment& to) {$/;"	f	namespace:vg
transfer_proto_metadata	multipath_alignment.cpp	/^    void transfer_proto_metadata(const MultipathAlignment& from, Alignment& to) {$/;"	f	namespace:vg
transfer_read_metadata	multipath_alignment.cpp	/^    void transfer_read_metadata(const Alignment& from, Alignment& to) {$/;"	f	namespace:vg
transfer_read_metadata	multipath_alignment.cpp	/^    void transfer_read_metadata(const Alignment& from, multipath_alignment_t& to) {$/;"	f	namespace:vg
transfer_read_metadata	multipath_alignment.cpp	/^    void transfer_read_metadata(const MultipathAlignment& from, multipath_alignment_t& to) {$/;"	f	namespace:vg
transfer_read_metadata	multipath_alignment.cpp	/^    void transfer_read_metadata(const multipath_alignment_t& from, Alignment& to) {$/;"	f	namespace:vg
transfer_read_metadata	multipath_alignment.cpp	/^    void transfer_read_metadata(const multipath_alignment_t& from, MultipathAlignment& to) {$/;"	f	namespace:vg
transfer_read_metadata	multipath_alignment.cpp	/^    void transfer_read_metadata(const multipath_alignment_t& from, multipath_alignment_t& to) {$/;"	f	namespace:vg
transfer_to_proto_annotation	multipath_alignment.cpp	/^    void transfer_to_proto_annotation(const multipath_alignment_t& from, ProtoAlignment& to) {$/;"	f	namespace:vg
transfer_uniform_metadata	multipath_alignment.cpp	/^    void transfer_uniform_metadata(const Alignment1& from, Alignment2& to) {$/;"	f	namespace:vg
transform	vg_set.cpp	/^void VGset::transform(std::function<void(MutableHandleGraph*)> lambda) {$/;"	f	class:vg::VGset
transition_distrs_1	sampler.hpp	/^    vector<MarkovDistribution<pair<uint8_t, bool>, pair<uint8_t, bool>>> transition_distrs_1;$/;"	m	class:vg::NGSSimulator
transition_distrs_2	sampler.hpp	/^    vector<MarkovDistribution<pair<uint8_t, bool>, pair<uint8_t, bool>>> transition_distrs_2;$/;"	m	class:vg::NGSSimulator
transition_table	dinucleotide_machine.hpp	/^    uint32_t transition_table[256];$/;"	m	class:vg::DinucleotideMachine
transitive_reduction	surjector.cpp	/^    vector<vector<size_t>> Surjector::transitive_reduction(const vector<vector<size_t>>& adj) const {$/;"	f	class:vg::Surjector
translate	translator.cpp	/^Alignment Translator::translate(const Alignment& aln) {$/;"	f	class:vg::Translator
translate	translator.cpp	/^Locus Translator::translate(const Locus& locus) {$/;"	f	class:vg::Translator
translate	translator.cpp	/^Mapping Translator::translate(const Mapping& mapping) {$/;"	f	class:vg::Translator
translate	translator.cpp	/^Path Translator::translate(const Path& path) {$/;"	f	class:vg::Translator
translate	translator.cpp	/^Position Translator::translate(const Position& position) {$/;"	f	class:vg::Translator
translate	translator.cpp	/^Position Translator::translate(const Position& position, const Translation& translation) {$/;"	f	class:vg::Translator
translate_back	algorithms/gfa_to_handle.cpp	/^std::vector<oriented_node_range_t> GFAIDMapInfo::translate_back(const oriented_node_range_t& range) const {$/;"	f	class:vg::algorithms::GFAIDMapInfo
translate_back	flat_file_back_translation.cpp	/^std::vector<oriented_node_range_t> FlatFileBackTranslation::translate_back(const oriented_node_range_t& range) const {$/;"	f	class:vg::FlatFileBackTranslation
translate_back	unittest/back_translate.cpp	/^    std::vector<oriented_node_range_t> translate_back(const oriented_node_range_t& range) const {$/;"	f	class:vg::unittest::MockBackTranslation
translate_down	path_subgraph.cpp	/^    Path PathSubgraph::translate_down(const Path& path_against_subgraph) const {$/;"	f	class:vg::PathSubgraph
translate_down	tree_subgraph.cpp	/^Path TreeSubgraph::translate_down(const Path& path_against_subgraph) const {$/;"	f	class:vg::TreeSubgraph
translate_mems	mem.cpp	/^vector<MaximalExactMatch> translate_mems(const vector<MaximalExactMatch>& mems,$/;"	f	namespace:vg
translate_node_ids	path.cpp	/^void translate_node_ids(Path& path, const unordered_map<id_t, id_t>& translator) {$/;"	f	namespace:vg
translate_node_ids	path.cpp	/^void translate_node_ids(Path& path, const unordered_map<id_t, id_t>& translator, id_t cut_node, size_t bases_removed, bool from_right) {$/;"	f	namespace:vg
translate_node_ids	path.cpp	/^void translate_node_ids(path_t& path, const unordered_map<id_t, id_t>& translator) {$/;"	f	namespace:vg
translate_node_ids	splicing.cpp	/^pair<size_t, size_t> JoinedSpliceGraph::translate_node_ids(Path& path) const {$/;"	f	class:vg::JoinedSpliceGraph
translate_nodes	alignment.cpp	/^void translate_nodes(Alignment& a, const unordered_map<id_t, pair<id_t, bool> >& ids, const std::function<size_t(int64_t)>& node_length) {$/;"	f	namespace:vg
translate_oriented_node_ids	path.cpp	/^void translate_oriented_node_ids(Path& path, const function<pair<id_t, bool>(id_t)>& translator) {$/;"	f	namespace:vg
translate_oriented_node_ids	path.cpp	/^void translate_oriented_node_ids(Path& path, const unordered_map<id_t, pair<id_t, bool>>& translator) {$/;"	f	namespace:vg
translate_oriented_node_ids	path.cpp	/^void translate_oriented_node_ids(path_t& path, const function<pair<id_t, bool>(id_t)>& translator) {$/;"	f	namespace:vg
translate_oriented_node_ids	path.cpp	/^void translate_oriented_node_ids(path_t& path, const unordered_map<id_t, pair<id_t, bool>>& translator) {$/;"	f	namespace:vg
translate_snarl_num	snarls.hpp	/^    inline const Snarl* translate_snarl_num(size_t snarl_num){$/;"	f	class:vg::SnarlManager
translation	back_translating_alignment_emitter.hpp	/^    const NamedNodeBackTranslation* translation;$/;"	m	class:vg::BackTranslatingAlignmentEmitter
translation	graph_caller.hpp	/^    const unordered_map<nid_t, pair<string, size_t>>* translation;$/;"	m	class:vg::VCFOutputCaller
translation	unittest/back_translate.cpp	/^    unordered_map<oriented_node_range_t, vector<oriented_node_range_t>> translation;$/;"	m	class:vg::unittest::MockBackTranslation	file:
translations	translator.hpp	/^    vector<Translation> translations;$/;"	m	class:vg::Translator
translator	genotypekit.hpp	/^    Translator translator;$/;"	m	struct:vg::AugmentedGraph
translator	genotyper.hpp	/^    Translator translator;$/;"	m	class:vg::Genotyper
transpose	statistics.cpp	/^vector<vector<double>> transpose(const vector<vector<double>>& A) {$/;"	f	namespace:vg
trav	mcmc_caller.hpp	/^        const SnarlTraversal trav;$/;"	m	class:vg::MCMCCaller
trav_finder	deconstructor.hpp	/^    unique_ptr<TraversalFinder> trav_finder;$/;"	m	class:vg::Deconstructor
trav_padding	graph_caller.hpp	/^    size_t trav_padding = 0;$/;"	m	class:vg::GAFOutputCaller
trav_sequence	vg.cpp	/^string VG::trav_sequence(const NodeTraversal& trav) {$/;"	f	class:vg::VG
trav_string	graph_caller.cpp	/^string VCFOutputCaller::trav_string(const HandleGraph& graph, const SnarlTraversal& trav) const {$/;"	f	class:vg::VCFOutputCaller
traversal	path.hpp	/^    int64_t traversal; \/\/ negative implies reverse$/;"	m	class:vg::mapping_t
traversal_alg	genotyper.hpp	/^    TraversalAlg traversal_alg = TraversalAlg::Reads;$/;"	m	class:vg::Genotyper
traversal_finder	graph_caller.hpp	/^    RepresentativeTraversalFinder* traversal_finder;$/;"	m	class:vg::LegacyCaller
traversal_finder	graph_caller.hpp	/^    TraversalFinder& traversal_finder;$/;"	m	class:vg::FlowCaller
traversal_finder	graph_caller.hpp	/^    TraversalFinder& traversal_finder;$/;"	m	class:vg::NestedFlowCaller
traversal_finder	graph_caller.hpp	/^    VCFTraversalFinder traversal_finder;$/;"	m	class:vg::VCFGenotyper
traversal_finder	small_snarl_simplifier.hpp	/^    TrivialTraversalFinder traversal_finder;$/;"	m	class:vg::SmallSnarlSimplifier
traversal_to_string	genotypekit.cpp	/^string traversal_to_string(VG& graph, const SnarlTraversal& path) {$/;"	f	namespace:vg
traversals_only	graph_caller.hpp	/^    bool traversals_only;$/;"	m	class:vg::FlowCaller
traversals_only	graph_caller.hpp	/^    bool traversals_only;$/;"	m	class:vg::NestedFlowCaller
traversals_only	graph_caller.hpp	/^    bool traversals_only;$/;"	m	class:vg::VCFGenotyper
traverse_components	algorithms/component.cpp	/^void traverse_components(const HandleGraph& graph,$/;"	f	namespace:vg::algorithms
traverse_computed_decomposition	integrated_snarl_finder.cpp	/^void IntegratedSnarlFinder::traverse_computed_decomposition(MergedAdjacencyGraph& cactus,$/;"	f	class:vg::IntegratedSnarlFinder
traverse_decomposition	integrated_snarl_finder.cpp	/^void IntegratedSnarlFinder::traverse_decomposition(const function<void(handle_t)>& begin_chain, const function<void(handle_t)>& end_chain,$/;"	f	class:vg::IntegratedSnarlFinder
traverse_in_order	stream_index.hpp	/^bool BitStringTree<Item>::TreeNode::traverse_in_order(const BitString& low, const BitString& high,$/;"	f	class:vg::BitStringTree::TreeNode
traverse_in_order	stream_index.hpp	/^bool BitStringTree<Item>::traverse_in_order(const BitString& low, const BitString& high, const function<bool(const Item&)>& iteratee) const {$/;"	f	class:vg::BitStringTree
traverse_left	path.cpp	/^mapping_t* Paths::traverse_left(mapping_t* mapping) {$/;"	f	class:vg::Paths
traverse_right	path.cpp	/^mapping_t* Paths::traverse_right(mapping_t* mapping) {$/;"	f	class:vg::Paths
traverse_up	stream_index.hpp	/^bool BitStringTree<Item>::TreeNode::traverse_up(const BitString& key, const function<bool(const Item&)>& iteratee) const {$/;"	f	class:vg::BitStringTree::TreeNode
traverse_up	stream_index.hpp	/^bool BitStringTree<Item>::traverse_up(const BitString& key, const function<bool(const Item&)>& iteratee) const {$/;"	f	class:vg::BitStringTree
travs	graph_caller.hpp	/^        vector<SnarlTraversal> travs;$/;"	m	struct:vg::NestedFlowCaller::CallRecord
travs_from	vg.cpp	/^set<NodeTraversal> VG::travs_from(NodeTraversal node) {$/;"	f	class:vg::VG
travs_of	vg.cpp	/^set<NodeTraversal> VG::travs_of(NodeTraversal node) {$/;"	f	class:vg::VG
travs_to	vg.cpp	/^set<NodeTraversal> VG::travs_to(NodeTraversal node) {$/;"	f	class:vg::VG
tree	tree_subgraph.hpp	/^        vector<pair<int64_t, handle_t>> tree;$/;"	m	class:vg::TreeSubgraph
trim	gbwt_extender.cpp	/^    void trim(const Aligner& aligner) {$/;"	f	class:vg::WFATree
trim_alignment	alignment.cpp	/^Alignment trim_alignment(const Alignment& aln, const Position& pos1, const Position& pos2) {$/;"	f	namespace:vg
trim_ambiguous_end	readfilter.hpp	/^bool ReadFilter<Read>::trim_ambiguous_end(Alignment& alignment, int k) const {$/;"	f	class:vg::ReadFilter
trim_ambiguous_ends	readfilter.hpp	/^inline bool ReadFilter<Alignment>::trim_ambiguous_ends(Alignment& alignment, int k) const {$/;"	f	class:vg::ReadFilter
trim_ambiguous_ends	readfilter.hpp	/^inline bool ReadFilter<MultipathAlignment>::trim_ambiguous_ends(MultipathAlignment& aln, int k) const {$/;"	f	class:vg::ReadFilter
trim_and_check_for_empty	multipath_alignment_graph.cpp	/^    bool MultipathAlignmentGraph::trim_and_check_for_empty(const Alignment& alignment, bool trim_Ns, PathNode& path_node,$/;"	f	class:vg::MultipathAlignmentGraph
trim_hanging_ends	path.cpp	/^Path trim_hanging_ends(const Path& p) {$/;"	f	namespace:vg
trim_hanging_indels	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::trim_hanging_indels(const Alignment& alignment, bool trim_Ns,$/;"	f	class:vg::MultipathAlignmentGraph
trim_indels	constructor.hpp	/^    bool trim_indels = true;$/;"	m	class:vg::Constructor
trim_mismatches	gbwt_extender.cpp	/^bool trim_mismatches(GaplessExtension& extension, const gbwtgraph::CachedGBWTGraph& graph, const Aligner& aligner) {$/;"	f	namespace:vg
trim_path	splicing.cpp	/^bool trim_path(path_t* path, bool from_left, int64_t mapping_idx, int64_t edit_idx, int64_t base_idx) {$/;"	f	namespace:vg
trim_to_branch_points	multipath_alignment_graph.cpp	/^    void MultipathAlignmentGraph::trim_to_branch_points(const HandleGraph* graph, size_t max_trim_length) {$/;"	f	class:vg::MultipathAlignmentGraph
trim_to_variable	constructor.cpp	/^    void Constructor::trim_to_variable(vector<list<vcflib::VariantAllele>>& parsed_alleles) {$/;"	f	class:vg::Constructor
trimmed_end	splicing.cpp	/^tuple<pos_t, int64_t, int32_t> trimmed_end(const Alignment& aln, int64_t len, bool from_end,$/;"	f	namespace:vg
triple_to_vg	vg.cpp	/^triple_to_vg(void* user_data, raptor_statement* triple)$/;"	f	namespace:vg
true_given	unittest/catch.hpp	/^    template <typename> struct true_given : std::true_type {};$/;"	s	namespace:Catch
truncated_normal_distribution	statistics.hpp	/^    truncated_normal_distribution(T _mu = 0.0,$/;"	f	class:vg::truncated_normal_distribution
truncated_normal_distribution	statistics.hpp	/^class truncated_normal_distribution {$/;"	c	namespace:vg
truncation_multiplicity_mq_limit	multipath_mapper.hpp	/^        double truncation_multiplicity_mq_limit = 7.0;$/;"	m	class:vg::MultipathMapper
tumor_supports	filter.hpp	/^    int tumor_supports = 0;$/;"	m	struct:vg::BREAKPOINT
tv_path	cluster.cpp	/^vector<handle_t> TargetValueSearch::tv_path(const pos_t& pos_1, const pos_t& pos_2, int64_t target_value, int64_t tolerance) {$/;"	f	class:vg::TargetValueSearch
tv_path_exists	cluster.cpp	/^bool TargetValueSearch::tv_path_exists(const pos_t& pos_1, const pos_t& pos_2, int64_t target_value, int64_t tolerance) {$/;"	f	class:vg::TargetValueSearch
tv_path_length	cluster.cpp	/^int64_t TargetValueSearch::tv_path_length(const pos_t& pos_1, const pos_t& pos_2, int64_t target_value, int64_t tolerance) {$/;"	f	class:vg::TargetValueSearch
tv_phase2	cluster.cpp	/^vector<handle_t> TargetValueSearch::tv_phase2(const pos_t& pos_1, const pos_t& pos_2, int64_t target_value, int64_t tolerance,$/;"	f	class:vg::TargetValueSearch
tvs	cluster.hpp	/^    TargetValueSearch tvs;$/;"	m	class:vg::TVSClusterer
type	gff_reader.hpp	/^        string type;$/;"	m	struct:vg::GFFRecord
type	recombinator.hpp	/^        Haplotypes::Subchain::subchain_t type;$/;"	m	struct:vg::HaplotypePartitioner::Subchain
type	recombinator.hpp	/^        subchain_t type;$/;"	m	struct:vg::Haplotypes::Subchain
type	subcommand/haplotypes_main.cpp	/^    Haplotypes::Subchain::subchain_t type;$/;"	m	struct:ReferenceInterval	file:
u8	simde/x86/gfni.h	/^  uint8_t      u8[256];$/;"	m	union:__anon6
uf	contracting_graph.hpp	/^    SparseUnionFind uf = SparseUnionFind(true, node_ids);  $/;"	m	class:vg::ContractingGraph
uf_equal	unittest/three_edge_connected_components.cpp	/^static bool uf_equal(structures::UnionFind& a, structures::UnionFind& b) {$/;"	f	namespace:vg::unittest
uf_handle	integrated_snarl_finder.cpp	/^handle_t IntegratedSnarlFinder::MergedAdjacencyGraph::uf_handle(size_t rank) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
uf_rank	integrated_snarl_finder.cpp	/^size_t IntegratedSnarlFinder::MergedAdjacencyGraph::uf_rank(handle_t into) const {$/;"	f	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph
uint16x4_t	simde/arm/neon/types.h	/^  typedef  simde_uint16x4_t    uint16x4_t;$/;"	t
uint16x4x2_t	simde/arm/neon/types.h	/^  typedef simde_uint16x4x2_t  uint16x4x2_t;$/;"	t
uint16x4x3_t	simde/arm/neon/types.h	/^  typedef simde_uint16x4x3_t  uint16x4x3_t;$/;"	t
uint16x4x4_t	simde/arm/neon/types.h	/^  typedef simde_uint16x4x4_t  uint16x4x4_t;$/;"	t
uint16x8_t	simde/arm/neon/types.h	/^  typedef  simde_uint16x8_t    uint16x8_t;$/;"	t
uint16x8x2_t	simde/arm/neon/types.h	/^  typedef simde_uint16x8x2_t  uint16x8x2_t;$/;"	t
uint16x8x3_t	simde/arm/neon/types.h	/^  typedef simde_uint16x8x3_t  uint16x8x3_t;$/;"	t
uint16x8x4_t	simde/arm/neon/types.h	/^  typedef simde_uint16x8x4_t  uint16x8x4_t;$/;"	t
uint32x2_t	simde/arm/neon/types.h	/^  typedef  simde_uint32x2_t    uint32x2_t;$/;"	t
uint32x2x2_t	simde/arm/neon/types.h	/^  typedef simde_uint32x2x2_t  uint32x2x2_t;$/;"	t
uint32x2x3_t	simde/arm/neon/types.h	/^  typedef simde_uint32x2x3_t  uint32x2x3_t;$/;"	t
uint32x2x4_t	simde/arm/neon/types.h	/^  typedef simde_uint32x2x4_t  uint32x2x4_t;$/;"	t
uint32x4_t	simde/arm/neon/types.h	/^  typedef  simde_uint32x4_t    uint32x4_t;$/;"	t
uint32x4x2_t	simde/arm/neon/types.h	/^  typedef simde_uint32x4x2_t  uint32x4x2_t;$/;"	t
uint32x4x3_t	simde/arm/neon/types.h	/^  typedef simde_uint32x4x3_t  uint32x4x3_t;$/;"	t
uint32x4x4_t	simde/arm/neon/types.h	/^  typedef simde_uint32x4x4_t  uint32x4x4_t;$/;"	t
uint64x1_t	simde/arm/neon/types.h	/^  typedef  simde_uint64x1_t    uint64x1_t;$/;"	t
uint64x1x2_t	simde/arm/neon/types.h	/^  typedef simde_uint64x1x2_t  uint64x1x2_t;$/;"	t
uint64x1x3_t	simde/arm/neon/types.h	/^  typedef simde_uint64x1x3_t  uint64x1x3_t;$/;"	t
uint64x1x4_t	simde/arm/neon/types.h	/^  typedef simde_uint64x1x4_t  uint64x1x4_t;$/;"	t
uint64x2_t	simde/arm/neon/types.h	/^  typedef  simde_uint64x2_t    uint64x2_t;$/;"	t
uint64x2x2_t	simde/arm/neon/types.h	/^  typedef simde_uint64x2x2_t  uint64x2x2_t;$/;"	t
uint64x2x3_t	simde/arm/neon/types.h	/^  typedef simde_uint64x2x3_t  uint64x2x3_t;$/;"	t
uint64x2x4_t	simde/arm/neon/types.h	/^  typedef simde_uint64x2x4_t  uint64x2x4_t;$/;"	t
uint8x16_t	simde/arm/neon/types.h	/^  typedef  simde_uint8x16_t    uint8x16_t;$/;"	t
uint8x16x2_t	simde/arm/neon/types.h	/^  typedef simde_uint8x16x2_t  uint8x16x2_t;$/;"	t
uint8x16x3_t	simde/arm/neon/types.h	/^  typedef simde_uint8x16x3_t  uint8x16x3_t;$/;"	t
uint8x16x4_t	simde/arm/neon/types.h	/^  typedef simde_uint8x16x4_t  uint8x16x4_t;$/;"	t
uint8x8_t	simde/arm/neon/types.h	/^  typedef   simde_uint8x8_t     uint8x8_t;$/;"	t
uint8x8x2_t	simde/arm/neon/types.h	/^  typedef simde_uint8x8x2_t   uint8x8x2_t;$/;"	t
uint8x8x3_t	simde/arm/neon/types.h	/^  typedef simde_uint8x8x3_t   uint8x8x3_t;$/;"	t
uint8x8x4_t	simde/arm/neon/types.h	/^  typedef simde_uint8x8x4_t   uint8x8x4_t;$/;"	t
unaligned_bands	mapper.hpp	/^    vector<Alignment> unaligned_bands;$/;"	m	class:vg::AlignmentChainModel
unaltered_motif_data	splicing.hpp	/^    vector<tuple<string, string, double>> unaltered_motif_data;$/;"	m	class:vg::SpliceStats
unary_boundaries	snarls.hpp	/^    unordered_set<handle_t> unary_boundaries;$/;"	m	class:vg::NetGraph
unbacked	gbwt_helper.cpp	/^void GBWTHandler::unbacked() {$/;"	f	class:vg::GBWTHandler
uncanonicalizable_sv_warned	constructor.hpp	/^    mutable bool uncanonicalizable_sv_warned = false;$/;"	m	class:vg::Constructor
underlying_interval	splicing.cpp	/^pair<size_t, size_t> JoinedSpliceGraph::underlying_interval(const handle_t& handle) const {$/;"	f	class:vg::JoinedSpliceGraph
unescape_delim	packer.cpp	/^string Packer::unescape_delim(const string& s, char d) const {$/;"	f	class:vg::Packer
unescape_delims	packer.cpp	/^string Packer::unescape_delims(const string& s) const {$/;"	f	class:vg::Packer
unfold	phase_unfolder.cpp	/^void PhaseUnfolder::unfold(MutableHandleGraph& graph, bool show_progress) {$/;"	f	class:vg::PhaseUnfolder
unfold	vg.cpp	/^VG VG::unfold(uint32_t max_length,$/;"	f	class:vg::VG
unfold_component	phase_unfolder.cpp	/^size_t PhaseUnfolder::unfold_component(MutableHandleGraph& component, MutableHandleGraph& graph, MutableHandleGraph& unfolded) {$/;"	f	class:vg::PhaseUnfolder
unfold_max_length	genotyper.hpp	/^    int unfold_max_length = 200;$/;"	m	class:vg::Genotyper
unfolder_graph	unittest/phase_unfolder.cpp	/^const std::string unfolder_graph = R"($/;"	m	namespace:vg::unittest	file:
unfolder_graph_path	unittest/phase_unfolder.cpp	/^const std::string unfolder_graph_path = R"($/;"	m	namespace:vg::unittest	file:
unfolder_graph_simple	unittest/phase_unfolder.cpp	/^const std::string unfolder_graph_simple = R"($/;"	m	namespace:vg::unittest	file:
unfolder_graph_simple_path	unittest/phase_unfolder.cpp	/^const std::string unfolder_graph_simple_path = R"($/;"	m	namespace:vg::unittest	file:
uniform_int_distribution	statistics.hpp	/^    uniform_int_distribution(T _a = 0, T _b = numeric_limits<T>::max()) : m_a(_a), m_b(_b) {$/;"	f	class:vg::uniform_int_distribution
uniform_int_distribution	statistics.hpp	/^class uniform_int_distribution {$/;"	c	namespace:vg
uniform_real_distribution	statistics.hpp	/^    uniform_real_distribution(T _a = 0.0, T _b = 1.0) : m_a(_a), m_b(_b) {$/;"	f	class:vg::uniform_real_distribution
uniform_real_distribution	statistics.hpp	/^class uniform_real_distribution {$/;"	c	namespace:vg
unindex_edge_by_node_sides	vg.cpp	/^void VG::unindex_edge_by_node_sides(Edge* edge) {$/;"	f	class:vg::VG
unindex_edge_by_node_sides	vg.cpp	/^void VG::unindex_edge_by_node_sides(const NodeSide& side1, const NodeSide& side2) {$/;"	f	class:vg::VG
union_find	integrated_snarl_finder.cpp	/^    mutable structures::UnionFind union_find;$/;"	m	class:vg::IntegratedSnarlFinder::MergedAdjacencyGraph	file:
union_groups	sparse_union_find.cpp	/^    void SparseUnionFind::union_groups(size_t i, size_t j) {$/;"	f	class:vg::SparseUnionFind
unique_minimizers	recombinator.cpp	/^std::vector<HaplotypePartitioner::kmer_type> HaplotypePartitioner::unique_minimizers(gbwt::size_type sequence_id) const {$/;"	f	class:vg::HaplotypePartitioner
unique_minimizers	recombinator.cpp	/^std::vector<HaplotypePartitioner::kmer_type> HaplotypePartitioner::unique_minimizers(sequence_type sequence, Subchain subchain) const {$/;"	f	class:vg::HaplotypePartitioner
unittest	unittest/aligner.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/alignment.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/annotation.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/back_translate.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/banded_global_aligner.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/blocked_gzip_input_stream.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/blocked_gzip_output_stream.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/cactus.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/chain_items.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/chunker.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/cluster.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/component_paths.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/constructor.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/copy_graph.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/dagified_graph.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/dagify.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/deletion_aligner.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/dijkstra.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/dinucleotide_machine.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/disjoint_components.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/distributions.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/dozeu_pinning_overlay.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/feature_set.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/flow_sort_test.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/gbwt_extender.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/genome_state.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/genotypekit.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/genotyper.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/gfa.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/handle.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/haplotypes.cpp	/^namespace unittest {$/;"	n	file:
unittest	unittest/hash_graph.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/hfile_cppstream.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/incremental_subgraph.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/index_helpers.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/index_registry.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/indexed_vg.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/k_widest_paths.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/kff.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/kmp.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/locally_expand_graph.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/mapper.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/mapping.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/mcmc_genotyper.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/mem.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/mem_accelerator.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/min_cut_graph.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/minimizer_mapper.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/msa_converter.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/multipath_alignment.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/multipath_alignment_graph.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/multipath_mapper.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/overlays.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/packed_graph.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/packed_structs.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/path_component_index.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/path_index.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/phase_unfolder.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/phased_genome.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/pinned_alignment.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/position.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/protobuf.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/random_graph.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/random_graph.hpp	/^namespace unittest{$/;"	n	namespace:vg
unittest	unittest/randomness.hpp	/^namespace unittest {$/;"	n	namespace:vg
unittest	unittest/readfilter.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/sampler.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/sequence_complexity.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/snarl_distance_index.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/snarl_seed_clusterer.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/snarls.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/source_sink_overlay.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/splicing.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/statistics.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/stream.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/stream_index.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/surject.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/test_aligner.hpp	/^namespace unittest {$/;"	n	namespace:vg
unittest	unittest/three_edge_connected_components.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/transcriptome.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/traversal_support.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/tree_subgraph.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/variant_adder.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/vcf_buffer.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/vg.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/vg_algorithms.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/vpkg.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/xdrop_aligner.cpp	/^namespace unittest {$/;"	n	namespace:vg	file:
unittest	unittest/xg.cpp	/^    namespace unittest {$/;"	n	namespace:vg	file:
universe_size	small_bitset.hpp	/^        size_t universe_size;$/;"	m	class:vg::SmallBitset
unlocalized_insertion	gbwt_extender.cpp	/^bool WFAAlignment::unlocalized_insertion() const {$/;"	f	class:vg::WFAAlignment
unlock	graph_synchronizer.cpp	/^void GraphSynchronizer::Lock::unlock() {$/;"	f	class:vg::GraphSynchronizer::Lock
unmapped	readfilter.hpp	/^        proper_pair, unmapped, annotation, incorrectly_mapped, last};$/;"	e	enum:vg::Counts::FilterName
unmapped_filter	filter.cpp	/^    bool Filter::unmapped_filter(Alignment& aln){$/;"	f	class:vg::Filter
unoriented_distance_between	minimizer_mapper.cpp	/^int64_t MinimizerMapper::unoriented_distance_between(const pos_t& pos1, const pos_t& pos2) const {$/;"	f	class:vg::MinimizerMapper
unoriented_motif	splicing.cpp	/^string SpliceStats::unoriented_motif(size_t motif_num, bool left_side) const {$/;"	f	class:vg::SpliceStats
unpaired_penalty	mapper.hpp	/^    int unpaired_penalty = 17;$/;"	m	class:vg::BaseMapper
unparse	option.hpp	/^    static string unparse(const Value& value) {$/;"	f	class:vg::OptionValueParser
unparse	option.hpp	/^    static string unparse(const vector<Item>& value) {$/;"	f	class:vg::OptionValueParser
unparse	option.hpp	/^inline string OptionValueParser<bool>::unparse(const bool& value) {$/;"	f	class:vg::OptionValueParser
unrecord	snarls.hpp	/^    inline Snarl* unrecord(SnarlRecord* record) {$/;"	f	class:vg::SnarlManager
unrecord	snarls.hpp	/^    inline const Snarl* unrecord(const SnarlRecord* record) const {$/;"	f	class:vg::SnarlManager
unreverse_graph	aligner.cpp	/^void GSSWAligner::unreverse_graph(gssw_graph* graph) const {$/;"	f	class:vg::GSSWAligner
unreverse_graph_mapping	aligner.cpp	/^void GSSWAligner::unreverse_graph_mapping(gssw_graph_mapping* gm) const {$/;"	f	class:vg::GSSWAligner
unset	algorithms/chain_items.hpp	/^    inline static TracedScore unset() {$/;"	f	class:vg::algorithms::TracedScore
unstranded	cluster.hpp	/^    bool unstranded;$/;"	m	class:vg::OrientedDistanceClusterer
untangle_allele_traversals	deconstructor.hpp	/^    bool untangle_allele_traversals = false;$/;"	m	class:vg::Deconstructor
unvo	unittest/stream.cpp	/^static pair<size_t, size_t> unvo(int64_t virtual_offset) {$/;"	f	namespace:vg::unittest
update	gbwt_extender.cpp	/^    void update(size_t type, int32_t score, int32_t diagonal, const MatchPos& pos) {$/;"	f	struct:vg::WFANode
update	gbwt_extender.cpp	/^    void update(size_t type, int32_t score, int32_t diagonal, uint32_t seq_offset, uint32_t node_offset) {$/;"	f	struct:vg::WFANode
update_haplotype_index	transcriptome.cpp	/^void Transcriptome::update_haplotype_index(unique_ptr<gbwt::GBWT> & haplotype_index, const spp::sparse_hash_map<handle_t, vector<pair<int32_t, handle_t> > > & update_index) const {$/;"	f	class:vg::Transcriptome
update_in_out_edges	flow_sort.cpp	/^void FlowSort::update_in_out_edges(EdgeMapping& edges_in, EdgeMapping& edges_out, Edge* e)$/;"	f	class:vg::FlowSort
update_inner_values	haplotypes.cpp	/^void haplo_DP_column::update_inner_values() {$/;"	f	class:haplo::haplo_DP_column
update_intron_length_distribution	splicing.cpp	/^void SpliceStats::update_intron_length_distribution(const vector<double>& lognormal_mixture_weights,$/;"	f	class:vg::SpliceStats
update_mapping_positions	path_index.cpp	/^void PathIndex::update_mapping_positions(VG& vg, const string& path_name) {$/;"	f	class:vg::PathIndex
update_motifs	splicing.cpp	/^void SpliceStats::update_motifs(const vector<tuple<string, string, double>>& motifs,$/;"	f	class:vg::SpliceStats
update_nesting_info_tags	graph_caller.cpp	/^void VCFOutputCaller::update_nesting_info_tags(const SnarlManager* snarl_manager) {$/;"	f	class:vg::VCFOutputCaller
update_path_indexes	graph_synchronizer.cpp	/^void GraphSynchronizer::update_path_indexes(const vector<Translation>& translations) {$/;"	f	class:vg::GraphSynchronizer
update_progress	progressive.cpp	/^void Progressive::update_progress(long i) {$/;"	f	class:vg::Progressive
update_range	gbwt_extender.cpp	/^    std::pair<int32_t, int32_t> update_range(std::pair<int32_t, int32_t> range, int32_t score) const {$/;"	f	class:vg::WFATree	file:
update_sample_gam_depth	algorithms/coverage_depth.cpp	/^static void update_sample_gam_depth(const Alignment& aln, unordered_map<nid_t, size_t>& node_coverage) {$/;"	f	namespace:vg::algorithms
update_score_vector	haplotypes.cpp	/^void haplo_DP_column::update_score_vector(haploMath::RRMemo& memo) {$/;"	f	class:haplo::haplo_DP_column
update_scoring	splicing.cpp	/^void SpliceStats::update_scoring(const GSSWAligner& scorer) {$/;"	f	class:vg::SpliceStats
update_state	banded_global_aligner.cpp	/^void BandedGlobalAligner<IntType>::BABuilder::update_state(const HandleGraph& graph, matrix_t matrix,$/;"	f	class:vg::BandedGlobalAligner::BABuilder
update_state	dinucleotide_machine.cpp	/^uint32_t DinucleotideMachine::update_state(uint32_t state, char next) const {$/;"	f	class:vg::DinucleotideMachine
update_transcript_paths	transcriptome.cpp	/^void Transcriptome::update_transcript_paths(const spp::sparse_hash_map<handle_t, vector<pair<int32_t, handle_t> > > & update_index) {$/;"	f	class:vg::Transcriptome
update_vcf_header	snarl_caller.cpp	/^void PoissonSupportSnarlCaller::update_vcf_header(string& header) const {$/;"	f	class:vg::PoissonSupportSnarlCaller
update_vcf_header	snarl_caller.cpp	/^void RatioSupportSnarlCaller::update_vcf_header(string& header) const {$/;"	f	class:vg::RatioSupportSnarlCaller
update_vcf_info	mcmc_caller.cpp	/^    void MCMCCaller::update_vcf_info(const Snarl& snarl,$/;"	f	class:vg::MCMCCaller
update_vcf_info	snarl_caller.cpp	/^void PoissonSupportSnarlCaller::update_vcf_info(const Snarl& snarl,$/;"	f	class:vg::PoissonSupportSnarlCaller
update_vcf_info	snarl_caller.cpp	/^void RatioSupportSnarlCaller::update_vcf_info(const Snarl& snarl,$/;"	f	class:vg::RatioSupportSnarlCaller
update_vcf_info	snarl_caller.cpp	/^void SupportBasedSnarlCaller::update_vcf_info(const Snarl& snarl,$/;"	f	class:vg::SupportBasedSnarlCaller
upper_bound	filter.hpp	/^    int64_t upper_bound = 100;$/;"	m	struct:vg::BREAKPOINT
upper_bound_heuristic	cluster.hpp	/^    unique_ptr<DistanceHeuristic> upper_bound_heuristic;$/;"	m	class:vg::TargetValueSearch
use	gbwt_helper.cpp	/^void GBWTHandler::use(gbwt::DynamicGBWT& new_index) {$/;"	f	class:vg::GBWTHandler
use	gbwt_helper.cpp	/^void GBWTHandler::use(gbwt::GBWT& new_index) {$/;"	f	class:vg::GBWTHandler
use	subcommand/gbwt_main.cpp	/^void GraphHandler::use(std::unique_ptr<gbwtgraph::SequenceSource>& source) {$/;"	f	class:GraphHandler
use_approx_sub_mem_count	mapper.hpp	/^    bool use_approx_sub_mem_count = false;$/;"	m	class:vg::BaseMapper
use_avg	filter.hpp	/^        bool use_avg = false;;$/;"	m	class:vg::Filter
use_bounded_syncmers	index_registry.cpp	/^bool IndexingParameters::use_bounded_syncmers = false;$/;"	m	class:vg::IndexingParameters	file:
use_bounded_syncmers	index_registry.hpp	/^    static bool use_bounded_syncmers;$/;"	m	struct:vg::IndexingParameters
use_cluster_mq	mapper.hpp	/^    bool use_cluster_mq; \/\/ should we use the cluster-based mapping quality component$/;"	m	class:vg::Mapper
use_compressed	gbwt_helper.cpp	/^void GBWTHandler::use_compressed() {$/;"	f	class:vg::GBWTHandler
use_dynamic	gbwt_helper.cpp	/^void GBWTHandler::use_dynamic() {$/;"	f	class:vg::GBWTHandler
use_fanout_match_alg	multipath_mapper.hpp	/^        bool use_fanout_match_alg = false;$/;"	m	class:vg::MultipathMapper
use_greedy_mem_restarts	mapper.hpp	/^    bool use_greedy_mem_restarts = false;$/;"	m	class:vg::BaseMapper
use_internal_connectivity	snarls.hpp	/^    bool use_internal_connectivity;$/;"	m	class:vg::NetGraph
use_mapq	genotyper.hpp	/^    bool use_mapq = false;$/;"	m	class:vg::Genotyper
use_mapq	snarl_caller.hpp	/^    bool use_mapq;$/;"	m	class:vg::PoissonSupportSnarlCaller
use_min_dist_clusterer	multipath_mapper.hpp	/^        bool use_min_dist_clusterer = false;$/;"	m	class:vg::MultipathMapper
use_or_save	subcommand/gbwt_main.cpp	/^void use_or_save(std::unique_ptr<gbwt::DynamicGBWT>& index, GBWTHandler& gbwts, std::vector<std::string>& filenames, size_t i, bool show_progress) {$/;"	f
use_pessimistic_tail_alignment	multipath_mapper.hpp	/^        bool use_pessimistic_tail_alignment = false;$/;"	m	class:vg::MultipathMapper
use_population_mapqs	multipath_mapper.hpp	/^        bool use_population_mapqs = false;$/;"	m	class:vg::MultipathMapper
use_preset	subcommand/gbwt_main.cpp	/^void use_preset(std::string preset_name, GBWTConfig& config) {$/;"	f
use_stripped_match_alg	multipath_mapper.hpp	/^        bool use_stripped_match_alg = false;$/;"	m	class:vg::MultipathMapper
use_tvs_clusterer	multipath_mapper.hpp	/^        bool use_tvs_clusterer = false;$/;"	m	class:vg::MultipathMapper
uses_Us	alignment.cpp	/^bool uses_Us(const Alignment& alignment) {$/;"	f	namespace:vg
v	utility.hpp	/^    T v;$/;"	m	struct:vg::TreeNode
vaba_s16	simde/arm/neon/aba.h	61;"	d
vaba_s16	simde/arm/neon/aba.h	62;"	d
vaba_s32	simde/arm/neon/aba.h	75;"	d
vaba_s32	simde/arm/neon/aba.h	76;"	d
vaba_s8	simde/arm/neon/aba.h	47;"	d
vaba_s8	simde/arm/neon/aba.h	48;"	d
vaba_u16	simde/arm/neon/aba.h	103;"	d
vaba_u16	simde/arm/neon/aba.h	104;"	d
vaba_u32	simde/arm/neon/aba.h	117;"	d
vaba_u32	simde/arm/neon/aba.h	118;"	d
vaba_u8	simde/arm/neon/aba.h	89;"	d
vaba_u8	simde/arm/neon/aba.h	90;"	d
vabaq_s16	simde/arm/neon/aba.h	145;"	d
vabaq_s16	simde/arm/neon/aba.h	146;"	d
vabaq_s32	simde/arm/neon/aba.h	159;"	d
vabaq_s32	simde/arm/neon/aba.h	160;"	d
vabaq_s8	simde/arm/neon/aba.h	131;"	d
vabaq_s8	simde/arm/neon/aba.h	132;"	d
vabaq_u16	simde/arm/neon/aba.h	187;"	d
vabaq_u16	simde/arm/neon/aba.h	188;"	d
vabaq_u32	simde/arm/neon/aba.h	201;"	d
vabaq_u32	simde/arm/neon/aba.h	202;"	d
vabaq_u8	simde/arm/neon/aba.h	173;"	d
vabaq_u8	simde/arm/neon/aba.h	174;"	d
vabd_f32	simde/arm/neon/abd.h	50;"	d
vabd_f32	simde/arm/neon/abd.h	51;"	d
vabd_f64	simde/arm/neon/abd.h	64;"	d
vabd_f64	simde/arm/neon/abd.h	65;"	d
vabd_s16	simde/arm/neon/abd.h	92;"	d
vabd_s16	simde/arm/neon/abd.h	93;"	d
vabd_s32	simde/arm/neon/abd.h	106;"	d
vabd_s32	simde/arm/neon/abd.h	107;"	d
vabd_s8	simde/arm/neon/abd.h	78;"	d
vabd_s8	simde/arm/neon/abd.h	79;"	d
vabd_u16	simde/arm/neon/abd.h	144;"	d
vabd_u16	simde/arm/neon/abd.h	145;"	d
vabd_u32	simde/arm/neon/abd.h	163;"	d
vabd_u32	simde/arm/neon/abd.h	164;"	d
vabd_u8	simde/arm/neon/abd.h	125;"	d
vabd_u8	simde/arm/neon/abd.h	126;"	d
vabdl_s16	simde/arm/neon/abdl.h	63;"	d
vabdl_s16	simde/arm/neon/abdl.h	64;"	d
vabdl_s32	simde/arm/neon/abdl.h	77;"	d
vabdl_s32	simde/arm/neon/abdl.h	78;"	d
vabdl_s8	simde/arm/neon/abdl.h	49;"	d
vabdl_s8	simde/arm/neon/abdl.h	50;"	d
vabdl_u16	simde/arm/neon/abdl.h	119;"	d
vabdl_u16	simde/arm/neon/abdl.h	120;"	d
vabdl_u32	simde/arm/neon/abdl.h	140;"	d
vabdl_u32	simde/arm/neon/abdl.h	141;"	d
vabdl_u8	simde/arm/neon/abdl.h	98;"	d
vabdl_u8	simde/arm/neon/abdl.h	99;"	d
vabdq_f32	simde/arm/neon/abd.h	177;"	d
vabdq_f32	simde/arm/neon/abd.h	178;"	d
vabdq_f64	simde/arm/neon/abd.h	191;"	d
vabdq_f64	simde/arm/neon/abd.h	192;"	d
vabdq_s16	simde/arm/neon/abd.h	241;"	d
vabdq_s16	simde/arm/neon/abd.h	242;"	d
vabdq_s32	simde/arm/neon/abd.h	266;"	d
vabdq_s32	simde/arm/neon/abd.h	267;"	d
vabdq_s8	simde/arm/neon/abd.h	216;"	d
vabdq_s8	simde/arm/neon/abd.h	217;"	d
vabdq_u16	simde/arm/neon/abd.h	320;"	d
vabdq_u16	simde/arm/neon/abd.h	321;"	d
vabdq_u32	simde/arm/neon/abd.h	347;"	d
vabdq_u32	simde/arm/neon/abd.h	348;"	d
vabdq_u8	simde/arm/neon/abd.h	293;"	d
vabdq_u8	simde/arm/neon/abd.h	294;"	d
vabs_f32	simde/arm/neon/abs.h	55;"	d
vabs_f32	simde/arm/neon/abs.h	56;"	d
vabs_f64	simde/arm/neon/abs.h	78;"	d
vabs_f64	simde/arm/neon/abs.h	79;"	d
vabs_s16	simde/arm/neon/abs.h	138;"	d
vabs_s16	simde/arm/neon/abs.h	139;"	d
vabs_s32	simde/arm/neon/abs.h	168;"	d
vabs_s32	simde/arm/neon/abs.h	169;"	d
vabs_s64	simde/arm/neon/abs.h	196;"	d
vabs_s64	simde/arm/neon/abs.h	197;"	d
vabs_s8	simde/arm/neon/abs.h	108;"	d
vabs_s8	simde/arm/neon/abs.h	109;"	d
vabsq_f32	simde/arm/neon/abs.h	226;"	d
vabsq_f32	simde/arm/neon/abs.h	227;"	d
vabsq_f64	simde/arm/neon/abs.h	253;"	d
vabsq_f64	simde/arm/neon/abs.h	254;"	d
vabsq_s16	simde/arm/neon/abs.h	321;"	d
vabsq_s16	simde/arm/neon/abs.h	322;"	d
vabsq_s32	simde/arm/neon/abs.h	355;"	d
vabsq_s32	simde/arm/neon/abs.h	356;"	d
vabsq_s64	simde/arm/neon/abs.h	387;"	d
vabsq_s64	simde/arm/neon/abs.h	388;"	d
vabsq_s8	simde/arm/neon/abs.h	287;"	d
vabsq_s8	simde/arm/neon/abs.h	288;"	d
vadd_f32	simde/arm/neon/add.h	60;"	d
vadd_f32	simde/arm/neon/add.h	61;"	d
vadd_f64	simde/arm/neon/add.h	88;"	d
vadd_f64	simde/arm/neon/add.h	89;"	d
vadd_s16	simde/arm/neon/add.h	148;"	d
vadd_s16	simde/arm/neon/add.h	149;"	d
vadd_s32	simde/arm/neon/add.h	178;"	d
vadd_s32	simde/arm/neon/add.h	179;"	d
vadd_s64	simde/arm/neon/add.h	206;"	d
vadd_s64	simde/arm/neon/add.h	207;"	d
vadd_s8	simde/arm/neon/add.h	118;"	d
vadd_s8	simde/arm/neon/add.h	119;"	d
vadd_u16	simde/arm/neon/add.h	262;"	d
vadd_u16	simde/arm/neon/add.h	263;"	d
vadd_u32	simde/arm/neon/add.h	290;"	d
vadd_u32	simde/arm/neon/add.h	291;"	d
vadd_u64	simde/arm/neon/add.h	318;"	d
vadd_u64	simde/arm/neon/add.h	319;"	d
vadd_u8	simde/arm/neon/add.h	234;"	d
vadd_u8	simde/arm/neon/add.h	235;"	d
vaddl_high_s16	simde/arm/neon/addl_high.h	64;"	d
vaddl_high_s16	simde/arm/neon/addl_high.h	65;"	d
vaddl_high_s32	simde/arm/neon/addl_high.h	78;"	d
vaddl_high_s32	simde/arm/neon/addl_high.h	79;"	d
vaddl_high_s8	simde/arm/neon/addl_high.h	50;"	d
vaddl_high_s8	simde/arm/neon/addl_high.h	51;"	d
vaddl_high_u16	simde/arm/neon/addl_high.h	106;"	d
vaddl_high_u16	simde/arm/neon/addl_high.h	107;"	d
vaddl_high_u32	simde/arm/neon/addl_high.h	120;"	d
vaddl_high_u32	simde/arm/neon/addl_high.h	121;"	d
vaddl_high_u8	simde/arm/neon/addl_high.h	92;"	d
vaddl_high_u8	simde/arm/neon/addl_high.h	93;"	d
vaddl_s16	simde/arm/neon/addl.h	64;"	d
vaddl_s16	simde/arm/neon/addl.h	65;"	d
vaddl_s32	simde/arm/neon/addl.h	78;"	d
vaddl_s32	simde/arm/neon/addl.h	79;"	d
vaddl_s8	simde/arm/neon/addl.h	50;"	d
vaddl_s8	simde/arm/neon/addl.h	51;"	d
vaddl_u16	simde/arm/neon/addl.h	106;"	d
vaddl_u16	simde/arm/neon/addl.h	107;"	d
vaddl_u32	simde/arm/neon/addl.h	120;"	d
vaddl_u32	simde/arm/neon/addl.h	121;"	d
vaddl_u8	simde/arm/neon/addl.h	92;"	d
vaddl_u8	simde/arm/neon/addl.h	93;"	d
vaddlv_s16	simde/arm/neon/addlv.h	82;"	d
vaddlv_s16	simde/arm/neon/addlv.h	83;"	d
vaddlv_s32	simde/arm/neon/addlv.h	106;"	d
vaddlv_s32	simde/arm/neon/addlv.h	107;"	d
vaddlv_s8	simde/arm/neon/addlv.h	58;"	d
vaddlv_s8	simde/arm/neon/addlv.h	59;"	d
vaddlv_u16	simde/arm/neon/addlv.h	154;"	d
vaddlv_u16	simde/arm/neon/addlv.h	155;"	d
vaddlv_u32	simde/arm/neon/addlv.h	178;"	d
vaddlv_u32	simde/arm/neon/addlv.h	179;"	d
vaddlv_u8	simde/arm/neon/addlv.h	130;"	d
vaddlv_u8	simde/arm/neon/addlv.h	131;"	d
vaddlvq_s16	simde/arm/neon/addlv.h	222;"	d
vaddlvq_s16	simde/arm/neon/addlv.h	223;"	d
vaddlvq_s32	simde/arm/neon/addlv.h	244;"	d
vaddlvq_s32	simde/arm/neon/addlv.h	245;"	d
vaddlvq_s8	simde/arm/neon/addlv.h	200;"	d
vaddlvq_s8	simde/arm/neon/addlv.h	201;"	d
vaddlvq_u16	simde/arm/neon/addlv.h	288;"	d
vaddlvq_u16	simde/arm/neon/addlv.h	289;"	d
vaddlvq_u32	simde/arm/neon/addlv.h	310;"	d
vaddlvq_u32	simde/arm/neon/addlv.h	311;"	d
vaddlvq_u8	simde/arm/neon/addlv.h	266;"	d
vaddlvq_u8	simde/arm/neon/addlv.h	267;"	d
vaddq_f32	simde/arm/neon/add.h	356;"	d
vaddq_f32	simde/arm/neon/add.h	357;"	d
vaddq_f64	simde/arm/neon/add.h	390;"	d
vaddq_f64	simde/arm/neon/add.h	391;"	d
vaddq_s16	simde/arm/neon/add.h	458;"	d
vaddq_s16	simde/arm/neon/add.h	459;"	d
vaddq_s32	simde/arm/neon/add.h	492;"	d
vaddq_s32	simde/arm/neon/add.h	493;"	d
vaddq_s64	simde/arm/neon/add.h	526;"	d
vaddq_s64	simde/arm/neon/add.h	527;"	d
vaddq_s8	simde/arm/neon/add.h	424;"	d
vaddq_s8	simde/arm/neon/add.h	425;"	d
vaddq_u16	simde/arm/neon/add.h	586;"	d
vaddq_u16	simde/arm/neon/add.h	587;"	d
vaddq_u32	simde/arm/neon/add.h	616;"	d
vaddq_u32	simde/arm/neon/add.h	617;"	d
vaddq_u64	simde/arm/neon/add.h	646;"	d
vaddq_u64	simde/arm/neon/add.h	647;"	d
vaddq_u8	simde/arm/neon/add.h	556;"	d
vaddq_u8	simde/arm/neon/add.h	557;"	d
vaddv_f32	simde/arm/neon/addv.h	56;"	d
vaddv_f32	simde/arm/neon/addv.h	57;"	d
vaddv_s16	simde/arm/neon/addv.h	104;"	d
vaddv_s16	simde/arm/neon/addv.h	105;"	d
vaddv_s32	simde/arm/neon/addv.h	128;"	d
vaddv_s32	simde/arm/neon/addv.h	129;"	d
vaddv_s8	simde/arm/neon/addv.h	80;"	d
vaddv_s8	simde/arm/neon/addv.h	81;"	d
vaddv_u16	simde/arm/neon/addv.h	176;"	d
vaddv_u16	simde/arm/neon/addv.h	177;"	d
vaddv_u32	simde/arm/neon/addv.h	200;"	d
vaddv_u32	simde/arm/neon/addv.h	201;"	d
vaddv_u8	simde/arm/neon/addv.h	152;"	d
vaddv_u8	simde/arm/neon/addv.h	153;"	d
vaddvq_f32	simde/arm/neon/addv.h	224;"	d
vaddvq_f32	simde/arm/neon/addv.h	225;"	d
vaddvq_f64	simde/arm/neon/addv.h	248;"	d
vaddvq_f64	simde/arm/neon/addv.h	249;"	d
vaddvq_s16	simde/arm/neon/addv.h	296;"	d
vaddvq_s16	simde/arm/neon/addv.h	297;"	d
vaddvq_s32	simde/arm/neon/addv.h	320;"	d
vaddvq_s32	simde/arm/neon/addv.h	321;"	d
vaddvq_s64	simde/arm/neon/addv.h	344;"	d
vaddvq_s64	simde/arm/neon/addv.h	345;"	d
vaddvq_s8	simde/arm/neon/addv.h	272;"	d
vaddvq_s8	simde/arm/neon/addv.h	273;"	d
vaddvq_u16	simde/arm/neon/addv.h	392;"	d
vaddvq_u16	simde/arm/neon/addv.h	393;"	d
vaddvq_u32	simde/arm/neon/addv.h	416;"	d
vaddvq_u32	simde/arm/neon/addv.h	417;"	d
vaddvq_u64	simde/arm/neon/addv.h	440;"	d
vaddvq_u64	simde/arm/neon/addv.h	441;"	d
vaddvq_u8	simde/arm/neon/addv.h	368;"	d
vaddvq_u8	simde/arm/neon/addv.h	369;"	d
vaddw_high_s16	simde/arm/neon/addw_high.h	86;"	d
vaddw_high_s16	simde/arm/neon/addw_high.h	87;"	d
vaddw_high_s32	simde/arm/neon/addw_high.h	111;"	d
vaddw_high_s32	simde/arm/neon/addw_high.h	112;"	d
vaddw_high_s8	simde/arm/neon/addw_high.h	61;"	d
vaddw_high_s8	simde/arm/neon/addw_high.h	62;"	d
vaddw_high_u16	simde/arm/neon/addw_high.h	161;"	d
vaddw_high_u16	simde/arm/neon/addw_high.h	162;"	d
vaddw_high_u32	simde/arm/neon/addw_high.h	186;"	d
vaddw_high_u32	simde/arm/neon/addw_high.h	187;"	d
vaddw_high_u8	simde/arm/neon/addw_high.h	136;"	d
vaddw_high_u8	simde/arm/neon/addw_high.h	137;"	d
vaddw_s16	simde/arm/neon/addw.h	95;"	d
vaddw_s16	simde/arm/neon/addw.h	96;"	d
vaddw_s32	simde/arm/neon/addw.h	125;"	d
vaddw_s32	simde/arm/neon/addw.h	126;"	d
vaddw_s8	simde/arm/neon/addw.h	65;"	d
vaddw_s8	simde/arm/neon/addw.h	66;"	d
vaddw_u16	simde/arm/neon/addw.h	185;"	d
vaddw_u16	simde/arm/neon/addw.h	186;"	d
vaddw_u32	simde/arm/neon/addw.h	215;"	d
vaddw_u32	simde/arm/neon/addw.h	216;"	d
vaddw_u8	simde/arm/neon/addw.h	155;"	d
vaddw_u8	simde/arm/neon/addw.h	156;"	d
val	simde/arm/neon/types.h	/^    simde_float32x2_t val[2];$/;"	m	struct:simde_float32x2x2_t
val	simde/arm/neon/types.h	/^    simde_float32x2_t val[3];$/;"	m	struct:simde_float32x2x3_t
val	simde/arm/neon/types.h	/^    simde_float32x2_t val[4];$/;"	m	struct:simde_float32x2x4_t
val	simde/arm/neon/types.h	/^    simde_float32x4_t val[2];$/;"	m	struct:simde_float32x4x2_t
val	simde/arm/neon/types.h	/^    simde_float32x4_t val[3];$/;"	m	struct:simde_float32x4x3_t
val	simde/arm/neon/types.h	/^    simde_float32x4_t val[4];$/;"	m	struct:simde_float32x4x4_t
val	simde/arm/neon/types.h	/^    simde_float64x1_t val[2];$/;"	m	struct:simde_float64x1x2_t
val	simde/arm/neon/types.h	/^    simde_float64x1_t val[3];$/;"	m	struct:simde_float64x1x3_t
val	simde/arm/neon/types.h	/^    simde_float64x1_t val[4];$/;"	m	struct:simde_float64x1x4_t
val	simde/arm/neon/types.h	/^    simde_float64x2_t val[2];$/;"	m	struct:simde_float64x2x2_t
val	simde/arm/neon/types.h	/^    simde_int16x4_t val[2];$/;"	m	struct:simde_int16x4x2_t
val	simde/arm/neon/types.h	/^    simde_int16x4_t val[3];$/;"	m	struct:simde_int16x4x3_t
val	simde/arm/neon/types.h	/^    simde_int16x4_t val[4];$/;"	m	struct:simde_int16x4x4_t
val	simde/arm/neon/types.h	/^    simde_int16x8_t val[2];$/;"	m	struct:simde_int16x8x2_t
val	simde/arm/neon/types.h	/^    simde_int16x8_t val[3];$/;"	m	struct:simde_int16x8x3_t
val	simde/arm/neon/types.h	/^    simde_int16x8_t val[4];$/;"	m	struct:simde_int16x8x4_t
val	simde/arm/neon/types.h	/^    simde_int32x2_t val[2];$/;"	m	struct:simde_int32x2x2_t
val	simde/arm/neon/types.h	/^    simde_int32x2_t val[3];$/;"	m	struct:simde_int32x2x3_t
val	simde/arm/neon/types.h	/^    simde_int32x2_t val[4];$/;"	m	struct:simde_int32x2x4_t
val	simde/arm/neon/types.h	/^    simde_int32x4_t val[2];$/;"	m	struct:simde_int32x4x2_t
val	simde/arm/neon/types.h	/^    simde_int32x4_t val[3];$/;"	m	struct:simde_int32x4x3_t
val	simde/arm/neon/types.h	/^    simde_int32x4_t val[4];$/;"	m	struct:simde_int32x4x4_t
val	simde/arm/neon/types.h	/^    simde_int64x1_t val[2];$/;"	m	struct:simde_int64x1x2_t
val	simde/arm/neon/types.h	/^    simde_int64x1_t val[3];$/;"	m	struct:simde_int64x1x3_t
val	simde/arm/neon/types.h	/^    simde_int64x1_t val[4];$/;"	m	struct:simde_int64x1x4_t
val	simde/arm/neon/types.h	/^    simde_int64x2_t val[2];$/;"	m	struct:simde_int64x2x2_t
val	simde/arm/neon/types.h	/^    simde_int64x2_t val[3];$/;"	m	struct:simde_int64x2x3_t
val	simde/arm/neon/types.h	/^    simde_int64x2_t val[4];$/;"	m	struct:simde_int64x2x4_t
val	simde/arm/neon/types.h	/^    simde_int8x16_t val[2];$/;"	m	struct:simde_int8x16x2_t
val	simde/arm/neon/types.h	/^    simde_int8x16_t val[3];$/;"	m	struct:simde_int8x16x3_t
val	simde/arm/neon/types.h	/^    simde_int8x16_t val[4];$/;"	m	struct:simde_int8x16x4_t
val	simde/arm/neon/types.h	/^    simde_int8x8_t val[2];$/;"	m	struct:simde_int8x8x2_t
val	simde/arm/neon/types.h	/^    simde_int8x8_t val[3];$/;"	m	struct:simde_int8x8x3_t
val	simde/arm/neon/types.h	/^    simde_int8x8_t val[4];$/;"	m	struct:simde_int8x8x4_t
val	simde/arm/neon/types.h	/^    simde_uint16x4_t val[2];$/;"	m	struct:simde_uint16x4x2_t
val	simde/arm/neon/types.h	/^    simde_uint16x4_t val[3];$/;"	m	struct:simde_uint16x4x3_t
val	simde/arm/neon/types.h	/^    simde_uint16x4_t val[4];$/;"	m	struct:simde_uint16x4x4_t
val	simde/arm/neon/types.h	/^    simde_uint16x8_t val[2];$/;"	m	struct:simde_uint16x8x2_t
val	simde/arm/neon/types.h	/^    simde_uint16x8_t val[3];$/;"	m	struct:simde_uint16x8x3_t
val	simde/arm/neon/types.h	/^    simde_uint16x8_t val[4];$/;"	m	struct:simde_uint16x8x4_t
val	simde/arm/neon/types.h	/^    simde_uint32x2_t val[2];$/;"	m	struct:simde_uint32x2x2_t
val	simde/arm/neon/types.h	/^    simde_uint32x2_t val[3];$/;"	m	struct:simde_uint32x2x3_t
val	simde/arm/neon/types.h	/^    simde_uint32x2_t val[4];$/;"	m	struct:simde_uint32x2x4_t
val	simde/arm/neon/types.h	/^    simde_uint32x4_t val[2];$/;"	m	struct:simde_uint32x4x2_t
val	simde/arm/neon/types.h	/^    simde_uint32x4_t val[3];$/;"	m	struct:simde_uint32x4x3_t
val	simde/arm/neon/types.h	/^    simde_uint32x4_t val[4];$/;"	m	struct:simde_uint32x4x4_t
val	simde/arm/neon/types.h	/^    simde_uint64x1_t val[2];$/;"	m	struct:simde_uint64x1x2_t
val	simde/arm/neon/types.h	/^    simde_uint64x1_t val[3];$/;"	m	struct:simde_uint64x1x3_t
val	simde/arm/neon/types.h	/^    simde_uint64x1_t val[4];$/;"	m	struct:simde_uint64x1x4_t
val	simde/arm/neon/types.h	/^    simde_uint64x2_t val[2];$/;"	m	struct:simde_uint64x2x2_t
val	simde/arm/neon/types.h	/^    simde_uint64x2_t val[3];$/;"	m	struct:simde_uint64x2x3_t
val	simde/arm/neon/types.h	/^    simde_uint64x2_t val[4];$/;"	m	struct:simde_uint64x2x4_t
val	simde/arm/neon/types.h	/^    simde_uint8x16_t val[2];$/;"	m	struct:simde_uint8x16x2_t
val	simde/arm/neon/types.h	/^    simde_uint8x16_t val[3];$/;"	m	struct:simde_uint8x16x3_t
val	simde/arm/neon/types.h	/^    simde_uint8x16_t val[4];$/;"	m	struct:simde_uint8x16x4_t
val	simde/arm/neon/types.h	/^    simde_uint8x8_t val[2];$/;"	m	struct:simde_uint8x8x2_t
val	simde/arm/neon/types.h	/^    simde_uint8x8_t val[3];$/;"	m	struct:simde_uint8x8x3_t
val	simde/arm/neon/types.h	/^    simde_uint8x8_t val[4];$/;"	m	struct:simde_uint8x8x4_t
val	simde/arm/neon/types.h	/^   simde_float64x2_t val[3];$/;"	m	struct:simde_float64x2x3_t
val	simde/arm/neon/types.h	/^   simde_float64x2_t val[4];$/;"	m	struct:simde_float64x2x4_t
valid_output_format	io/save_handle_graph.hpp	/^inline bool valid_output_format(const string& fmt_string) {$/;"	f	namespace:vg::io
validate	subcommand/haplotypes_main.cpp	/^    bool validate = false;$/;"	m	struct:HaplotypesConfig	file:
validate_chain	subcommand/haplotypes_main.cpp	/^void validate_chain(const Haplotypes::TopLevelChain& chain,$/;"	f
validate_clusters	minimizer_mapper.cpp	/^bool MinimizerMapper::validate_clusters(const std::vector<std::vector<Cluster>>& clusters, const std::vector<std::vector<Seed>>& seeds, size_t read_limit, size_t fragment_limit) const {$/;"	f	class:vg::MinimizerMapper
validate_edges	subcommand/haplotypes_main.cpp	/^void validate_edges(const gbwtgraph::GBWTGraph& graph, const gbwtgraph::GBWTGraph& subgraph) {$/;"	f
validate_error	subcommand/haplotypes_main.cpp	/^void validate_error(const std::string& header, const std::string& message) {$/;"	f
validate_error_chain	subcommand/haplotypes_main.cpp	/^void validate_error_chain(size_t chain_id, const std::string& message) {$/;"	f
validate_error_sequence	subcommand/haplotypes_main.cpp	/^void validate_error_sequence(size_t chain_id, size_t subchain_id, size_t sequence_id, const std::string& message) {$/;"	f
validate_error_subchain	subcommand/haplotypes_main.cpp	/^void validate_error_subchain(size_t chain_id, size_t subchain_id, const std::string& message) {$/;"	f
validate_gbwt_config	subcommand/gbwt_main.cpp	/^void validate_gbwt_config(GBWTConfig& config) {$/;"	f
validate_haplotypes	subcommand/haplotypes_main.cpp	/^void validate_haplotypes(const Haplotypes& haplotypes,$/;"	f
validate_multipath_alignment	multipath_alignment.cpp	/^    bool validate_multipath_alignment(const multipath_alignment_t& multipath_aln, const HandleGraph& handle_graph) {$/;"	f	namespace:vg
validate_nodes	subcommand/haplotypes_main.cpp	/^void validate_nodes(const gbwtgraph::GBWTGraph& graph, const gbwtgraph::GBWTGraph& subgraph) {$/;"	f
validate_subgraph	subcommand/haplotypes_main.cpp	/^void validate_subgraph(const gbwtgraph::GBWTGraph& graph, const gbwtgraph::GBWTGraph& subgraph, HaplotypePartitioner::Verbosity verbosity) {$/;"	f
validate_unary_path	subcommand/haplotypes_main.cpp	/^std::string validate_unary_path(const HandleGraph& graph, handle_t from, handle_t to) {$/;"	f
validator	subcommand/options.hpp	/^    ValidatorFunction<T> validator;$/;"	m	struct:vg::subcommand::ArgSpec
value	explainer.cpp	/^void ProblemDumpExplainer::value(bool v) {$/;"	f	class:vg::ProblemDumpExplainer
value	explainer.cpp	/^void ProblemDumpExplainer::value(const HandleGraph& v) {$/;"	f	class:vg::ProblemDumpExplainer
value	explainer.cpp	/^void ProblemDumpExplainer::value(const handle_t& v, const HandleGraph& context) {$/;"	f	class:vg::ProblemDumpExplainer
value	explainer.cpp	/^void ProblemDumpExplainer::value(const pos_t& v) {$/;"	f	class:vg::ProblemDumpExplainer
value	explainer.cpp	/^void ProblemDumpExplainer::value(const std::string& v) {$/;"	f	class:vg::ProblemDumpExplainer
value	explainer.cpp	/^void ProblemDumpExplainer::value(double v) {$/;"	f	class:vg::ProblemDumpExplainer
value	explainer.cpp	/^void ProblemDumpExplainer::value(int v) {$/;"	f	class:vg::ProblemDumpExplainer
value	explainer.cpp	/^void ProblemDumpExplainer::value(size_t v) {$/;"	f	class:vg::ProblemDumpExplainer
value	explainer.cpp	/^void ProblemDumpExplainer::value(vg::id_t v) {$/;"	f	class:vg::ProblemDumpExplainer
value	gbwt_extender.cpp	/^    value_type value() const {$/;"	f	struct:vg::WFAPoint
value	minimizer_mapper.hpp	/^        typename gbwtgraph::DefaultMinimizerIndex::minimizer_type value;$/;"	m	struct:vg::MinimizerMapper::Minimizer
value	option.hpp	/^    Value value;$/;"	m	class:vg::BaseOption
value	small_bitset.hpp	/^            value_type value;$/;"	m	union:vg::SmallBitset::__anon20
value	subcommand/options.hpp	/^    Holder value;$/;"	m	struct:vg::subcommand::ValueArgSpec
value	subcommand/options.hpp	/^    T value;$/;"	m	struct:vg::subcommand::Valuation
value	unittest/catch.hpp	/^            static const bool value = decltype(test<std::ostream, const T&>(0))::value;$/;"	m	class:Catch::Detail::IsStreamInsertable
value_at	sampler.hpp	/^        vector<To> value_at;$/;"	m	class:vg::NGSSimulator::MarkovDistribution
value_cast	annotation.hpp	/^inline Container value_cast(const google::protobuf::Value& value) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline bool value_cast<bool>(const google::protobuf::Value& value) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline double value_cast<double>(const google::protobuf::Value& value) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline google::protobuf::Value value_cast(const Container& wrap) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline google::protobuf::Value value_cast<bool>(const bool& wrap) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline google::protobuf::Value value_cast<double>(const double& wrap) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline google::protobuf::Value value_cast<int>(const int& wrap) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline google::protobuf::Value value_cast<size_t>(const size_t& wrap) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline google::protobuf::Value value_cast<string>(const string& wrap) {$/;"	f	namespace:vg
value_cast	annotation.hpp	/^inline string value_cast<string>(const google::protobuf::Value& value) {$/;"	f	namespace:vg
value_set	subcommand/options.hpp	/^    bool value_set = false;$/;"	m	struct:vg::subcommand::ValueArgSpec
value_type	deconstructor.hpp	/^    typedef void value_type;$/;"	t	class:vg::count_back_inserter
value_type	small_bitset.hpp	/^        typedef std::uint64_t value_type;$/;"	t	class:vg::SmallBitset
vand_s16	simde/arm/neon/and.h	93;"	d
vand_s16	simde/arm/neon/and.h	94;"	d
vand_s32	simde/arm/neon/and.h	123;"	d
vand_s32	simde/arm/neon/and.h	124;"	d
vand_s64	simde/arm/neon/and.h	153;"	d
vand_s64	simde/arm/neon/and.h	154;"	d
vand_s8	simde/arm/neon/and.h	63;"	d
vand_s8	simde/arm/neon/and.h	64;"	d
vand_u16	simde/arm/neon/and.h	213;"	d
vand_u16	simde/arm/neon/and.h	214;"	d
vand_u32	simde/arm/neon/and.h	243;"	d
vand_u32	simde/arm/neon/and.h	244;"	d
vand_u64	simde/arm/neon/and.h	273;"	d
vand_u64	simde/arm/neon/and.h	274;"	d
vand_u8	simde/arm/neon/and.h	183;"	d
vand_u8	simde/arm/neon/and.h	184;"	d
vandq_s16	simde/arm/neon/and.h	341;"	d
vandq_s16	simde/arm/neon/and.h	342;"	d
vandq_s32	simde/arm/neon/and.h	375;"	d
vandq_s32	simde/arm/neon/and.h	376;"	d
vandq_s64	simde/arm/neon/and.h	409;"	d
vandq_s64	simde/arm/neon/and.h	410;"	d
vandq_s8	simde/arm/neon/and.h	307;"	d
vandq_s8	simde/arm/neon/and.h	308;"	d
vandq_u16	simde/arm/neon/and.h	477;"	d
vandq_u16	simde/arm/neon/and.h	478;"	d
vandq_u32	simde/arm/neon/and.h	511;"	d
vandq_u32	simde/arm/neon/and.h	512;"	d
vandq_u64	simde/arm/neon/and.h	545;"	d
vandq_u64	simde/arm/neon/and.h	546;"	d
vandq_u8	simde/arm/neon/and.h	443;"	d
vandq_u8	simde/arm/neon/and.h	444;"	d
var	crash.cpp	/^const char* var = "VG_FULL_TRACEBACK";$/;"	m	namespace:vg	file:
variant_alts	vg.hpp	/^        map<pair<long, int>, vector<pair<string, int>>> variant_alts;$/;"	m	struct:vg::VG::Plan
variant_range	variant_adder.hpp	/^    size_t variant_range = 50;$/;"	m	class:vg::VariantAdder
variant_recall	variant_recall.cpp	/^void variant_recall(VG* graph,$/;"	f	namespace:vg
variant_source	rare_variant_simplifier.hpp	/^    VcfBuffer& variant_source;$/;"	m	class:vg::RareVariantSimplifier
variant_to_traversal	vg.hpp	/^    map<string, SnarlTraversal> variant_to_traversal;$/;"	m	class:vg::VG
variants_after	vcf_buffer.hpp	/^    list<unique_ptr<vcflib::Variant>> variants_after;$/;"	m	class:vg::WindowedVcfBuffer
variants_before	vcf_buffer.hpp	/^    list<unique_ptr<vcflib::Variant>> variants_before;$/;"	m	class:vg::WindowedVcfBuffer
vars_per_chunk	constructor.hpp	/^    size_t vars_per_chunk = 1024;$/;"	m	class:vg::Constructor
vbic_s16	simde/arm/neon/bic.h	83;"	d
vbic_s16	simde/arm/neon/bic.h	84;"	d
vbic_s32	simde/arm/neon/bic.h	108;"	d
vbic_s32	simde/arm/neon/bic.h	109;"	d
vbic_s64	simde/arm/neon/bic.h	133;"	d
vbic_s64	simde/arm/neon/bic.h	134;"	d
vbic_s8	simde/arm/neon/bic.h	58;"	d
vbic_s8	simde/arm/neon/bic.h	59;"	d
vbic_u16	simde/arm/neon/bic.h	183;"	d
vbic_u16	simde/arm/neon/bic.h	184;"	d
vbic_u32	simde/arm/neon/bic.h	208;"	d
vbic_u32	simde/arm/neon/bic.h	209;"	d
vbic_u64	simde/arm/neon/bic.h	233;"	d
vbic_u64	simde/arm/neon/bic.h	234;"	d
vbic_u8	simde/arm/neon/bic.h	158;"	d
vbic_u8	simde/arm/neon/bic.h	159;"	d
vbicq_s16	simde/arm/neon/bic.h	291;"	d
vbicq_s16	simde/arm/neon/bic.h	292;"	d
vbicq_s32	simde/arm/neon/bic.h	320;"	d
vbicq_s32	simde/arm/neon/bic.h	321;"	d
vbicq_s64	simde/arm/neon/bic.h	349;"	d
vbicq_s64	simde/arm/neon/bic.h	350;"	d
vbicq_s8	simde/arm/neon/bic.h	262;"	d
vbicq_s8	simde/arm/neon/bic.h	263;"	d
vbicq_u16	simde/arm/neon/bic.h	407;"	d
vbicq_u16	simde/arm/neon/bic.h	408;"	d
vbicq_u32	simde/arm/neon/bic.h	436;"	d
vbicq_u32	simde/arm/neon/bic.h	437;"	d
vbicq_u64	simde/arm/neon/bic.h	465;"	d
vbicq_u64	simde/arm/neon/bic.h	466;"	d
vbicq_u8	simde/arm/neon/bic.h	378;"	d
vbicq_u8	simde/arm/neon/bic.h	379;"	d
vbsl_f32	simde/arm/neon/bsl.h	62;"	d
vbsl_f32	simde/arm/neon/bsl.h	63;"	d
vbsl_f64	simde/arm/neon/bsl.h	80;"	d
vbsl_f64	simde/arm/neon/bsl.h	81;"	d
vbsl_s16	simde/arm/neon/bsl.h	116;"	d
vbsl_s16	simde/arm/neon/bsl.h	117;"	d
vbsl_s32	simde/arm/neon/bsl.h	134;"	d
vbsl_s32	simde/arm/neon/bsl.h	135;"	d
vbsl_s64	simde/arm/neon/bsl.h	152;"	d
vbsl_s64	simde/arm/neon/bsl.h	153;"	d
vbsl_s8	simde/arm/neon/bsl.h	98;"	d
vbsl_s8	simde/arm/neon/bsl.h	99;"	d
vbsl_u16	simde/arm/neon/bsl.h	184;"	d
vbsl_u16	simde/arm/neon/bsl.h	185;"	d
vbsl_u32	simde/arm/neon/bsl.h	202;"	d
vbsl_u32	simde/arm/neon/bsl.h	203;"	d
vbsl_u64	simde/arm/neon/bsl.h	220;"	d
vbsl_u64	simde/arm/neon/bsl.h	221;"	d
vbsl_u8	simde/arm/neon/bsl.h	166;"	d
vbsl_u8	simde/arm/neon/bsl.h	167;"	d
vbslq_f32	simde/arm/neon/bsl.h	242;"	d
vbslq_f32	simde/arm/neon/bsl.h	243;"	d
vbslq_f64	simde/arm/neon/bsl.h	265;"	d
vbslq_f64	simde/arm/neon/bsl.h	266;"	d
vbslq_s16	simde/arm/neon/bsl.h	311;"	d
vbslq_s16	simde/arm/neon/bsl.h	312;"	d
vbslq_s32	simde/arm/neon/bsl.h	333;"	d
vbslq_s32	simde/arm/neon/bsl.h	334;"	d
vbslq_s64	simde/arm/neon/bsl.h	355;"	d
vbslq_s64	simde/arm/neon/bsl.h	356;"	d
vbslq_s8	simde/arm/neon/bsl.h	287;"	d
vbslq_s8	simde/arm/neon/bsl.h	288;"	d
vbslq_u16	simde/arm/neon/bsl.h	397;"	d
vbslq_u16	simde/arm/neon/bsl.h	398;"	d
vbslq_u32	simde/arm/neon/bsl.h	419;"	d
vbslq_u32	simde/arm/neon/bsl.h	420;"	d
vbslq_u64	simde/arm/neon/bsl.h	441;"	d
vbslq_u64	simde/arm/neon/bsl.h	442;"	d
vbslq_u8	simde/arm/neon/bsl.h	375;"	d
vbslq_u8	simde/arm/neon/bsl.h	376;"	d
vcagt_f32	simde/arm/neon/cagt.h	57;"	d
vcagt_f32	simde/arm/neon/cagt.h	58;"	d
vcagt_f64	simde/arm/neon/cagt.h	81;"	d
vcagt_f64	simde/arm/neon/cagt.h	82;"	d
vcagtq_f32	simde/arm/neon/cagt.h	107;"	d
vcagtq_f32	simde/arm/neon/cagt.h	108;"	d
vcagtq_f64	simde/arm/neon/cagt.h	133;"	d
vcagtq_f64	simde/arm/neon/cagt.h	134;"	d
vceq_f32	simde/arm/neon/ceq.h	60;"	d
vceq_f32	simde/arm/neon/ceq.h	61;"	d
vceq_f64	simde/arm/neon/ceq.h	88;"	d
vceq_f64	simde/arm/neon/ceq.h	89;"	d
vceq_s16	simde/arm/neon/ceq.h	148;"	d
vceq_s16	simde/arm/neon/ceq.h	149;"	d
vceq_s32	simde/arm/neon/ceq.h	178;"	d
vceq_s32	simde/arm/neon/ceq.h	179;"	d
vceq_s64	simde/arm/neon/ceq.h	206;"	d
vceq_s64	simde/arm/neon/ceq.h	207;"	d
vceq_s8	simde/arm/neon/ceq.h	118;"	d
vceq_s8	simde/arm/neon/ceq.h	119;"	d
vceq_u16	simde/arm/neon/ceq.h	262;"	d
vceq_u16	simde/arm/neon/ceq.h	263;"	d
vceq_u32	simde/arm/neon/ceq.h	290;"	d
vceq_u32	simde/arm/neon/ceq.h	291;"	d
vceq_u64	simde/arm/neon/ceq.h	318;"	d
vceq_u64	simde/arm/neon/ceq.h	319;"	d
vceq_u8	simde/arm/neon/ceq.h	234;"	d
vceq_u8	simde/arm/neon/ceq.h	235;"	d
vceqq_f32	simde/arm/neon/ceq.h	352;"	d
vceqq_f32	simde/arm/neon/ceq.h	353;"	d
vceqq_f64	simde/arm/neon/ceq.h	386;"	d
vceqq_f64	simde/arm/neon/ceq.h	387;"	d
vceqq_s16	simde/arm/neon/ceq.h	454;"	d
vceqq_s16	simde/arm/neon/ceq.h	455;"	d
vceqq_s32	simde/arm/neon/ceq.h	488;"	d
vceqq_s32	simde/arm/neon/ceq.h	489;"	d
vceqq_s64	simde/arm/neon/ceq.h	520;"	d
vceqq_s64	simde/arm/neon/ceq.h	521;"	d
vceqq_s8	simde/arm/neon/ceq.h	420;"	d
vceqq_s8	simde/arm/neon/ceq.h	421;"	d
vceqq_u16	simde/arm/neon/ceq.h	584;"	d
vceqq_u16	simde/arm/neon/ceq.h	585;"	d
vceqq_u32	simde/arm/neon/ceq.h	616;"	d
vceqq_u32	simde/arm/neon/ceq.h	617;"	d
vceqq_u64	simde/arm/neon/ceq.h	648;"	d
vceqq_u64	simde/arm/neon/ceq.h	649;"	d
vceqq_u8	simde/arm/neon/ceq.h	552;"	d
vceqq_u8	simde/arm/neon/ceq.h	553;"	d
vceqz_f32	simde/arm/neon/ceqz.h	50;"	d
vceqz_f32	simde/arm/neon/ceqz.h	51;"	d
vceqz_f64	simde/arm/neon/ceqz.h	64;"	d
vceqz_f64	simde/arm/neon/ceqz.h	65;"	d
vceqz_s16	simde/arm/neon/ceqz.h	92;"	d
vceqz_s16	simde/arm/neon/ceqz.h	93;"	d
vceqz_s32	simde/arm/neon/ceqz.h	106;"	d
vceqz_s32	simde/arm/neon/ceqz.h	107;"	d
vceqz_s64	simde/arm/neon/ceqz.h	120;"	d
vceqz_s64	simde/arm/neon/ceqz.h	121;"	d
vceqz_s8	simde/arm/neon/ceqz.h	78;"	d
vceqz_s8	simde/arm/neon/ceqz.h	79;"	d
vceqz_u16	simde/arm/neon/ceqz.h	148;"	d
vceqz_u16	simde/arm/neon/ceqz.h	149;"	d
vceqz_u32	simde/arm/neon/ceqz.h	162;"	d
vceqz_u32	simde/arm/neon/ceqz.h	163;"	d
vceqz_u64	simde/arm/neon/ceqz.h	176;"	d
vceqz_u64	simde/arm/neon/ceqz.h	177;"	d
vceqz_u8	simde/arm/neon/ceqz.h	134;"	d
vceqz_u8	simde/arm/neon/ceqz.h	135;"	d
vceqzq_f32	simde/arm/neon/ceqz.h	192;"	d
vceqzq_f32	simde/arm/neon/ceqz.h	193;"	d
vceqzq_f64	simde/arm/neon/ceqz.h	208;"	d
vceqzq_f64	simde/arm/neon/ceqz.h	209;"	d
vceqzq_s16	simde/arm/neon/ceqz.h	240;"	d
vceqzq_s16	simde/arm/neon/ceqz.h	241;"	d
vceqzq_s32	simde/arm/neon/ceqz.h	256;"	d
vceqzq_s32	simde/arm/neon/ceqz.h	257;"	d
vceqzq_s64	simde/arm/neon/ceqz.h	270;"	d
vceqzq_s64	simde/arm/neon/ceqz.h	271;"	d
vceqzq_s8	simde/arm/neon/ceqz.h	224;"	d
vceqzq_s8	simde/arm/neon/ceqz.h	225;"	d
vceqzq_u16	simde/arm/neon/ceqz.h	300;"	d
vceqzq_u16	simde/arm/neon/ceqz.h	301;"	d
vceqzq_u32	simde/arm/neon/ceqz.h	314;"	d
vceqzq_u32	simde/arm/neon/ceqz.h	315;"	d
vceqzq_u64	simde/arm/neon/ceqz.h	328;"	d
vceqzq_u64	simde/arm/neon/ceqz.h	329;"	d
vceqzq_u8	simde/arm/neon/ceqz.h	286;"	d
vceqzq_u8	simde/arm/neon/ceqz.h	287;"	d
vcf_contigs	index_registry.cpp	/^vector<string> vcf_contigs(const string& filename) {$/;"	f	namespace:vg
vcf_fixup	graph_caller.cpp	/^void VCFOutputCaller::vcf_fixup(vcflib::Variant& var) const {$/;"	f	class:vg::VCFOutputCaller
vcf_header	graph_caller.cpp	/^string FlowCaller::vcf_header(const PathHandleGraph& graph, const vector<string>& contigs,$/;"	f	class:vg::FlowCaller
vcf_header	graph_caller.cpp	/^string LegacyCaller::vcf_header(const PathHandleGraph& graph, const vector<string>& ref_paths,$/;"	f	class:vg::LegacyCaller
vcf_header	graph_caller.cpp	/^string NestedFlowCaller::vcf_header(const PathHandleGraph& graph, const vector<string>& contigs,$/;"	f	class:vg::NestedFlowCaller
vcf_header	graph_caller.cpp	/^string VCFGenotyper::vcf_header(const PathHandleGraph& graph, const vector<string>& ref_paths,$/;"	f	class:vg::VCFGenotyper
vcf_header	graph_caller.cpp	/^string VCFOutputCaller::vcf_header(const PathHandleGraph& graph, const vector<string>& contigs,$/;"	f	class:vg::VCFOutputCaller
vcf_header	mcmc_caller.cpp	/^    string MCMCCaller::vcf_header(const PathPositionHandleGraph& pph_graph, const vector<string>& ref_paths,$/;"	f	class:vg::MCMCCaller
vcf_input	subcommand/haplotypes_main.cpp	/^    std::string haplotype_input, kmer_input, vcf_input;$/;"	m	struct:HaplotypesConfig	file:
vcf_is_phased	index_registry.cpp	/^bool IndexRegistry::vcf_is_phased(const string& filepath) {$/;"	f	class:vg::IndexRegistry
vcf_to_fasta	name_mapper.cpp	/^string NameMapper::vcf_to_fasta(const string& vcf_name) const {$/;"	f	class:vg::NameMapper
vcf_to_fasta_renames	name_mapper.hpp	/^    map<string, string> vcf_to_fasta_renames;$/;"	m	class:vg::NameMapper
vcge_f32	simde/arm/neon/cge.h	401;"	d
vcge_f32	simde/arm/neon/cge.h	402;"	d
vcge_f64	simde/arm/neon/cge.h	429;"	d
vcge_f64	simde/arm/neon/cge.h	430;"	d
vcge_s16	simde/arm/neon/cge.h	489;"	d
vcge_s16	simde/arm/neon/cge.h	490;"	d
vcge_s32	simde/arm/neon/cge.h	519;"	d
vcge_s32	simde/arm/neon/cge.h	520;"	d
vcge_s64	simde/arm/neon/cge.h	547;"	d
vcge_s64	simde/arm/neon/cge.h	548;"	d
vcge_s8	simde/arm/neon/cge.h	459;"	d
vcge_s8	simde/arm/neon/cge.h	460;"	d
vcge_u16	simde/arm/neon/cge.h	609;"	d
vcge_u16	simde/arm/neon/cge.h	610;"	d
vcge_u32	simde/arm/neon/cge.h	640;"	d
vcge_u32	simde/arm/neon/cge.h	641;"	d
vcge_u64	simde/arm/neon/cge.h	668;"	d
vcge_u64	simde/arm/neon/cge.h	669;"	d
vcge_u8	simde/arm/neon/cge.h	578;"	d
vcge_u8	simde/arm/neon/cge.h	579;"	d
vcgeq_f32	simde/arm/neon/cge.h	67;"	d
vcgeq_f32	simde/arm/neon/cge.h	68;"	d
vcgeq_f64	simde/arm/neon/cge.h	101;"	d
vcgeq_f64	simde/arm/neon/cge.h	102;"	d
vcgeq_s16	simde/arm/neon/cge.h	169;"	d
vcgeq_s16	simde/arm/neon/cge.h	170;"	d
vcgeq_s32	simde/arm/neon/cge.h	203;"	d
vcgeq_s32	simde/arm/neon/cge.h	204;"	d
vcgeq_s64	simde/arm/neon/cge.h	235;"	d
vcgeq_s64	simde/arm/neon/cge.h	236;"	d
vcgeq_s8	simde/arm/neon/cge.h	135;"	d
vcgeq_s8	simde/arm/neon/cge.h	136;"	d
vcgeq_u16	simde/arm/neon/cge.h	305;"	d
vcgeq_u16	simde/arm/neon/cge.h	306;"	d
vcgeq_u32	simde/arm/neon/cge.h	340;"	d
vcgeq_u32	simde/arm/neon/cge.h	341;"	d
vcgeq_u64	simde/arm/neon/cge.h	373;"	d
vcgeq_u64	simde/arm/neon/cge.h	374;"	d
vcgeq_u8	simde/arm/neon/cge.h	270;"	d
vcgeq_u8	simde/arm/neon/cge.h	271;"	d
vcgez_f32	simde/arm/neon/cgez.h	231;"	d
vcgez_f32	simde/arm/neon/cgez.h	232;"	d
vcgez_f64	simde/arm/neon/cgez.h	259;"	d
vcgez_f64	simde/arm/neon/cgez.h	260;"	d
vcgez_s16	simde/arm/neon/cgez.h	315;"	d
vcgez_s16	simde/arm/neon/cgez.h	316;"	d
vcgez_s32	simde/arm/neon/cgez.h	343;"	d
vcgez_s32	simde/arm/neon/cgez.h	344;"	d
vcgez_s64	simde/arm/neon/cgez.h	371;"	d
vcgez_s64	simde/arm/neon/cgez.h	372;"	d
vcgez_s8	simde/arm/neon/cgez.h	287;"	d
vcgez_s8	simde/arm/neon/cgez.h	288;"	d
vcgezq_f32	simde/arm/neon/cgez.h	63;"	d
vcgezq_f32	simde/arm/neon/cgez.h	64;"	d
vcgezq_f64	simde/arm/neon/cgez.h	91;"	d
vcgezq_f64	simde/arm/neon/cgez.h	92;"	d
vcgezq_s16	simde/arm/neon/cgez.h	147;"	d
vcgezq_s16	simde/arm/neon/cgez.h	148;"	d
vcgezq_s32	simde/arm/neon/cgez.h	175;"	d
vcgezq_s32	simde/arm/neon/cgez.h	176;"	d
vcgezq_s64	simde/arm/neon/cgez.h	203;"	d
vcgezq_s64	simde/arm/neon/cgez.h	204;"	d
vcgezq_s8	simde/arm/neon/cgez.h	119;"	d
vcgezq_s8	simde/arm/neon/cgez.h	120;"	d
vcgt_f32	simde/arm/neon/cgt.h	405;"	d
vcgt_f32	simde/arm/neon/cgt.h	406;"	d
vcgt_f64	simde/arm/neon/cgt.h	433;"	d
vcgt_f64	simde/arm/neon/cgt.h	434;"	d
vcgt_s16	simde/arm/neon/cgt.h	493;"	d
vcgt_s16	simde/arm/neon/cgt.h	494;"	d
vcgt_s32	simde/arm/neon/cgt.h	523;"	d
vcgt_s32	simde/arm/neon/cgt.h	524;"	d
vcgt_s64	simde/arm/neon/cgt.h	551;"	d
vcgt_s64	simde/arm/neon/cgt.h	552;"	d
vcgt_s8	simde/arm/neon/cgt.h	463;"	d
vcgt_s8	simde/arm/neon/cgt.h	464;"	d
vcgt_u16	simde/arm/neon/cgt.h	613;"	d
vcgt_u16	simde/arm/neon/cgt.h	614;"	d
vcgt_u32	simde/arm/neon/cgt.h	644;"	d
vcgt_u32	simde/arm/neon/cgt.h	645;"	d
vcgt_u64	simde/arm/neon/cgt.h	672;"	d
vcgt_u64	simde/arm/neon/cgt.h	673;"	d
vcgt_u8	simde/arm/neon/cgt.h	582;"	d
vcgt_u8	simde/arm/neon/cgt.h	583;"	d
vcgtq_f32	simde/arm/neon/cgt.h	69;"	d
vcgtq_f32	simde/arm/neon/cgt.h	70;"	d
vcgtq_f64	simde/arm/neon/cgt.h	103;"	d
vcgtq_f64	simde/arm/neon/cgt.h	104;"	d
vcgtq_s16	simde/arm/neon/cgt.h	171;"	d
vcgtq_s16	simde/arm/neon/cgt.h	172;"	d
vcgtq_s32	simde/arm/neon/cgt.h	205;"	d
vcgtq_s32	simde/arm/neon/cgt.h	206;"	d
vcgtq_s64	simde/arm/neon/cgt.h	237;"	d
vcgtq_s64	simde/arm/neon/cgt.h	238;"	d
vcgtq_s8	simde/arm/neon/cgt.h	137;"	d
vcgtq_s8	simde/arm/neon/cgt.h	138;"	d
vcgtq_u16	simde/arm/neon/cgt.h	307;"	d
vcgtq_u16	simde/arm/neon/cgt.h	308;"	d
vcgtq_u32	simde/arm/neon/cgt.h	342;"	d
vcgtq_u32	simde/arm/neon/cgt.h	343;"	d
vcgtq_u64	simde/arm/neon/cgt.h	375;"	d
vcgtq_u64	simde/arm/neon/cgt.h	376;"	d
vcgtq_u8	simde/arm/neon/cgt.h	272;"	d
vcgtq_u8	simde/arm/neon/cgt.h	273;"	d
vcgtz_f32	simde/arm/neon/cgtz.h	233;"	d
vcgtz_f32	simde/arm/neon/cgtz.h	234;"	d
vcgtz_f64	simde/arm/neon/cgtz.h	261;"	d
vcgtz_f64	simde/arm/neon/cgtz.h	262;"	d
vcgtz_s16	simde/arm/neon/cgtz.h	317;"	d
vcgtz_s16	simde/arm/neon/cgtz.h	318;"	d
vcgtz_s32	simde/arm/neon/cgtz.h	345;"	d
vcgtz_s32	simde/arm/neon/cgtz.h	346;"	d
vcgtz_s64	simde/arm/neon/cgtz.h	373;"	d
vcgtz_s64	simde/arm/neon/cgtz.h	374;"	d
vcgtz_s8	simde/arm/neon/cgtz.h	289;"	d
vcgtz_s8	simde/arm/neon/cgtz.h	290;"	d
vcgtzq_f32	simde/arm/neon/cgtz.h	65;"	d
vcgtzq_f32	simde/arm/neon/cgtz.h	66;"	d
vcgtzq_f64	simde/arm/neon/cgtz.h	93;"	d
vcgtzq_f64	simde/arm/neon/cgtz.h	94;"	d
vcgtzq_s16	simde/arm/neon/cgtz.h	149;"	d
vcgtzq_s16	simde/arm/neon/cgtz.h	150;"	d
vcgtzq_s32	simde/arm/neon/cgtz.h	177;"	d
vcgtzq_s32	simde/arm/neon/cgtz.h	178;"	d
vcgtzq_s64	simde/arm/neon/cgtz.h	205;"	d
vcgtzq_s64	simde/arm/neon/cgtz.h	206;"	d
vcgtzq_s8	simde/arm/neon/cgtz.h	121;"	d
vcgtzq_s8	simde/arm/neon/cgtz.h	122;"	d
vcle_f32	simde/arm/neon/cle.h	401;"	d
vcle_f32	simde/arm/neon/cle.h	402;"	d
vcle_f64	simde/arm/neon/cle.h	429;"	d
vcle_f64	simde/arm/neon/cle.h	430;"	d
vcle_s16	simde/arm/neon/cle.h	489;"	d
vcle_s16	simde/arm/neon/cle.h	490;"	d
vcle_s32	simde/arm/neon/cle.h	519;"	d
vcle_s32	simde/arm/neon/cle.h	520;"	d
vcle_s64	simde/arm/neon/cle.h	547;"	d
vcle_s64	simde/arm/neon/cle.h	548;"	d
vcle_s8	simde/arm/neon/cle.h	459;"	d
vcle_s8	simde/arm/neon/cle.h	460;"	d
vcle_u16	simde/arm/neon/cle.h	609;"	d
vcle_u16	simde/arm/neon/cle.h	610;"	d
vcle_u32	simde/arm/neon/cle.h	640;"	d
vcle_u32	simde/arm/neon/cle.h	641;"	d
vcle_u64	simde/arm/neon/cle.h	668;"	d
vcle_u64	simde/arm/neon/cle.h	669;"	d
vcle_u8	simde/arm/neon/cle.h	578;"	d
vcle_u8	simde/arm/neon/cle.h	579;"	d
vcleq_f32	simde/arm/neon/cle.h	67;"	d
vcleq_f32	simde/arm/neon/cle.h	68;"	d
vcleq_f64	simde/arm/neon/cle.h	101;"	d
vcleq_f64	simde/arm/neon/cle.h	102;"	d
vcleq_s16	simde/arm/neon/cle.h	169;"	d
vcleq_s16	simde/arm/neon/cle.h	170;"	d
vcleq_s32	simde/arm/neon/cle.h	203;"	d
vcleq_s32	simde/arm/neon/cle.h	204;"	d
vcleq_s64	simde/arm/neon/cle.h	235;"	d
vcleq_s64	simde/arm/neon/cle.h	236;"	d
vcleq_s8	simde/arm/neon/cle.h	135;"	d
vcleq_s8	simde/arm/neon/cle.h	136;"	d
vcleq_u16	simde/arm/neon/cle.h	305;"	d
vcleq_u16	simde/arm/neon/cle.h	306;"	d
vcleq_u32	simde/arm/neon/cle.h	340;"	d
vcleq_u32	simde/arm/neon/cle.h	341;"	d
vcleq_u64	simde/arm/neon/cle.h	373;"	d
vcleq_u64	simde/arm/neon/cle.h	374;"	d
vcleq_u8	simde/arm/neon/cle.h	270;"	d
vcleq_u8	simde/arm/neon/cle.h	271;"	d
vclez_f32	simde/arm/neon/clez.h	231;"	d
vclez_f32	simde/arm/neon/clez.h	232;"	d
vclez_f64	simde/arm/neon/clez.h	259;"	d
vclez_f64	simde/arm/neon/clez.h	260;"	d
vclez_s16	simde/arm/neon/clez.h	315;"	d
vclez_s16	simde/arm/neon/clez.h	316;"	d
vclez_s32	simde/arm/neon/clez.h	343;"	d
vclez_s32	simde/arm/neon/clez.h	344;"	d
vclez_s64	simde/arm/neon/clez.h	371;"	d
vclez_s64	simde/arm/neon/clez.h	372;"	d
vclez_s8	simde/arm/neon/clez.h	287;"	d
vclez_s8	simde/arm/neon/clez.h	288;"	d
vclezq_f32	simde/arm/neon/clez.h	63;"	d
vclezq_f32	simde/arm/neon/clez.h	64;"	d
vclezq_f64	simde/arm/neon/clez.h	91;"	d
vclezq_f64	simde/arm/neon/clez.h	92;"	d
vclezq_s16	simde/arm/neon/clez.h	147;"	d
vclezq_s16	simde/arm/neon/clez.h	148;"	d
vclezq_s32	simde/arm/neon/clez.h	175;"	d
vclezq_s32	simde/arm/neon/clez.h	176;"	d
vclezq_s64	simde/arm/neon/clez.h	203;"	d
vclezq_s64	simde/arm/neon/clez.h	204;"	d
vclezq_s8	simde/arm/neon/clez.h	119;"	d
vclezq_s8	simde/arm/neon/clez.h	120;"	d
vcls_s16	simde/arm/neon/cls.h	71;"	d
vcls_s16	simde/arm/neon/cls.h	72;"	d
vcls_s32	simde/arm/neon/cls.h	88;"	d
vcls_s32	simde/arm/neon/cls.h	89;"	d
vcls_s8	simde/arm/neon/cls.h	54;"	d
vcls_s8	simde/arm/neon/cls.h	55;"	d
vcls_u16	simde/arm/neon/cls.h	73;"	d
vcls_u16	simde/arm/neon/cls.h	74;"	d
vcls_u32	simde/arm/neon/cls.h	90;"	d
vcls_u32	simde/arm/neon/cls.h	91;"	d
vcls_u8	simde/arm/neon/cls.h	56;"	d
vcls_u8	simde/arm/neon/cls.h	57;"	d
vclsq_s16	simde/arm/neon/cls.h	122;"	d
vclsq_s16	simde/arm/neon/cls.h	123;"	d
vclsq_s32	simde/arm/neon/cls.h	139;"	d
vclsq_s32	simde/arm/neon/cls.h	140;"	d
vclsq_s8	simde/arm/neon/cls.h	105;"	d
vclsq_s8	simde/arm/neon/cls.h	106;"	d
vclsq_u16	simde/arm/neon/cls.h	124;"	d
vclsq_u16	simde/arm/neon/cls.h	125;"	d
vclsq_u32	simde/arm/neon/cls.h	141;"	d
vclsq_u32	simde/arm/neon/cls.h	142;"	d
vclsq_u8	simde/arm/neon/cls.h	107;"	d
vclsq_u8	simde/arm/neon/cls.h	108;"	d
vclt_f32	simde/arm/neon/clt.h	403;"	d
vclt_f32	simde/arm/neon/clt.h	404;"	d
vclt_f64	simde/arm/neon/clt.h	431;"	d
vclt_f64	simde/arm/neon/clt.h	432;"	d
vclt_s16	simde/arm/neon/clt.h	491;"	d
vclt_s16	simde/arm/neon/clt.h	492;"	d
vclt_s32	simde/arm/neon/clt.h	521;"	d
vclt_s32	simde/arm/neon/clt.h	522;"	d
vclt_s64	simde/arm/neon/clt.h	549;"	d
vclt_s64	simde/arm/neon/clt.h	550;"	d
vclt_s8	simde/arm/neon/clt.h	461;"	d
vclt_s8	simde/arm/neon/clt.h	462;"	d
vclt_u16	simde/arm/neon/clt.h	611;"	d
vclt_u16	simde/arm/neon/clt.h	612;"	d
vclt_u32	simde/arm/neon/clt.h	642;"	d
vclt_u32	simde/arm/neon/clt.h	643;"	d
vclt_u64	simde/arm/neon/clt.h	670;"	d
vclt_u64	simde/arm/neon/clt.h	671;"	d
vclt_u8	simde/arm/neon/clt.h	580;"	d
vclt_u8	simde/arm/neon/clt.h	581;"	d
vcltq_f32	simde/arm/neon/clt.h	69;"	d
vcltq_f32	simde/arm/neon/clt.h	70;"	d
vcltq_f64	simde/arm/neon/clt.h	103;"	d
vcltq_f64	simde/arm/neon/clt.h	104;"	d
vcltq_s16	simde/arm/neon/clt.h	171;"	d
vcltq_s16	simde/arm/neon/clt.h	172;"	d
vcltq_s32	simde/arm/neon/clt.h	205;"	d
vcltq_s32	simde/arm/neon/clt.h	206;"	d
vcltq_s64	simde/arm/neon/clt.h	237;"	d
vcltq_s64	simde/arm/neon/clt.h	238;"	d
vcltq_s8	simde/arm/neon/clt.h	137;"	d
vcltq_s8	simde/arm/neon/clt.h	138;"	d
vcltq_u16	simde/arm/neon/clt.h	307;"	d
vcltq_u16	simde/arm/neon/clt.h	308;"	d
vcltq_u32	simde/arm/neon/clt.h	342;"	d
vcltq_u32	simde/arm/neon/clt.h	343;"	d
vcltq_u64	simde/arm/neon/clt.h	375;"	d
vcltq_u64	simde/arm/neon/clt.h	376;"	d
vcltq_u8	simde/arm/neon/clt.h	272;"	d
vcltq_u8	simde/arm/neon/clt.h	273;"	d
vcltz_f32	simde/arm/neon/cltz.h	62;"	d
vcltz_f32	simde/arm/neon/cltz.h	63;"	d
vcltz_f64	simde/arm/neon/cltz.h	88;"	d
vcltz_f64	simde/arm/neon/cltz.h	89;"	d
vcltz_s16	simde/arm/neon/cltz.h	118;"	d
vcltz_s16	simde/arm/neon/cltz.h	119;"	d
vcltz_s32	simde/arm/neon/cltz.h	134;"	d
vcltz_s32	simde/arm/neon/cltz.h	135;"	d
vcltz_s64	simde/arm/neon/cltz.h	148;"	d
vcltz_s64	simde/arm/neon/cltz.h	149;"	d
vcltz_s8	simde/arm/neon/cltz.h	102;"	d
vcltz_s8	simde/arm/neon/cltz.h	103;"	d
vcltzq_f32	simde/arm/neon/cltz.h	174;"	d
vcltzq_f32	simde/arm/neon/cltz.h	175;"	d
vcltzq_f64	simde/arm/neon/cltz.h	200;"	d
vcltzq_f64	simde/arm/neon/cltz.h	201;"	d
vcltzq_s16	simde/arm/neon/cltz.h	228;"	d
vcltzq_s16	simde/arm/neon/cltz.h	229;"	d
vcltzq_s32	simde/arm/neon/cltz.h	242;"	d
vcltzq_s32	simde/arm/neon/cltz.h	243;"	d
vcltzq_s64	simde/arm/neon/cltz.h	256;"	d
vcltzq_s64	simde/arm/neon/cltz.h	257;"	d
vcltzq_s8	simde/arm/neon/cltz.h	214;"	d
vcltzq_s8	simde/arm/neon/cltz.h	215;"	d
vclz_s16	simde/arm/neon/clz.h	187;"	d
vclz_s16	simde/arm/neon/clz.h	188;"	d
vclz_s32	simde/arm/neon/clz.h	209;"	d
vclz_s32	simde/arm/neon/clz.h	210;"	d
vclz_s8	simde/arm/neon/clz.h	165;"	d
vclz_s8	simde/arm/neon/clz.h	166;"	d
vclz_u16	simde/arm/neon/clz.h	253;"	d
vclz_u16	simde/arm/neon/clz.h	254;"	d
vclz_u32	simde/arm/neon/clz.h	275;"	d
vclz_u32	simde/arm/neon/clz.h	276;"	d
vclz_u8	simde/arm/neon/clz.h	231;"	d
vclz_u8	simde/arm/neon/clz.h	232;"	d
vclzq_s16	simde/arm/neon/clz.h	324;"	d
vclzq_s16	simde/arm/neon/clz.h	325;"	d
vclzq_s32	simde/arm/neon/clz.h	346;"	d
vclzq_s32	simde/arm/neon/clz.h	347;"	d
vclzq_s8	simde/arm/neon/clz.h	302;"	d
vclzq_s8	simde/arm/neon/clz.h	303;"	d
vclzq_u16	simde/arm/neon/clz.h	394;"	d
vclzq_u16	simde/arm/neon/clz.h	395;"	d
vclzq_u32	simde/arm/neon/clz.h	416;"	d
vclzq_u32	simde/arm/neon/clz.h	417;"	d
vclzq_u8	simde/arm/neon/clz.h	372;"	d
vclzq_u8	simde/arm/neon/clz.h	373;"	d
vcnt_s8	simde/arm/neon/cnt.h	65;"	d
vcnt_s8	simde/arm/neon/cnt.h	66;"	d
vcnt_u8	simde/arm/neon/cnt.h	88;"	d
vcnt_u8	simde/arm/neon/cnt.h	89;"	d
vcntq_s8	simde/arm/neon/cnt.h	113;"	d
vcntq_s8	simde/arm/neon/cnt.h	114;"	d
vcntq_u8	simde/arm/neon/cnt.h	138;"	d
vcntq_u8	simde/arm/neon/cnt.h	139;"	d
vcombine_f32	simde/arm/neon/combine.h	66;"	d
vcombine_f32	simde/arm/neon/combine.h	67;"	d
vcombine_f64	simde/arm/neon/combine.h	96;"	d
vcombine_f64	simde/arm/neon/combine.h	97;"	d
vcombine_s16	simde/arm/neon/combine.h	156;"	d
vcombine_s16	simde/arm/neon/combine.h	157;"	d
vcombine_s32	simde/arm/neon/combine.h	186;"	d
vcombine_s32	simde/arm/neon/combine.h	187;"	d
vcombine_s64	simde/arm/neon/combine.h	216;"	d
vcombine_s64	simde/arm/neon/combine.h	217;"	d
vcombine_s8	simde/arm/neon/combine.h	126;"	d
vcombine_s8	simde/arm/neon/combine.h	127;"	d
vcombine_u16	simde/arm/neon/combine.h	276;"	d
vcombine_u16	simde/arm/neon/combine.h	277;"	d
vcombine_u32	simde/arm/neon/combine.h	306;"	d
vcombine_u32	simde/arm/neon/combine.h	307;"	d
vcombine_u64	simde/arm/neon/combine.h	336;"	d
vcombine_u64	simde/arm/neon/combine.h	337;"	d
vcombine_u8	simde/arm/neon/combine.h	246;"	d
vcombine_u8	simde/arm/neon/combine.h	247;"	d
vcreate_f32	simde/arm/neon/create.h	165;"	d
vcreate_f32	simde/arm/neon/create.h	166;"	d
vcreate_f64	simde/arm/neon/create.h	179;"	d
vcreate_f64	simde/arm/neon/create.h	180;"	d
vcreate_s16	simde/arm/neon/create.h	67;"	d
vcreate_s16	simde/arm/neon/create.h	68;"	d
vcreate_s32	simde/arm/neon/create.h	81;"	d
vcreate_s32	simde/arm/neon/create.h	82;"	d
vcreate_s64	simde/arm/neon/create.h	95;"	d
vcreate_s64	simde/arm/neon/create.h	96;"	d
vcreate_s8	simde/arm/neon/create.h	53;"	d
vcreate_s8	simde/arm/neon/create.h	54;"	d
vcreate_u16	simde/arm/neon/create.h	123;"	d
vcreate_u16	simde/arm/neon/create.h	124;"	d
vcreate_u32	simde/arm/neon/create.h	137;"	d
vcreate_u32	simde/arm/neon/create.h	138;"	d
vcreate_u64	simde/arm/neon/create.h	151;"	d
vcreate_u64	simde/arm/neon/create.h	152;"	d
vcreate_u8	simde/arm/neon/create.h	109;"	d
vcreate_u8	simde/arm/neon/create.h	110;"	d
vcvt_f32_s32	simde/arm/neon/cvt.h	345;"	d
vcvt_f32_s32	simde/arm/neon/cvt.h	346;"	d
vcvt_f32_u32	simde/arm/neon/cvt.h	365;"	d
vcvt_f32_u32	simde/arm/neon/cvt.h	366;"	d
vcvt_f64_s64	simde/arm/neon/cvt.h	385;"	d
vcvt_f64_s64	simde/arm/neon/cvt.h	386;"	d
vcvt_f64_u64	simde/arm/neon/cvt.h	405;"	d
vcvt_f64_u64	simde/arm/neon/cvt.h	406;"	d
vcvt_s32_f32	simde/arm/neon/cvt.h	185;"	d
vcvt_s32_f32	simde/arm/neon/cvt.h	186;"	d
vcvt_s64_f64	simde/arm/neon/cvt.h	225;"	d
vcvt_s64_f64	simde/arm/neon/cvt.h	226;"	d
vcvt_u32_f32	simde/arm/neon/cvt.h	205;"	d
vcvt_u32_f32	simde/arm/neon/cvt.h	206;"	d
vcvt_u64_f64	simde/arm/neon/cvt.h	245;"	d
vcvt_u64_f64	simde/arm/neon/cvt.h	246;"	d
vcvtd_f64_s64	simde/arm/neon/cvt.h	151;"	d
vcvtd_f64_s64	simde/arm/neon/cvt.h	152;"	d
vcvtd_f64_u64	simde/arm/neon/cvt.h	165;"	d
vcvtd_f64_u64	simde/arm/neon/cvt.h	166;"	d
vcvtd_s64_f64	simde/arm/neon/cvt.h	123;"	d
vcvtd_s64_f64	simde/arm/neon/cvt.h	124;"	d
vcvtd_u64_f64	simde/arm/neon/cvt.h	137;"	d
vcvtd_u64_f64	simde/arm/neon/cvt.h	138;"	d
vcvtq_f32_s32	simde/arm/neon/cvt.h	425;"	d
vcvtq_f32_s32	simde/arm/neon/cvt.h	426;"	d
vcvtq_f32_u32	simde/arm/neon/cvt.h	445;"	d
vcvtq_f32_u32	simde/arm/neon/cvt.h	446;"	d
vcvtq_f64_s64	simde/arm/neon/cvt.h	465;"	d
vcvtq_f64_s64	simde/arm/neon/cvt.h	466;"	d
vcvtq_f64_u64	simde/arm/neon/cvt.h	485;"	d
vcvtq_f64_u64	simde/arm/neon/cvt.h	486;"	d
vcvtq_s32_f32	simde/arm/neon/cvt.h	265;"	d
vcvtq_s32_f32	simde/arm/neon/cvt.h	266;"	d
vcvtq_s64_f64	simde/arm/neon/cvt.h	305;"	d
vcvtq_s64_f64	simde/arm/neon/cvt.h	306;"	d
vcvtq_u32_f32	simde/arm/neon/cvt.h	285;"	d
vcvtq_u32_f32	simde/arm/neon/cvt.h	286;"	d
vcvtq_u64_f64	simde/arm/neon/cvt.h	325;"	d
vcvtq_u64_f64	simde/arm/neon/cvt.h	326;"	d
vcvts_f32_s32	simde/arm/neon/cvt.h	94;"	d
vcvts_f32_s32	simde/arm/neon/cvt.h	95;"	d
vcvts_f32_u32	simde/arm/neon/cvt.h	108;"	d
vcvts_f32_u32	simde/arm/neon/cvt.h	109;"	d
vcvts_s32_f32	simde/arm/neon/cvt.h	66;"	d
vcvts_s32_f32	simde/arm/neon/cvt.h	67;"	d
vcvts_u32_f32	simde/arm/neon/cvt.h	80;"	d
vcvts_u32_f32	simde/arm/neon/cvt.h	81;"	d
vdot_lane_s32	simde/arm/neon/dot_lane.h	78;"	d
vdot_lane_s32	simde/arm/neon/dot_lane.h	79;"	d
vdot_lane_u32	simde/arm/neon/dot_lane.h	114;"	d
vdot_lane_u32	simde/arm/neon/dot_lane.h	115;"	d
vdot_laneq_s32	simde/arm/neon/dot_lane.h	151;"	d
vdot_laneq_s32	simde/arm/neon/dot_lane.h	152;"	d
vdot_laneq_u32	simde/arm/neon/dot_lane.h	188;"	d
vdot_laneq_u32	simde/arm/neon/dot_lane.h	189;"	d
vdot_s32	simde/arm/neon/dot.h	71;"	d
vdot_s32	simde/arm/neon/dot.h	72;"	d
vdot_u32	simde/arm/neon/dot.h	101;"	d
vdot_u32	simde/arm/neon/dot.h	102;"	d
vdotq_s32	simde/arm/neon/dot.h	132;"	d
vdotq_s32	simde/arm/neon/dot.h	133;"	d
vdotq_u32	simde/arm/neon/dot.h	163;"	d
vdotq_u32	simde/arm/neon/dot.h	164;"	d
vdup_lane_f32	simde/arm/neon/dup_lane.h	55;"	d
vdup_lane_f32	simde/arm/neon/dup_lane.h	56;"	d
vdup_lane_f64	simde/arm/neon/dup_lane.h	67;"	d
vdup_lane_f64	simde/arm/neon/dup_lane.h	68;"	d
vdup_lane_s16	simde/arm/neon/dup_lane.h	113;"	d
vdup_lane_s16	simde/arm/neon/dup_lane.h	114;"	d
vdup_lane_s32	simde/arm/neon/dup_lane.h	136;"	d
vdup_lane_s32	simde/arm/neon/dup_lane.h	137;"	d
vdup_lane_s64	simde/arm/neon/dup_lane.h	159;"	d
vdup_lane_s64	simde/arm/neon/dup_lane.h	160;"	d
vdup_lane_s8	simde/arm/neon/dup_lane.h	90;"	d
vdup_lane_s8	simde/arm/neon/dup_lane.h	91;"	d
vdup_lane_u16	simde/arm/neon/dup_lane.h	205;"	d
vdup_lane_u16	simde/arm/neon/dup_lane.h	206;"	d
vdup_lane_u32	simde/arm/neon/dup_lane.h	228;"	d
vdup_lane_u32	simde/arm/neon/dup_lane.h	229;"	d
vdup_lane_u64	simde/arm/neon/dup_lane.h	251;"	d
vdup_lane_u64	simde/arm/neon/dup_lane.h	252;"	d
vdup_lane_u8	simde/arm/neon/dup_lane.h	182;"	d
vdup_lane_u8	simde/arm/neon/dup_lane.h	183;"	d
vdup_laneq_f32	simde/arm/neon/dup_lane.h	273;"	d
vdup_laneq_f32	simde/arm/neon/dup_lane.h	274;"	d
vdup_laneq_f64	simde/arm/neon/dup_lane.h	292;"	d
vdup_laneq_f64	simde/arm/neon/dup_lane.h	293;"	d
vdup_laneq_s16	simde/arm/neon/dup_lane.h	336;"	d
vdup_laneq_s16	simde/arm/neon/dup_lane.h	337;"	d
vdup_laneq_s32	simde/arm/neon/dup_lane.h	358;"	d
vdup_laneq_s32	simde/arm/neon/dup_lane.h	359;"	d
vdup_laneq_s64	simde/arm/neon/dup_lane.h	380;"	d
vdup_laneq_s64	simde/arm/neon/dup_lane.h	381;"	d
vdup_laneq_s8	simde/arm/neon/dup_lane.h	314;"	d
vdup_laneq_s8	simde/arm/neon/dup_lane.h	315;"	d
vdup_laneq_u16	simde/arm/neon/dup_lane.h	424;"	d
vdup_laneq_u16	simde/arm/neon/dup_lane.h	425;"	d
vdup_laneq_u32	simde/arm/neon/dup_lane.h	446;"	d
vdup_laneq_u32	simde/arm/neon/dup_lane.h	447;"	d
vdup_laneq_u64	simde/arm/neon/dup_lane.h	468;"	d
vdup_laneq_u64	simde/arm/neon/dup_lane.h	469;"	d
vdup_laneq_u8	simde/arm/neon/dup_lane.h	402;"	d
vdup_laneq_u8	simde/arm/neon/dup_lane.h	403;"	d
vdup_n_f32	simde/arm/neon/dup_n.h	54;"	d
vdup_n_f32	simde/arm/neon/dup_n.h	55;"	d
vdup_n_f64	simde/arm/neon/dup_n.h	75;"	d
vdup_n_f64	simde/arm/neon/dup_n.h	76;"	d
vdup_n_s16	simde/arm/neon/dup_n.h	121;"	d
vdup_n_s16	simde/arm/neon/dup_n.h	122;"	d
vdup_n_s32	simde/arm/neon/dup_n.h	144;"	d
vdup_n_s32	simde/arm/neon/dup_n.h	145;"	d
vdup_n_s64	simde/arm/neon/dup_n.h	165;"	d
vdup_n_s64	simde/arm/neon/dup_n.h	166;"	d
vdup_n_s8	simde/arm/neon/dup_n.h	98;"	d
vdup_n_s8	simde/arm/neon/dup_n.h	99;"	d
vdup_n_u16	simde/arm/neon/dup_n.h	211;"	d
vdup_n_u16	simde/arm/neon/dup_n.h	212;"	d
vdup_n_u32	simde/arm/neon/dup_n.h	234;"	d
vdup_n_u32	simde/arm/neon/dup_n.h	235;"	d
vdup_n_u64	simde/arm/neon/dup_n.h	255;"	d
vdup_n_u64	simde/arm/neon/dup_n.h	256;"	d
vdup_n_u8	simde/arm/neon/dup_n.h	188;"	d
vdup_n_u8	simde/arm/neon/dup_n.h	189;"	d
vdupq_laneq_f32	simde/arm/neon/dup_lane.h	491;"	d
vdupq_laneq_f32	simde/arm/neon/dup_lane.h	492;"	d
vdupq_laneq_f64	simde/arm/neon/dup_lane.h	511;"	d
vdupq_laneq_f64	simde/arm/neon/dup_lane.h	512;"	d
vdupq_laneq_s16	simde/arm/neon/dup_lane.h	557;"	d
vdupq_laneq_s16	simde/arm/neon/dup_lane.h	558;"	d
vdupq_laneq_s32	simde/arm/neon/dup_lane.h	580;"	d
vdupq_laneq_s32	simde/arm/neon/dup_lane.h	581;"	d
vdupq_laneq_s64	simde/arm/neon/dup_lane.h	603;"	d
vdupq_laneq_s64	simde/arm/neon/dup_lane.h	604;"	d
vdupq_laneq_s8	simde/arm/neon/dup_lane.h	534;"	d
vdupq_laneq_s8	simde/arm/neon/dup_lane.h	535;"	d
vdupq_laneq_u16	simde/arm/neon/dup_lane.h	649;"	d
vdupq_laneq_u16	simde/arm/neon/dup_lane.h	650;"	d
vdupq_laneq_u32	simde/arm/neon/dup_lane.h	672;"	d
vdupq_laneq_u32	simde/arm/neon/dup_lane.h	673;"	d
vdupq_laneq_u64	simde/arm/neon/dup_lane.h	695;"	d
vdupq_laneq_u64	simde/arm/neon/dup_lane.h	696;"	d
vdupq_laneq_u8	simde/arm/neon/dup_lane.h	626;"	d
vdupq_laneq_u8	simde/arm/neon/dup_lane.h	627;"	d
vdupq_n_f32	simde/arm/neon/dup_n.h	283;"	d
vdupq_n_f32	simde/arm/neon/dup_n.h	284;"	d
vdupq_n_f64	simde/arm/neon/dup_n.h	311;"	d
vdupq_n_f64	simde/arm/neon/dup_n.h	312;"	d
vdupq_n_s16	simde/arm/neon/dup_n.h	365;"	d
vdupq_n_s16	simde/arm/neon/dup_n.h	366;"	d
vdupq_n_s32	simde/arm/neon/dup_n.h	392;"	d
vdupq_n_s32	simde/arm/neon/dup_n.h	393;"	d
vdupq_n_s64	simde/arm/neon/dup_n.h	419;"	d
vdupq_n_s64	simde/arm/neon/dup_n.h	420;"	d
vdupq_n_s8	simde/arm/neon/dup_n.h	338;"	d
vdupq_n_s8	simde/arm/neon/dup_n.h	339;"	d
vdupq_n_u16	simde/arm/neon/dup_n.h	473;"	d
vdupq_n_u16	simde/arm/neon/dup_n.h	474;"	d
vdupq_n_u32	simde/arm/neon/dup_n.h	500;"	d
vdupq_n_u32	simde/arm/neon/dup_n.h	501;"	d
vdupq_n_u64	simde/arm/neon/dup_n.h	527;"	d
vdupq_n_u64	simde/arm/neon/dup_n.h	528;"	d
vdupq_n_u8	simde/arm/neon/dup_n.h	446;"	d
vdupq_n_u8	simde/arm/neon/dup_n.h	447;"	d
vector	simde/simde-features.h	358;"	d
veor_s16	simde/arm/neon/eor.h	93;"	d
veor_s16	simde/arm/neon/eor.h	94;"	d
veor_s32	simde/arm/neon/eor.h	123;"	d
veor_s32	simde/arm/neon/eor.h	124;"	d
veor_s64	simde/arm/neon/eor.h	153;"	d
veor_s64	simde/arm/neon/eor.h	154;"	d
veor_s8	simde/arm/neon/eor.h	63;"	d
veor_s8	simde/arm/neon/eor.h	64;"	d
veor_u16	simde/arm/neon/eor.h	213;"	d
veor_u16	simde/arm/neon/eor.h	214;"	d
veor_u32	simde/arm/neon/eor.h	243;"	d
veor_u32	simde/arm/neon/eor.h	244;"	d
veor_u64	simde/arm/neon/eor.h	273;"	d
veor_u64	simde/arm/neon/eor.h	274;"	d
veor_u8	simde/arm/neon/eor.h	183;"	d
veor_u8	simde/arm/neon/eor.h	184;"	d
veorq_s16	simde/arm/neon/eor.h	341;"	d
veorq_s16	simde/arm/neon/eor.h	342;"	d
veorq_s32	simde/arm/neon/eor.h	375;"	d
veorq_s32	simde/arm/neon/eor.h	376;"	d
veorq_s64	simde/arm/neon/eor.h	409;"	d
veorq_s64	simde/arm/neon/eor.h	410;"	d
veorq_s8	simde/arm/neon/eor.h	307;"	d
veorq_s8	simde/arm/neon/eor.h	308;"	d
veorq_u16	simde/arm/neon/eor.h	477;"	d
veorq_u16	simde/arm/neon/eor.h	478;"	d
veorq_u32	simde/arm/neon/eor.h	511;"	d
veorq_u32	simde/arm/neon/eor.h	512;"	d
veorq_u64	simde/arm/neon/eor.h	545;"	d
veorq_u64	simde/arm/neon/eor.h	546;"	d
veorq_u8	simde/arm/neon/eor.h	443;"	d
veorq_u8	simde/arm/neon/eor.h	444;"	d
verbose	nested_traversal_finder.hpp	/^    bool verbose = false;$/;"	m	class:vg::NestedTraversalFinder
verbose	readfilter.hpp	/^    bool verbose = false;$/;"	m	class:vg::ReadFilter
verbose	traversal_finder.hpp	/^    bool verbose = false;$/;"	m	class:vg::RepresentativeTraversalFinder
verbosity	index_registry.cpp	/^IndexingParameters::Verbosity IndexingParameters::verbosity = IndexingParameters::Basic;$/;"	m	class:vg::IndexingParameters	file:
verbosity	index_registry.hpp	/^    static Verbosity verbosity;$/;"	m	struct:vg::IndexingParameters
verbosity	recombinator.hpp	/^    Verbosity verbosity;$/;"	m	class:vg::HaplotypePartitioner
verbosity	recombinator.hpp	/^    Verbosity verbosity;$/;"	m	class:vg::Recombinator
verbosity	subcommand/haplotypes_main.cpp	/^    Haplotypes::Verbosity verbosity = Haplotypes::verbosity_silent;$/;"	m	struct:HaplotypesConfig	file:
verify_incremental_max_distance	unittest/incremental_subgraph.cpp	/^bool verify_incremental_max_distance(const IncrementalSubgraph& subgraph) {$/;"	f	namespace:vg::unittest
verify_path	phase_unfolder.cpp	/^bool verify_path(const PathType& path, MutableHandleGraph& unfolded, const hash_map<vg::id_t, std::vector<vg::id_t>>& reverse_mapping) {$/;"	f	namespace:vg
verify_paths	phase_unfolder.cpp	/^size_t PhaseUnfolder::verify_paths(MutableHandleGraph& unfolded, bool show_progress) const {$/;"	f	class:vg::PhaseUnfolder
verify_valid_log_odds_score_matrix	aligner.cpp	/^bool GSSWAligner::verify_valid_log_odds_score_matrix(const int8_t* score_matrix, const double* nt_freqs) const {$/;"	f	class:vg::GSSWAligner
version	recombinator.hpp	/^        std::uint32_t version = VERSION;$/;"	m	struct:vg::Haplotypes::Header
vext_f32	simde/arm/neon/ext.h	73;"	d
vext_f32	simde/arm/neon/ext.h	74;"	d
vext_f64	simde/arm/neon/ext.h	113;"	d
vext_f64	simde/arm/neon/ext.h	114;"	d
vext_s16	simde/arm/neon/ext.h	199;"	d
vext_s16	simde/arm/neon/ext.h	200;"	d
vext_s32	simde/arm/neon/ext.h	240;"	d
vext_s32	simde/arm/neon/ext.h	241;"	d
vext_s64	simde/arm/neon/ext.h	280;"	d
vext_s64	simde/arm/neon/ext.h	281;"	d
vext_s8	simde/arm/neon/ext.h	157;"	d
vext_s8	simde/arm/neon/ext.h	158;"	d
vext_u16	simde/arm/neon/ext.h	366;"	d
vext_u16	simde/arm/neon/ext.h	367;"	d
vext_u32	simde/arm/neon/ext.h	407;"	d
vext_u32	simde/arm/neon/ext.h	408;"	d
vext_u64	simde/arm/neon/ext.h	447;"	d
vext_u64	simde/arm/neon/ext.h	448;"	d
vext_u8	simde/arm/neon/ext.h	324;"	d
vext_u8	simde/arm/neon/ext.h	325;"	d
vextq_f32	simde/arm/neon/ext.h	489;"	d
vextq_f32	simde/arm/neon/ext.h	490;"	d
vextq_f64	simde/arm/neon/ext.h	530;"	d
vextq_f64	simde/arm/neon/ext.h	531;"	d
vextq_s16	simde/arm/neon/ext.h	622;"	d
vextq_s16	simde/arm/neon/ext.h	623;"	d
vextq_s32	simde/arm/neon/ext.h	664;"	d
vextq_s32	simde/arm/neon/ext.h	665;"	d
vextq_s64	simde/arm/neon/ext.h	705;"	d
vextq_s64	simde/arm/neon/ext.h	706;"	d
vextq_s8	simde/arm/neon/ext.h	578;"	d
vextq_s8	simde/arm/neon/ext.h	579;"	d
vextq_u16	simde/arm/neon/ext.h	797;"	d
vextq_u16	simde/arm/neon/ext.h	798;"	d
vextq_u32	simde/arm/neon/ext.h	839;"	d
vextq_u32	simde/arm/neon/ext.h	840;"	d
vextq_u64	simde/arm/neon/ext.h	880;"	d
vextq_u64	simde/arm/neon/ext.h	881;"	d
vextq_u8	simde/arm/neon/ext.h	753;"	d
vextq_u8	simde/arm/neon/ext.h	754;"	d
vg	algorithms/a_star.hpp	/^namespace vg {$/;"	n
vg	algorithms/alignment_path_offsets.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/alignment_path_offsets.hpp	/^namespace vg {$/;"	n
vg	algorithms/approx_path_distance.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/approx_path_distance.hpp	/^namespace vg {$/;"	n
vg	algorithms/back_translate.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/back_translate.hpp	/^namespace vg {$/;"	n
vg	algorithms/chain_items.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/chain_items.hpp	/^namespace vg {$/;"	n
vg	algorithms/component.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/component.hpp	/^namespace vg {$/;"	n
vg	algorithms/count_covered.hpp	/^namespace vg {$/;"	n
vg	algorithms/coverage_depth.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/coverage_depth.hpp	/^namespace vg {$/;"	n
vg	algorithms/dfs.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/dfs.hpp	/^namespace vg {$/;"	n
vg	algorithms/disjoint_components.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/disjoint_components.hpp	/^namespace vg {$/;"	n
vg	algorithms/distance_to_head.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/distance_to_head.hpp	/^namespace vg {$/;"	n
vg	algorithms/distance_to_tail.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/distance_to_tail.hpp	/^namespace vg {$/;"	n
vg	algorithms/expand_context.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/expand_context.hpp	/^namespace vg {$/;"	n
vg	algorithms/extract_connecting_graph.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/extract_connecting_graph.hpp	/^namespace vg {$/;"	n
vg	algorithms/extract_containing_graph.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/extract_containing_graph.hpp	/^namespace vg {$/;"	n
vg	algorithms/extract_extending_graph.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/extract_extending_graph.hpp	/^namespace vg {$/;"	n
vg	algorithms/find_gbwt.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/find_gbwt.hpp	/^namespace vg {$/;"	n
vg	algorithms/find_gbwtgraph.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/find_gbwtgraph.hpp	/^namespace vg {$/;"	n
vg	algorithms/find_translation.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/find_translation.hpp	/^namespace vg {$/;"	n
vg	algorithms/gfa_to_handle.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/gfa_to_handle.hpp	/^namespace vg {$/;"	n
vg	algorithms/id_sort.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/id_sort.hpp	/^namespace vg {$/;"	n
vg	algorithms/intersect_path_offsets.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/intersect_path_offsets.hpp	/^namespace vg {$/;"	n
vg	algorithms/jump_along_path.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/jump_along_path.hpp	/^namespace vg {$/;"	n
vg	algorithms/k_widest_paths.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/k_widest_paths.hpp	/^namespace vg {$/;"	n
vg	algorithms/kmer.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/kmer.hpp	/^namespace vg {$/;"	n
vg	algorithms/locally_expand_graph.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/locally_expand_graph.hpp	/^namespace vg {$/;"	n
vg	algorithms/merge.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/merge.hpp	/^namespace vg {$/;"	n
vg	algorithms/min_cut_graph.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/min_cut_graph.hpp	/^namespace vg {$/;"	n
vg	algorithms/nearest_offsets_in_paths.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/nearest_offsets_in_paths.hpp	/^namespace vg {$/;"	n
vg	algorithms/next_pos_chars.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/next_pos_chars.hpp	/^namespace vg {$/;"	n
vg	algorithms/normalize.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/normalize.hpp	/^namespace vg {$/;"	n
vg	algorithms/path_string.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/path_string.hpp	/^namespace vg {$/;"	n
vg	algorithms/prune.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/prune.hpp	/^namespace vg {$/;"	n
vg	algorithms/prune_to_connecting_graph.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/prune_to_connecting_graph.hpp	/^namespace vg {$/;"	n
vg	algorithms/ref_path_distance.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/ref_path_distance.hpp	/^namespace vg {$/;"	n
vg	algorithms/shortest_cycle.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/shortest_cycle.hpp	/^namespace vg {$/;"	n
vg	algorithms/simplify_siblings.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/simplify_siblings.hpp	/^namespace vg {$/;"	n
vg	algorithms/sorted_id_ranges.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/sorted_id_ranges.hpp	/^namespace vg {$/;"	n
vg	algorithms/subgraph.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/subgraph.hpp	/^namespace vg {$/;"	n
vg	algorithms/three_edge_connected_components.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/three_edge_connected_components.hpp	/^namespace vg {$/;"	n
vg	algorithms/walk.cpp	/^namespace vg {$/;"	n	file:
vg	algorithms/walk.hpp	/^namespace vg {$/;"	n
vg	aligner.cpp	/^namespace vg {$/;"	n	file:
vg	aligner.hpp	/^namespace vg {$/;"	n
vg	alignment.cpp	/^namespace vg {$/;"	n	file:
vg	alignment.hpp	/^namespace vg {$/;"	n
vg	annotation.hpp	/^namespace vg {$/;"	n
vg	augment.cpp	/^namespace vg {$/;"	n	file:
vg	augment.hpp	/^namespace vg {$/;"	n
vg	back_translating_alignment_emitter.cpp	/^namespace vg {$/;"	n	file:
vg	back_translating_alignment_emitter.hpp	/^namespace vg {$/;"	n
vg	banded_global_aligner.cpp	/^namespace vg {$/;"	n	file:
vg	banded_global_aligner.hpp	/^namespace vg {$/;"	n
vg	benchmark.cpp	/^namespace vg {$/;"	n	file:
vg	benchmark.hpp	/^namespace vg {$/;"	n
vg	build_index.cpp	/^namespace vg {$/;"	n	file:
vg	build_index.hpp	/^namespace vg {$/;"	n
vg	cactus.cpp	/^namespace vg {$/;"	n	file:
vg	cactus.hpp	/^namespace vg {$/;"	n
vg	cactus_snarl_finder.cpp	/^namespace vg {$/;"	n	file:
vg	cactus_snarl_finder.hpp	/^namespace vg {$/;"	n
vg	chunker.cpp	/^namespace vg {$/;"	n	file:
vg	chunker.hpp	/^namespace vg {$/;"	n
vg	clip.cpp	/^namespace vg {$/;"	n	file:
vg	clip.hpp	/^namespace vg {$/;"	n
vg	cluster.cpp	/^namespace vg {$/;"	n	file:
vg	cluster.hpp	/^namespace vg {$/;"	n
vg	colors.hpp	/^namespace vg {$/;"	n
vg	config/allocator_config.hpp	/^namespace vg {$/;"	n
vg	config/allocator_config_jemalloc.cpp	/^namespace vg {$/;"	n	file:
vg	config/allocator_config_system.cpp	/^namespace vg {$/;"	n	file:
vg	constructor.cpp	/^namespace vg {$/;"	n	file:
vg	constructor.hpp	/^namespace vg {$/;"	n
vg	contracting_graph.cpp	/^namespace vg{$/;"	n	file:
vg	contracting_graph.hpp	/^namespace vg{$/;"	n
vg	convert.hpp	/^namespace vg {$/;"	n
vg	crash.cpp	/^namespace vg {$/;"	n	file:
vg	crash.hpp	/^namespace vg {$/;"	n
vg	dagified_graph.cpp	/^namespace vg {$/;"	n	file:
vg	dagified_graph.hpp	/^namespace vg {$/;"	n
vg	deconstructor.cpp	/^namespace vg {$/;"	n	file:
vg	deconstructor.hpp	/^namespace vg{$/;"	n
vg	deletion_aligner.cpp	/^namespace vg {$/;"	n	file:
vg	deletion_aligner.hpp	/^namespace vg {$/;"	n
vg	dinucleotide_machine.cpp	/^namespace vg {$/;"	n	file:
vg	dinucleotide_machine.hpp	/^namespace vg {$/;"	n
vg	dozeu_interface.hpp	/^namespace vg {$/;"	n
vg	dozeu_pinning_overlay.cpp	/^namespace vg {$/;"	n	file:
vg	dozeu_pinning_overlay.hpp	/^namespace vg {$/;"	n
vg	endianness.hpp	/^namespace vg {$/;"	n
vg	entropy.cpp	/^namespace vg {$/;"	n	file:
vg	entropy.hpp	/^namespace vg {$/;"	n
vg	explainer.cpp	/^namespace vg {$/;"	n	file:
vg	explainer.hpp	/^namespace vg {$/;"	n
vg	extra_node_graph.cpp	/^namespace vg {$/;"	n	file:
vg	extra_node_graph.hpp	/^namespace vg {$/;"	n
vg	feature_set.cpp	/^namespace vg {$/;"	n	file:
vg	feature_set.hpp	/^namespace vg {$/;"	n
vg	filter.cpp	/^namespace vg{$/;"	n	file:
vg	filter.hpp	/^namespace vg{$/;"	n
vg	flat_file_back_translation.cpp	/^namespace vg {$/;"	n	file:
vg	flat_file_back_translation.hpp	/^namespace vg {$/;"	n
vg	flow_sort.cpp	/^namespace vg {$/;"	n	file:
vg	flow_sort.hpp	/^    VG& vg;$/;"	m	class:vg::FlowSort
vg	flow_sort.hpp	/^namespace vg {$/;"	n
vg	funnel.cpp	/^namespace vg {$/;"	n	file:
vg	funnel.hpp	/^namespace vg {$/;"	n
vg	gbwt_extender.cpp	/^namespace vg {$/;"	n	file:
vg	gbwt_extender.hpp	/^namespace vg {$/;"	n
vg	gbwt_helper.cpp	/^namespace vg {$/;"	n	file:
vg	gbwt_helper.hpp	/^namespace vg {$/;"	n
vg	gbwtgraph_helper.cpp	/^namespace vg {$/;"	n	file:
vg	gbwtgraph_helper.hpp	/^namespace vg {$/;"	n
vg	gbzgraph.hpp	/^namespace vg {$/;"	n
vg	gcsa_helper.cpp	/^namespace vg {$/;"	n	file:
vg	gcsa_helper.hpp	/^namespace vg {$/;"	n
vg	genome_state.cpp	/^namespace vg {$/;"	n	file:
vg	genome_state.hpp	/^namespace vg {$/;"	n
vg	genotypekit.cpp	/^namespace vg {$/;"	n	file:
vg	genotypekit.hpp	/^namespace vg {$/;"	n
vg	genotyper.cpp	/^namespace vg {$/;"	n	file:
vg	genotyper.hpp	/^namespace vg {$/;"	n
vg	gfa.cpp	/^namespace vg {$/;"	n	file:
vg	gfa.hpp	/^namespace vg {$/;"	n
vg	gff_reader.cpp	/^namespace vg {$/;"	n	file:
vg	gff_reader.hpp	/^namespace vg {$/;"	n
vg	graph.cpp	/^namespace vg {$/;"	n	file:
vg	graph.hpp	/^namespace vg {$/;"	n
vg	graph_caller.cpp	/^namespace vg {$/;"	n	file:
vg	graph_caller.hpp	/^namespace vg {$/;"	n
vg	graph_synchronizer.cpp	/^namespace vg {$/;"	n	file:
vg	graph_synchronizer.hpp	/^namespace vg {$/;"	n
vg	handle.hpp	/^namespace vg {$/;"	n
vg	haplotype_extracter.cpp	/^namespace vg {$/;"	n	file:
vg	haplotype_extracter.hpp	/^namespace vg {$/;"	n
vg	haplotype_indexer.cpp	/^namespace vg {$/;"	n	file:
vg	haplotype_indexer.hpp	/^namespace vg {$/;"	n
vg	hash_map.hpp	/^namespace vg {$/;"	n
vg	hts_alignment_emitter.cpp	/^namespace vg {$/;"	n	file:
vg	hts_alignment_emitter.hpp	/^namespace vg {$/;"	n
vg	identity_overlay.cpp	/^namespace vg {$/;"	n	file:
vg	identity_overlay.hpp	/^namespace vg {$/;"	n
vg	incremental_subgraph.cpp	/^namespace vg {$/;"	n	file:
vg	incremental_subgraph.hpp	/^namespace vg {$/;"	n
vg	index_registry.cpp	/^namespace vg {$/;"	n	file:
vg	index_registry.hpp	/^namespace vg {$/;"	n
vg	indexed_vg.cpp	/^namespace vg {$/;"	n	file:
vg	indexed_vg.hpp	/^namespace vg {$/;"	n
vg	integrated_snarl_finder.cpp	/^namespace vg {$/;"	n	file:
vg	integrated_snarl_finder.hpp	/^namespace vg {$/;"	n
vg	io/converted_hash_graph.hpp	/^namespace vg {$/;"	n
vg	io/json_stream_helper.hpp	/^namespace vg {$/;"	n
vg	io/load_proto_to_graph.cpp	/^namespace vg {$/;"	n	file:
vg	io/load_proto_to_graph.hpp	/^namespace vg {$/;"	n
vg	io/register_libvg_io.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_libvg_io.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_distance_index.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_distance_index.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_gbwt.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_gbwt.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_gbwtgraph.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_gbwtgraph.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_gbz.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_gbz.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_gbzgraph.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_gbzgraph.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_gcsa.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_gcsa.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_gfa.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_gfa.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_hash_graph.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_hash_graph.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_lcp.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_lcp.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_minimizer.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_minimizer.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_packed_graph.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_packed_graph.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_r_index.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_r_index.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_snarl_manager.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_snarl_manager.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_vg.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_vg.hpp	/^namespace vg {$/;"	n
vg	io/register_loader_saver_xg.cpp	/^namespace vg {$/;"	n	file:
vg	io/register_loader_saver_xg.hpp	/^namespace vg {$/;"	n
vg	io/save_handle_graph.hpp	/^namespace vg {$/;"	n
vg	job_schedule.cpp	/^namespace vg {$/;"	n	file:
vg	job_schedule.hpp	/^namespace vg {$/;"	n
vg	kff.cpp	/^namespace vg {$/;"	n	file:
vg	kff.hpp	/^namespace vg {$/;"	n
vg	kmer.cpp	/^namespace vg {$/;"	n	file:
vg	kmer.hpp	/^namespace vg {$/;"	n
vg	kmp.cpp	/^namespace vg {$/;"	n	file:
vg	kmp.hpp	/^namespace vg {$/;"	n
vg	mapper.cpp	/^namespace vg {$/;"	n	file:
vg	mapper.hpp	/^namespace vg {$/;"	n
vg	mcmc_caller.cpp	/^namespace vg {$/;"	n	file:
vg	mcmc_caller.hpp	/^namespace vg{$/;"	n
vg	mcmc_genotyper.cpp	/^namespace vg {$/;"	n	file:
vg	mcmc_genotyper.hpp	/^namespace vg {$/;"	n
vg	mem.cpp	/^namespace vg {$/;"	n	file:
vg	mem.hpp	/^namespace vg {$/;"	n
vg	mem_accelerator.cpp	/^namespace vg {$/;"	n	file:
vg	mem_accelerator.hpp	/^namespace vg {$/;"	n
vg	memoizing_graph.cpp	/^namespace vg {$/;"	n	file:
vg	memoizing_graph.hpp	/^namespace vg {$/;"	n
vg	memusage.cpp	/^namespace vg {$/;"	n	file:
vg	memusage.hpp	/^namespace vg {$/;"	n
vg	minimizer_mapper.cpp	/^namespace vg {$/;"	n	file:
vg	minimizer_mapper.hpp	/^namespace vg {$/;"	n
vg	minimizer_mapper_from_chains.cpp	/^namespace vg {$/;"	n	file:
vg	msa_converter.cpp	/^namespace vg {$/;"	n	file:
vg	msa_converter.hpp	/^namespace vg {$/;"	n
vg	multipath_alignment.cpp	/^namespace vg {$/;"	n	file:
vg	multipath_alignment.hpp	/^namespace vg {$/;"	n
vg	multipath_alignment_emitter.cpp	/^namespace vg {$/;"	n	file:
vg	multipath_alignment_emitter.hpp	/^namespace vg {$/;"	n
vg	multipath_alignment_graph.cpp	/^namespace vg {$/;"	n	file:
vg	multipath_alignment_graph.hpp	/^namespace vg {$/;"	n
vg	multipath_mapper.cpp	/^namespace vg {$/;"	n	file:
vg	multipath_mapper.hpp	/^namespace vg {$/;"	n
vg	name_mapper.cpp	/^namespace vg {$/;"	n	file:
vg	name_mapper.hpp	/^namespace vg {$/;"	n
vg	nested_traversal_finder.cpp	/^namespace vg {$/;"	n	file:
vg	nested_traversal_finder.hpp	/^namespace vg {$/;"	n
vg	nodeside.hpp	/^namespace vg {$/;"	n
vg	nodetraversal.hpp	/^namespace vg {$/;"	n
vg	null_masking_graph.cpp	/^namespace vg {$/;"	n	file:
vg	null_masking_graph.hpp	/^namespace vg {$/;"	n
vg	option.cpp	/^namespace vg {$/;"	n	file:
vg	option.hpp	/^namespace vg {$/;"	n
vg	packer.cpp	/^namespace vg {$/;"	n	file:
vg	packer.hpp	/^namespace vg {$/;"	n
vg	path.cpp	/^namespace vg {$/;"	n	file:
vg	path.hpp	/^namespace vg {$/;"	n
vg	path_component_index.cpp	/^namespace vg {$/;"	n	file:
vg	path_component_index.hpp	/^namespace vg {$/;"	n
vg	path_index.cpp	/^namespace vg {$/;"	n	file:
vg	path_index.hpp	/^namespace vg {$/;"	n
vg	path_subgraph.cpp	/^namespace vg {$/;"	n	file:
vg	path_subgraph.hpp	/^namespace vg {$/;"	n
vg	phase_unfolder.cpp	/^namespace vg {$/;"	n	file:
vg	phase_unfolder.hpp	/^namespace vg {$/;"	n
vg	phased_genome.cpp	/^namespace vg {$/;"	n	file:
vg	phased_genome.hpp	/^namespace vg {$/;"	n
vg	pictographs.hpp	/^namespace vg {$/;"	n
vg	position.cpp	/^namespace vg {$/;"	n	file:
vg	position.hpp	/^namespace vg {$/;"	n
vg	preflight.cpp	/^namespace vg {$/;"	n	file:
vg	preflight.hpp	/^namespace vg {$/;"	n
vg	progressive.cpp	/^namespace vg {$/;"	n	file:
vg	progressive.hpp	/^namespace vg {$/;"	n
vg	rare_variant_simplifier.cpp	/^namespace vg {$/;"	n	file:
vg	rare_variant_simplifier.hpp	/^namespace vg {$/;"	n
vg	readfilter.cpp	/^namespace vg {$/;"	n	file:
vg	readfilter.hpp	/^namespace vg{$/;"	n
vg	recombinator.cpp	/^namespace vg {$/;"	n	file:
vg	recombinator.hpp	/^namespace vg {$/;"	n
vg	region.cpp	/^namespace vg {$/;"	n	file:
vg	region.hpp	/^namespace vg {$/;"	n
vg	region_expander.cpp	/^namespace vg {$/;"	n	file:
vg	region_expander.hpp	/^namespace vg {$/;"	n
vg	reverse_graph.cpp	/^namespace vg {$/;"	n	file:
vg	reverse_graph.hpp	/^namespace vg {$/;"	n
vg	sampler.cpp	/^namespace vg {$/;"	n	file:
vg	sampler.hpp	/^namespace vg {$/;"	n
vg	scanner.cpp	/^namespace vg {$/;"	n	file:
vg	scanner.hpp	/^namespace vg {$/;"	n
vg	sequence_complexity.hpp	/^namespace vg {$/;"	n
vg	small_bitset.hpp	/^namespace vg {$/;"	n
vg	small_snarl_simplifier.cpp	/^namespace vg {$/;"	n	file:
vg	small_snarl_simplifier.hpp	/^namespace vg {$/;"	n
vg	snarl_caller.cpp	/^namespace vg {$/;"	n	file:
vg	snarl_caller.hpp	/^namespace vg {$/;"	n
vg	snarl_distance_index.cpp	/^namespace vg {$/;"	n	file:
vg	snarl_distance_index.hpp	/^namespace vg { $/;"	n
vg	snarl_seed_clusterer.cpp	/^namespace vg {$/;"	n	file:
vg	snarl_seed_clusterer.hpp	/^namespace vg{$/;"	n
vg	snarls.cpp	/^namespace vg {$/;"	n	file:
vg	snarls.hpp	/^namespace vg {$/;"	n
vg	source_sink_overlay.cpp	/^namespace vg {$/;"	n	file:
vg	source_sink_overlay.hpp	/^namespace vg {$/;"	n
vg	sparse_union_find.cpp	/^namespace vg {$/;"	n	file:
vg	sparse_union_find.hpp	/^namespace vg {$/;"	n
vg	splicing.cpp	/^namespace vg {$/;"	n	file:
vg	splicing.hpp	/^namespace vg {$/;"	n
vg	split_strand_graph.cpp	/^namespace vg {$/;"	n	file:
vg	split_strand_graph.hpp	/^namespace vg {$/;"	n
vg	ssw_aligner.cpp	/^namespace vg {$/;"	n	file:
vg	ssw_aligner.hpp	/^namespace vg {$/;"	n
vg	statistics.cpp	/^namespace vg {$/;"	n	file:
vg	statistics.hpp	/^namespace vg {$/;"	n
vg	stream_index.cpp	/^namespace vg {$/;"	n	file:
vg	stream_index.hpp	/^namespace vg {$/;"	n
vg	stream_sorter.cpp	/^namespace vg {$/;"	n	file:
vg	stream_sorter.hpp	/^namespace vg {$/;"	n
vg	subcommand/options.cpp	/^namespace vg {$/;"	n	file:
vg	subcommand/options.hpp	/^namespace vg {$/;"	n
vg	subcommand/subcommand.cpp	/^namespace vg {$/;"	n	file:
vg	subcommand/subcommand.hpp	/^namespace vg {$/;"	n
vg	subgraph.cpp	/^namespace vg {$/;"	n	file:
vg	subgraph.hpp	/^namespace vg {$/;"	n
vg	subgraph_overlay.cpp	/^namespace vg {$/;"	n	file:
vg	subgraph_overlay.hpp	/^namespace vg {$/;"	n
vg	surjecting_alignment_emitter.cpp	/^namespace vg {$/;"	n	file:
vg	surjecting_alignment_emitter.hpp	/^namespace vg {$/;"	n
vg	surjector.cpp	/^namespace vg {$/;"	n	file:
vg	surjector.hpp	/^namespace vg {$/;"	n
vg	transcriptome.cpp	/^namespace vg {$/;"	n	file:
vg	transcriptome.hpp	/^namespace vg {$/;"	n
vg	translator.cpp	/^namespace vg {$/;"	n	file:
vg	translator.hpp	/^namespace vg {$/;"	n
vg	traversal_finder.cpp	/^namespace vg {$/;"	n	file:
vg	traversal_finder.hpp	/^namespace vg {$/;"	n
vg	traversal_support.cpp	/^namespace vg {$/;"	n	file:
vg	traversal_support.hpp	/^namespace vg {$/;"	n
vg	tree_subgraph.cpp	/^namespace vg {$/;"	n	file:
vg	tree_subgraph.hpp	/^namespace vg {$/;"	n
vg	types.hpp	/^namespace vg {$/;"	n
vg	unittest/aligner.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/alignment.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/annotation.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/back_translate.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/banded_global_aligner.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/blocked_gzip_input_stream.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/blocked_gzip_output_stream.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/cactus.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/chain_items.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/chunker.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/cluster.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/component_paths.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/constructor.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/copy_graph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/dagified_graph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/dagify.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/deletion_aligner.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/dijkstra.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/dinucleotide_machine.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/disjoint_components.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/distributions.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/dozeu_pinning_overlay.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/feature_set.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/flow_sort_test.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/gbwt_extender.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/genome_state.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/genotypekit.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/genotyper.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/gfa.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/handle.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/hash_graph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/hfile_cppstream.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/incremental_subgraph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/index_helpers.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/index_registry.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/indexed_vg.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/k_widest_paths.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/kff.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/kmp.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/locally_expand_graph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/mapper.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/mapping.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/mcmc_genotyper.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/mem.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/mem_accelerator.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/min_cut_graph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/minimizer_mapper.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/msa_converter.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/multipath_alignment.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/multipath_alignment_graph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/multipath_mapper.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/overlays.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/packed_graph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/packed_structs.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/path_component_index.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/path_index.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/phase_unfolder.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/phased_genome.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/pinned_alignment.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/position.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/protobuf.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/random_graph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/random_graph.hpp	/^namespace vg{$/;"	n
vg	unittest/randomness.hpp	/^namespace vg {$/;"	n
vg	unittest/readfilter.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/sampler.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/sequence_complexity.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/snarl_distance_index.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/snarl_seed_clusterer.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/snarls.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/source_sink_overlay.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/splicing.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/statistics.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/stream.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/stream_index.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/surject.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/test_aligner.hpp	/^namespace vg {$/;"	n
vg	unittest/three_edge_connected_components.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/transcriptome.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/traversal_support.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/tree_subgraph.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/variant_adder.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/vcf_buffer.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/vg.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/vg_algorithms.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/vpkg.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/xdrop_aligner.cpp	/^namespace vg {$/;"	n	file:
vg	unittest/xg.cpp	/^namespace vg {$/;"	n	file:
vg	utility.cpp	/^namespace vg {$/;"	n	file:
vg	utility.hpp	/^namespace vg {$/;"	n
vg	variant_adder.cpp	/^namespace vg {$/;"	n	file:
vg	variant_adder.hpp	/^namespace vg {$/;"	n
vg	variant_recall.cpp	/^namespace vg {$/;"	n	file:
vg	variant_recall.hpp	/^namespace vg {$/;"	n
vg	vcf_buffer.cpp	/^namespace vg {$/;"	n	file:
vg	vcf_buffer.hpp	/^namespace vg {$/;"	n
vg	version.cpp	/^namespace vg {$/;"	n	file:
vg	version.hpp	/^namespace vg {$/;"	n
vg	vg.cpp	/^namespace vg {$/;"	n	file:
vg	vg.hpp	/^namespace vg {$/;"	n
vg	vg_set.cpp	/^namespace vg {$/;"	n	file:
vg	vg_set.hpp	/^namespace vg {$/;"	n
vg	viz.cpp	/^namespace vg {$/;"	n	file:
vg	viz.hpp	/^namespace vg {$/;"	n
vg	wang_hash.hpp	/^namespace vg {$/;"	n
vg	watchdog.cpp	/^namespace vg {$/;"	n	file:
vg	watchdog.hpp	/^namespace vg {$/;"	n
vg_filename	indexed_vg.hpp	/^    string vg_filename;$/;"	m	class:vg::IndexedVG
vg_help	main.cpp	/^void vg_help(char** argv) {$/;"	f
vget_high_f32	simde/arm/neon/get_high.h	55;"	d
vget_high_f32	simde/arm/neon/get_high.h	56;"	d
vget_high_f64	simde/arm/neon/get_high.h	77;"	d
vget_high_f64	simde/arm/neon/get_high.h	78;"	d
vget_high_s16	simde/arm/neon/get_high.h	121;"	d
vget_high_s16	simde/arm/neon/get_high.h	122;"	d
vget_high_s32	simde/arm/neon/get_high.h	143;"	d
vget_high_s32	simde/arm/neon/get_high.h	144;"	d
vget_high_s64	simde/arm/neon/get_high.h	165;"	d
vget_high_s64	simde/arm/neon/get_high.h	166;"	d
vget_high_s8	simde/arm/neon/get_high.h	100;"	d
vget_high_s8	simde/arm/neon/get_high.h	99;"	d
vget_high_u16	simde/arm/neon/get_high.h	209;"	d
vget_high_u16	simde/arm/neon/get_high.h	210;"	d
vget_high_u32	simde/arm/neon/get_high.h	231;"	d
vget_high_u32	simde/arm/neon/get_high.h	232;"	d
vget_high_u64	simde/arm/neon/get_high.h	253;"	d
vget_high_u64	simde/arm/neon/get_high.h	254;"	d
vget_high_u8	simde/arm/neon/get_high.h	187;"	d
vget_high_u8	simde/arm/neon/get_high.h	188;"	d
vget_lane_f32	simde/arm/neon/get_lane.h	54;"	d
vget_lane_f32	simde/arm/neon/get_lane.h	55;"	d
vget_lane_f64	simde/arm/neon/get_lane.h	76;"	d
vget_lane_f64	simde/arm/neon/get_lane.h	77;"	d
vget_lane_s16	simde/arm/neon/get_lane.h	118;"	d
vget_lane_s16	simde/arm/neon/get_lane.h	119;"	d
vget_lane_s32	simde/arm/neon/get_lane.h	139;"	d
vget_lane_s32	simde/arm/neon/get_lane.h	140;"	d
vget_lane_s64	simde/arm/neon/get_lane.h	161;"	d
vget_lane_s64	simde/arm/neon/get_lane.h	162;"	d
vget_lane_s8	simde/arm/neon/get_lane.h	97;"	d
vget_lane_s8	simde/arm/neon/get_lane.h	98;"	d
vget_lane_u16	simde/arm/neon/get_lane.h	203;"	d
vget_lane_u16	simde/arm/neon/get_lane.h	204;"	d
vget_lane_u32	simde/arm/neon/get_lane.h	224;"	d
vget_lane_u32	simde/arm/neon/get_lane.h	225;"	d
vget_lane_u64	simde/arm/neon/get_lane.h	246;"	d
vget_lane_u64	simde/arm/neon/get_lane.h	247;"	d
vget_lane_u8	simde/arm/neon/get_lane.h	182;"	d
vget_lane_u8	simde/arm/neon/get_lane.h	183;"	d
vget_low_f32	simde/arm/neon/get_low.h	55;"	d
vget_low_f32	simde/arm/neon/get_low.h	56;"	d
vget_low_f64	simde/arm/neon/get_low.h	77;"	d
vget_low_f64	simde/arm/neon/get_low.h	78;"	d
vget_low_s16	simde/arm/neon/get_low.h	125;"	d
vget_low_s16	simde/arm/neon/get_low.h	126;"	d
vget_low_s32	simde/arm/neon/get_low.h	149;"	d
vget_low_s32	simde/arm/neon/get_low.h	150;"	d
vget_low_s64	simde/arm/neon/get_low.h	173;"	d
vget_low_s64	simde/arm/neon/get_low.h	174;"	d
vget_low_s8	simde/arm/neon/get_low.h	101;"	d
vget_low_s8	simde/arm/neon/get_low.h	102;"	d
vget_low_u16	simde/arm/neon/get_low.h	221;"	d
vget_low_u16	simde/arm/neon/get_low.h	222;"	d
vget_low_u32	simde/arm/neon/get_low.h	245;"	d
vget_low_u32	simde/arm/neon/get_low.h	246;"	d
vget_low_u64	simde/arm/neon/get_low.h	269;"	d
vget_low_u64	simde/arm/neon/get_low.h	270;"	d
vget_low_u8	simde/arm/neon/get_low.h	197;"	d
vget_low_u8	simde/arm/neon/get_low.h	198;"	d
vgetq_lane_f32	simde/arm/neon/get_lane.h	269;"	d
vgetq_lane_f32	simde/arm/neon/get_lane.h	270;"	d
vgetq_lane_f64	simde/arm/neon/get_lane.h	292;"	d
vgetq_lane_f64	simde/arm/neon/get_lane.h	293;"	d
vgetq_lane_s16	simde/arm/neon/get_lane.h	342;"	d
vgetq_lane_s16	simde/arm/neon/get_lane.h	343;"	d
vgetq_lane_s32	simde/arm/neon/get_lane.h	367;"	d
vgetq_lane_s32	simde/arm/neon/get_lane.h	368;"	d
vgetq_lane_s64	simde/arm/neon/get_lane.h	392;"	d
vgetq_lane_s64	simde/arm/neon/get_lane.h	393;"	d
vgetq_lane_s8	simde/arm/neon/get_lane.h	317;"	d
vgetq_lane_s8	simde/arm/neon/get_lane.h	318;"	d
vgetq_lane_u16	simde/arm/neon/get_lane.h	442;"	d
vgetq_lane_u16	simde/arm/neon/get_lane.h	443;"	d
vgetq_lane_u32	simde/arm/neon/get_lane.h	467;"	d
vgetq_lane_u32	simde/arm/neon/get_lane.h	468;"	d
vgetq_lane_u64	simde/arm/neon/get_lane.h	492;"	d
vgetq_lane_u64	simde/arm/neon/get_lane.h	493;"	d
vgetq_lane_u8	simde/arm/neon/get_lane.h	417;"	d
vgetq_lane_u8	simde/arm/neon/get_lane.h	418;"	d
vhadd_s16	simde/arm/neon/hadd.h	68;"	d
vhadd_s16	simde/arm/neon/hadd.h	69;"	d
vhadd_s32	simde/arm/neon/hadd.h	82;"	d
vhadd_s32	simde/arm/neon/hadd.h	83;"	d
vhadd_s8	simde/arm/neon/hadd.h	54;"	d
vhadd_s8	simde/arm/neon/hadd.h	55;"	d
vhadd_u16	simde/arm/neon/hadd.h	110;"	d
vhadd_u16	simde/arm/neon/hadd.h	111;"	d
vhadd_u32	simde/arm/neon/hadd.h	124;"	d
vhadd_u32	simde/arm/neon/hadd.h	125;"	d
vhadd_u8	simde/arm/neon/hadd.h	96;"	d
vhadd_u8	simde/arm/neon/hadd.h	97;"	d
vhaddq_s16	simde/arm/neon/hadd.h	176;"	d
vhaddq_s16	simde/arm/neon/hadd.h	177;"	d
vhaddq_s32	simde/arm/neon/hadd.h	202;"	d
vhaddq_s32	simde/arm/neon/hadd.h	203;"	d
vhaddq_s8	simde/arm/neon/hadd.h	150;"	d
vhaddq_s8	simde/arm/neon/hadd.h	151;"	d
vhaddq_u16	simde/arm/neon/hadd.h	254;"	d
vhaddq_u16	simde/arm/neon/hadd.h	255;"	d
vhaddq_u32	simde/arm/neon/hadd.h	280;"	d
vhaddq_u32	simde/arm/neon/hadd.h	281;"	d
vhaddq_u8	simde/arm/neon/hadd.h	228;"	d
vhaddq_u8	simde/arm/neon/hadd.h	229;"	d
vhsub_s16	simde/arm/neon/hsub.h	68;"	d
vhsub_s16	simde/arm/neon/hsub.h	69;"	d
vhsub_s32	simde/arm/neon/hsub.h	82;"	d
vhsub_s32	simde/arm/neon/hsub.h	83;"	d
vhsub_s8	simde/arm/neon/hsub.h	54;"	d
vhsub_s8	simde/arm/neon/hsub.h	55;"	d
vhsub_u16	simde/arm/neon/hsub.h	110;"	d
vhsub_u16	simde/arm/neon/hsub.h	111;"	d
vhsub_u32	simde/arm/neon/hsub.h	124;"	d
vhsub_u32	simde/arm/neon/hsub.h	125;"	d
vhsub_u8	simde/arm/neon/hsub.h	96;"	d
vhsub_u8	simde/arm/neon/hsub.h	97;"	d
vhsubq_s16	simde/arm/neon/hsub.h	176;"	d
vhsubq_s16	simde/arm/neon/hsub.h	177;"	d
vhsubq_s32	simde/arm/neon/hsub.h	202;"	d
vhsubq_s32	simde/arm/neon/hsub.h	203;"	d
vhsubq_s8	simde/arm/neon/hsub.h	150;"	d
vhsubq_s8	simde/arm/neon/hsub.h	151;"	d
vhsubq_u16	simde/arm/neon/hsub.h	254;"	d
vhsubq_u16	simde/arm/neon/hsub.h	255;"	d
vhsubq_u32	simde/arm/neon/hsub.h	280;"	d
vhsubq_u32	simde/arm/neon/hsub.h	281;"	d
vhsubq_u8	simde/arm/neon/hsub.h	228;"	d
vhsubq_u8	simde/arm/neon/hsub.h	229;"	d
view_multipath_alignment	multipath_alignment.cpp	/^    void view_multipath_alignment(ostream& out, const multipath_alignment_t& multipath_aln, const HandleGraph& handle_graph) {$/;"	f	namespace:vg
view_multipath_alignment_as_dot	multipath_alignment.cpp	/^    void view_multipath_alignment_as_dot(ostream& out, const multipath_alignment_t& multipath_aln, bool show_graph) {$/;"	f	namespace:vg
visit_contained_snarls	clip.cpp	/^void visit_contained_snarls(const PathPositionHandleGraph* graph, const vector<Region>& regions, SnarlManager& snarl_manager,$/;"	f	namespace:vg
visit_next_node	traversal_finder.cpp	/^bool SupportRestrictedTraversalFinder::visit_next_node(const Node* node, const Edge* edge) {$/;"	f	class:vg::SupportRestrictedTraversalFinder
visit_next_node	traversal_finder.hpp	/^    virtual bool visit_next_node(handle_t handle) { return true; }$/;"	f	class:vg::ExhaustiveTraversalFinder
visited	integrated_snarl_finder.cpp	/^    unordered_set<handle_t> visited;$/;"	m	class:vg::HandleGraphNodeSet	file:
visits_left	snarls.cpp	/^vector<Visit> SnarlManager::visits_left(const Visit& visit, const HandleGraph& graph, const Snarl* in_snarl) const {$/;"	f	class:vg::SnarlManager
visits_right	snarls.cpp	/^vector<Visit> SnarlManager::visits_right(const Visit& visit, const HandleGraph& graph, const Snarl* in_snarl) const {$/;"	f	class:vg::SnarlManager
vld1_f32	simde/arm/neon/ld1.h	48;"	d
vld1_f32	simde/arm/neon/ld1.h	49;"	d
vld1_f64	simde/arm/neon/ld1.h	64;"	d
vld1_f64	simde/arm/neon/ld1.h	65;"	d
vld1_s16	simde/arm/neon/ld1.h	96;"	d
vld1_s16	simde/arm/neon/ld1.h	97;"	d
vld1_s32	simde/arm/neon/ld1.h	112;"	d
vld1_s32	simde/arm/neon/ld1.h	113;"	d
vld1_s64	simde/arm/neon/ld1.h	128;"	d
vld1_s64	simde/arm/neon/ld1.h	129;"	d
vld1_s8	simde/arm/neon/ld1.h	80;"	d
vld1_s8	simde/arm/neon/ld1.h	81;"	d
vld1_u16	simde/arm/neon/ld1.h	160;"	d
vld1_u16	simde/arm/neon/ld1.h	161;"	d
vld1_u32	simde/arm/neon/ld1.h	176;"	d
vld1_u32	simde/arm/neon/ld1.h	177;"	d
vld1_u64	simde/arm/neon/ld1.h	192;"	d
vld1_u64	simde/arm/neon/ld1.h	193;"	d
vld1_u8	simde/arm/neon/ld1.h	144;"	d
vld1_u8	simde/arm/neon/ld1.h	145;"	d
vld1q_f32	simde/arm/neon/ld1.h	212;"	d
vld1q_f32	simde/arm/neon/ld1.h	213;"	d
vld1q_f64	simde/arm/neon/ld1.h	232;"	d
vld1q_f64	simde/arm/neon/ld1.h	233;"	d
vld1q_s16	simde/arm/neon/ld1.h	272;"	d
vld1q_s16	simde/arm/neon/ld1.h	273;"	d
vld1q_s32	simde/arm/neon/ld1.h	292;"	d
vld1q_s32	simde/arm/neon/ld1.h	293;"	d
vld1q_s64	simde/arm/neon/ld1.h	312;"	d
vld1q_s64	simde/arm/neon/ld1.h	313;"	d
vld1q_s8	simde/arm/neon/ld1.h	252;"	d
vld1q_s8	simde/arm/neon/ld1.h	253;"	d
vld1q_u16	simde/arm/neon/ld1.h	352;"	d
vld1q_u16	simde/arm/neon/ld1.h	353;"	d
vld1q_u32	simde/arm/neon/ld1.h	372;"	d
vld1q_u32	simde/arm/neon/ld1.h	373;"	d
vld1q_u64	simde/arm/neon/ld1.h	392;"	d
vld1q_u64	simde/arm/neon/ld1.h	393;"	d
vld1q_u8	simde/arm/neon/ld1.h	332;"	d
vld1q_u8	simde/arm/neon/ld1.h	333;"	d
vld3_f32	simde/arm/neon/ld3.h	67;"	d
vld3_f32	simde/arm/neon/ld3.h	68;"	d
vld3_f64	simde/arm/neon/ld3.h	95;"	d
vld3_f64	simde/arm/neon/ld3.h	96;"	d
vld3_s16	simde/arm/neon/ld3.h	151;"	d
vld3_s16	simde/arm/neon/ld3.h	152;"	d
vld3_s32	simde/arm/neon/ld3.h	179;"	d
vld3_s32	simde/arm/neon/ld3.h	180;"	d
vld3_s64	simde/arm/neon/ld3.h	207;"	d
vld3_s64	simde/arm/neon/ld3.h	208;"	d
vld3_s8	simde/arm/neon/ld3.h	123;"	d
vld3_s8	simde/arm/neon/ld3.h	124;"	d
vld3_u16	simde/arm/neon/ld3.h	263;"	d
vld3_u16	simde/arm/neon/ld3.h	264;"	d
vld3_u32	simde/arm/neon/ld3.h	291;"	d
vld3_u32	simde/arm/neon/ld3.h	292;"	d
vld3_u64	simde/arm/neon/ld3.h	319;"	d
vld3_u64	simde/arm/neon/ld3.h	320;"	d
vld3_u8	simde/arm/neon/ld3.h	235;"	d
vld3_u8	simde/arm/neon/ld3.h	236;"	d
vld3q_f32	simde/arm/neon/ld3.h	347;"	d
vld3q_f32	simde/arm/neon/ld3.h	348;"	d
vld3q_f64	simde/arm/neon/ld3.h	375;"	d
vld3q_f64	simde/arm/neon/ld3.h	376;"	d
vld3q_s16	simde/arm/neon/ld3.h	431;"	d
vld3q_s16	simde/arm/neon/ld3.h	432;"	d
vld3q_s32	simde/arm/neon/ld3.h	459;"	d
vld3q_s32	simde/arm/neon/ld3.h	460;"	d
vld3q_s64	simde/arm/neon/ld3.h	487;"	d
vld3q_s64	simde/arm/neon/ld3.h	488;"	d
vld3q_s8	simde/arm/neon/ld3.h	403;"	d
vld3q_s8	simde/arm/neon/ld3.h	404;"	d
vld3q_u16	simde/arm/neon/ld3.h	544;"	d
vld3q_u16	simde/arm/neon/ld3.h	545;"	d
vld3q_u32	simde/arm/neon/ld3.h	572;"	d
vld3q_u32	simde/arm/neon/ld3.h	573;"	d
vld3q_u64	simde/arm/neon/ld3.h	600;"	d
vld3q_u64	simde/arm/neon/ld3.h	601;"	d
vld3q_u8	simde/arm/neon/ld3.h	516;"	d
vld3q_u8	simde/arm/neon/ld3.h	517;"	d
vld4_f32	simde/arm/neon/ld4.h	58;"	d
vld4_f32	simde/arm/neon/ld4.h	59;"	d
vld4_f64	simde/arm/neon/ld4.h	78;"	d
vld4_f64	simde/arm/neon/ld4.h	79;"	d
vld4_s16	simde/arm/neon/ld4.h	118;"	d
vld4_s16	simde/arm/neon/ld4.h	119;"	d
vld4_s32	simde/arm/neon/ld4.h	138;"	d
vld4_s32	simde/arm/neon/ld4.h	139;"	d
vld4_s64	simde/arm/neon/ld4.h	158;"	d
vld4_s64	simde/arm/neon/ld4.h	159;"	d
vld4_s8	simde/arm/neon/ld4.h	98;"	d
vld4_s8	simde/arm/neon/ld4.h	99;"	d
vld4_u16	simde/arm/neon/ld4.h	198;"	d
vld4_u16	simde/arm/neon/ld4.h	199;"	d
vld4_u32	simde/arm/neon/ld4.h	218;"	d
vld4_u32	simde/arm/neon/ld4.h	219;"	d
vld4_u64	simde/arm/neon/ld4.h	238;"	d
vld4_u64	simde/arm/neon/ld4.h	239;"	d
vld4_u8	simde/arm/neon/ld4.h	178;"	d
vld4_u8	simde/arm/neon/ld4.h	179;"	d
vld4q_f32	simde/arm/neon/ld4.h	258;"	d
vld4q_f32	simde/arm/neon/ld4.h	259;"	d
vld4q_f64	simde/arm/neon/ld4.h	278;"	d
vld4q_f64	simde/arm/neon/ld4.h	279;"	d
vld4q_s16	simde/arm/neon/ld4.h	318;"	d
vld4q_s16	simde/arm/neon/ld4.h	319;"	d
vld4q_s32	simde/arm/neon/ld4.h	338;"	d
vld4q_s32	simde/arm/neon/ld4.h	339;"	d
vld4q_s64	simde/arm/neon/ld4.h	358;"	d
vld4q_s64	simde/arm/neon/ld4.h	359;"	d
vld4q_s8	simde/arm/neon/ld4.h	298;"	d
vld4q_s8	simde/arm/neon/ld4.h	299;"	d
vld4q_u16	simde/arm/neon/ld4.h	399;"	d
vld4q_u16	simde/arm/neon/ld4.h	400;"	d
vld4q_u32	simde/arm/neon/ld4.h	419;"	d
vld4q_u32	simde/arm/neon/ld4.h	420;"	d
vld4q_u64	simde/arm/neon/ld4.h	439;"	d
vld4q_u64	simde/arm/neon/ld4.h	440;"	d
vld4q_u8	simde/arm/neon/ld4.h	379;"	d
vld4q_u8	simde/arm/neon/ld4.h	380;"	d
vmax_f32	simde/arm/neon/max.h	63;"	d
vmax_f32	simde/arm/neon/max.h	64;"	d
vmax_f64	simde/arm/neon/max.h	91;"	d
vmax_f64	simde/arm/neon/max.h	92;"	d
vmax_s16	simde/arm/neon/max.h	143;"	d
vmax_s16	simde/arm/neon/max.h	144;"	d
vmax_s32	simde/arm/neon/max.h	169;"	d
vmax_s32	simde/arm/neon/max.h	170;"	d
vmax_s8	simde/arm/neon/max.h	117;"	d
vmax_s8	simde/arm/neon/max.h	118;"	d
vmax_u16	simde/arm/neon/max.h	241;"	d
vmax_u16	simde/arm/neon/max.h	242;"	d
vmax_u32	simde/arm/neon/max.h	267;"	d
vmax_u32	simde/arm/neon/max.h	268;"	d
vmax_u8	simde/arm/neon/max.h	215;"	d
vmax_u8	simde/arm/neon/max.h	216;"	d
vmaxnm_f32	simde/arm/neon/maxnm.h	68;"	d
vmaxnm_f32	simde/arm/neon/maxnm.h	69;"	d
vmaxnm_f64	simde/arm/neon/maxnm.h	104;"	d
vmaxnm_f64	simde/arm/neon/maxnm.h	105;"	d
vmaxnmq_f32	simde/arm/neon/maxnm.h	156;"	d
vmaxnmq_f32	simde/arm/neon/maxnm.h	157;"	d
vmaxnmq_f64	simde/arm/neon/maxnm.h	208;"	d
vmaxnmq_f64	simde/arm/neon/maxnm.h	209;"	d
vmaxq_f32	simde/arm/neon/max.h	329;"	d
vmaxq_f32	simde/arm/neon/max.h	330;"	d
vmaxq_f64	simde/arm/neon/max.h	371;"	d
vmaxq_f64	simde/arm/neon/max.h	372;"	d
vmaxq_s16	simde/arm/neon/max.h	435;"	d
vmaxq_s16	simde/arm/neon/max.h	436;"	d
vmaxq_s32	simde/arm/neon/max.h	467;"	d
vmaxq_s32	simde/arm/neon/max.h	468;"	d
vmaxq_s8	simde/arm/neon/max.h	403;"	d
vmaxq_s8	simde/arm/neon/max.h	404;"	d
vmaxq_u16	simde/arm/neon/max.h	553;"	d
vmaxq_u16	simde/arm/neon/max.h	554;"	d
vmaxq_u32	simde/arm/neon/max.h	585;"	d
vmaxq_u32	simde/arm/neon/max.h	586;"	d
vmaxq_u8	simde/arm/neon/max.h	521;"	d
vmaxq_u8	simde/arm/neon/max.h	522;"	d
vmaxv_f32	simde/arm/neon/maxv.h	57;"	d
vmaxv_f32	simde/arm/neon/maxv.h	58;"	d
vmaxv_s16	simde/arm/neon/maxv.h	105;"	d
vmaxv_s16	simde/arm/neon/maxv.h	106;"	d
vmaxv_s32	simde/arm/neon/maxv.h	129;"	d
vmaxv_s32	simde/arm/neon/maxv.h	130;"	d
vmaxv_s8	simde/arm/neon/maxv.h	81;"	d
vmaxv_s8	simde/arm/neon/maxv.h	82;"	d
vmaxv_u16	simde/arm/neon/maxv.h	177;"	d
vmaxv_u16	simde/arm/neon/maxv.h	178;"	d
vmaxv_u32	simde/arm/neon/maxv.h	201;"	d
vmaxv_u32	simde/arm/neon/maxv.h	202;"	d
vmaxv_u8	simde/arm/neon/maxv.h	153;"	d
vmaxv_u8	simde/arm/neon/maxv.h	154;"	d
vmaxvq_f32	simde/arm/neon/maxv.h	225;"	d
vmaxvq_f32	simde/arm/neon/maxv.h	226;"	d
vmaxvq_f64	simde/arm/neon/maxv.h	249;"	d
vmaxvq_f64	simde/arm/neon/maxv.h	250;"	d
vmaxvq_s16	simde/arm/neon/maxv.h	297;"	d
vmaxvq_s16	simde/arm/neon/maxv.h	298;"	d
vmaxvq_s32	simde/arm/neon/maxv.h	321;"	d
vmaxvq_s32	simde/arm/neon/maxv.h	322;"	d
vmaxvq_s8	simde/arm/neon/maxv.h	273;"	d
vmaxvq_s8	simde/arm/neon/maxv.h	274;"	d
vmaxvq_u16	simde/arm/neon/maxv.h	369;"	d
vmaxvq_u16	simde/arm/neon/maxv.h	370;"	d
vmaxvq_u32	simde/arm/neon/maxv.h	393;"	d
vmaxvq_u32	simde/arm/neon/maxv.h	394;"	d
vmaxvq_u8	simde/arm/neon/maxv.h	345;"	d
vmaxvq_u8	simde/arm/neon/maxv.h	346;"	d
vmin_f32	simde/arm/neon/min.h	77;"	d
vmin_f32	simde/arm/neon/min.h	78;"	d
vmin_f64	simde/arm/neon/min.h	119;"	d
vmin_f64	simde/arm/neon/min.h	120;"	d
vmin_s16	simde/arm/neon/min.h	171;"	d
vmin_s16	simde/arm/neon/min.h	172;"	d
vmin_s32	simde/arm/neon/min.h	197;"	d
vmin_s32	simde/arm/neon/min.h	198;"	d
vmin_s8	simde/arm/neon/min.h	145;"	d
vmin_s8	simde/arm/neon/min.h	146;"	d
vmin_u16	simde/arm/neon/min.h	269;"	d
vmin_u16	simde/arm/neon/min.h	270;"	d
vmin_u32	simde/arm/neon/min.h	295;"	d
vmin_u32	simde/arm/neon/min.h	296;"	d
vmin_u8	simde/arm/neon/min.h	243;"	d
vmin_u8	simde/arm/neon/min.h	244;"	d
vminnm_f32	simde/arm/neon/minnm.h	68;"	d
vminnm_f32	simde/arm/neon/minnm.h	69;"	d
vminnm_f64	simde/arm/neon/minnm.h	104;"	d
vminnm_f64	simde/arm/neon/minnm.h	105;"	d
vminnmq_f32	simde/arm/neon/minnm.h	156;"	d
vminnmq_f32	simde/arm/neon/minnm.h	157;"	d
vminnmq_f64	simde/arm/neon/minnm.h	208;"	d
vminnmq_f64	simde/arm/neon/minnm.h	209;"	d
vminq_f32	simde/arm/neon/min.h	365;"	d
vminq_f32	simde/arm/neon/min.h	366;"	d
vminq_f64	simde/arm/neon/min.h	415;"	d
vminq_f64	simde/arm/neon/min.h	416;"	d
vminq_s16	simde/arm/neon/min.h	479;"	d
vminq_s16	simde/arm/neon/min.h	480;"	d
vminq_s32	simde/arm/neon/min.h	511;"	d
vminq_s32	simde/arm/neon/min.h	512;"	d
vminq_s8	simde/arm/neon/min.h	447;"	d
vminq_s8	simde/arm/neon/min.h	448;"	d
vminq_u16	simde/arm/neon/min.h	599;"	d
vminq_u16	simde/arm/neon/min.h	600;"	d
vminq_u32	simde/arm/neon/min.h	631;"	d
vminq_u32	simde/arm/neon/min.h	632;"	d
vminq_u8	simde/arm/neon/min.h	567;"	d
vminq_u8	simde/arm/neon/min.h	568;"	d
vminv_f32	simde/arm/neon/minv.h	65;"	d
vminv_f32	simde/arm/neon/minv.h	66;"	d
vminv_s16	simde/arm/neon/minv.h	113;"	d
vminv_s16	simde/arm/neon/minv.h	114;"	d
vminv_s32	simde/arm/neon/minv.h	137;"	d
vminv_s32	simde/arm/neon/minv.h	138;"	d
vminv_s8	simde/arm/neon/minv.h	89;"	d
vminv_s8	simde/arm/neon/minv.h	90;"	d
vminv_u16	simde/arm/neon/minv.h	185;"	d
vminv_u16	simde/arm/neon/minv.h	186;"	d
vminv_u32	simde/arm/neon/minv.h	209;"	d
vminv_u32	simde/arm/neon/minv.h	210;"	d
vminv_u8	simde/arm/neon/minv.h	161;"	d
vminv_u8	simde/arm/neon/minv.h	162;"	d
vminvq_f32	simde/arm/neon/minv.h	241;"	d
vminvq_f32	simde/arm/neon/minv.h	242;"	d
vminvq_f64	simde/arm/neon/minv.h	273;"	d
vminvq_f64	simde/arm/neon/minv.h	274;"	d
vminvq_s16	simde/arm/neon/minv.h	321;"	d
vminvq_s16	simde/arm/neon/minv.h	322;"	d
vminvq_s32	simde/arm/neon/minv.h	345;"	d
vminvq_s32	simde/arm/neon/minv.h	346;"	d
vminvq_s8	simde/arm/neon/minv.h	297;"	d
vminvq_s8	simde/arm/neon/minv.h	298;"	d
vminvq_u16	simde/arm/neon/minv.h	393;"	d
vminvq_u16	simde/arm/neon/minv.h	394;"	d
vminvq_u32	simde/arm/neon/minv.h	417;"	d
vminvq_u32	simde/arm/neon/minv.h	418;"	d
vminvq_u8	simde/arm/neon/minv.h	369;"	d
vminvq_u8	simde/arm/neon/minv.h	370;"	d
vmla_f32	simde/arm/neon/mla.h	64;"	d
vmla_f32	simde/arm/neon/mla.h	65;"	d
vmla_f64	simde/arm/neon/mla.h	93;"	d
vmla_f64	simde/arm/neon/mla.h	94;"	d
vmla_n_f32	simde/arm/neon/mla_n.h	64;"	d
vmla_n_f32	simde/arm/neon/mla_n.h	65;"	d
vmla_n_s16	simde/arm/neon/mla_n.h	92;"	d
vmla_n_s16	simde/arm/neon/mla_n.h	93;"	d
vmla_n_s32	simde/arm/neon/mla_n.h	120;"	d
vmla_n_s32	simde/arm/neon/mla_n.h	121;"	d
vmla_n_u16	simde/arm/neon/mla_n.h	148;"	d
vmla_n_u16	simde/arm/neon/mla_n.h	149;"	d
vmla_n_u32	simde/arm/neon/mla_n.h	176;"	d
vmla_n_u32	simde/arm/neon/mla_n.h	177;"	d
vmla_s16	simde/arm/neon/mla.h	151;"	d
vmla_s16	simde/arm/neon/mla.h	152;"	d
vmla_s32	simde/arm/neon/mla.h	180;"	d
vmla_s32	simde/arm/neon/mla.h	181;"	d
vmla_s8	simde/arm/neon/mla.h	122;"	d
vmla_s8	simde/arm/neon/mla.h	123;"	d
vmla_u16	simde/arm/neon/mla.h	238;"	d
vmla_u16	simde/arm/neon/mla.h	239;"	d
vmla_u32	simde/arm/neon/mla.h	267;"	d
vmla_u32	simde/arm/neon/mla.h	268;"	d
vmla_u8	simde/arm/neon/mla.h	209;"	d
vmla_u8	simde/arm/neon/mla.h	210;"	d
vmlal_high_s16	simde/arm/neon/mlal_high.h	63;"	d
vmlal_high_s16	simde/arm/neon/mlal_high.h	64;"	d
vmlal_high_s32	simde/arm/neon/mlal_high.h	92;"	d
vmlal_high_s32	simde/arm/neon/mlal_high.h	93;"	d
vmlal_high_s8	simde/arm/neon/mlal_high.h	49;"	d
vmlal_high_s8	simde/arm/neon/mlal_high.h	50;"	d
vmlal_high_u16	simde/arm/neon/mlal_high.h	120;"	d
vmlal_high_u16	simde/arm/neon/mlal_high.h	121;"	d
vmlal_high_u32	simde/arm/neon/mlal_high.h	149;"	d
vmlal_high_u32	simde/arm/neon/mlal_high.h	150;"	d
vmlal_high_u8	simde/arm/neon/mlal_high.h	106;"	d
vmlal_high_u8	simde/arm/neon/mlal_high.h	107;"	d
vmlal_n_s16	simde/arm/neon/mlal_n.h	49;"	d
vmlal_n_s16	simde/arm/neon/mlal_n.h	50;"	d
vmlal_n_s32	simde/arm/neon/mlal_n.h	78;"	d
vmlal_n_s32	simde/arm/neon/mlal_n.h	79;"	d
vmlal_n_u16	simde/arm/neon/mlal_n.h	92;"	d
vmlal_n_u16	simde/arm/neon/mlal_n.h	93;"	d
vmlal_n_u32	simde/arm/neon/mlal_n.h	121;"	d
vmlal_n_u32	simde/arm/neon/mlal_n.h	122;"	d
vmlal_s16	simde/arm/neon/mlal.h	63;"	d
vmlal_s16	simde/arm/neon/mlal.h	64;"	d
vmlal_s32	simde/arm/neon/mlal.h	92;"	d
vmlal_s32	simde/arm/neon/mlal.h	93;"	d
vmlal_s8	simde/arm/neon/mlal.h	49;"	d
vmlal_s8	simde/arm/neon/mlal.h	50;"	d
vmlal_u16	simde/arm/neon/mlal.h	120;"	d
vmlal_u16	simde/arm/neon/mlal.h	121;"	d
vmlal_u32	simde/arm/neon/mlal.h	149;"	d
vmlal_u32	simde/arm/neon/mlal.h	150;"	d
vmlal_u8	simde/arm/neon/mlal.h	106;"	d
vmlal_u8	simde/arm/neon/mlal.h	107;"	d
vmlaq_f32	simde/arm/neon/mla.h	302;"	d
vmlaq_f32	simde/arm/neon/mla.h	303;"	d
vmlaq_f64	simde/arm/neon/mla.h	337;"	d
vmlaq_f64	simde/arm/neon/mla.h	338;"	d
vmlaq_n_f32	simde/arm/neon/mla_n.h	206;"	d
vmlaq_n_f32	simde/arm/neon/mla_n.h	207;"	d
vmlaq_n_s16	simde/arm/neon/mla_n.h	236;"	d
vmlaq_n_s16	simde/arm/neon/mla_n.h	237;"	d
vmlaq_n_s32	simde/arm/neon/mla_n.h	266;"	d
vmlaq_n_s32	simde/arm/neon/mla_n.h	267;"	d
vmlaq_n_u16	simde/arm/neon/mla_n.h	296;"	d
vmlaq_n_u16	simde/arm/neon/mla_n.h	297;"	d
vmlaq_n_u32	simde/arm/neon/mla_n.h	326;"	d
vmlaq_n_u32	simde/arm/neon/mla_n.h	327;"	d
vmlaq_s16	simde/arm/neon/mla.h	399;"	d
vmlaq_s16	simde/arm/neon/mla.h	400;"	d
vmlaq_s32	simde/arm/neon/mla.h	430;"	d
vmlaq_s32	simde/arm/neon/mla.h	431;"	d
vmlaq_s8	simde/arm/neon/mla.h	368;"	d
vmlaq_s8	simde/arm/neon/mla.h	369;"	d
vmlaq_u16	simde/arm/neon/mla.h	492;"	d
vmlaq_u16	simde/arm/neon/mla.h	493;"	d
vmlaq_u32	simde/arm/neon/mla.h	523;"	d
vmlaq_u32	simde/arm/neon/mla.h	524;"	d
vmlaq_u8	simde/arm/neon/mla.h	461;"	d
vmlaq_u8	simde/arm/neon/mla.h	462;"	d
vmls_f32	simde/arm/neon/mls.h	47;"	d
vmls_f32	simde/arm/neon/mls.h	48;"	d
vmls_f64	simde/arm/neon/mls.h	61;"	d
vmls_f64	simde/arm/neon/mls.h	62;"	d
vmls_s16	simde/arm/neon/mls.h	89;"	d
vmls_s16	simde/arm/neon/mls.h	90;"	d
vmls_s32	simde/arm/neon/mls.h	103;"	d
vmls_s32	simde/arm/neon/mls.h	104;"	d
vmls_s8	simde/arm/neon/mls.h	75;"	d
vmls_s8	simde/arm/neon/mls.h	76;"	d
vmls_u16	simde/arm/neon/mls.h	131;"	d
vmls_u16	simde/arm/neon/mls.h	132;"	d
vmls_u32	simde/arm/neon/mls.h	145;"	d
vmls_u32	simde/arm/neon/mls.h	146;"	d
vmls_u8	simde/arm/neon/mls.h	117;"	d
vmls_u8	simde/arm/neon/mls.h	118;"	d
vmlsl_high_s16	simde/arm/neon/mlsl_high.h	61;"	d
vmlsl_high_s16	simde/arm/neon/mlsl_high.h	62;"	d
vmlsl_high_s32	simde/arm/neon/mlsl_high.h	75;"	d
vmlsl_high_s32	simde/arm/neon/mlsl_high.h	76;"	d
vmlsl_high_s8	simde/arm/neon/mlsl_high.h	47;"	d
vmlsl_high_s8	simde/arm/neon/mlsl_high.h	48;"	d
vmlsl_high_u16	simde/arm/neon/mlsl_high.h	103;"	d
vmlsl_high_u16	simde/arm/neon/mlsl_high.h	104;"	d
vmlsl_high_u32	simde/arm/neon/mlsl_high.h	117;"	d
vmlsl_high_u32	simde/arm/neon/mlsl_high.h	118;"	d
vmlsl_high_u8	simde/arm/neon/mlsl_high.h	89;"	d
vmlsl_high_u8	simde/arm/neon/mlsl_high.h	90;"	d
vmlsl_n_s16	simde/arm/neon/mlsl_n.h	47;"	d
vmlsl_n_s16	simde/arm/neon/mlsl_n.h	48;"	d
vmlsl_n_s32	simde/arm/neon/mlsl_n.h	61;"	d
vmlsl_n_s32	simde/arm/neon/mlsl_n.h	62;"	d
vmlsl_n_u16	simde/arm/neon/mlsl_n.h	75;"	d
vmlsl_n_u16	simde/arm/neon/mlsl_n.h	76;"	d
vmlsl_n_u32	simde/arm/neon/mlsl_n.h	89;"	d
vmlsl_n_u32	simde/arm/neon/mlsl_n.h	90;"	d
vmlsl_s16	simde/arm/neon/mlsl.h	61;"	d
vmlsl_s16	simde/arm/neon/mlsl.h	62;"	d
vmlsl_s32	simde/arm/neon/mlsl.h	75;"	d
vmlsl_s32	simde/arm/neon/mlsl.h	76;"	d
vmlsl_s8	simde/arm/neon/mlsl.h	47;"	d
vmlsl_s8	simde/arm/neon/mlsl.h	48;"	d
vmlsl_u16	simde/arm/neon/mlsl.h	103;"	d
vmlsl_u16	simde/arm/neon/mlsl.h	104;"	d
vmlsl_u32	simde/arm/neon/mlsl.h	117;"	d
vmlsl_u32	simde/arm/neon/mlsl.h	118;"	d
vmlsl_u8	simde/arm/neon/mlsl.h	89;"	d
vmlsl_u8	simde/arm/neon/mlsl.h	90;"	d
vmlsq_f32	simde/arm/neon/mls.h	159;"	d
vmlsq_f32	simde/arm/neon/mls.h	160;"	d
vmlsq_f64	simde/arm/neon/mls.h	173;"	d
vmlsq_f64	simde/arm/neon/mls.h	174;"	d
vmlsq_s16	simde/arm/neon/mls.h	201;"	d
vmlsq_s16	simde/arm/neon/mls.h	202;"	d
vmlsq_s32	simde/arm/neon/mls.h	215;"	d
vmlsq_s32	simde/arm/neon/mls.h	216;"	d
vmlsq_s8	simde/arm/neon/mls.h	187;"	d
vmlsq_s8	simde/arm/neon/mls.h	188;"	d
vmlsq_u16	simde/arm/neon/mls.h	243;"	d
vmlsq_u16	simde/arm/neon/mls.h	244;"	d
vmlsq_u32	simde/arm/neon/mls.h	257;"	d
vmlsq_u32	simde/arm/neon/mls.h	258;"	d
vmlsq_u8	simde/arm/neon/mls.h	229;"	d
vmlsq_u8	simde/arm/neon/mls.h	230;"	d
vmovl_high_s16	simde/arm/neon/movl_high.h	63;"	d
vmovl_high_s16	simde/arm/neon/movl_high.h	64;"	d
vmovl_high_s32	simde/arm/neon/movl_high.h	77;"	d
vmovl_high_s32	simde/arm/neon/movl_high.h	78;"	d
vmovl_high_s8	simde/arm/neon/movl_high.h	49;"	d
vmovl_high_s8	simde/arm/neon/movl_high.h	50;"	d
vmovl_high_u16	simde/arm/neon/movl_high.h	105;"	d
vmovl_high_u16	simde/arm/neon/movl_high.h	106;"	d
vmovl_high_u32	simde/arm/neon/movl_high.h	119;"	d
vmovl_high_u32	simde/arm/neon/movl_high.h	120;"	d
vmovl_high_u8	simde/arm/neon/movl_high.h	91;"	d
vmovl_high_u8	simde/arm/neon/movl_high.h	92;"	d
vmovl_s16	simde/arm/neon/movl.h	89;"	d
vmovl_s16	simde/arm/neon/movl.h	90;"	d
vmovl_s32	simde/arm/neon/movl.h	117;"	d
vmovl_s32	simde/arm/neon/movl.h	118;"	d
vmovl_s8	simde/arm/neon/movl.h	61;"	d
vmovl_s8	simde/arm/neon/movl.h	62;"	d
vmovl_u16	simde/arm/neon/movl.h	173;"	d
vmovl_u16	simde/arm/neon/movl.h	174;"	d
vmovl_u32	simde/arm/neon/movl.h	201;"	d
vmovl_u32	simde/arm/neon/movl.h	202;"	d
vmovl_u8	simde/arm/neon/movl.h	145;"	d
vmovl_u8	simde/arm/neon/movl.h	146;"	d
vmovn_high_s16	simde/arm/neon/movn_high.h	48;"	d
vmovn_high_s16	simde/arm/neon/movn_high.h	49;"	d
vmovn_high_s32	simde/arm/neon/movn_high.h	62;"	d
vmovn_high_s32	simde/arm/neon/movn_high.h	63;"	d
vmovn_high_s64	simde/arm/neon/movn_high.h	76;"	d
vmovn_high_s64	simde/arm/neon/movn_high.h	77;"	d
vmovn_high_u16	simde/arm/neon/movn_high.h	90;"	d
vmovn_high_u16	simde/arm/neon/movn_high.h	91;"	d
vmovn_high_u32	simde/arm/neon/movn_high.h	104;"	d
vmovn_high_u32	simde/arm/neon/movn_high.h	105;"	d
vmovn_high_u64	simde/arm/neon/movn_high.h	118;"	d
vmovn_high_u64	simde/arm/neon/movn_high.h	119;"	d
vmovn_s16	simde/arm/neon/movn.h	58;"	d
vmovn_s16	simde/arm/neon/movn.h	59;"	d
vmovn_s32	simde/arm/neon/movn.h	84;"	d
vmovn_s32	simde/arm/neon/movn.h	85;"	d
vmovn_s64	simde/arm/neon/movn.h	110;"	d
vmovn_s64	simde/arm/neon/movn.h	111;"	d
vmovn_u16	simde/arm/neon/movn.h	136;"	d
vmovn_u16	simde/arm/neon/movn.h	137;"	d
vmovn_u32	simde/arm/neon/movn.h	162;"	d
vmovn_u32	simde/arm/neon/movn.h	163;"	d
vmovn_u64	simde/arm/neon/movn.h	188;"	d
vmovn_u64	simde/arm/neon/movn.h	189;"	d
vmul_f32	simde/arm/neon/mul.h	61;"	d
vmul_f32	simde/arm/neon/mul.h	62;"	d
vmul_f64	simde/arm/neon/mul.h	89;"	d
vmul_f64	simde/arm/neon/mul.h	90;"	d
vmul_lane_f32	simde/arm/neon/mul_lane.h	57;"	d
vmul_lane_f32	simde/arm/neon/mul_lane.h	58;"	d
vmul_lane_f64	simde/arm/neon/mul_lane.h	81;"	d
vmul_lane_f64	simde/arm/neon/mul_lane.h	82;"	d
vmul_lane_s16	simde/arm/neon/mul_lane.h	105;"	d
vmul_lane_s16	simde/arm/neon/mul_lane.h	106;"	d
vmul_lane_s32	simde/arm/neon/mul_lane.h	129;"	d
vmul_lane_s32	simde/arm/neon/mul_lane.h	130;"	d
vmul_lane_u16	simde/arm/neon/mul_lane.h	153;"	d
vmul_lane_u16	simde/arm/neon/mul_lane.h	154;"	d
vmul_lane_u32	simde/arm/neon/mul_lane.h	177;"	d
vmul_lane_u32	simde/arm/neon/mul_lane.h	178;"	d
vmul_n_f32	simde/arm/neon/mul_n.h	60;"	d
vmul_n_f32	simde/arm/neon/mul_n.h	61;"	d
vmul_n_f64	simde/arm/neon/mul_n.h	87;"	d
vmul_n_f64	simde/arm/neon/mul_n.h	88;"	d
vmul_n_s16	simde/arm/neon/mul_n.h	117;"	d
vmul_n_s16	simde/arm/neon/mul_n.h	118;"	d
vmul_n_s32	simde/arm/neon/mul_n.h	144;"	d
vmul_n_s32	simde/arm/neon/mul_n.h	145;"	d
vmul_n_u16	simde/arm/neon/mul_n.h	171;"	d
vmul_n_u16	simde/arm/neon/mul_n.h	172;"	d
vmul_n_u32	simde/arm/neon/mul_n.h	198;"	d
vmul_n_u32	simde/arm/neon/mul_n.h	199;"	d
vmul_s16	simde/arm/neon/mul.h	147;"	d
vmul_s16	simde/arm/neon/mul.h	148;"	d
vmul_s32	simde/arm/neon/mul.h	175;"	d
vmul_s32	simde/arm/neon/mul.h	176;"	d
vmul_s8	simde/arm/neon/mul.h	117;"	d
vmul_s8	simde/arm/neon/mul.h	118;"	d
vmul_u16	simde/arm/neon/mul.h	251;"	d
vmul_u16	simde/arm/neon/mul.h	252;"	d
vmul_u32	simde/arm/neon/mul.h	279;"	d
vmul_u32	simde/arm/neon/mul.h	280;"	d
vmul_u8	simde/arm/neon/mul.h	223;"	d
vmul_u8	simde/arm/neon/mul.h	224;"	d
vmull_high_s16	simde/arm/neon/mull_high.h	62;"	d
vmull_high_s16	simde/arm/neon/mull_high.h	63;"	d
vmull_high_s32	simde/arm/neon/mull_high.h	76;"	d
vmull_high_s32	simde/arm/neon/mull_high.h	77;"	d
vmull_high_s8	simde/arm/neon/mull_high.h	48;"	d
vmull_high_s8	simde/arm/neon/mull_high.h	49;"	d
vmull_high_u16	simde/arm/neon/mull_high.h	104;"	d
vmull_high_u16	simde/arm/neon/mull_high.h	105;"	d
vmull_high_u32	simde/arm/neon/mull_high.h	118;"	d
vmull_high_u32	simde/arm/neon/mull_high.h	119;"	d
vmull_high_u8	simde/arm/neon/mull_high.h	90;"	d
vmull_high_u8	simde/arm/neon/mull_high.h	91;"	d
vmull_n_s16	simde/arm/neon/mull_n.h	65;"	d
vmull_n_s16	simde/arm/neon/mull_n.h	66;"	d
vmull_n_s32	simde/arm/neon/mull_n.h	93;"	d
vmull_n_s32	simde/arm/neon/mull_n.h	94;"	d
vmull_n_u16	simde/arm/neon/mull_n.h	123;"	d
vmull_n_u16	simde/arm/neon/mull_n.h	124;"	d
vmull_n_u32	simde/arm/neon/mull_n.h	151;"	d
vmull_n_u32	simde/arm/neon/mull_n.h	152;"	d
vmull_s16	simde/arm/neon/mull.h	101;"	d
vmull_s16	simde/arm/neon/mull.h	102;"	d
vmull_s32	simde/arm/neon/mull.h	132;"	d
vmull_s32	simde/arm/neon/mull.h	133;"	d
vmull_s8	simde/arm/neon/mull.h	68;"	d
vmull_s8	simde/arm/neon/mull.h	69;"	d
vmull_u16	simde/arm/neon/mull.h	198;"	d
vmull_u16	simde/arm/neon/mull.h	199;"	d
vmull_u32	simde/arm/neon/mull.h	229;"	d
vmull_u32	simde/arm/neon/mull.h	230;"	d
vmull_u8	simde/arm/neon/mull.h	165;"	d
vmull_u8	simde/arm/neon/mull.h	166;"	d
vmulq_f32	simde/arm/neon/mul.h	331;"	d
vmulq_f32	simde/arm/neon/mul.h	332;"	d
vmulq_f64	simde/arm/neon/mul.h	363;"	d
vmulq_f64	simde/arm/neon/mul.h	364;"	d
vmulq_lane_f32	simde/arm/neon/mul_lane.h	201;"	d
vmulq_lane_f32	simde/arm/neon/mul_lane.h	202;"	d
vmulq_lane_f64	simde/arm/neon/mul_lane.h	225;"	d
vmulq_lane_f64	simde/arm/neon/mul_lane.h	226;"	d
vmulq_lane_s16	simde/arm/neon/mul_lane.h	249;"	d
vmulq_lane_s16	simde/arm/neon/mul_lane.h	250;"	d
vmulq_lane_s32	simde/arm/neon/mul_lane.h	273;"	d
vmulq_lane_s32	simde/arm/neon/mul_lane.h	274;"	d
vmulq_lane_u16	simde/arm/neon/mul_lane.h	297;"	d
vmulq_lane_u16	simde/arm/neon/mul_lane.h	298;"	d
vmulq_lane_u32	simde/arm/neon/mul_lane.h	321;"	d
vmulq_lane_u32	simde/arm/neon/mul_lane.h	322;"	d
vmulq_laneq_f32	simde/arm/neon/mul_lane.h	345;"	d
vmulq_laneq_f32	simde/arm/neon/mul_lane.h	346;"	d
vmulq_laneq_f64	simde/arm/neon/mul_lane.h	369;"	d
vmulq_laneq_f64	simde/arm/neon/mul_lane.h	370;"	d
vmulq_laneq_s16	simde/arm/neon/mul_lane.h	393;"	d
vmulq_laneq_s16	simde/arm/neon/mul_lane.h	394;"	d
vmulq_laneq_s32	simde/arm/neon/mul_lane.h	417;"	d
vmulq_laneq_s32	simde/arm/neon/mul_lane.h	418;"	d
vmulq_laneq_u16	simde/arm/neon/mul_lane.h	441;"	d
vmulq_laneq_u16	simde/arm/neon/mul_lane.h	442;"	d
vmulq_laneq_u32	simde/arm/neon/mul_lane.h	465;"	d
vmulq_laneq_u32	simde/arm/neon/mul_lane.h	466;"	d
vmulq_n_f32	simde/arm/neon/mul_n.h	229;"	d
vmulq_n_f32	simde/arm/neon/mul_n.h	230;"	d
vmulq_n_f64	simde/arm/neon/mul_n.h	260;"	d
vmulq_n_f64	simde/arm/neon/mul_n.h	261;"	d
vmulq_n_s16	simde/arm/neon/mul_n.h	289;"	d
vmulq_n_s16	simde/arm/neon/mul_n.h	290;"	d
vmulq_n_s32	simde/arm/neon/mul_n.h	318;"	d
vmulq_n_s32	simde/arm/neon/mul_n.h	319;"	d
vmulq_n_u16	simde/arm/neon/mul_n.h	347;"	d
vmulq_n_u16	simde/arm/neon/mul_n.h	348;"	d
vmulq_n_u32	simde/arm/neon/mul_n.h	376;"	d
vmulq_n_u32	simde/arm/neon/mul_n.h	377;"	d
vmulq_s16	simde/arm/neon/mul.h	421;"	d
vmulq_s16	simde/arm/neon/mul.h	422;"	d
vmulq_s32	simde/arm/neon/mul.h	451;"	d
vmulq_s32	simde/arm/neon/mul.h	452;"	d
vmulq_s8	simde/arm/neon/mul.h	391;"	d
vmulq_s8	simde/arm/neon/mul.h	392;"	d
vmulq_u16	simde/arm/neon/mul.h	533;"	d
vmulq_u16	simde/arm/neon/mul.h	534;"	d
vmulq_u32	simde/arm/neon/mul.h	563;"	d
vmulq_u32	simde/arm/neon/mul.h	564;"	d
vmulq_u8	simde/arm/neon/mul.h	503;"	d
vmulq_u8	simde/arm/neon/mul.h	504;"	d
vmvn_s16	simde/arm/neon/mvn.h	303;"	d
vmvn_s16	simde/arm/neon/mvn.h	304;"	d
vmvn_s32	simde/arm/neon/mvn.h	332;"	d
vmvn_s32	simde/arm/neon/mvn.h	333;"	d
vmvn_s8	simde/arm/neon/mvn.h	274;"	d
vmvn_s8	simde/arm/neon/mvn.h	275;"	d
vmvn_u16	simde/arm/neon/mvn.h	390;"	d
vmvn_u16	simde/arm/neon/mvn.h	391;"	d
vmvn_u32	simde/arm/neon/mvn.h	419;"	d
vmvn_u32	simde/arm/neon/mvn.h	420;"	d
vmvn_u8	simde/arm/neon/mvn.h	361;"	d
vmvn_u8	simde/arm/neon/mvn.h	362;"	d
vmvnq_s16	simde/arm/neon/mvn.h	105;"	d
vmvnq_s16	simde/arm/neon/mvn.h	106;"	d
vmvnq_s32	simde/arm/neon/mvn.h	140;"	d
vmvnq_s32	simde/arm/neon/mvn.h	141;"	d
vmvnq_s8	simde/arm/neon/mvn.h	70;"	d
vmvnq_s8	simde/arm/neon/mvn.h	71;"	d
vmvnq_u16	simde/arm/neon/mvn.h	210;"	d
vmvnq_u16	simde/arm/neon/mvn.h	211;"	d
vmvnq_u32	simde/arm/neon/mvn.h	245;"	d
vmvnq_u32	simde/arm/neon/mvn.h	246;"	d
vmvnq_u8	simde/arm/neon/mvn.h	175;"	d
vmvnq_u8	simde/arm/neon/mvn.h	176;"	d
vneg_f32	simde/arm/neon/neg.h	59;"	d
vneg_f32	simde/arm/neon/neg.h	60;"	d
vneg_f64	simde/arm/neon/neg.h	86;"	d
vneg_f64	simde/arm/neon/neg.h	87;"	d
vneg_s16	simde/arm/neon/neg.h	140;"	d
vneg_s16	simde/arm/neon/neg.h	141;"	d
vneg_s32	simde/arm/neon/neg.h	167;"	d
vneg_s32	simde/arm/neon/neg.h	168;"	d
vneg_s64	simde/arm/neon/neg.h	194;"	d
vneg_s64	simde/arm/neon/neg.h	195;"	d
vneg_s8	simde/arm/neon/neg.h	113;"	d
vneg_s8	simde/arm/neon/neg.h	114;"	d
vnegq_f32	simde/arm/neon/neg.h	226;"	d
vnegq_f32	simde/arm/neon/neg.h	227;"	d
vnegq_f64	simde/arm/neon/neg.h	258;"	d
vnegq_f64	simde/arm/neon/neg.h	259;"	d
vnegq_s16	simde/arm/neon/neg.h	322;"	d
vnegq_s16	simde/arm/neon/neg.h	323;"	d
vnegq_s32	simde/arm/neon/neg.h	354;"	d
vnegq_s32	simde/arm/neon/neg.h	355;"	d
vnegq_s64	simde/arm/neon/neg.h	386;"	d
vnegq_s64	simde/arm/neon/neg.h	387;"	d
vnegq_s8	simde/arm/neon/neg.h	290;"	d
vnegq_s8	simde/arm/neon/neg.h	291;"	d
vo	unittest/blocked_gzip_input_stream.cpp	/^static int64_t vo(size_t block_start, size_t offset) {$/;"	f	namespace:vg::unittest
vo	unittest/blocked_gzip_output_stream.cpp	/^static int64_t vo(size_t block_start, size_t offset) {$/;"	f	namespace:vg::unittest
vorn_s16	simde/arm/neon/orn.h	88;"	d
vorn_s16	simde/arm/neon/orn.h	89;"	d
vorn_s32	simde/arm/neon/orn.h	115;"	d
vorn_s32	simde/arm/neon/orn.h	116;"	d
vorn_s64	simde/arm/neon/orn.h	142;"	d
vorn_s64	simde/arm/neon/orn.h	143;"	d
vorn_s8	simde/arm/neon/orn.h	61;"	d
vorn_s8	simde/arm/neon/orn.h	62;"	d
vorn_u16	simde/arm/neon/orn.h	196;"	d
vorn_u16	simde/arm/neon/orn.h	197;"	d
vorn_u32	simde/arm/neon/orn.h	223;"	d
vorn_u32	simde/arm/neon/orn.h	224;"	d
vorn_u64	simde/arm/neon/orn.h	250;"	d
vorn_u64	simde/arm/neon/orn.h	251;"	d
vorn_u8	simde/arm/neon/orn.h	169;"	d
vorn_u8	simde/arm/neon/orn.h	170;"	d
vornq_s16	simde/arm/neon/orn.h	312;"	d
vornq_s16	simde/arm/neon/orn.h	313;"	d
vornq_s32	simde/arm/neon/orn.h	343;"	d
vornq_s32	simde/arm/neon/orn.h	344;"	d
vornq_s64	simde/arm/neon/orn.h	374;"	d
vornq_s64	simde/arm/neon/orn.h	375;"	d
vornq_s8	simde/arm/neon/orn.h	281;"	d
vornq_s8	simde/arm/neon/orn.h	282;"	d
vornq_u16	simde/arm/neon/orn.h	436;"	d
vornq_u16	simde/arm/neon/orn.h	437;"	d
vornq_u32	simde/arm/neon/orn.h	467;"	d
vornq_u32	simde/arm/neon/orn.h	468;"	d
vornq_u64	simde/arm/neon/orn.h	498;"	d
vornq_u64	simde/arm/neon/orn.h	499;"	d
vornq_u8	simde/arm/neon/orn.h	405;"	d
vornq_u8	simde/arm/neon/orn.h	406;"	d
vorr_s16	simde/arm/neon/orr.h	93;"	d
vorr_s16	simde/arm/neon/orr.h	94;"	d
vorr_s32	simde/arm/neon/orr.h	123;"	d
vorr_s32	simde/arm/neon/orr.h	124;"	d
vorr_s64	simde/arm/neon/orr.h	153;"	d
vorr_s64	simde/arm/neon/orr.h	154;"	d
vorr_s8	simde/arm/neon/orr.h	63;"	d
vorr_s8	simde/arm/neon/orr.h	64;"	d
vorr_u16	simde/arm/neon/orr.h	213;"	d
vorr_u16	simde/arm/neon/orr.h	214;"	d
vorr_u32	simde/arm/neon/orr.h	243;"	d
vorr_u32	simde/arm/neon/orr.h	244;"	d
vorr_u64	simde/arm/neon/orr.h	273;"	d
vorr_u64	simde/arm/neon/orr.h	274;"	d
vorr_u8	simde/arm/neon/orr.h	183;"	d
vorr_u8	simde/arm/neon/orr.h	184;"	d
vorrq_s16	simde/arm/neon/orr.h	341;"	d
vorrq_s16	simde/arm/neon/orr.h	342;"	d
vorrq_s32	simde/arm/neon/orr.h	375;"	d
vorrq_s32	simde/arm/neon/orr.h	376;"	d
vorrq_s64	simde/arm/neon/orr.h	409;"	d
vorrq_s64	simde/arm/neon/orr.h	410;"	d
vorrq_s8	simde/arm/neon/orr.h	307;"	d
vorrq_s8	simde/arm/neon/orr.h	308;"	d
vorrq_u16	simde/arm/neon/orr.h	477;"	d
vorrq_u16	simde/arm/neon/orr.h	478;"	d
vorrq_u32	simde/arm/neon/orr.h	511;"	d
vorrq_u32	simde/arm/neon/orr.h	512;"	d
vorrq_u64	simde/arm/neon/orr.h	545;"	d
vorrq_u64	simde/arm/neon/orr.h	546;"	d
vorrq_u8	simde/arm/neon/orr.h	443;"	d
vorrq_u8	simde/arm/neon/orr.h	444;"	d
vpadal_s16	simde/arm/neon/padal.h	64;"	d
vpadal_s16	simde/arm/neon/padal.h	65;"	d
vpadal_s32	simde/arm/neon/padal.h	78;"	d
vpadal_s32	simde/arm/neon/padal.h	79;"	d
vpadal_s8	simde/arm/neon/padal.h	50;"	d
vpadal_s8	simde/arm/neon/padal.h	51;"	d
vpadal_u16	simde/arm/neon/padal.h	106;"	d
vpadal_u16	simde/arm/neon/padal.h	107;"	d
vpadal_u32	simde/arm/neon/padal.h	120;"	d
vpadal_u32	simde/arm/neon/padal.h	121;"	d
vpadal_u8	simde/arm/neon/padal.h	92;"	d
vpadal_u8	simde/arm/neon/padal.h	93;"	d
vpadalq_s16	simde/arm/neon/padal.h	148;"	d
vpadalq_s16	simde/arm/neon/padal.h	149;"	d
vpadalq_s32	simde/arm/neon/padal.h	162;"	d
vpadalq_s32	simde/arm/neon/padal.h	163;"	d
vpadalq_s8	simde/arm/neon/padal.h	134;"	d
vpadalq_s8	simde/arm/neon/padal.h	135;"	d
vpadalq_u16	simde/arm/neon/padal.h	190;"	d
vpadalq_u16	simde/arm/neon/padal.h	191;"	d
vpadalq_u32	simde/arm/neon/padal.h	204;"	d
vpadalq_u32	simde/arm/neon/padal.h	205;"	d
vpadalq_u8	simde/arm/neon/padal.h	176;"	d
vpadalq_u8	simde/arm/neon/padal.h	177;"	d
vpadd_f32	simde/arm/neon/padd.h	50;"	d
vpadd_f32	simde/arm/neon/padd.h	51;"	d
vpadd_s16	simde/arm/neon/padd.h	80;"	d
vpadd_s16	simde/arm/neon/padd.h	81;"	d
vpadd_s32	simde/arm/neon/padd.h	96;"	d
vpadd_s32	simde/arm/neon/padd.h	97;"	d
vpadd_s8	simde/arm/neon/padd.h	64;"	d
vpadd_s8	simde/arm/neon/padd.h	65;"	d
vpadd_u16	simde/arm/neon/padd.h	124;"	d
vpadd_u16	simde/arm/neon/padd.h	125;"	d
vpadd_u32	simde/arm/neon/padd.h	138;"	d
vpadd_u32	simde/arm/neon/padd.h	139;"	d
vpadd_u8	simde/arm/neon/padd.h	110;"	d
vpadd_u8	simde/arm/neon/padd.h	111;"	d
vpaddl_s16	simde/arm/neon/paddl.h	72;"	d
vpaddl_s16	simde/arm/neon/paddl.h	73;"	d
vpaddl_s32	simde/arm/neon/paddl.h	87;"	d
vpaddl_s32	simde/arm/neon/paddl.h	88;"	d
vpaddl_s8	simde/arm/neon/paddl.h	57;"	d
vpaddl_s8	simde/arm/neon/paddl.h	58;"	d
vpaddl_u16	simde/arm/neon/paddl.h	117;"	d
vpaddl_u16	simde/arm/neon/paddl.h	118;"	d
vpaddl_u32	simde/arm/neon/paddl.h	132;"	d
vpaddl_u32	simde/arm/neon/paddl.h	133;"	d
vpaddl_u8	simde/arm/neon/paddl.h	102;"	d
vpaddl_u8	simde/arm/neon/paddl.h	103;"	d
vpaddlq_s16	simde/arm/neon/paddl.h	164;"	d
vpaddlq_s16	simde/arm/neon/paddl.h	165;"	d
vpaddlq_s32	simde/arm/neon/paddl.h	184;"	d
vpaddlq_s32	simde/arm/neon/paddl.h	185;"	d
vpaddlq_s8	simde/arm/neon/paddl.h	148;"	d
vpaddlq_s8	simde/arm/neon/paddl.h	149;"	d
vpaddlq_u16	simde/arm/neon/paddl.h	216;"	d
vpaddlq_u16	simde/arm/neon/paddl.h	217;"	d
vpaddlq_u32	simde/arm/neon/paddl.h	232;"	d
vpaddlq_u32	simde/arm/neon/paddl.h	233;"	d
vpaddlq_u8	simde/arm/neon/paddl.h	200;"	d
vpaddlq_u8	simde/arm/neon/paddl.h	201;"	d
vpaddq_f32	simde/arm/neon/padd.h	154;"	d
vpaddq_f32	simde/arm/neon/padd.h	155;"	d
vpaddq_f64	simde/arm/neon/padd.h	170;"	d
vpaddq_f64	simde/arm/neon/padd.h	171;"	d
vpaddq_s16	simde/arm/neon/padd.h	200;"	d
vpaddq_s16	simde/arm/neon/padd.h	201;"	d
vpaddq_s32	simde/arm/neon/padd.h	216;"	d
vpaddq_s32	simde/arm/neon/padd.h	217;"	d
vpaddq_s64	simde/arm/neon/padd.h	230;"	d
vpaddq_s64	simde/arm/neon/padd.h	231;"	d
vpaddq_s8	simde/arm/neon/padd.h	184;"	d
vpaddq_s8	simde/arm/neon/padd.h	185;"	d
vpaddq_u16	simde/arm/neon/padd.h	258;"	d
vpaddq_u16	simde/arm/neon/padd.h	259;"	d
vpaddq_u32	simde/arm/neon/padd.h	272;"	d
vpaddq_u32	simde/arm/neon/padd.h	273;"	d
vpaddq_u64	simde/arm/neon/padd.h	286;"	d
vpaddq_u64	simde/arm/neon/padd.h	287;"	d
vpaddq_u8	simde/arm/neon/padd.h	244;"	d
vpaddq_u8	simde/arm/neon/padd.h	245;"	d
vpmax	utility.hpp	/^vector<T> vpmax(const std::vector<std::vector<T>>& vv) {$/;"	f	namespace:vg
vpmax_f32	simde/arm/neon/pmax.h	50;"	d
vpmax_f32	simde/arm/neon/pmax.h	51;"	d
vpmax_s16	simde/arm/neon/pmax.h	78;"	d
vpmax_s16	simde/arm/neon/pmax.h	79;"	d
vpmax_s32	simde/arm/neon/pmax.h	92;"	d
vpmax_s32	simde/arm/neon/pmax.h	93;"	d
vpmax_s8	simde/arm/neon/pmax.h	64;"	d
vpmax_s8	simde/arm/neon/pmax.h	65;"	d
vpmax_u16	simde/arm/neon/pmax.h	120;"	d
vpmax_u16	simde/arm/neon/pmax.h	121;"	d
vpmax_u32	simde/arm/neon/pmax.h	134;"	d
vpmax_u32	simde/arm/neon/pmax.h	135;"	d
vpmax_u8	simde/arm/neon/pmax.h	106;"	d
vpmax_u8	simde/arm/neon/pmax.h	107;"	d
vpmaxq_f32	simde/arm/neon/pmax.h	148;"	d
vpmaxq_f32	simde/arm/neon/pmax.h	149;"	d
vpmaxq_f64	simde/arm/neon/pmax.h	162;"	d
vpmaxq_f64	simde/arm/neon/pmax.h	163;"	d
vpmaxq_s16	simde/arm/neon/pmax.h	190;"	d
vpmaxq_s16	simde/arm/neon/pmax.h	191;"	d
vpmaxq_s32	simde/arm/neon/pmax.h	204;"	d
vpmaxq_s32	simde/arm/neon/pmax.h	205;"	d
vpmaxq_s8	simde/arm/neon/pmax.h	176;"	d
vpmaxq_s8	simde/arm/neon/pmax.h	177;"	d
vpmaxq_u16	simde/arm/neon/pmax.h	232;"	d
vpmaxq_u16	simde/arm/neon/pmax.h	233;"	d
vpmaxq_u32	simde/arm/neon/pmax.h	246;"	d
vpmaxq_u32	simde/arm/neon/pmax.h	247;"	d
vpmaxq_u8	simde/arm/neon/pmax.h	218;"	d
vpmaxq_u8	simde/arm/neon/pmax.h	219;"	d
vpmin_f32	simde/arm/neon/pmin.h	49;"	d
vpmin_f32	simde/arm/neon/pmin.h	50;"	d
vpmin_s16	simde/arm/neon/pmin.h	77;"	d
vpmin_s16	simde/arm/neon/pmin.h	78;"	d
vpmin_s32	simde/arm/neon/pmin.h	91;"	d
vpmin_s32	simde/arm/neon/pmin.h	92;"	d
vpmin_s8	simde/arm/neon/pmin.h	63;"	d
vpmin_s8	simde/arm/neon/pmin.h	64;"	d
vpmin_u16	simde/arm/neon/pmin.h	119;"	d
vpmin_u16	simde/arm/neon/pmin.h	120;"	d
vpmin_u32	simde/arm/neon/pmin.h	133;"	d
vpmin_u32	simde/arm/neon/pmin.h	134;"	d
vpmin_u8	simde/arm/neon/pmin.h	105;"	d
vpmin_u8	simde/arm/neon/pmin.h	106;"	d
vpminq_f32	simde/arm/neon/pmin.h	151;"	d
vpminq_f32	simde/arm/neon/pmin.h	152;"	d
vpminq_f64	simde/arm/neon/pmin.h	169;"	d
vpminq_f64	simde/arm/neon/pmin.h	170;"	d
vpminq_s16	simde/arm/neon/pmin.h	197;"	d
vpminq_s16	simde/arm/neon/pmin.h	198;"	d
vpminq_s32	simde/arm/neon/pmin.h	211;"	d
vpminq_s32	simde/arm/neon/pmin.h	212;"	d
vpminq_s8	simde/arm/neon/pmin.h	183;"	d
vpminq_s8	simde/arm/neon/pmin.h	184;"	d
vpminq_u16	simde/arm/neon/pmin.h	239;"	d
vpminq_u16	simde/arm/neon/pmin.h	240;"	d
vpminq_u32	simde/arm/neon/pmin.h	253;"	d
vpminq_u32	simde/arm/neon/pmin.h	254;"	d
vpminq_u8	simde/arm/neon/pmin.h	225;"	d
vpminq_u8	simde/arm/neon/pmin.h	226;"	d
vqabs_s16	simde/arm/neon/qabs.h	136;"	d
vqabs_s16	simde/arm/neon/qabs.h	137;"	d
vqabs_s32	simde/arm/neon/qabs.h	159;"	d
vqabs_s32	simde/arm/neon/qabs.h	160;"	d
vqabs_s64	simde/arm/neon/qabs.h	182;"	d
vqabs_s64	simde/arm/neon/qabs.h	183;"	d
vqabs_s8	simde/arm/neon/qabs.h	113;"	d
vqabs_s8	simde/arm/neon/qabs.h	114;"	d
vqabsb_s8	simde/arm/neon/qabs.h	48;"	d
vqabsb_s8	simde/arm/neon/qabs.h	49;"	d
vqabsd_s64	simde/arm/neon/qabs.h	90;"	d
vqabsd_s64	simde/arm/neon/qabs.h	91;"	d
vqabsh_s16	simde/arm/neon/qabs.h	62;"	d
vqabsh_s16	simde/arm/neon/qabs.h	63;"	d
vqabsq_s16	simde/arm/neon/qabs.h	228;"	d
vqabsq_s16	simde/arm/neon/qabs.h	229;"	d
vqabsq_s32	simde/arm/neon/qabs.h	251;"	d
vqabsq_s32	simde/arm/neon/qabs.h	252;"	d
vqabsq_s64	simde/arm/neon/qabs.h	274;"	d
vqabsq_s64	simde/arm/neon/qabs.h	275;"	d
vqabsq_s8	simde/arm/neon/qabs.h	205;"	d
vqabsq_s8	simde/arm/neon/qabs.h	206;"	d
vqabss_s32	simde/arm/neon/qabs.h	76;"	d
vqabss_s32	simde/arm/neon/qabs.h	77;"	d
vqadd_s16	simde/arm/neon/qadd.h	173;"	d
vqadd_s16	simde/arm/neon/qadd.h	174;"	d
vqadd_s32	simde/arm/neon/qadd.h	197;"	d
vqadd_s32	simde/arm/neon/qadd.h	198;"	d
vqadd_s64	simde/arm/neon/qadd.h	221;"	d
vqadd_s64	simde/arm/neon/qadd.h	222;"	d
vqadd_s8	simde/arm/neon/qadd.h	147;"	d
vqadd_s8	simde/arm/neon/qadd.h	148;"	d
vqadd_u16	simde/arm/neon/qadd.h	273;"	d
vqadd_u16	simde/arm/neon/qadd.h	274;"	d
vqadd_u32	simde/arm/neon/qadd.h	297;"	d
vqadd_u32	simde/arm/neon/qadd.h	298;"	d
vqadd_u64	simde/arm/neon/qadd.h	321;"	d
vqadd_u64	simde/arm/neon/qadd.h	322;"	d
vqadd_u8	simde/arm/neon/qadd.h	247;"	d
vqadd_u8	simde/arm/neon/qadd.h	248;"	d
vqaddb_s8	simde/arm/neon/qadd.h	51;"	d
vqaddb_s8	simde/arm/neon/qadd.h	52;"	d
vqaddb_u8	simde/arm/neon/qadd.h	91;"	d
vqaddb_u8	simde/arm/neon/qadd.h	92;"	d
vqaddd_s64	simde/arm/neon/qadd.h	81;"	d
vqaddd_s64	simde/arm/neon/qadd.h	82;"	d
vqaddd_u64	simde/arm/neon/qadd.h	121;"	d
vqaddd_u64	simde/arm/neon/qadd.h	122;"	d
vqaddh_s16	simde/arm/neon/qadd.h	61;"	d
vqaddh_s16	simde/arm/neon/qadd.h	62;"	d
vqaddh_u16	simde/arm/neon/qadd.h	101;"	d
vqaddh_u16	simde/arm/neon/qadd.h	102;"	d
vqaddq_s16	simde/arm/neon/qadd.h	381;"	d
vqaddq_s16	simde/arm/neon/qadd.h	382;"	d
vqaddq_s32	simde/arm/neon/qadd.h	409;"	d
vqaddq_s32	simde/arm/neon/qadd.h	410;"	d
vqaddq_s64	simde/arm/neon/qadd.h	433;"	d
vqaddq_s64	simde/arm/neon/qadd.h	434;"	d
vqaddq_s8	simde/arm/neon/qadd.h	351;"	d
vqaddq_s8	simde/arm/neon/qadd.h	352;"	d
vqaddq_u16	simde/arm/neon/qadd.h	493;"	d
vqaddq_u16	simde/arm/neon/qadd.h	494;"	d
vqaddq_u32	simde/arm/neon/qadd.h	519;"	d
vqaddq_u32	simde/arm/neon/qadd.h	520;"	d
vqaddq_u64	simde/arm/neon/qadd.h	546;"	d
vqaddq_u64	simde/arm/neon/qadd.h	547;"	d
vqaddq_u8	simde/arm/neon/qadd.h	463;"	d
vqaddq_u8	simde/arm/neon/qadd.h	464;"	d
vqadds_s32	simde/arm/neon/qadd.h	71;"	d
vqadds_s32	simde/arm/neon/qadd.h	72;"	d
vqadds_u32	simde/arm/neon/qadd.h	111;"	d
vqadds_u32	simde/arm/neon/qadd.h	112;"	d
vqdmulh_s16	simde/arm/neon/qdmulh.h	63;"	d
vqdmulh_s16	simde/arm/neon/qdmulh.h	64;"	d
vqdmulh_s32	simde/arm/neon/qdmulh.h	88;"	d
vqdmulh_s32	simde/arm/neon/qdmulh.h	89;"	d
vqdmulhq_s16	simde/arm/neon/qdmulh.h	103;"	d
vqdmulhq_s16	simde/arm/neon/qdmulh.h	104;"	d
vqdmulhq_s32	simde/arm/neon/qdmulh.h	118;"	d
vqdmulhq_s32	simde/arm/neon/qdmulh.h	119;"	d
vqdmull_s16	simde/arm/neon/qdmull.h	94;"	d
vqdmull_s16	simde/arm/neon/qdmull.h	95;"	d
vqdmull_s32	simde/arm/neon/qdmull.h	118;"	d
vqdmull_s32	simde/arm/neon/qdmull.h	119;"	d
vqdmullh_s16	simde/arm/neon/qdmull.h	55;"	d
vqdmullh_s16	simde/arm/neon/qdmull.h	56;"	d
vqdmulls_s16	simde/arm/neon/qdmull.h	70;"	d
vqdmulls_s16	simde/arm/neon/qdmull.h	71;"	d
vqmovn_high_s16	simde/arm/neon/qmovn_high.h	50;"	d
vqmovn_high_s16	simde/arm/neon/qmovn_high.h	51;"	d
vqmovn_high_s32	simde/arm/neon/qmovn_high.h	64;"	d
vqmovn_high_s32	simde/arm/neon/qmovn_high.h	65;"	d
vqmovn_high_s64	simde/arm/neon/qmovn_high.h	78;"	d
vqmovn_high_s64	simde/arm/neon/qmovn_high.h	79;"	d
vqmovn_high_u16	simde/arm/neon/qmovn_high.h	92;"	d
vqmovn_high_u16	simde/arm/neon/qmovn_high.h	93;"	d
vqmovn_high_u32	simde/arm/neon/qmovn_high.h	106;"	d
vqmovn_high_u32	simde/arm/neon/qmovn_high.h	107;"	d
vqmovn_high_u64	simde/arm/neon/qmovn_high.h	120;"	d
vqmovn_high_u64	simde/arm/neon/qmovn_high.h	121;"	d
vqmovn_s16	simde/arm/neon/qmovn.h	146;"	d
vqmovn_s16	simde/arm/neon/qmovn.h	147;"	d
vqmovn_s32	simde/arm/neon/qmovn.h	170;"	d
vqmovn_s32	simde/arm/neon/qmovn.h	171;"	d
vqmovn_s64	simde/arm/neon/qmovn.h	194;"	d
vqmovn_s64	simde/arm/neon/qmovn.h	195;"	d
vqmovn_u16	simde/arm/neon/qmovn.h	218;"	d
vqmovn_u16	simde/arm/neon/qmovn.h	219;"	d
vqmovn_u32	simde/arm/neon/qmovn.h	242;"	d
vqmovn_u32	simde/arm/neon/qmovn.h	243;"	d
vqmovn_u64	simde/arm/neon/qmovn.h	266;"	d
vqmovn_u64	simde/arm/neon/qmovn.h	267;"	d
vqmovnd_s64	simde/arm/neon/qmovn.h	79;"	d
vqmovnd_s64	simde/arm/neon/qmovn.h	80;"	d
vqmovnd_u64	simde/arm/neon/qmovn.h	122;"	d
vqmovnd_u64	simde/arm/neon/qmovn.h	123;"	d
vqmovnh_s16	simde/arm/neon/qmovn.h	51;"	d
vqmovnh_s16	simde/arm/neon/qmovn.h	52;"	d
vqmovnh_u16	simde/arm/neon/qmovn.h	93;"	d
vqmovnh_u16	simde/arm/neon/qmovn.h	94;"	d
vqmovns_s32	simde/arm/neon/qmovn.h	65;"	d
vqmovns_s32	simde/arm/neon/qmovn.h	66;"	d
vqmovns_u32	simde/arm/neon/qmovn.h	107;"	d
vqmovns_u32	simde/arm/neon/qmovn.h	108;"	d
vqmovun_s16	simde/arm/neon/qmovun.h	103;"	d
vqmovun_s16	simde/arm/neon/qmovun.h	104;"	d
vqmovun_s32	simde/arm/neon/qmovun.h	127;"	d
vqmovun_s32	simde/arm/neon/qmovun.h	128;"	d
vqmovun_s64	simde/arm/neon/qmovun.h	151;"	d
vqmovun_s64	simde/arm/neon/qmovun.h	152;"	d
vqmovund_s64	simde/arm/neon/qmovun.h	79;"	d
vqmovund_s64	simde/arm/neon/qmovun.h	80;"	d
vqmovunh_s16	simde/arm/neon/qmovun.h	51;"	d
vqmovunh_s16	simde/arm/neon/qmovun.h	52;"	d
vqmovuns_s32	simde/arm/neon/qmovun.h	65;"	d
vqmovuns_s32	simde/arm/neon/qmovun.h	66;"	d
vqneg_s16	simde/arm/neon/qneg.h	144;"	d
vqneg_s16	simde/arm/neon/qneg.h	145;"	d
vqneg_s32	simde/arm/neon/qneg.h	169;"	d
vqneg_s32	simde/arm/neon/qneg.h	170;"	d
vqneg_s64	simde/arm/neon/qneg.h	194;"	d
vqneg_s64	simde/arm/neon/qneg.h	195;"	d
vqneg_s8	simde/arm/neon/qneg.h	119;"	d
vqneg_s8	simde/arm/neon/qneg.h	120;"	d
vqnegb_s8	simde/arm/neon/qneg.h	52;"	d
vqnegb_s8	simde/arm/neon/qneg.h	53;"	d
vqnegd_s64	simde/arm/neon/qneg.h	94;"	d
vqnegd_s64	simde/arm/neon/qneg.h	95;"	d
vqnegh_s16	simde/arm/neon/qneg.h	66;"	d
vqnegh_s16	simde/arm/neon/qneg.h	67;"	d
vqnegq_s16	simde/arm/neon/qneg.h	244;"	d
vqnegq_s16	simde/arm/neon/qneg.h	245;"	d
vqnegq_s32	simde/arm/neon/qneg.h	269;"	d
vqnegq_s32	simde/arm/neon/qneg.h	270;"	d
vqnegq_s64	simde/arm/neon/qneg.h	294;"	d
vqnegq_s64	simde/arm/neon/qneg.h	295;"	d
vqnegq_s8	simde/arm/neon/qneg.h	219;"	d
vqnegq_s8	simde/arm/neon/qneg.h	220;"	d
vqnegs_s32	simde/arm/neon/qneg.h	80;"	d
vqnegs_s32	simde/arm/neon/qneg.h	81;"	d
vqrdmulh_n_s16	simde/arm/neon/qrdmulh_n.h	60;"	d
vqrdmulh_n_s16	simde/arm/neon/qrdmulh_n.h	61;"	d
vqrdmulh_n_s32	simde/arm/neon/qrdmulh_n.h	83;"	d
vqrdmulh_n_s32	simde/arm/neon/qrdmulh_n.h	84;"	d
vqrdmulh_s16	simde/arm/neon/qrdmulh.h	86;"	d
vqrdmulh_s16	simde/arm/neon/qrdmulh.h	87;"	d
vqrdmulh_s32	simde/arm/neon/qrdmulh.h	110;"	d
vqrdmulh_s32	simde/arm/neon/qrdmulh.h	111;"	d
vqrdmulhh_s16	simde/arm/neon/qrdmulh.h	47;"	d
vqrdmulhh_s16	simde/arm/neon/qrdmulh.h	48;"	d
vqrdmulhq_n_s16	simde/arm/neon/qrdmulh_n.h	106;"	d
vqrdmulhq_n_s16	simde/arm/neon/qrdmulh_n.h	107;"	d
vqrdmulhq_n_s32	simde/arm/neon/qrdmulh_n.h	129;"	d
vqrdmulhq_n_s32	simde/arm/neon/qrdmulh_n.h	130;"	d
vqrdmulhq_s16	simde/arm/neon/qrdmulh.h	134;"	d
vqrdmulhq_s16	simde/arm/neon/qrdmulh.h	135;"	d
vqrdmulhq_s32	simde/arm/neon/qrdmulh.h	158;"	d
vqrdmulhq_s32	simde/arm/neon/qrdmulh.h	159;"	d
vqrdmulhs_s32	simde/arm/neon/qrdmulh.h	61;"	d
vqrdmulhs_s32	simde/arm/neon/qrdmulh.h	62;"	d
vqshl_s16	simde/arm/neon/qshl.h	381;"	d
vqshl_s16	simde/arm/neon/qshl.h	382;"	d
vqshl_s32	simde/arm/neon/qshl.h	405;"	d
vqshl_s32	simde/arm/neon/qshl.h	406;"	d
vqshl_s64	simde/arm/neon/qshl.h	429;"	d
vqshl_s64	simde/arm/neon/qshl.h	430;"	d
vqshl_s8	simde/arm/neon/qshl.h	357;"	d
vqshl_s8	simde/arm/neon/qshl.h	358;"	d
vqshl_u16	simde/arm/neon/qshl.h	479;"	d
vqshl_u16	simde/arm/neon/qshl.h	480;"	d
vqshl_u32	simde/arm/neon/qshl.h	504;"	d
vqshl_u32	simde/arm/neon/qshl.h	505;"	d
vqshl_u64	simde/arm/neon/qshl.h	529;"	d
vqshl_u64	simde/arm/neon/qshl.h	530;"	d
vqshl_u8	simde/arm/neon/qshl.h	454;"	d
vqshl_u8	simde/arm/neon/qshl.h	455;"	d
vqshlb_s8	simde/arm/neon/qshl.h	66;"	d
vqshlb_s8	simde/arm/neon/qshl.h	67;"	d
vqshlb_u8	simde/arm/neon/qshl.h	210;"	d
vqshlb_u8	simde/arm/neon/qshl.h	211;"	d
vqshld_s64	simde/arm/neon/qshl.h	168;"	d
vqshld_s64	simde/arm/neon/qshl.h	169;"	d
vqshld_u64	simde/arm/neon/qshl.h	334;"	d
vqshldb_u64	simde/arm/neon/qshl.h	333;"	d
vqshlh_s16	simde/arm/neon/qshl.h	100;"	d
vqshlh_s16	simde/arm/neon/qshl.h	101;"	d
vqshlh_u16	simde/arm/neon/qshl.h	251;"	d
vqshlh_u16	simde/arm/neon/qshl.h	252;"	d
vqshlq_s16	simde/arm/neon/qshl.h	577;"	d
vqshlq_s16	simde/arm/neon/qshl.h	578;"	d
vqshlq_s32	simde/arm/neon/qshl.h	601;"	d
vqshlq_s32	simde/arm/neon/qshl.h	602;"	d
vqshlq_s64	simde/arm/neon/qshl.h	625;"	d
vqshlq_s64	simde/arm/neon/qshl.h	626;"	d
vqshlq_s8	simde/arm/neon/qshl.h	553;"	d
vqshlq_s8	simde/arm/neon/qshl.h	554;"	d
vqshlq_u16	simde/arm/neon/qshl.h	675;"	d
vqshlq_u16	simde/arm/neon/qshl.h	676;"	d
vqshlq_u32	simde/arm/neon/qshl.h	700;"	d
vqshlq_u32	simde/arm/neon/qshl.h	701;"	d
vqshlq_u64	simde/arm/neon/qshl.h	725;"	d
vqshlq_u64	simde/arm/neon/qshl.h	726;"	d
vqshlq_u8	simde/arm/neon/qshl.h	650;"	d
vqshlq_u8	simde/arm/neon/qshl.h	651;"	d
vqshls_s32	simde/arm/neon/qshl.h	134;"	d
vqshls_s32	simde/arm/neon/qshl.h	135;"	d
vqshls_u32	simde/arm/neon/qshl.h	292;"	d
vqshls_u32	simde/arm/neon/qshl.h	293;"	d
vqsub_s16	simde/arm/neon/qsub.h	172;"	d
vqsub_s16	simde/arm/neon/qsub.h	173;"	d
vqsub_s32	simde/arm/neon/qsub.h	196;"	d
vqsub_s32	simde/arm/neon/qsub.h	197;"	d
vqsub_s64	simde/arm/neon/qsub.h	220;"	d
vqsub_s64	simde/arm/neon/qsub.h	221;"	d
vqsub_s8	simde/arm/neon/qsub.h	146;"	d
vqsub_s8	simde/arm/neon/qsub.h	147;"	d
vqsub_u16	simde/arm/neon/qsub.h	272;"	d
vqsub_u16	simde/arm/neon/qsub.h	273;"	d
vqsub_u32	simde/arm/neon/qsub.h	296;"	d
vqsub_u32	simde/arm/neon/qsub.h	297;"	d
vqsub_u64	simde/arm/neon/qsub.h	320;"	d
vqsub_u64	simde/arm/neon/qsub.h	321;"	d
vqsub_u8	simde/arm/neon/qsub.h	246;"	d
vqsub_u8	simde/arm/neon/qsub.h	247;"	d
vqsubb_s8	simde/arm/neon/qsub.h	50;"	d
vqsubb_s8	simde/arm/neon/qsub.h	51;"	d
vqsubb_u8	simde/arm/neon/qsub.h	90;"	d
vqsubb_u8	simde/arm/neon/qsub.h	91;"	d
vqsubd_s64	simde/arm/neon/qsub.h	80;"	d
vqsubd_s64	simde/arm/neon/qsub.h	81;"	d
vqsubd_u64	simde/arm/neon/qsub.h	120;"	d
vqsubd_u64	simde/arm/neon/qsub.h	121;"	d
vqsubh_s16	simde/arm/neon/qsub.h	60;"	d
vqsubh_s16	simde/arm/neon/qsub.h	61;"	d
vqsubh_u16	simde/arm/neon/qsub.h	100;"	d
vqsubh_u16	simde/arm/neon/qsub.h	101;"	d
vqsubq_s16	simde/arm/neon/qsub.h	380;"	d
vqsubq_s16	simde/arm/neon/qsub.h	381;"	d
vqsubq_s32	simde/arm/neon/qsub.h	408;"	d
vqsubq_s32	simde/arm/neon/qsub.h	409;"	d
vqsubq_s64	simde/arm/neon/qsub.h	432;"	d
vqsubq_s64	simde/arm/neon/qsub.h	433;"	d
vqsubq_s8	simde/arm/neon/qsub.h	350;"	d
vqsubq_s8	simde/arm/neon/qsub.h	351;"	d
vqsubq_u16	simde/arm/neon/qsub.h	492;"	d
vqsubq_u16	simde/arm/neon/qsub.h	493;"	d
vqsubq_u32	simde/arm/neon/qsub.h	518;"	d
vqsubq_u32	simde/arm/neon/qsub.h	519;"	d
vqsubq_u64	simde/arm/neon/qsub.h	542;"	d
vqsubq_u64	simde/arm/neon/qsub.h	543;"	d
vqsubq_u8	simde/arm/neon/qsub.h	462;"	d
vqsubq_u8	simde/arm/neon/qsub.h	463;"	d
vqsubs_s32	simde/arm/neon/qsub.h	70;"	d
vqsubs_s32	simde/arm/neon/qsub.h	71;"	d
vqsubs_u32	simde/arm/neon/qsub.h	110;"	d
vqsubs_u32	simde/arm/neon/qsub.h	111;"	d
vqtbl1_s8	simde/arm/neon/qtbl.h	76;"	d
vqtbl1_s8	simde/arm/neon/qtbl.h	77;"	d
vqtbl1_u8	simde/arm/neon/qtbl.h	62;"	d
vqtbl1_u8	simde/arm/neon/qtbl.h	63;"	d
vqtbl1q_s8	simde/arm/neon/qtbl.h	275;"	d
vqtbl1q_s8	simde/arm/neon/qtbl.h	276;"	d
vqtbl1q_u8	simde/arm/neon/qtbl.h	261;"	d
vqtbl1q_u8	simde/arm/neon/qtbl.h	262;"	d
vqtbl2_s8	simde/arm/neon/qtbl.h	125;"	d
vqtbl2_s8	simde/arm/neon/qtbl.h	126;"	d
vqtbl2_u8	simde/arm/neon/qtbl.h	109;"	d
vqtbl2_u8	simde/arm/neon/qtbl.h	110;"	d
vqtbl2q_s8	simde/arm/neon/qtbl.h	328;"	d
vqtbl2q_s8	simde/arm/neon/qtbl.h	329;"	d
vqtbl2q_u8	simde/arm/neon/qtbl.h	312;"	d
vqtbl2q_u8	simde/arm/neon/qtbl.h	313;"	d
vqtbl3_s8	simde/arm/neon/qtbl.h	175;"	d
vqtbl3_s8	simde/arm/neon/qtbl.h	176;"	d
vqtbl3_u8	simde/arm/neon/qtbl.h	159;"	d
vqtbl3_u8	simde/arm/neon/qtbl.h	160;"	d
vqtbl3q_s8	simde/arm/neon/qtbl.h	385;"	d
vqtbl3q_s8	simde/arm/neon/qtbl.h	386;"	d
vqtbl3q_u8	simde/arm/neon/qtbl.h	369;"	d
vqtbl3q_u8	simde/arm/neon/qtbl.h	370;"	d
vqtbl4_s8	simde/arm/neon/qtbl.h	228;"	d
vqtbl4_s8	simde/arm/neon/qtbl.h	229;"	d
vqtbl4_u8	simde/arm/neon/qtbl.h	212;"	d
vqtbl4_u8	simde/arm/neon/qtbl.h	213;"	d
vqtbl4q_s8	simde/arm/neon/qtbl.h	446;"	d
vqtbl4q_s8	simde/arm/neon/qtbl.h	447;"	d
vqtbl4q_u8	simde/arm/neon/qtbl.h	430;"	d
vqtbl4q_u8	simde/arm/neon/qtbl.h	431;"	d
vqtbx1_s8	simde/arm/neon/qtbx.h	79;"	d
vqtbx1_s8	simde/arm/neon/qtbx.h	80;"	d
vqtbx1_u8	simde/arm/neon/qtbx.h	65;"	d
vqtbx1_u8	simde/arm/neon/qtbx.h	66;"	d
vqtbx1q_s8	simde/arm/neon/qtbx.h	284;"	d
vqtbx1q_s8	simde/arm/neon/qtbx.h	285;"	d
vqtbx1q_u8	simde/arm/neon/qtbx.h	270;"	d
vqtbx1q_u8	simde/arm/neon/qtbx.h	271;"	d
vqtbx2_s8	simde/arm/neon/qtbx.h	130;"	d
vqtbx2_s8	simde/arm/neon/qtbx.h	131;"	d
vqtbx2_u8	simde/arm/neon/qtbx.h	114;"	d
vqtbx2_u8	simde/arm/neon/qtbx.h	115;"	d
vqtbx2q_s8	simde/arm/neon/qtbx.h	339;"	d
vqtbx2q_s8	simde/arm/neon/qtbx.h	340;"	d
vqtbx2q_u8	simde/arm/neon/qtbx.h	323;"	d
vqtbx2q_u8	simde/arm/neon/qtbx.h	324;"	d
vqtbx3_s8	simde/arm/neon/qtbx.h	181;"	d
vqtbx3_s8	simde/arm/neon/qtbx.h	182;"	d
vqtbx3_u8	simde/arm/neon/qtbx.h	165;"	d
vqtbx3_u8	simde/arm/neon/qtbx.h	166;"	d
vqtbx3q_s8	simde/arm/neon/qtbx.h	398;"	d
vqtbx3q_s8	simde/arm/neon/qtbx.h	399;"	d
vqtbx3q_u8	simde/arm/neon/qtbx.h	382;"	d
vqtbx3q_u8	simde/arm/neon/qtbx.h	383;"	d
vqtbx4_s8	simde/arm/neon/qtbx.h	235;"	d
vqtbx4_s8	simde/arm/neon/qtbx.h	236;"	d
vqtbx4_u8	simde/arm/neon/qtbx.h	219;"	d
vqtbx4_u8	simde/arm/neon/qtbx.h	220;"	d
vqtbx4q_s8	simde/arm/neon/qtbx.h	461;"	d
vqtbx4q_s8	simde/arm/neon/qtbx.h	462;"	d
vqtbx4q_u8	simde/arm/neon/qtbx.h	445;"	d
vqtbx4q_u8	simde/arm/neon/qtbx.h	446;"	d
vrbit_s8	simde/arm/neon/rbit.h	92;"	d
vrbit_s8	simde/arm/neon/rbit.h	93;"	d
vrbit_u8	simde/arm/neon/rbit.h	78;"	d
vrbit_u8	simde/arm/neon/rbit.h	79;"	d
vrbitq_s8	simde/arm/neon/rbit.h	158;"	d
vrbitq_s8	simde/arm/neon/rbit.h	159;"	d
vrbitq_u8	simde/arm/neon/rbit.h	144;"	d
vrbitq_u8	simde/arm/neon/rbit.h	145;"	d
vreinterpret_f32_f64	simde/arm/neon/reinterpret.h	2635;"	d
vreinterpret_f32_f64	simde/arm/neon/reinterpret.h	2636;"	d
vreinterpret_f32_s16	simde/arm/neon/reinterpret.h	2516;"	d
vreinterpret_f32_s16	simde/arm/neon/reinterpret.h	2517;"	d
vreinterpret_f32_s32	simde/arm/neon/reinterpret.h	2533;"	d
vreinterpret_f32_s32	simde/arm/neon/reinterpret.h	2534;"	d
vreinterpret_f32_s64	simde/arm/neon/reinterpret.h	2550;"	d
vreinterpret_f32_s64	simde/arm/neon/reinterpret.h	2551;"	d
vreinterpret_f32_s8	simde/arm/neon/reinterpret.h	2499;"	d
vreinterpret_f32_s8	simde/arm/neon/reinterpret.h	2500;"	d
vreinterpret_f32_u16	simde/arm/neon/reinterpret.h	2584;"	d
vreinterpret_f32_u16	simde/arm/neon/reinterpret.h	2585;"	d
vreinterpret_f32_u32	simde/arm/neon/reinterpret.h	2601;"	d
vreinterpret_f32_u32	simde/arm/neon/reinterpret.h	2602;"	d
vreinterpret_f32_u64	simde/arm/neon/reinterpret.h	2618;"	d
vreinterpret_f32_u64	simde/arm/neon/reinterpret.h	2619;"	d
vreinterpret_f32_u8	simde/arm/neon/reinterpret.h	2567;"	d
vreinterpret_f32_u8	simde/arm/neon/reinterpret.h	2568;"	d
vreinterpret_f64_f32	simde/arm/neon/reinterpret.h	2941;"	d
vreinterpret_f64_f32	simde/arm/neon/reinterpret.h	2942;"	d
vreinterpret_f64_s16	simde/arm/neon/reinterpret.h	2822;"	d
vreinterpret_f64_s16	simde/arm/neon/reinterpret.h	2823;"	d
vreinterpret_f64_s32	simde/arm/neon/reinterpret.h	2839;"	d
vreinterpret_f64_s32	simde/arm/neon/reinterpret.h	2840;"	d
vreinterpret_f64_s64	simde/arm/neon/reinterpret.h	2856;"	d
vreinterpret_f64_s64	simde/arm/neon/reinterpret.h	2857;"	d
vreinterpret_f64_s8	simde/arm/neon/reinterpret.h	2805;"	d
vreinterpret_f64_s8	simde/arm/neon/reinterpret.h	2806;"	d
vreinterpret_f64_u16	simde/arm/neon/reinterpret.h	2890;"	d
vreinterpret_f64_u16	simde/arm/neon/reinterpret.h	2891;"	d
vreinterpret_f64_u32	simde/arm/neon/reinterpret.h	2907;"	d
vreinterpret_f64_u32	simde/arm/neon/reinterpret.h	2908;"	d
vreinterpret_f64_u64	simde/arm/neon/reinterpret.h	2924;"	d
vreinterpret_f64_u64	simde/arm/neon/reinterpret.h	2925;"	d
vreinterpret_f64_u8	simde/arm/neon/reinterpret.h	2873;"	d
vreinterpret_f64_u8	simde/arm/neon/reinterpret.h	2874;"	d
vreinterpret_s16_f32	simde/arm/neon/reinterpret.h	476;"	d
vreinterpret_s16_f32	simde/arm/neon/reinterpret.h	477;"	d
vreinterpret_s16_f64	simde/arm/neon/reinterpret.h	493;"	d
vreinterpret_s16_f64	simde/arm/neon/reinterpret.h	494;"	d
vreinterpret_s16_s32	simde/arm/neon/reinterpret.h	374;"	d
vreinterpret_s16_s32	simde/arm/neon/reinterpret.h	375;"	d
vreinterpret_s16_s64	simde/arm/neon/reinterpret.h	391;"	d
vreinterpret_s16_s64	simde/arm/neon/reinterpret.h	392;"	d
vreinterpret_s16_s8	simde/arm/neon/reinterpret.h	357;"	d
vreinterpret_s16_s8	simde/arm/neon/reinterpret.h	358;"	d
vreinterpret_s16_u16	simde/arm/neon/reinterpret.h	425;"	d
vreinterpret_s16_u16	simde/arm/neon/reinterpret.h	426;"	d
vreinterpret_s16_u32	simde/arm/neon/reinterpret.h	442;"	d
vreinterpret_s16_u32	simde/arm/neon/reinterpret.h	443;"	d
vreinterpret_s16_u64	simde/arm/neon/reinterpret.h	459;"	d
vreinterpret_s16_u64	simde/arm/neon/reinterpret.h	460;"	d
vreinterpret_s16_u8	simde/arm/neon/reinterpret.h	408;"	d
vreinterpret_s16_u8	simde/arm/neon/reinterpret.h	409;"	d
vreinterpret_s32_f32	simde/arm/neon/reinterpret.h	782;"	d
vreinterpret_s32_f32	simde/arm/neon/reinterpret.h	783;"	d
vreinterpret_s32_f64	simde/arm/neon/reinterpret.h	799;"	d
vreinterpret_s32_f64	simde/arm/neon/reinterpret.h	800;"	d
vreinterpret_s32_s16	simde/arm/neon/reinterpret.h	680;"	d
vreinterpret_s32_s16	simde/arm/neon/reinterpret.h	681;"	d
vreinterpret_s32_s64	simde/arm/neon/reinterpret.h	697;"	d
vreinterpret_s32_s64	simde/arm/neon/reinterpret.h	698;"	d
vreinterpret_s32_s8	simde/arm/neon/reinterpret.h	663;"	d
vreinterpret_s32_s8	simde/arm/neon/reinterpret.h	664;"	d
vreinterpret_s32_u16	simde/arm/neon/reinterpret.h	731;"	d
vreinterpret_s32_u16	simde/arm/neon/reinterpret.h	732;"	d
vreinterpret_s32_u32	simde/arm/neon/reinterpret.h	748;"	d
vreinterpret_s32_u32	simde/arm/neon/reinterpret.h	749;"	d
vreinterpret_s32_u64	simde/arm/neon/reinterpret.h	765;"	d
vreinterpret_s32_u64	simde/arm/neon/reinterpret.h	766;"	d
vreinterpret_s32_u8	simde/arm/neon/reinterpret.h	714;"	d
vreinterpret_s32_u8	simde/arm/neon/reinterpret.h	715;"	d
vreinterpret_s64_f32	simde/arm/neon/reinterpret.h	1088;"	d
vreinterpret_s64_f32	simde/arm/neon/reinterpret.h	1089;"	d
vreinterpret_s64_f64	simde/arm/neon/reinterpret.h	1105;"	d
vreinterpret_s64_f64	simde/arm/neon/reinterpret.h	1106;"	d
vreinterpret_s64_s16	simde/arm/neon/reinterpret.h	986;"	d
vreinterpret_s64_s16	simde/arm/neon/reinterpret.h	987;"	d
vreinterpret_s64_s32	simde/arm/neon/reinterpret.h	1003;"	d
vreinterpret_s64_s32	simde/arm/neon/reinterpret.h	1004;"	d
vreinterpret_s64_s8	simde/arm/neon/reinterpret.h	969;"	d
vreinterpret_s64_s8	simde/arm/neon/reinterpret.h	970;"	d
vreinterpret_s64_u16	simde/arm/neon/reinterpret.h	1037;"	d
vreinterpret_s64_u16	simde/arm/neon/reinterpret.h	1038;"	d
vreinterpret_s64_u32	simde/arm/neon/reinterpret.h	1054;"	d
vreinterpret_s64_u32	simde/arm/neon/reinterpret.h	1055;"	d
vreinterpret_s64_u64	simde/arm/neon/reinterpret.h	1071;"	d
vreinterpret_s64_u64	simde/arm/neon/reinterpret.h	1072;"	d
vreinterpret_s64_u8	simde/arm/neon/reinterpret.h	1020;"	d
vreinterpret_s64_u8	simde/arm/neon/reinterpret.h	1021;"	d
vreinterpret_s8_f32	simde/arm/neon/reinterpret.h	170;"	d
vreinterpret_s8_f32	simde/arm/neon/reinterpret.h	171;"	d
vreinterpret_s8_f64	simde/arm/neon/reinterpret.h	187;"	d
vreinterpret_s8_f64	simde/arm/neon/reinterpret.h	188;"	d
vreinterpret_s8_s16	simde/arm/neon/reinterpret.h	51;"	d
vreinterpret_s8_s16	simde/arm/neon/reinterpret.h	52;"	d
vreinterpret_s8_s32	simde/arm/neon/reinterpret.h	68;"	d
vreinterpret_s8_s32	simde/arm/neon/reinterpret.h	69;"	d
vreinterpret_s8_s64	simde/arm/neon/reinterpret.h	85;"	d
vreinterpret_s8_s64	simde/arm/neon/reinterpret.h	86;"	d
vreinterpret_s8_u16	simde/arm/neon/reinterpret.h	119;"	d
vreinterpret_s8_u16	simde/arm/neon/reinterpret.h	120;"	d
vreinterpret_s8_u32	simde/arm/neon/reinterpret.h	136;"	d
vreinterpret_s8_u32	simde/arm/neon/reinterpret.h	137;"	d
vreinterpret_s8_u64	simde/arm/neon/reinterpret.h	153;"	d
vreinterpret_s8_u64	simde/arm/neon/reinterpret.h	154;"	d
vreinterpret_s8_u8	simde/arm/neon/reinterpret.h	102;"	d
vreinterpret_s8_u8	simde/arm/neon/reinterpret.h	103;"	d
vreinterpret_u16_f32	simde/arm/neon/reinterpret.h	1700;"	d
vreinterpret_u16_f32	simde/arm/neon/reinterpret.h	1701;"	d
vreinterpret_u16_f64	simde/arm/neon/reinterpret.h	1717;"	d
vreinterpret_u16_f64	simde/arm/neon/reinterpret.h	1718;"	d
vreinterpret_u16_s16	simde/arm/neon/reinterpret.h	1598;"	d
vreinterpret_u16_s16	simde/arm/neon/reinterpret.h	1599;"	d
vreinterpret_u16_s32	simde/arm/neon/reinterpret.h	1615;"	d
vreinterpret_u16_s32	simde/arm/neon/reinterpret.h	1616;"	d
vreinterpret_u16_s64	simde/arm/neon/reinterpret.h	1632;"	d
vreinterpret_u16_s64	simde/arm/neon/reinterpret.h	1633;"	d
vreinterpret_u16_s8	simde/arm/neon/reinterpret.h	1581;"	d
vreinterpret_u16_s8	simde/arm/neon/reinterpret.h	1582;"	d
vreinterpret_u16_u32	simde/arm/neon/reinterpret.h	1666;"	d
vreinterpret_u16_u32	simde/arm/neon/reinterpret.h	1667;"	d
vreinterpret_u16_u64	simde/arm/neon/reinterpret.h	1683;"	d
vreinterpret_u16_u64	simde/arm/neon/reinterpret.h	1684;"	d
vreinterpret_u16_u8	simde/arm/neon/reinterpret.h	1649;"	d
vreinterpret_u16_u8	simde/arm/neon/reinterpret.h	1650;"	d
vreinterpret_u32_f32	simde/arm/neon/reinterpret.h	2006;"	d
vreinterpret_u32_f32	simde/arm/neon/reinterpret.h	2007;"	d
vreinterpret_u32_f64	simde/arm/neon/reinterpret.h	2023;"	d
vreinterpret_u32_f64	simde/arm/neon/reinterpret.h	2024;"	d
vreinterpret_u32_s16	simde/arm/neon/reinterpret.h	1904;"	d
vreinterpret_u32_s16	simde/arm/neon/reinterpret.h	1905;"	d
vreinterpret_u32_s32	simde/arm/neon/reinterpret.h	1921;"	d
vreinterpret_u32_s32	simde/arm/neon/reinterpret.h	1922;"	d
vreinterpret_u32_s64	simde/arm/neon/reinterpret.h	1938;"	d
vreinterpret_u32_s64	simde/arm/neon/reinterpret.h	1939;"	d
vreinterpret_u32_s8	simde/arm/neon/reinterpret.h	1887;"	d
vreinterpret_u32_s8	simde/arm/neon/reinterpret.h	1888;"	d
vreinterpret_u32_u16	simde/arm/neon/reinterpret.h	1972;"	d
vreinterpret_u32_u16	simde/arm/neon/reinterpret.h	1973;"	d
vreinterpret_u32_u64	simde/arm/neon/reinterpret.h	1989;"	d
vreinterpret_u32_u64	simde/arm/neon/reinterpret.h	1990;"	d
vreinterpret_u32_u8	simde/arm/neon/reinterpret.h	1955;"	d
vreinterpret_u32_u8	simde/arm/neon/reinterpret.h	1956;"	d
vreinterpret_u64_f32	simde/arm/neon/reinterpret.h	2312;"	d
vreinterpret_u64_f32	simde/arm/neon/reinterpret.h	2313;"	d
vreinterpret_u64_f64	simde/arm/neon/reinterpret.h	2329;"	d
vreinterpret_u64_f64	simde/arm/neon/reinterpret.h	2330;"	d
vreinterpret_u64_s16	simde/arm/neon/reinterpret.h	2210;"	d
vreinterpret_u64_s16	simde/arm/neon/reinterpret.h	2211;"	d
vreinterpret_u64_s32	simde/arm/neon/reinterpret.h	2227;"	d
vreinterpret_u64_s32	simde/arm/neon/reinterpret.h	2228;"	d
vreinterpret_u64_s64	simde/arm/neon/reinterpret.h	2244;"	d
vreinterpret_u64_s64	simde/arm/neon/reinterpret.h	2245;"	d
vreinterpret_u64_s8	simde/arm/neon/reinterpret.h	2193;"	d
vreinterpret_u64_s8	simde/arm/neon/reinterpret.h	2194;"	d
vreinterpret_u64_u16	simde/arm/neon/reinterpret.h	2278;"	d
vreinterpret_u64_u16	simde/arm/neon/reinterpret.h	2279;"	d
vreinterpret_u64_u32	simde/arm/neon/reinterpret.h	2295;"	d
vreinterpret_u64_u32	simde/arm/neon/reinterpret.h	2296;"	d
vreinterpret_u64_u8	simde/arm/neon/reinterpret.h	2261;"	d
vreinterpret_u64_u8	simde/arm/neon/reinterpret.h	2262;"	d
vreinterpret_u8_f32	simde/arm/neon/reinterpret.h	1394;"	d
vreinterpret_u8_f32	simde/arm/neon/reinterpret.h	1395;"	d
vreinterpret_u8_f64	simde/arm/neon/reinterpret.h	1411;"	d
vreinterpret_u8_f64	simde/arm/neon/reinterpret.h	1412;"	d
vreinterpret_u8_s16	simde/arm/neon/reinterpret.h	1292;"	d
vreinterpret_u8_s16	simde/arm/neon/reinterpret.h	1293;"	d
vreinterpret_u8_s32	simde/arm/neon/reinterpret.h	1309;"	d
vreinterpret_u8_s32	simde/arm/neon/reinterpret.h	1310;"	d
vreinterpret_u8_s64	simde/arm/neon/reinterpret.h	1326;"	d
vreinterpret_u8_s64	simde/arm/neon/reinterpret.h	1327;"	d
vreinterpret_u8_s8	simde/arm/neon/reinterpret.h	1275;"	d
vreinterpret_u8_s8	simde/arm/neon/reinterpret.h	1276;"	d
vreinterpret_u8_u16	simde/arm/neon/reinterpret.h	1343;"	d
vreinterpret_u8_u16	simde/arm/neon/reinterpret.h	1344;"	d
vreinterpret_u8_u32	simde/arm/neon/reinterpret.h	1360;"	d
vreinterpret_u8_u32	simde/arm/neon/reinterpret.h	1361;"	d
vreinterpret_u8_u64	simde/arm/neon/reinterpret.h	1377;"	d
vreinterpret_u8_u64	simde/arm/neon/reinterpret.h	1378;"	d
vreinterpretq_f32_f64	simde/arm/neon/reinterpret.h	2788;"	d
vreinterpretq_f32_f64	simde/arm/neon/reinterpret.h	2789;"	d
vreinterpretq_f32_s16	simde/arm/neon/reinterpret.h	2669;"	d
vreinterpretq_f32_s16	simde/arm/neon/reinterpret.h	2670;"	d
vreinterpretq_f32_s32	simde/arm/neon/reinterpret.h	2686;"	d
vreinterpretq_f32_s32	simde/arm/neon/reinterpret.h	2687;"	d
vreinterpretq_f32_s64	simde/arm/neon/reinterpret.h	2703;"	d
vreinterpretq_f32_s64	simde/arm/neon/reinterpret.h	2704;"	d
vreinterpretq_f32_s8	simde/arm/neon/reinterpret.h	2652;"	d
vreinterpretq_f32_s8	simde/arm/neon/reinterpret.h	2653;"	d
vreinterpretq_f32_u16	simde/arm/neon/reinterpret.h	2737;"	d
vreinterpretq_f32_u16	simde/arm/neon/reinterpret.h	2738;"	d
vreinterpretq_f32_u32	simde/arm/neon/reinterpret.h	2754;"	d
vreinterpretq_f32_u32	simde/arm/neon/reinterpret.h	2755;"	d
vreinterpretq_f32_u64	simde/arm/neon/reinterpret.h	2771;"	d
vreinterpretq_f32_u64	simde/arm/neon/reinterpret.h	2772;"	d
vreinterpretq_f32_u8	simde/arm/neon/reinterpret.h	2720;"	d
vreinterpretq_f32_u8	simde/arm/neon/reinterpret.h	2721;"	d
vreinterpretq_f64_f32	simde/arm/neon/reinterpret.h	3094;"	d
vreinterpretq_f64_f32	simde/arm/neon/reinterpret.h	3095;"	d
vreinterpretq_f64_s16	simde/arm/neon/reinterpret.h	2975;"	d
vreinterpretq_f64_s16	simde/arm/neon/reinterpret.h	2976;"	d
vreinterpretq_f64_s32	simde/arm/neon/reinterpret.h	2992;"	d
vreinterpretq_f64_s32	simde/arm/neon/reinterpret.h	2993;"	d
vreinterpretq_f64_s64	simde/arm/neon/reinterpret.h	3009;"	d
vreinterpretq_f64_s64	simde/arm/neon/reinterpret.h	3010;"	d
vreinterpretq_f64_s8	simde/arm/neon/reinterpret.h	2958;"	d
vreinterpretq_f64_s8	simde/arm/neon/reinterpret.h	2959;"	d
vreinterpretq_f64_u16	simde/arm/neon/reinterpret.h	3043;"	d
vreinterpretq_f64_u16	simde/arm/neon/reinterpret.h	3044;"	d
vreinterpretq_f64_u32	simde/arm/neon/reinterpret.h	3060;"	d
vreinterpretq_f64_u32	simde/arm/neon/reinterpret.h	3061;"	d
vreinterpretq_f64_u64	simde/arm/neon/reinterpret.h	3077;"	d
vreinterpretq_f64_u64	simde/arm/neon/reinterpret.h	3078;"	d
vreinterpretq_f64_u8	simde/arm/neon/reinterpret.h	3026;"	d
vreinterpretq_f64_u8	simde/arm/neon/reinterpret.h	3027;"	d
vreinterpretq_s16_f32	simde/arm/neon/reinterpret.h	629;"	d
vreinterpretq_s16_f32	simde/arm/neon/reinterpret.h	630;"	d
vreinterpretq_s16_f64	simde/arm/neon/reinterpret.h	646;"	d
vreinterpretq_s16_f64	simde/arm/neon/reinterpret.h	647;"	d
vreinterpretq_s16_s32	simde/arm/neon/reinterpret.h	527;"	d
vreinterpretq_s16_s32	simde/arm/neon/reinterpret.h	528;"	d
vreinterpretq_s16_s64	simde/arm/neon/reinterpret.h	544;"	d
vreinterpretq_s16_s64	simde/arm/neon/reinterpret.h	545;"	d
vreinterpretq_s16_s8	simde/arm/neon/reinterpret.h	510;"	d
vreinterpretq_s16_s8	simde/arm/neon/reinterpret.h	511;"	d
vreinterpretq_s16_u16	simde/arm/neon/reinterpret.h	578;"	d
vreinterpretq_s16_u16	simde/arm/neon/reinterpret.h	579;"	d
vreinterpretq_s16_u32	simde/arm/neon/reinterpret.h	595;"	d
vreinterpretq_s16_u32	simde/arm/neon/reinterpret.h	596;"	d
vreinterpretq_s16_u64	simde/arm/neon/reinterpret.h	612;"	d
vreinterpretq_s16_u64	simde/arm/neon/reinterpret.h	613;"	d
vreinterpretq_s16_u8	simde/arm/neon/reinterpret.h	561;"	d
vreinterpretq_s16_u8	simde/arm/neon/reinterpret.h	562;"	d
vreinterpretq_s32_f32	simde/arm/neon/reinterpret.h	935;"	d
vreinterpretq_s32_f32	simde/arm/neon/reinterpret.h	936;"	d
vreinterpretq_s32_f64	simde/arm/neon/reinterpret.h	952;"	d
vreinterpretq_s32_f64	simde/arm/neon/reinterpret.h	953;"	d
vreinterpretq_s32_s16	simde/arm/neon/reinterpret.h	833;"	d
vreinterpretq_s32_s16	simde/arm/neon/reinterpret.h	834;"	d
vreinterpretq_s32_s64	simde/arm/neon/reinterpret.h	850;"	d
vreinterpretq_s32_s64	simde/arm/neon/reinterpret.h	851;"	d
vreinterpretq_s32_s8	simde/arm/neon/reinterpret.h	816;"	d
vreinterpretq_s32_s8	simde/arm/neon/reinterpret.h	817;"	d
vreinterpretq_s32_u16	simde/arm/neon/reinterpret.h	884;"	d
vreinterpretq_s32_u16	simde/arm/neon/reinterpret.h	885;"	d
vreinterpretq_s32_u32	simde/arm/neon/reinterpret.h	901;"	d
vreinterpretq_s32_u32	simde/arm/neon/reinterpret.h	902;"	d
vreinterpretq_s32_u64	simde/arm/neon/reinterpret.h	918;"	d
vreinterpretq_s32_u64	simde/arm/neon/reinterpret.h	919;"	d
vreinterpretq_s32_u8	simde/arm/neon/reinterpret.h	867;"	d
vreinterpretq_s32_u8	simde/arm/neon/reinterpret.h	868;"	d
vreinterpretq_s64_f32	simde/arm/neon/reinterpret.h	1241;"	d
vreinterpretq_s64_f32	simde/arm/neon/reinterpret.h	1242;"	d
vreinterpretq_s64_f64	simde/arm/neon/reinterpret.h	1258;"	d
vreinterpretq_s64_f64	simde/arm/neon/reinterpret.h	1259;"	d
vreinterpretq_s64_s16	simde/arm/neon/reinterpret.h	1139;"	d
vreinterpretq_s64_s16	simde/arm/neon/reinterpret.h	1140;"	d
vreinterpretq_s64_s32	simde/arm/neon/reinterpret.h	1156;"	d
vreinterpretq_s64_s32	simde/arm/neon/reinterpret.h	1157;"	d
vreinterpretq_s64_s8	simde/arm/neon/reinterpret.h	1122;"	d
vreinterpretq_s64_s8	simde/arm/neon/reinterpret.h	1123;"	d
vreinterpretq_s64_u16	simde/arm/neon/reinterpret.h	1190;"	d
vreinterpretq_s64_u16	simde/arm/neon/reinterpret.h	1191;"	d
vreinterpretq_s64_u32	simde/arm/neon/reinterpret.h	1207;"	d
vreinterpretq_s64_u32	simde/arm/neon/reinterpret.h	1208;"	d
vreinterpretq_s64_u64	simde/arm/neon/reinterpret.h	1224;"	d
vreinterpretq_s64_u64	simde/arm/neon/reinterpret.h	1225;"	d
vreinterpretq_s64_u8	simde/arm/neon/reinterpret.h	1173;"	d
vreinterpretq_s64_u8	simde/arm/neon/reinterpret.h	1174;"	d
vreinterpretq_s8_f32	simde/arm/neon/reinterpret.h	323;"	d
vreinterpretq_s8_f32	simde/arm/neon/reinterpret.h	324;"	d
vreinterpretq_s8_f64	simde/arm/neon/reinterpret.h	340;"	d
vreinterpretq_s8_f64	simde/arm/neon/reinterpret.h	341;"	d
vreinterpretq_s8_s16	simde/arm/neon/reinterpret.h	204;"	d
vreinterpretq_s8_s16	simde/arm/neon/reinterpret.h	205;"	d
vreinterpretq_s8_s32	simde/arm/neon/reinterpret.h	221;"	d
vreinterpretq_s8_s32	simde/arm/neon/reinterpret.h	222;"	d
vreinterpretq_s8_s64	simde/arm/neon/reinterpret.h	238;"	d
vreinterpretq_s8_s64	simde/arm/neon/reinterpret.h	239;"	d
vreinterpretq_s8_u16	simde/arm/neon/reinterpret.h	272;"	d
vreinterpretq_s8_u16	simde/arm/neon/reinterpret.h	273;"	d
vreinterpretq_s8_u32	simde/arm/neon/reinterpret.h	289;"	d
vreinterpretq_s8_u32	simde/arm/neon/reinterpret.h	290;"	d
vreinterpretq_s8_u64	simde/arm/neon/reinterpret.h	306;"	d
vreinterpretq_s8_u64	simde/arm/neon/reinterpret.h	307;"	d
vreinterpretq_s8_u8	simde/arm/neon/reinterpret.h	255;"	d
vreinterpretq_s8_u8	simde/arm/neon/reinterpret.h	256;"	d
vreinterpretq_u16_f32	simde/arm/neon/reinterpret.h	1853;"	d
vreinterpretq_u16_f32	simde/arm/neon/reinterpret.h	1854;"	d
vreinterpretq_u16_f64	simde/arm/neon/reinterpret.h	1870;"	d
vreinterpretq_u16_f64	simde/arm/neon/reinterpret.h	1871;"	d
vreinterpretq_u16_s16	simde/arm/neon/reinterpret.h	1751;"	d
vreinterpretq_u16_s16	simde/arm/neon/reinterpret.h	1752;"	d
vreinterpretq_u16_s32	simde/arm/neon/reinterpret.h	1768;"	d
vreinterpretq_u16_s32	simde/arm/neon/reinterpret.h	1769;"	d
vreinterpretq_u16_s64	simde/arm/neon/reinterpret.h	1785;"	d
vreinterpretq_u16_s64	simde/arm/neon/reinterpret.h	1786;"	d
vreinterpretq_u16_s8	simde/arm/neon/reinterpret.h	1734;"	d
vreinterpretq_u16_s8	simde/arm/neon/reinterpret.h	1735;"	d
vreinterpretq_u16_u32	simde/arm/neon/reinterpret.h	1819;"	d
vreinterpretq_u16_u32	simde/arm/neon/reinterpret.h	1820;"	d
vreinterpretq_u16_u64	simde/arm/neon/reinterpret.h	1836;"	d
vreinterpretq_u16_u64	simde/arm/neon/reinterpret.h	1837;"	d
vreinterpretq_u16_u8	simde/arm/neon/reinterpret.h	1802;"	d
vreinterpretq_u16_u8	simde/arm/neon/reinterpret.h	1803;"	d
vreinterpretq_u32_f32	simde/arm/neon/reinterpret.h	2159;"	d
vreinterpretq_u32_f32	simde/arm/neon/reinterpret.h	2160;"	d
vreinterpretq_u32_f64	simde/arm/neon/reinterpret.h	2176;"	d
vreinterpretq_u32_f64	simde/arm/neon/reinterpret.h	2177;"	d
vreinterpretq_u32_s16	simde/arm/neon/reinterpret.h	2057;"	d
vreinterpretq_u32_s16	simde/arm/neon/reinterpret.h	2058;"	d
vreinterpretq_u32_s32	simde/arm/neon/reinterpret.h	2074;"	d
vreinterpretq_u32_s32	simde/arm/neon/reinterpret.h	2075;"	d
vreinterpretq_u32_s64	simde/arm/neon/reinterpret.h	2091;"	d
vreinterpretq_u32_s64	simde/arm/neon/reinterpret.h	2092;"	d
vreinterpretq_u32_s8	simde/arm/neon/reinterpret.h	2040;"	d
vreinterpretq_u32_s8	simde/arm/neon/reinterpret.h	2041;"	d
vreinterpretq_u32_u16	simde/arm/neon/reinterpret.h	2125;"	d
vreinterpretq_u32_u16	simde/arm/neon/reinterpret.h	2126;"	d
vreinterpretq_u32_u64	simde/arm/neon/reinterpret.h	2142;"	d
vreinterpretq_u32_u64	simde/arm/neon/reinterpret.h	2143;"	d
vreinterpretq_u32_u8	simde/arm/neon/reinterpret.h	2108;"	d
vreinterpretq_u32_u8	simde/arm/neon/reinterpret.h	2109;"	d
vreinterpretq_u64_f32	simde/arm/neon/reinterpret.h	2465;"	d
vreinterpretq_u64_f32	simde/arm/neon/reinterpret.h	2466;"	d
vreinterpretq_u64_f64	simde/arm/neon/reinterpret.h	2482;"	d
vreinterpretq_u64_f64	simde/arm/neon/reinterpret.h	2483;"	d
vreinterpretq_u64_s16	simde/arm/neon/reinterpret.h	2363;"	d
vreinterpretq_u64_s16	simde/arm/neon/reinterpret.h	2364;"	d
vreinterpretq_u64_s32	simde/arm/neon/reinterpret.h	2380;"	d
vreinterpretq_u64_s32	simde/arm/neon/reinterpret.h	2381;"	d
vreinterpretq_u64_s64	simde/arm/neon/reinterpret.h	2397;"	d
vreinterpretq_u64_s64	simde/arm/neon/reinterpret.h	2398;"	d
vreinterpretq_u64_s8	simde/arm/neon/reinterpret.h	2346;"	d
vreinterpretq_u64_s8	simde/arm/neon/reinterpret.h	2347;"	d
vreinterpretq_u64_u16	simde/arm/neon/reinterpret.h	2431;"	d
vreinterpretq_u64_u16	simde/arm/neon/reinterpret.h	2432;"	d
vreinterpretq_u64_u32	simde/arm/neon/reinterpret.h	2448;"	d
vreinterpretq_u64_u32	simde/arm/neon/reinterpret.h	2449;"	d
vreinterpretq_u64_u8	simde/arm/neon/reinterpret.h	2414;"	d
vreinterpretq_u64_u8	simde/arm/neon/reinterpret.h	2415;"	d
vreinterpretq_u8_f32	simde/arm/neon/reinterpret.h	1547;"	d
vreinterpretq_u8_f32	simde/arm/neon/reinterpret.h	1548;"	d
vreinterpretq_u8_f64	simde/arm/neon/reinterpret.h	1564;"	d
vreinterpretq_u8_f64	simde/arm/neon/reinterpret.h	1565;"	d
vreinterpretq_u8_s16	simde/arm/neon/reinterpret.h	1445;"	d
vreinterpretq_u8_s16	simde/arm/neon/reinterpret.h	1446;"	d
vreinterpretq_u8_s32	simde/arm/neon/reinterpret.h	1462;"	d
vreinterpretq_u8_s32	simde/arm/neon/reinterpret.h	1463;"	d
vreinterpretq_u8_s64	simde/arm/neon/reinterpret.h	1479;"	d
vreinterpretq_u8_s64	simde/arm/neon/reinterpret.h	1480;"	d
vreinterpretq_u8_s8	simde/arm/neon/reinterpret.h	1428;"	d
vreinterpretq_u8_s8	simde/arm/neon/reinterpret.h	1429;"	d
vreinterpretq_u8_u16	simde/arm/neon/reinterpret.h	1496;"	d
vreinterpretq_u8_u16	simde/arm/neon/reinterpret.h	1497;"	d
vreinterpretq_u8_u32	simde/arm/neon/reinterpret.h	1513;"	d
vreinterpretq_u8_u32	simde/arm/neon/reinterpret.h	1514;"	d
vreinterpretq_u8_u64	simde/arm/neon/reinterpret.h	1530;"	d
vreinterpretq_u8_u64	simde/arm/neon/reinterpret.h	1531;"	d
vrev16_s8	simde/arm/neon/rev16.h	63;"	d
vrev16_s8	simde/arm/neon/rev16.h	64;"	d
vrev16_u8	simde/arm/neon/rev16.h	77;"	d
vrev16_u8	simde/arm/neon/rev16.h	78;"	d
vrev16q_s8	simde/arm/neon/rev16.h	116;"	d
vrev16q_s8	simde/arm/neon/rev16.h	117;"	d
vrev16q_u8	simde/arm/neon/rev16.h	130;"	d
vrev16q_u8	simde/arm/neon/rev16.h	131;"	d
vrev32_s16	simde/arm/neon/rev32.h	92;"	d
vrev32_s16	simde/arm/neon/rev32.h	93;"	d
vrev32_s8	simde/arm/neon/rev32.h	63;"	d
vrev32_s8	simde/arm/neon/rev32.h	64;"	d
vrev32_u16	simde/arm/neon/rev32.h	120;"	d
vrev32_u16	simde/arm/neon/rev32.h	121;"	d
vrev32_u8	simde/arm/neon/rev32.h	106;"	d
vrev32_u8	simde/arm/neon/rev32.h	107;"	d
vrev32q_s16	simde/arm/neon/rev32.h	200;"	d
vrev32q_s16	simde/arm/neon/rev32.h	201;"	d
vrev32q_s8	simde/arm/neon/rev32.h	160;"	d
vrev32q_s8	simde/arm/neon/rev32.h	161;"	d
vrev32q_u16	simde/arm/neon/rev32.h	228;"	d
vrev32q_u16	simde/arm/neon/rev32.h	229;"	d
vrev32q_u8	simde/arm/neon/rev32.h	214;"	d
vrev32q_u8	simde/arm/neon/rev32.h	215;"	d
vrev64_f32	simde/arm/neon/rev64.h	180;"	d
vrev64_f32	simde/arm/neon/rev64.h	181;"	d
vrev64_s16	simde/arm/neon/rev64.h	95;"	d
vrev64_s16	simde/arm/neon/rev64.h	96;"	d
vrev64_s32	simde/arm/neon/rev64.h	124;"	d
vrev64_s32	simde/arm/neon/rev64.h	125;"	d
vrev64_s8	simde/arm/neon/rev64.h	66;"	d
vrev64_s8	simde/arm/neon/rev64.h	67;"	d
vrev64_u16	simde/arm/neon/rev64.h	152;"	d
vrev64_u16	simde/arm/neon/rev64.h	153;"	d
vrev64_u32	simde/arm/neon/rev64.h	166;"	d
vrev64_u32	simde/arm/neon/rev64.h	167;"	d
vrev64_u8	simde/arm/neon/rev64.h	138;"	d
vrev64_u8	simde/arm/neon/rev64.h	139;"	d
vrev64q_f32	simde/arm/neon/rev64.h	351;"	d
vrev64q_f32	simde/arm/neon/rev64.h	352;"	d
vrev64q_s16	simde/arm/neon/rev64.h	260;"	d
vrev64q_s16	simde/arm/neon/rev64.h	261;"	d
vrev64q_s32	simde/arm/neon/rev64.h	295;"	d
vrev64q_s32	simde/arm/neon/rev64.h	296;"	d
vrev64q_s8	simde/arm/neon/rev64.h	220;"	d
vrev64q_s8	simde/arm/neon/rev64.h	221;"	d
vrev64q_u16	simde/arm/neon/rev64.h	323;"	d
vrev64q_u16	simde/arm/neon/rev64.h	324;"	d
vrev64q_u32	simde/arm/neon/rev64.h	337;"	d
vrev64q_u32	simde/arm/neon/rev64.h	338;"	d
vrev64q_u8	simde/arm/neon/rev64.h	309;"	d
vrev64q_u8	simde/arm/neon/rev64.h	310;"	d
vrhadd_s16	simde/arm/neon/rhadd.h	92;"	d
vrhadd_s16	simde/arm/neon/rhadd.h	93;"	d
vrhadd_s32	simde/arm/neon/rhadd.h	123;"	d
vrhadd_s32	simde/arm/neon/rhadd.h	124;"	d
vrhadd_s8	simde/arm/neon/rhadd.h	61;"	d
vrhadd_s8	simde/arm/neon/rhadd.h	62;"	d
vrhadd_u16	simde/arm/neon/rhadd.h	182;"	d
vrhadd_u16	simde/arm/neon/rhadd.h	183;"	d
vrhadd_u32	simde/arm/neon/rhadd.h	213;"	d
vrhadd_u32	simde/arm/neon/rhadd.h	214;"	d
vrhadd_u8	simde/arm/neon/rhadd.h	151;"	d
vrhadd_u8	simde/arm/neon/rhadd.h	152;"	d
vrhaddq_s16	simde/arm/neon/rhadd.h	276;"	d
vrhaddq_s16	simde/arm/neon/rhadd.h	277;"	d
vrhaddq_s32	simde/arm/neon/rhadd.h	309;"	d
vrhaddq_s32	simde/arm/neon/rhadd.h	310;"	d
vrhaddq_s8	simde/arm/neon/rhadd.h	243;"	d
vrhaddq_s8	simde/arm/neon/rhadd.h	244;"	d
vrhaddq_u16	simde/arm/neon/rhadd.h	369;"	d
vrhaddq_u16	simde/arm/neon/rhadd.h	370;"	d
vrhaddq_u32	simde/arm/neon/rhadd.h	399;"	d
vrhaddq_u32	simde/arm/neon/rhadd.h	400;"	d
vrhaddq_u8	simde/arm/neon/rhadd.h	339;"	d
vrhaddq_u8	simde/arm/neon/rhadd.h	340;"	d
vrnd_f32	simde/arm/neon/rnd.h	55;"	d
vrnd_f32	simde/arm/neon/rnd.h	56;"	d
vrnd_f64	simde/arm/neon/rnd.h	78;"	d
vrnd_f64	simde/arm/neon/rnd.h	79;"	d
vrndq_f32	simde/arm/neon/rnd.h	107;"	d
vrndq_f32	simde/arm/neon/rnd.h	108;"	d
vrndq_f64	simde/arm/neon/rnd.h	136;"	d
vrndq_f64	simde/arm/neon/rnd.h	137;"	d
vrshl_s16	simde/arm/neon/rshl.h	158;"	d
vrshl_s16	simde/arm/neon/rshl.h	159;"	d
vrshl_s32	simde/arm/neon/rshl.h	197;"	d
vrshl_s32	simde/arm/neon/rshl.h	198;"	d
vrshl_s64	simde/arm/neon/rshl.h	248;"	d
vrshl_s64	simde/arm/neon/rshl.h	249;"	d
vrshl_s8	simde/arm/neon/rshl.h	119;"	d
vrshl_s8	simde/arm/neon/rshl.h	120;"	d
vrshl_u16	simde/arm/neon/rshl.h	337;"	d
vrshl_u16	simde/arm/neon/rshl.h	338;"	d
vrshl_u32	simde/arm/neon/rshl.h	377;"	d
vrshl_u32	simde/arm/neon/rshl.h	378;"	d
vrshl_u64	simde/arm/neon/rshl.h	427;"	d
vrshl_u64	simde/arm/neon/rshl.h	428;"	d
vrshl_u8	simde/arm/neon/rshl.h	297;"	d
vrshl_u8	simde/arm/neon/rshl.h	298;"	d
vrshlq_s16	simde/arm/neon/rshl.h	542;"	d
vrshlq_s16	simde/arm/neon/rshl.h	543;"	d
vrshlq_s32	simde/arm/neon/rshl.h	595;"	d
vrshlq_s32	simde/arm/neon/rshl.h	596;"	d
vrshlq_s64	simde/arm/neon/rshl.h	663;"	d
vrshlq_s64	simde/arm/neon/rshl.h	664;"	d
vrshlq_s8	simde/arm/neon/rshl.h	477;"	d
vrshlq_s8	simde/arm/neon/rshl.h	478;"	d
vrshlq_u16	simde/arm/neon/rshl.h	778;"	d
vrshlq_u16	simde/arm/neon/rshl.h	779;"	d
vrshlq_u32	simde/arm/neon/rshl.h	831;"	d
vrshlq_u32	simde/arm/neon/rshl.h	832;"	d
vrshlq_u64	simde/arm/neon/rshl.h	896;"	d
vrshlq_u64	simde/arm/neon/rshl.h	897;"	d
vrshlq_u8	simde/arm/neon/rshl.h	713;"	d
vrshlq_u8	simde/arm/neon/rshl.h	714;"	d
vrshr_n_s16	simde/arm/neon/rshr_n.h	306;"	d
vrshr_n_s16	simde/arm/neon/rshr_n.h	307;"	d
vrshr_n_s32	simde/arm/neon/rshr_n.h	333;"	d
vrshr_n_s32	simde/arm/neon/rshr_n.h	334;"	d
vrshr_n_s64	simde/arm/neon/rshr_n.h	360;"	d
vrshr_n_s64	simde/arm/neon/rshr_n.h	361;"	d
vrshr_n_s8	simde/arm/neon/rshr_n.h	279;"	d
vrshr_n_s8	simde/arm/neon/rshr_n.h	280;"	d
vrshr_n_u16	simde/arm/neon/rshr_n.h	412;"	d
vrshr_n_u16	simde/arm/neon/rshr_n.h	413;"	d
vrshr_n_u32	simde/arm/neon/rshr_n.h	438;"	d
vrshr_n_u32	simde/arm/neon/rshr_n.h	439;"	d
vrshr_n_u64	simde/arm/neon/rshr_n.h	464;"	d
vrshr_n_u64	simde/arm/neon/rshr_n.h	465;"	d
vrshr_n_u8	simde/arm/neon/rshr_n.h	386;"	d
vrshr_n_u8	simde/arm/neon/rshr_n.h	387;"	d
vrshrq_n_s16	simde/arm/neon/rshr_n.h	94;"	d
vrshrq_n_s16	simde/arm/neon/rshr_n.h	95;"	d
vrshrq_n_s32	simde/arm/neon/rshr_n.h	121;"	d
vrshrq_n_s32	simde/arm/neon/rshr_n.h	122;"	d
vrshrq_n_s64	simde/arm/neon/rshr_n.h	148;"	d
vrshrq_n_s64	simde/arm/neon/rshr_n.h	149;"	d
vrshrq_n_s8	simde/arm/neon/rshr_n.h	67;"	d
vrshrq_n_s8	simde/arm/neon/rshr_n.h	68;"	d
vrshrq_n_u16	simde/arm/neon/rshr_n.h	200;"	d
vrshrq_n_u16	simde/arm/neon/rshr_n.h	201;"	d
vrshrq_n_u32	simde/arm/neon/rshr_n.h	226;"	d
vrshrq_n_u32	simde/arm/neon/rshr_n.h	227;"	d
vrshrq_n_u64	simde/arm/neon/rshr_n.h	252;"	d
vrshrq_n_u64	simde/arm/neon/rshr_n.h	253;"	d
vrshrq_n_u8	simde/arm/neon/rshr_n.h	174;"	d
vrshrq_n_u8	simde/arm/neon/rshr_n.h	175;"	d
vrsra_n_s16	simde/arm/neon/rsra_n.h	142;"	d
vrsra_n_s16	simde/arm/neon/rsra_n.h	143;"	d
vrsra_n_s32	simde/arm/neon/rsra_n.h	152;"	d
vrsra_n_s32	simde/arm/neon/rsra_n.h	153;"	d
vrsra_n_s64	simde/arm/neon/rsra_n.h	162;"	d
vrsra_n_s64	simde/arm/neon/rsra_n.h	163;"	d
vrsra_n_s8	simde/arm/neon/rsra_n.h	132;"	d
vrsra_n_s8	simde/arm/neon/rsra_n.h	133;"	d
vrsra_n_u16	simde/arm/neon/rsra_n.h	182;"	d
vrsra_n_u16	simde/arm/neon/rsra_n.h	183;"	d
vrsra_n_u32	simde/arm/neon/rsra_n.h	192;"	d
vrsra_n_u32	simde/arm/neon/rsra_n.h	193;"	d
vrsra_n_u64	simde/arm/neon/rsra_n.h	202;"	d
vrsra_n_u64	simde/arm/neon/rsra_n.h	203;"	d
vrsra_n_u8	simde/arm/neon/rsra_n.h	172;"	d
vrsra_n_u8	simde/arm/neon/rsra_n.h	173;"	d
vrsraq_n_s16	simde/arm/neon/rsra_n.h	62;"	d
vrsraq_n_s16	simde/arm/neon/rsra_n.h	63;"	d
vrsraq_n_s32	simde/arm/neon/rsra_n.h	72;"	d
vrsraq_n_s32	simde/arm/neon/rsra_n.h	73;"	d
vrsraq_n_s64	simde/arm/neon/rsra_n.h	82;"	d
vrsraq_n_s64	simde/arm/neon/rsra_n.h	83;"	d
vrsraq_n_s8	simde/arm/neon/rsra_n.h	52;"	d
vrsraq_n_s8	simde/arm/neon/rsra_n.h	53;"	d
vrsraq_n_u16	simde/arm/neon/rsra_n.h	102;"	d
vrsraq_n_u16	simde/arm/neon/rsra_n.h	103;"	d
vrsraq_n_u32	simde/arm/neon/rsra_n.h	112;"	d
vrsraq_n_u32	simde/arm/neon/rsra_n.h	113;"	d
vrsraq_n_u64	simde/arm/neon/rsra_n.h	122;"	d
vrsraq_n_u64	simde/arm/neon/rsra_n.h	123;"	d
vrsraq_n_u8	simde/arm/neon/rsra_n.h	92;"	d
vrsraq_n_u8	simde/arm/neon/rsra_n.h	93;"	d
vset_lane_f32	simde/arm/neon/set_lane.h	51;"	d
vset_lane_f32	simde/arm/neon/set_lane.h	52;"	d
vset_lane_f64	simde/arm/neon/set_lane.h	71;"	d
vset_lane_f64	simde/arm/neon/set_lane.h	72;"	d
vset_lane_s16	simde/arm/neon/set_lane.h	109;"	d
vset_lane_s16	simde/arm/neon/set_lane.h	110;"	d
vset_lane_s32	simde/arm/neon/set_lane.h	128;"	d
vset_lane_s32	simde/arm/neon/set_lane.h	129;"	d
vset_lane_s64	simde/arm/neon/set_lane.h	148;"	d
vset_lane_s64	simde/arm/neon/set_lane.h	149;"	d
vset_lane_s8	simde/arm/neon/set_lane.h	90;"	d
vset_lane_s8	simde/arm/neon/set_lane.h	91;"	d
vset_lane_u16	simde/arm/neon/set_lane.h	186;"	d
vset_lane_u16	simde/arm/neon/set_lane.h	187;"	d
vset_lane_u32	simde/arm/neon/set_lane.h	205;"	d
vset_lane_u32	simde/arm/neon/set_lane.h	206;"	d
vset_lane_u64	simde/arm/neon/set_lane.h	225;"	d
vset_lane_u64	simde/arm/neon/set_lane.h	226;"	d
vset_lane_u8	simde/arm/neon/set_lane.h	167;"	d
vset_lane_u8	simde/arm/neon/set_lane.h	168;"	d
vsetq_lane_f32	simde/arm/neon/set_lane.h	244;"	d
vsetq_lane_f32	simde/arm/neon/set_lane.h	245;"	d
vsetq_lane_f64	simde/arm/neon/set_lane.h	263;"	d
vsetq_lane_f64	simde/arm/neon/set_lane.h	264;"	d
vsetq_lane_s16	simde/arm/neon/set_lane.h	301;"	d
vsetq_lane_s16	simde/arm/neon/set_lane.h	302;"	d
vsetq_lane_s32	simde/arm/neon/set_lane.h	320;"	d
vsetq_lane_s32	simde/arm/neon/set_lane.h	321;"	d
vsetq_lane_s64	simde/arm/neon/set_lane.h	339;"	d
vsetq_lane_s64	simde/arm/neon/set_lane.h	340;"	d
vsetq_lane_s8	simde/arm/neon/set_lane.h	282;"	d
vsetq_lane_s8	simde/arm/neon/set_lane.h	283;"	d
vsetq_lane_u16	simde/arm/neon/set_lane.h	377;"	d
vsetq_lane_u16	simde/arm/neon/set_lane.h	378;"	d
vsetq_lane_u32	simde/arm/neon/set_lane.h	396;"	d
vsetq_lane_u32	simde/arm/neon/set_lane.h	397;"	d
vsetq_lane_u64	simde/arm/neon/set_lane.h	415;"	d
vsetq_lane_u64	simde/arm/neon/set_lane.h	416;"	d
vsetq_lane_u8	simde/arm/neon/set_lane.h	358;"	d
vsetq_lane_u8	simde/arm/neon/set_lane.h	359;"	d
vshl_n_s16	simde/arm/neon/shl_n.h	92;"	d
vshl_n_s16	simde/arm/neon/shl_n.h	93;"	d
vshl_n_s32	simde/arm/neon/shl_n.h	121;"	d
vshl_n_s32	simde/arm/neon/shl_n.h	122;"	d
vshl_n_s64	simde/arm/neon/shl_n.h	150;"	d
vshl_n_s64	simde/arm/neon/shl_n.h	151;"	d
vshl_n_s8	simde/arm/neon/shl_n.h	63;"	d
vshl_n_s8	simde/arm/neon/shl_n.h	64;"	d
vshl_n_u16	simde/arm/neon/shl_n.h	209;"	d
vshl_n_u16	simde/arm/neon/shl_n.h	210;"	d
vshl_n_u32	simde/arm/neon/shl_n.h	238;"	d
vshl_n_u32	simde/arm/neon/shl_n.h	239;"	d
vshl_n_u64	simde/arm/neon/shl_n.h	267;"	d
vshl_n_u64	simde/arm/neon/shl_n.h	268;"	d
vshl_n_u8	simde/arm/neon/shl_n.h	180;"	d
vshl_n_u8	simde/arm/neon/shl_n.h	181;"	d
vshl_s16	simde/arm/neon/shl.h	150;"	d
vshl_s16	simde/arm/neon/shl.h	151;"	d
vshl_s32	simde/arm/neon/shl.h	186;"	d
vshl_s32	simde/arm/neon/shl.h	187;"	d
vshl_s64	simde/arm/neon/shl.h	233;"	d
vshl_s64	simde/arm/neon/shl.h	234;"	d
vshl_s8	simde/arm/neon/shl.h	114;"	d
vshl_s8	simde/arm/neon/shl.h	115;"	d
vshl_u16	simde/arm/neon/shl.h	311;"	d
vshl_u16	simde/arm/neon/shl.h	312;"	d
vshl_u32	simde/arm/neon/shl.h	347;"	d
vshl_u32	simde/arm/neon/shl.h	348;"	d
vshl_u64	simde/arm/neon/shl.h	392;"	d
vshl_u64	simde/arm/neon/shl.h	393;"	d
vshl_u8	simde/arm/neon/shl.h	275;"	d
vshl_u8	simde/arm/neon/shl.h	276;"	d
vshlq_n_s16	simde/arm/neon/shl_n.h	340;"	d
vshlq_n_s16	simde/arm/neon/shl_n.h	341;"	d
vshlq_n_s32	simde/arm/neon/shl_n.h	375;"	d
vshlq_n_s32	simde/arm/neon/shl_n.h	376;"	d
vshlq_n_s64	simde/arm/neon/shl_n.h	410;"	d
vshlq_n_s64	simde/arm/neon/shl_n.h	411;"	d
vshlq_n_s8	simde/arm/neon/shl_n.h	305;"	d
vshlq_n_s8	simde/arm/neon/shl_n.h	306;"	d
vshlq_n_u16	simde/arm/neon/shl_n.h	483;"	d
vshlq_n_u16	simde/arm/neon/shl_n.h	484;"	d
vshlq_n_u32	simde/arm/neon/shl_n.h	518;"	d
vshlq_n_u32	simde/arm/neon/shl_n.h	519;"	d
vshlq_n_u64	simde/arm/neon/shl_n.h	553;"	d
vshlq_n_u64	simde/arm/neon/shl_n.h	554;"	d
vshlq_n_u8	simde/arm/neon/shl_n.h	448;"	d
vshlq_n_u8	simde/arm/neon/shl_n.h	449;"	d
vshlq_s16	simde/arm/neon/shl.h	498;"	d
vshlq_s16	simde/arm/neon/shl.h	499;"	d
vshlq_s32	simde/arm/neon/shl.h	548;"	d
vshlq_s32	simde/arm/neon/shl.h	549;"	d
vshlq_s64	simde/arm/neon/shl.h	607;"	d
vshlq_s64	simde/arm/neon/shl.h	608;"	d
vshlq_s8	simde/arm/neon/shl.h	440;"	d
vshlq_s8	simde/arm/neon/shl.h	441;"	d
vshlq_u16	simde/arm/neon/shl.h	704;"	d
vshlq_u16	simde/arm/neon/shl.h	705;"	d
vshlq_u32	simde/arm/neon/shl.h	745;"	d
vshlq_u32	simde/arm/neon/shl.h	746;"	d
vshlq_u64	simde/arm/neon/shl.h	798;"	d
vshlq_u64	simde/arm/neon/shl.h	799;"	d
vshlq_u8	simde/arm/neon/shl.h	648;"	d
vshlq_u8	simde/arm/neon/shl.h	649;"	d
vshr_n_s16	simde/arm/neon/shr_n.h	95;"	d
vshr_n_s16	simde/arm/neon/shr_n.h	96;"	d
vshr_n_s32	simde/arm/neon/shr_n.h	125;"	d
vshr_n_s32	simde/arm/neon/shr_n.h	126;"	d
vshr_n_s64	simde/arm/neon/shr_n.h	153;"	d
vshr_n_s64	simde/arm/neon/shr_n.h	154;"	d
vshr_n_s8	simde/arm/neon/shr_n.h	65;"	d
vshr_n_s8	simde/arm/neon/shr_n.h	66;"	d
vshr_n_u16	simde/arm/neon/shr_n.h	220;"	d
vshr_n_u16	simde/arm/neon/shr_n.h	221;"	d
vshr_n_u32	simde/arm/neon/shr_n.h	253;"	d
vshr_n_u32	simde/arm/neon/shr_n.h	254;"	d
vshr_n_u64	simde/arm/neon/shr_n.h	286;"	d
vshr_n_u64	simde/arm/neon/shr_n.h	287;"	d
vshr_n_u8	simde/arm/neon/shr_n.h	187;"	d
vshr_n_u8	simde/arm/neon/shr_n.h	188;"	d
vshrq_n_s16	simde/arm/neon/shr_n.h	370;"	d
vshrq_n_s16	simde/arm/neon/shr_n.h	371;"	d
vshrq_n_s32	simde/arm/neon/shr_n.h	407;"	d
vshrq_n_s32	simde/arm/neon/shr_n.h	408;"	d
vshrq_n_s64	simde/arm/neon/shr_n.h	442;"	d
vshrq_n_s64	simde/arm/neon/shr_n.h	443;"	d
vshrq_n_s8	simde/arm/neon/shr_n.h	334;"	d
vshrq_n_s8	simde/arm/neon/shr_n.h	335;"	d
vshrq_n_u16	simde/arm/neon/shr_n.h	525;"	d
vshrq_n_u16	simde/arm/neon/shr_n.h	526;"	d
vshrq_n_u32	simde/arm/neon/shr_n.h	565;"	d
vshrq_n_u32	simde/arm/neon/shr_n.h	566;"	d
vshrq_n_u64	simde/arm/neon/shr_n.h	605;"	d
vshrq_n_u64	simde/arm/neon/shr_n.h	606;"	d
vshrq_n_u8	simde/arm/neon/shr_n.h	485;"	d
vshrq_n_u8	simde/arm/neon/shr_n.h	486;"	d
vsra_n_s16	simde/arm/neon/sra_n.h	55;"	d
vsra_n_s16	simde/arm/neon/sra_n.h	56;"	d
vsra_n_s32	simde/arm/neon/sra_n.h	65;"	d
vsra_n_s32	simde/arm/neon/sra_n.h	66;"	d
vsra_n_s64	simde/arm/neon/sra_n.h	75;"	d
vsra_n_s64	simde/arm/neon/sra_n.h	76;"	d
vsra_n_s8	simde/arm/neon/sra_n.h	45;"	d
vsra_n_s8	simde/arm/neon/sra_n.h	46;"	d
vsra_n_u16	simde/arm/neon/sra_n.h	95;"	d
vsra_n_u16	simde/arm/neon/sra_n.h	96;"	d
vsra_n_u32	simde/arm/neon/sra_n.h	105;"	d
vsra_n_u32	simde/arm/neon/sra_n.h	106;"	d
vsra_n_u64	simde/arm/neon/sra_n.h	115;"	d
vsra_n_u64	simde/arm/neon/sra_n.h	116;"	d
vsra_n_u8	simde/arm/neon/sra_n.h	85;"	d
vsra_n_u8	simde/arm/neon/sra_n.h	86;"	d
vsraq_n_s16	simde/arm/neon/sra_n.h	135;"	d
vsraq_n_s16	simde/arm/neon/sra_n.h	136;"	d
vsraq_n_s32	simde/arm/neon/sra_n.h	145;"	d
vsraq_n_s32	simde/arm/neon/sra_n.h	146;"	d
vsraq_n_s64	simde/arm/neon/sra_n.h	155;"	d
vsraq_n_s64	simde/arm/neon/sra_n.h	156;"	d
vsraq_n_s8	simde/arm/neon/sra_n.h	125;"	d
vsraq_n_s8	simde/arm/neon/sra_n.h	126;"	d
vsraq_n_u16	simde/arm/neon/sra_n.h	175;"	d
vsraq_n_u16	simde/arm/neon/sra_n.h	176;"	d
vsraq_n_u32	simde/arm/neon/sra_n.h	185;"	d
vsraq_n_u32	simde/arm/neon/sra_n.h	186;"	d
vsraq_n_u64	simde/arm/neon/sra_n.h	195;"	d
vsraq_n_u64	simde/arm/neon/sra_n.h	196;"	d
vsraq_n_u8	simde/arm/neon/sra_n.h	165;"	d
vsraq_n_u8	simde/arm/neon/sra_n.h	166;"	d
vst1_f32	simde/arm/neon/st1.h	47;"	d
vst1_f32	simde/arm/neon/st1.h	48;"	d
vst1_f64	simde/arm/neon/st1.h	62;"	d
vst1_f64	simde/arm/neon/st1.h	63;"	d
vst1_lane_f32	simde/arm/neon/st1_lane.h	48;"	d
vst1_lane_f32	simde/arm/neon/st1_lane.h	49;"	d
vst1_lane_f64	simde/arm/neon/st1_lane.h	65;"	d
vst1_lane_f64	simde/arm/neon/st1_lane.h	66;"	d
vst1_lane_s16	simde/arm/neon/st1_lane.h	97;"	d
vst1_lane_s16	simde/arm/neon/st1_lane.h	98;"	d
vst1_lane_s32	simde/arm/neon/st1_lane.h	113;"	d
vst1_lane_s32	simde/arm/neon/st1_lane.h	114;"	d
vst1_lane_s64	simde/arm/neon/st1_lane.h	130;"	d
vst1_lane_s64	simde/arm/neon/st1_lane.h	131;"	d
vst1_lane_s8	simde/arm/neon/st1_lane.h	81;"	d
vst1_lane_s8	simde/arm/neon/st1_lane.h	82;"	d
vst1_lane_u16	simde/arm/neon/st1_lane.h	162;"	d
vst1_lane_u16	simde/arm/neon/st1_lane.h	163;"	d
vst1_lane_u32	simde/arm/neon/st1_lane.h	178;"	d
vst1_lane_u32	simde/arm/neon/st1_lane.h	179;"	d
vst1_lane_u64	simde/arm/neon/st1_lane.h	195;"	d
vst1_lane_u64	simde/arm/neon/st1_lane.h	196;"	d
vst1_lane_u8	simde/arm/neon/st1_lane.h	146;"	d
vst1_lane_u8	simde/arm/neon/st1_lane.h	147;"	d
vst1_s16	simde/arm/neon/st1.h	92;"	d
vst1_s16	simde/arm/neon/st1.h	93;"	d
vst1_s32	simde/arm/neon/st1.h	107;"	d
vst1_s32	simde/arm/neon/st1.h	108;"	d
vst1_s64	simde/arm/neon/st1.h	122;"	d
vst1_s64	simde/arm/neon/st1.h	123;"	d
vst1_s8	simde/arm/neon/st1.h	77;"	d
vst1_s8	simde/arm/neon/st1.h	78;"	d
vst1_u16	simde/arm/neon/st1.h	152;"	d
vst1_u16	simde/arm/neon/st1.h	153;"	d
vst1_u32	simde/arm/neon/st1.h	167;"	d
vst1_u32	simde/arm/neon/st1.h	168;"	d
vst1_u64	simde/arm/neon/st1.h	182;"	d
vst1_u64	simde/arm/neon/st1.h	183;"	d
vst1_u8	simde/arm/neon/st1.h	137;"	d
vst1_u8	simde/arm/neon/st1.h	138;"	d
vst1q_f32	simde/arm/neon/st1.h	199;"	d
vst1q_f32	simde/arm/neon/st1.h	200;"	d
vst1q_f64	simde/arm/neon/st1.h	214;"	d
vst1q_f64	simde/arm/neon/st1.h	215;"	d
vst1q_lane_f32	simde/arm/neon/st1_lane.h	211;"	d
vst1q_lane_f32	simde/arm/neon/st1_lane.h	212;"	d
vst1q_lane_f64	simde/arm/neon/st1_lane.h	227;"	d
vst1q_lane_f64	simde/arm/neon/st1_lane.h	228;"	d
vst1q_lane_s16	simde/arm/neon/st1_lane.h	259;"	d
vst1q_lane_s16	simde/arm/neon/st1_lane.h	260;"	d
vst1q_lane_s32	simde/arm/neon/st1_lane.h	275;"	d
vst1q_lane_s32	simde/arm/neon/st1_lane.h	276;"	d
vst1q_lane_s64	simde/arm/neon/st1_lane.h	291;"	d
vst1q_lane_s64	simde/arm/neon/st1_lane.h	292;"	d
vst1q_lane_s8	simde/arm/neon/st1_lane.h	243;"	d
vst1q_lane_s8	simde/arm/neon/st1_lane.h	244;"	d
vst1q_lane_u16	simde/arm/neon/st1_lane.h	323;"	d
vst1q_lane_u16	simde/arm/neon/st1_lane.h	324;"	d
vst1q_lane_u32	simde/arm/neon/st1_lane.h	339;"	d
vst1q_lane_u32	simde/arm/neon/st1_lane.h	340;"	d
vst1q_lane_u64	simde/arm/neon/st1_lane.h	355;"	d
vst1q_lane_u64	simde/arm/neon/st1_lane.h	356;"	d
vst1q_lane_u8	simde/arm/neon/st1_lane.h	307;"	d
vst1q_lane_u8	simde/arm/neon/st1_lane.h	308;"	d
vst1q_s16	simde/arm/neon/st1.h	248;"	d
vst1q_s16	simde/arm/neon/st1.h	249;"	d
vst1q_s32	simde/arm/neon/st1.h	265;"	d
vst1q_s32	simde/arm/neon/st1.h	266;"	d
vst1q_s64	simde/arm/neon/st1.h	280;"	d
vst1q_s64	simde/arm/neon/st1.h	281;"	d
vst1q_s8	simde/arm/neon/st1.h	231;"	d
vst1q_s8	simde/arm/neon/st1.h	232;"	d
vst1q_u16	simde/arm/neon/st1.h	314;"	d
vst1q_u16	simde/arm/neon/st1.h	315;"	d
vst1q_u32	simde/arm/neon/st1.h	331;"	d
vst1q_u32	simde/arm/neon/st1.h	332;"	d
vst1q_u64	simde/arm/neon/st1.h	346;"	d
vst1q_u64	simde/arm/neon/st1.h	347;"	d
vst1q_u8	simde/arm/neon/st1.h	297;"	d
vst1q_u8	simde/arm/neon/st1.h	298;"	d
vst3_f32	simde/arm/neon/st3.h	55;"	d
vst3_f32	simde/arm/neon/st3.h	56;"	d
vst3_f64	simde/arm/neon/st3.h	74;"	d
vst3_f64	simde/arm/neon/st3.h	75;"	d
vst3_s16	simde/arm/neon/st3.h	112;"	d
vst3_s16	simde/arm/neon/st3.h	113;"	d
vst3_s32	simde/arm/neon/st3.h	131;"	d
vst3_s32	simde/arm/neon/st3.h	132;"	d
vst3_s64	simde/arm/neon/st3.h	150;"	d
vst3_s64	simde/arm/neon/st3.h	151;"	d
vst3_s8	simde/arm/neon/st3.h	93;"	d
vst3_s8	simde/arm/neon/st3.h	94;"	d
vst3_u16	simde/arm/neon/st3.h	188;"	d
vst3_u16	simde/arm/neon/st3.h	189;"	d
vst3_u32	simde/arm/neon/st3.h	207;"	d
vst3_u32	simde/arm/neon/st3.h	208;"	d
vst3_u64	simde/arm/neon/st3.h	226;"	d
vst3_u64	simde/arm/neon/st3.h	227;"	d
vst3_u8	simde/arm/neon/st3.h	169;"	d
vst3_u8	simde/arm/neon/st3.h	170;"	d
vst3q_f32	simde/arm/neon/st3.h	245;"	d
vst3q_f32	simde/arm/neon/st3.h	246;"	d
vst3q_f64	simde/arm/neon/st3.h	264;"	d
vst3q_f64	simde/arm/neon/st3.h	265;"	d
vst3q_s16	simde/arm/neon/st3.h	302;"	d
vst3q_s16	simde/arm/neon/st3.h	303;"	d
vst3q_s32	simde/arm/neon/st3.h	321;"	d
vst3q_s32	simde/arm/neon/st3.h	322;"	d
vst3q_s64	simde/arm/neon/st3.h	340;"	d
vst3q_s64	simde/arm/neon/st3.h	341;"	d
vst3q_s8	simde/arm/neon/st3.h	283;"	d
vst3q_s8	simde/arm/neon/st3.h	284;"	d
vst3q_u16	simde/arm/neon/st3.h	379;"	d
vst3q_u16	simde/arm/neon/st3.h	380;"	d
vst3q_u32	simde/arm/neon/st3.h	398;"	d
vst3q_u32	simde/arm/neon/st3.h	399;"	d
vst3q_u64	simde/arm/neon/st3.h	417;"	d
vst3q_u64	simde/arm/neon/st3.h	418;"	d
vst3q_u8	simde/arm/neon/st3.h	360;"	d
vst3q_u8	simde/arm/neon/st3.h	361;"	d
vst4_f32	simde/arm/neon/st4.h	55;"	d
vst4_f32	simde/arm/neon/st4.h	56;"	d
vst4_f64	simde/arm/neon/st4.h	75;"	d
vst4_f64	simde/arm/neon/st4.h	76;"	d
vst4_s16	simde/arm/neon/st4.h	115;"	d
vst4_s16	simde/arm/neon/st4.h	116;"	d
vst4_s32	simde/arm/neon/st4.h	135;"	d
vst4_s32	simde/arm/neon/st4.h	136;"	d
vst4_s64	simde/arm/neon/st4.h	155;"	d
vst4_s64	simde/arm/neon/st4.h	156;"	d
vst4_s8	simde/arm/neon/st4.h	95;"	d
vst4_s8	simde/arm/neon/st4.h	96;"	d
vst4_u16	simde/arm/neon/st4.h	195;"	d
vst4_u16	simde/arm/neon/st4.h	196;"	d
vst4_u32	simde/arm/neon/st4.h	215;"	d
vst4_u32	simde/arm/neon/st4.h	216;"	d
vst4_u64	simde/arm/neon/st4.h	235;"	d
vst4_u64	simde/arm/neon/st4.h	236;"	d
vst4_u8	simde/arm/neon/st4.h	175;"	d
vst4_u8	simde/arm/neon/st4.h	176;"	d
vst4q_f32	simde/arm/neon/st4.h	255;"	d
vst4q_f32	simde/arm/neon/st4.h	256;"	d
vst4q_f64	simde/arm/neon/st4.h	275;"	d
vst4q_f64	simde/arm/neon/st4.h	276;"	d
vst4q_s16	simde/arm/neon/st4.h	315;"	d
vst4q_s16	simde/arm/neon/st4.h	316;"	d
vst4q_s32	simde/arm/neon/st4.h	335;"	d
vst4q_s32	simde/arm/neon/st4.h	336;"	d
vst4q_s64	simde/arm/neon/st4.h	355;"	d
vst4q_s64	simde/arm/neon/st4.h	356;"	d
vst4q_s8	simde/arm/neon/st4.h	295;"	d
vst4q_s8	simde/arm/neon/st4.h	296;"	d
vst4q_u16	simde/arm/neon/st4.h	396;"	d
vst4q_u16	simde/arm/neon/st4.h	397;"	d
vst4q_u32	simde/arm/neon/st4.h	416;"	d
vst4q_u32	simde/arm/neon/st4.h	417;"	d
vst4q_u64	simde/arm/neon/st4.h	436;"	d
vst4q_u64	simde/arm/neon/st4.h	437;"	d
vst4q_u8	simde/arm/neon/st4.h	376;"	d
vst4q_u8	simde/arm/neon/st4.h	377;"	d
vsub_f32	simde/arm/neon/sub.h	60;"	d
vsub_f32	simde/arm/neon/sub.h	61;"	d
vsub_f64	simde/arm/neon/sub.h	88;"	d
vsub_f64	simde/arm/neon/sub.h	89;"	d
vsub_s16	simde/arm/neon/sub.h	148;"	d
vsub_s16	simde/arm/neon/sub.h	149;"	d
vsub_s32	simde/arm/neon/sub.h	178;"	d
vsub_s32	simde/arm/neon/sub.h	179;"	d
vsub_s64	simde/arm/neon/sub.h	206;"	d
vsub_s64	simde/arm/neon/sub.h	207;"	d
vsub_s8	simde/arm/neon/sub.h	118;"	d
vsub_s8	simde/arm/neon/sub.h	119;"	d
vsub_u16	simde/arm/neon/sub.h	266;"	d
vsub_u16	simde/arm/neon/sub.h	267;"	d
vsub_u32	simde/arm/neon/sub.h	296;"	d
vsub_u32	simde/arm/neon/sub.h	297;"	d
vsub_u64	simde/arm/neon/sub.h	324;"	d
vsub_u64	simde/arm/neon/sub.h	325;"	d
vsub_u8	simde/arm/neon/sub.h	236;"	d
vsub_u8	simde/arm/neon/sub.h	237;"	d
vsubl_s16	simde/arm/neon/subl.h	64;"	d
vsubl_s16	simde/arm/neon/subl.h	65;"	d
vsubl_s32	simde/arm/neon/subl.h	78;"	d
vsubl_s32	simde/arm/neon/subl.h	79;"	d
vsubl_s8	simde/arm/neon/subl.h	50;"	d
vsubl_s8	simde/arm/neon/subl.h	51;"	d
vsubl_u16	simde/arm/neon/subl.h	106;"	d
vsubl_u16	simde/arm/neon/subl.h	107;"	d
vsubl_u32	simde/arm/neon/subl.h	120;"	d
vsubl_u32	simde/arm/neon/subl.h	121;"	d
vsubl_u8	simde/arm/neon/subl.h	92;"	d
vsubl_u8	simde/arm/neon/subl.h	93;"	d
vsubq_f32	simde/arm/neon/sub.h	362;"	d
vsubq_f32	simde/arm/neon/sub.h	363;"	d
vsubq_f64	simde/arm/neon/sub.h	396;"	d
vsubq_f64	simde/arm/neon/sub.h	397;"	d
vsubq_s16	simde/arm/neon/sub.h	464;"	d
vsubq_s16	simde/arm/neon/sub.h	465;"	d
vsubq_s32	simde/arm/neon/sub.h	498;"	d
vsubq_s32	simde/arm/neon/sub.h	499;"	d
vsubq_s64	simde/arm/neon/sub.h	532;"	d
vsubq_s64	simde/arm/neon/sub.h	533;"	d
vsubq_s8	simde/arm/neon/sub.h	430;"	d
vsubq_s8	simde/arm/neon/sub.h	431;"	d
vsubq_u16	simde/arm/neon/sub.h	592;"	d
vsubq_u16	simde/arm/neon/sub.h	593;"	d
vsubq_u32	simde/arm/neon/sub.h	622;"	d
vsubq_u32	simde/arm/neon/sub.h	623;"	d
vsubq_u64	simde/arm/neon/sub.h	652;"	d
vsubq_u64	simde/arm/neon/sub.h	653;"	d
vsubq_u8	simde/arm/neon/sub.h	562;"	d
vsubq_u8	simde/arm/neon/sub.h	563;"	d
vsubw_high_s16	simde/arm/neon/subw_high.h	95;"	d
vsubw_high_s16	simde/arm/neon/subw_high.h	96;"	d
vsubw_high_s32	simde/arm/neon/subw_high.h	125;"	d
vsubw_high_s32	simde/arm/neon/subw_high.h	126;"	d
vsubw_high_s8	simde/arm/neon/subw_high.h	65;"	d
vsubw_high_s8	simde/arm/neon/subw_high.h	66;"	d
vsubw_high_u16	simde/arm/neon/subw_high.h	185;"	d
vsubw_high_u16	simde/arm/neon/subw_high.h	186;"	d
vsubw_high_u32	simde/arm/neon/subw_high.h	215;"	d
vsubw_high_u32	simde/arm/neon/subw_high.h	216;"	d
vsubw_high_u8	simde/arm/neon/subw_high.h	155;"	d
vsubw_high_u8	simde/arm/neon/subw_high.h	156;"	d
vsubw_s16	simde/arm/neon/subw.h	94;"	d
vsubw_s16	simde/arm/neon/subw.h	95;"	d
vsubw_s32	simde/arm/neon/subw.h	124;"	d
vsubw_s32	simde/arm/neon/subw.h	125;"	d
vsubw_s8	simde/arm/neon/subw.h	64;"	d
vsubw_s8	simde/arm/neon/subw.h	65;"	d
vsubw_u16	simde/arm/neon/subw.h	184;"	d
vsubw_u16	simde/arm/neon/subw.h	185;"	d
vsubw_u32	simde/arm/neon/subw.h	214;"	d
vsubw_u32	simde/arm/neon/subw.h	215;"	d
vsubw_u8	simde/arm/neon/subw.h	154;"	d
vsubw_u8	simde/arm/neon/subw.h	155;"	d
vtbl1_s8	simde/arm/neon/tbl.h	74;"	d
vtbl1_s8	simde/arm/neon/tbl.h	75;"	d
vtbl1_u8	simde/arm/neon/tbl.h	60;"	d
vtbl1_u8	simde/arm/neon/tbl.h	61;"	d
vtbl2_s8	simde/arm/neon/tbl.h	121;"	d
vtbl2_s8	simde/arm/neon/tbl.h	122;"	d
vtbl2_u8	simde/arm/neon/tbl.h	105;"	d
vtbl2_u8	simde/arm/neon/tbl.h	106;"	d
vtbl3_s8	simde/arm/neon/tbl.h	168;"	d
vtbl3_s8	simde/arm/neon/tbl.h	169;"	d
vtbl3_u8	simde/arm/neon/tbl.h	152;"	d
vtbl3_u8	simde/arm/neon/tbl.h	153;"	d
vtbl4_s8	simde/arm/neon/tbl.h	215;"	d
vtbl4_s8	simde/arm/neon/tbl.h	216;"	d
vtbl4_u8	simde/arm/neon/tbl.h	199;"	d
vtbl4_u8	simde/arm/neon/tbl.h	200;"	d
vtbx1_s8	simde/arm/neon/tbx.h	81;"	d
vtbx1_s8	simde/arm/neon/tbx.h	82;"	d
vtbx1_u8	simde/arm/neon/tbx.h	67;"	d
vtbx1_u8	simde/arm/neon/tbx.h	68;"	d
vtbx2_s8	simde/arm/neon/tbx.h	134;"	d
vtbx2_s8	simde/arm/neon/tbx.h	135;"	d
vtbx2_u8	simde/arm/neon/tbx.h	116;"	d
vtbx2_u8	simde/arm/neon/tbx.h	117;"	d
vtbx3_s8	simde/arm/neon/tbx.h	186;"	d
vtbx3_s8	simde/arm/neon/tbx.h	187;"	d
vtbx3_u8	simde/arm/neon/tbx.h	168;"	d
vtbx3_u8	simde/arm/neon/tbx.h	169;"	d
vtbx4_s8	simde/arm/neon/tbx.h	238;"	d
vtbx4_s8	simde/arm/neon/tbx.h	239;"	d
vtbx4_u8	simde/arm/neon/tbx.h	220;"	d
vtbx4_u8	simde/arm/neon/tbx.h	221;"	d
vtrn1_f32	simde/arm/neon/trn1.h	60;"	d
vtrn1_f32	simde/arm/neon/trn1.h	61;"	d
vtrn1_s16	simde/arm/neon/trn1.h	114;"	d
vtrn1_s16	simde/arm/neon/trn1.h	115;"	d
vtrn1_s32	simde/arm/neon/trn1.h	141;"	d
vtrn1_s32	simde/arm/neon/trn1.h	142;"	d
vtrn1_s8	simde/arm/neon/trn1.h	87;"	d
vtrn1_s8	simde/arm/neon/trn1.h	88;"	d
vtrn1_u16	simde/arm/neon/trn1.h	195;"	d
vtrn1_u16	simde/arm/neon/trn1.h	196;"	d
vtrn1_u32	simde/arm/neon/trn1.h	222;"	d
vtrn1_u32	simde/arm/neon/trn1.h	223;"	d
vtrn1_u8	simde/arm/neon/trn1.h	168;"	d
vtrn1_u8	simde/arm/neon/trn1.h	169;"	d
vtrn1q_f32	simde/arm/neon/trn1.h	249;"	d
vtrn1q_f32	simde/arm/neon/trn1.h	250;"	d
vtrn1q_f64	simde/arm/neon/trn1.h	276;"	d
vtrn1q_f64	simde/arm/neon/trn1.h	277;"	d
vtrn1q_s16	simde/arm/neon/trn1.h	330;"	d
vtrn1q_s16	simde/arm/neon/trn1.h	331;"	d
vtrn1q_s32	simde/arm/neon/trn1.h	357;"	d
vtrn1q_s32	simde/arm/neon/trn1.h	358;"	d
vtrn1q_s64	simde/arm/neon/trn1.h	384;"	d
vtrn1q_s64	simde/arm/neon/trn1.h	385;"	d
vtrn1q_s8	simde/arm/neon/trn1.h	303;"	d
vtrn1q_s8	simde/arm/neon/trn1.h	304;"	d
vtrn1q_u16	simde/arm/neon/trn1.h	439;"	d
vtrn1q_u16	simde/arm/neon/trn1.h	440;"	d
vtrn1q_u32	simde/arm/neon/trn1.h	466;"	d
vtrn1q_u32	simde/arm/neon/trn1.h	467;"	d
vtrn1q_u64	simde/arm/neon/trn1.h	493;"	d
vtrn1q_u64	simde/arm/neon/trn1.h	494;"	d
vtrn1q_u8	simde/arm/neon/trn1.h	412;"	d
vtrn1q_u8	simde/arm/neon/trn1.h	413;"	d
vtrn2_f32	simde/arm/neon/trn2.h	60;"	d
vtrn2_f32	simde/arm/neon/trn2.h	61;"	d
vtrn2_s16	simde/arm/neon/trn2.h	114;"	d
vtrn2_s16	simde/arm/neon/trn2.h	115;"	d
vtrn2_s32	simde/arm/neon/trn2.h	141;"	d
vtrn2_s32	simde/arm/neon/trn2.h	142;"	d
vtrn2_s8	simde/arm/neon/trn2.h	87;"	d
vtrn2_s8	simde/arm/neon/trn2.h	88;"	d
vtrn2_u16	simde/arm/neon/trn2.h	195;"	d
vtrn2_u16	simde/arm/neon/trn2.h	196;"	d
vtrn2_u32	simde/arm/neon/trn2.h	222;"	d
vtrn2_u32	simde/arm/neon/trn2.h	223;"	d
vtrn2_u8	simde/arm/neon/trn2.h	168;"	d
vtrn2_u8	simde/arm/neon/trn2.h	169;"	d
vtrn2q_f32	simde/arm/neon/trn2.h	249;"	d
vtrn2q_f32	simde/arm/neon/trn2.h	250;"	d
vtrn2q_f64	simde/arm/neon/trn2.h	276;"	d
vtrn2q_f64	simde/arm/neon/trn2.h	277;"	d
vtrn2q_s16	simde/arm/neon/trn2.h	330;"	d
vtrn2q_s16	simde/arm/neon/trn2.h	331;"	d
vtrn2q_s32	simde/arm/neon/trn2.h	357;"	d
vtrn2q_s32	simde/arm/neon/trn2.h	358;"	d
vtrn2q_s64	simde/arm/neon/trn2.h	384;"	d
vtrn2q_s64	simde/arm/neon/trn2.h	385;"	d
vtrn2q_s8	simde/arm/neon/trn2.h	303;"	d
vtrn2q_s8	simde/arm/neon/trn2.h	304;"	d
vtrn2q_u16	simde/arm/neon/trn2.h	438;"	d
vtrn2q_u16	simde/arm/neon/trn2.h	439;"	d
vtrn2q_u32	simde/arm/neon/trn2.h	465;"	d
vtrn2q_u32	simde/arm/neon/trn2.h	466;"	d
vtrn2q_u64	simde/arm/neon/trn2.h	492;"	d
vtrn2q_u64	simde/arm/neon/trn2.h	493;"	d
vtrn2q_u8	simde/arm/neon/trn2.h	411;"	d
vtrn2q_u8	simde/arm/neon/trn2.h	412;"	d
vtrn_f32	simde/arm/neon/trn.h	50;"	d
vtrn_f32	simde/arm/neon/trn.h	51;"	d
vtrn_s16	simde/arm/neon/trn.h	80;"	d
vtrn_s16	simde/arm/neon/trn.h	81;"	d
vtrn_s32	simde/arm/neon/trn.h	95;"	d
vtrn_s32	simde/arm/neon/trn.h	96;"	d
vtrn_s8	simde/arm/neon/trn.h	65;"	d
vtrn_s8	simde/arm/neon/trn.h	66;"	d
vtrn_u16	simde/arm/neon/trn.h	125;"	d
vtrn_u16	simde/arm/neon/trn.h	126;"	d
vtrn_u32	simde/arm/neon/trn.h	140;"	d
vtrn_u32	simde/arm/neon/trn.h	141;"	d
vtrn_u8	simde/arm/neon/trn.h	110;"	d
vtrn_u8	simde/arm/neon/trn.h	111;"	d
vtrnq_f32	simde/arm/neon/trn.h	155;"	d
vtrnq_f32	simde/arm/neon/trn.h	156;"	d
vtrnq_s16	simde/arm/neon/trn.h	185;"	d
vtrnq_s16	simde/arm/neon/trn.h	186;"	d
vtrnq_s32	simde/arm/neon/trn.h	200;"	d
vtrnq_s32	simde/arm/neon/trn.h	201;"	d
vtrnq_s8	simde/arm/neon/trn.h	170;"	d
vtrnq_s8	simde/arm/neon/trn.h	171;"	d
vtrnq_u16	simde/arm/neon/trn.h	230;"	d
vtrnq_u16	simde/arm/neon/trn.h	231;"	d
vtrnq_u32	simde/arm/neon/trn.h	245;"	d
vtrnq_u32	simde/arm/neon/trn.h	246;"	d
vtrnq_u8	simde/arm/neon/trn.h	215;"	d
vtrnq_u8	simde/arm/neon/trn.h	216;"	d
vtst_s16	simde/arm/neon/tst.h	353;"	d
vtst_s16	simde/arm/neon/tst.h	354;"	d
vtst_s32	simde/arm/neon/tst.h	383;"	d
vtst_s32	simde/arm/neon/tst.h	384;"	d
vtst_s64	simde/arm/neon/tst.h	413;"	d
vtst_s64	simde/arm/neon/tst.h	414;"	d
vtst_s8	simde/arm/neon/tst.h	323;"	d
vtst_s8	simde/arm/neon/tst.h	324;"	d
vtst_u16	simde/arm/neon/tst.h	473;"	d
vtst_u16	simde/arm/neon/tst.h	474;"	d
vtst_u32	simde/arm/neon/tst.h	503;"	d
vtst_u32	simde/arm/neon/tst.h	504;"	d
vtst_u64	simde/arm/neon/tst.h	533;"	d
vtst_u64	simde/arm/neon/tst.h	534;"	d
vtst_u8	simde/arm/neon/tst.h	443;"	d
vtst_u8	simde/arm/neon/tst.h	444;"	d
vtstq_s16	simde/arm/neon/tst.h	105;"	d
vtstq_s16	simde/arm/neon/tst.h	106;"	d
vtstq_s32	simde/arm/neon/tst.h	137;"	d
vtstq_s32	simde/arm/neon/tst.h	138;"	d
vtstq_s64	simde/arm/neon/tst.h	167;"	d
vtstq_s64	simde/arm/neon/tst.h	168;"	d
vtstq_s8	simde/arm/neon/tst.h	73;"	d
vtstq_s8	simde/arm/neon/tst.h	74;"	d
vtstq_u16	simde/arm/neon/tst.h	231;"	d
vtstq_u16	simde/arm/neon/tst.h	232;"	d
vtstq_u32	simde/arm/neon/tst.h	263;"	d
vtstq_u32	simde/arm/neon/tst.h	264;"	d
vtstq_u64	simde/arm/neon/tst.h	293;"	d
vtstq_u64	simde/arm/neon/tst.h	294;"	d
vtstq_u8	simde/arm/neon/tst.h	199;"	d
vtstq_u8	simde/arm/neon/tst.h	200;"	d
vtuneConfiguration_H	vtuneConfiguration.h	2;"	d
vuqadd_s16	simde/arm/neon/uqadd.h	158;"	d
vuqadd_s16	simde/arm/neon/uqadd.h	159;"	d
vuqadd_s32	simde/arm/neon/uqadd.h	182;"	d
vuqadd_s32	simde/arm/neon/uqadd.h	183;"	d
vuqadd_s64	simde/arm/neon/uqadd.h	206;"	d
vuqadd_s64	simde/arm/neon/uqadd.h	207;"	d
vuqadd_s8	simde/arm/neon/uqadd.h	134;"	d
vuqadd_s8	simde/arm/neon/uqadd.h	135;"	d
vuqaddb_s8	simde/arm/neon/uqadd.h	47;"	d
vuqaddb_s8	simde/arm/neon/uqadd.h	48;"	d
vuqaddd_s64	simde/arm/neon/uqadd.h	110;"	d
vuqaddd_s64	simde/arm/neon/uqadd.h	111;"	d
vuqaddh_s16	simde/arm/neon/uqadd.h	62;"	d
vuqaddh_s16	simde/arm/neon/uqadd.h	63;"	d
vuqaddq_s16	simde/arm/neon/uqadd.h	254;"	d
vuqaddq_s16	simde/arm/neon/uqadd.h	255;"	d
vuqaddq_s32	simde/arm/neon/uqadd.h	278;"	d
vuqaddq_s32	simde/arm/neon/uqadd.h	279;"	d
vuqaddq_s64	simde/arm/neon/uqadd.h	302;"	d
vuqaddq_s64	simde/arm/neon/uqadd.h	303;"	d
vuqaddq_s8	simde/arm/neon/uqadd.h	230;"	d
vuqaddq_s8	simde/arm/neon/uqadd.h	231;"	d
vuqadds_s32	simde/arm/neon/uqadd.h	77;"	d
vuqadds_s32	simde/arm/neon/uqadd.h	78;"	d
vuzp1_f32	simde/arm/neon/uzp1.h	67;"	d
vuzp1_f32	simde/arm/neon/uzp1.h	68;"	d
vuzp1_s16	simde/arm/neon/uzp1.h	135;"	d
vuzp1_s16	simde/arm/neon/uzp1.h	136;"	d
vuzp1_s32	simde/arm/neon/uzp1.h	169;"	d
vuzp1_s32	simde/arm/neon/uzp1.h	170;"	d
vuzp1_s8	simde/arm/neon/uzp1.h	101;"	d
vuzp1_s8	simde/arm/neon/uzp1.h	102;"	d
vuzp1_u16	simde/arm/neon/uzp1.h	237;"	d
vuzp1_u16	simde/arm/neon/uzp1.h	238;"	d
vuzp1_u32	simde/arm/neon/uzp1.h	271;"	d
vuzp1_u32	simde/arm/neon/uzp1.h	272;"	d
vuzp1_u8	simde/arm/neon/uzp1.h	203;"	d
vuzp1_u8	simde/arm/neon/uzp1.h	204;"	d
vuzp1q_f32	simde/arm/neon/uzp1.h	309;"	d
vuzp1q_f32	simde/arm/neon/uzp1.h	310;"	d
vuzp1q_f64	simde/arm/neon/uzp1.h	344;"	d
vuzp1q_f64	simde/arm/neon/uzp1.h	345;"	d
vuzp1q_s16	simde/arm/neon/uzp1.h	416;"	d
vuzp1q_s16	simde/arm/neon/uzp1.h	417;"	d
vuzp1q_s32	simde/arm/neon/uzp1.h	454;"	d
vuzp1q_s32	simde/arm/neon/uzp1.h	455;"	d
vuzp1q_s64	simde/arm/neon/uzp1.h	489;"	d
vuzp1q_s64	simde/arm/neon/uzp1.h	490;"	d
vuzp1q_s8	simde/arm/neon/uzp1.h	380;"	d
vuzp1q_s8	simde/arm/neon/uzp1.h	381;"	d
vuzp1q_u16	simde/arm/neon/uzp1.h	562;"	d
vuzp1q_u16	simde/arm/neon/uzp1.h	563;"	d
vuzp1q_u32	simde/arm/neon/uzp1.h	600;"	d
vuzp1q_u32	simde/arm/neon/uzp1.h	601;"	d
vuzp1q_u64	simde/arm/neon/uzp1.h	636;"	d
vuzp1q_u64	simde/arm/neon/uzp1.h	637;"	d
vuzp1q_u8	simde/arm/neon/uzp1.h	526;"	d
vuzp1q_u8	simde/arm/neon/uzp1.h	527;"	d
vuzp2_f32	simde/arm/neon/uzp2.h	67;"	d
vuzp2_f32	simde/arm/neon/uzp2.h	68;"	d
vuzp2_s16	simde/arm/neon/uzp2.h	135;"	d
vuzp2_s16	simde/arm/neon/uzp2.h	136;"	d
vuzp2_s32	simde/arm/neon/uzp2.h	169;"	d
vuzp2_s32	simde/arm/neon/uzp2.h	170;"	d
vuzp2_s8	simde/arm/neon/uzp2.h	101;"	d
vuzp2_s8	simde/arm/neon/uzp2.h	102;"	d
vuzp2_u16	simde/arm/neon/uzp2.h	237;"	d
vuzp2_u16	simde/arm/neon/uzp2.h	238;"	d
vuzp2_u32	simde/arm/neon/uzp2.h	271;"	d
vuzp2_u32	simde/arm/neon/uzp2.h	272;"	d
vuzp2_u8	simde/arm/neon/uzp2.h	203;"	d
vuzp2_u8	simde/arm/neon/uzp2.h	204;"	d
vuzp2q_f32	simde/arm/neon/uzp2.h	309;"	d
vuzp2q_f32	simde/arm/neon/uzp2.h	310;"	d
vuzp2q_f64	simde/arm/neon/uzp2.h	346;"	d
vuzp2q_f64	simde/arm/neon/uzp2.h	347;"	d
vuzp2q_s16	simde/arm/neon/uzp2.h	418;"	d
vuzp2q_s16	simde/arm/neon/uzp2.h	419;"	d
vuzp2q_s32	simde/arm/neon/uzp2.h	456;"	d
vuzp2q_s32	simde/arm/neon/uzp2.h	457;"	d
vuzp2q_s64	simde/arm/neon/uzp2.h	493;"	d
vuzp2q_s64	simde/arm/neon/uzp2.h	494;"	d
vuzp2q_s8	simde/arm/neon/uzp2.h	382;"	d
vuzp2q_s8	simde/arm/neon/uzp2.h	383;"	d
vuzp2q_u16	simde/arm/neon/uzp2.h	565;"	d
vuzp2q_u16	simde/arm/neon/uzp2.h	566;"	d
vuzp2q_u32	simde/arm/neon/uzp2.h	603;"	d
vuzp2q_u32	simde/arm/neon/uzp2.h	604;"	d
vuzp2q_u64	simde/arm/neon/uzp2.h	640;"	d
vuzp2q_u64	simde/arm/neon/uzp2.h	641;"	d
vuzp2q_u8	simde/arm/neon/uzp2.h	529;"	d
vuzp2q_u8	simde/arm/neon/uzp2.h	530;"	d
vuzp_f32	simde/arm/neon/uzp.h	50;"	d
vuzp_f32	simde/arm/neon/uzp.h	51;"	d
vuzp_s16	simde/arm/neon/uzp.h	80;"	d
vuzp_s16	simde/arm/neon/uzp.h	81;"	d
vuzp_s32	simde/arm/neon/uzp.h	95;"	d
vuzp_s32	simde/arm/neon/uzp.h	96;"	d
vuzp_s8	simde/arm/neon/uzp.h	65;"	d
vuzp_s8	simde/arm/neon/uzp.h	66;"	d
vuzp_u16	simde/arm/neon/uzp.h	125;"	d
vuzp_u16	simde/arm/neon/uzp.h	126;"	d
vuzp_u32	simde/arm/neon/uzp.h	140;"	d
vuzp_u32	simde/arm/neon/uzp.h	141;"	d
vuzp_u8	simde/arm/neon/uzp.h	110;"	d
vuzp_u8	simde/arm/neon/uzp.h	111;"	d
vuzpq_f32	simde/arm/neon/uzp.h	155;"	d
vuzpq_f32	simde/arm/neon/uzp.h	156;"	d
vuzpq_s16	simde/arm/neon/uzp.h	185;"	d
vuzpq_s16	simde/arm/neon/uzp.h	186;"	d
vuzpq_s32	simde/arm/neon/uzp.h	200;"	d
vuzpq_s32	simde/arm/neon/uzp.h	201;"	d
vuzpq_s8	simde/arm/neon/uzp.h	170;"	d
vuzpq_s8	simde/arm/neon/uzp.h	171;"	d
vuzpq_u16	simde/arm/neon/uzp.h	230;"	d
vuzpq_u16	simde/arm/neon/uzp.h	231;"	d
vuzpq_u32	simde/arm/neon/uzp.h	245;"	d
vuzpq_u32	simde/arm/neon/uzp.h	246;"	d
vuzpq_u8	simde/arm/neon/uzp.h	215;"	d
vuzpq_u8	simde/arm/neon/uzp.h	216;"	d
vzip1_f32	simde/arm/neon/zip1.h	65;"	d
vzip1_f32	simde/arm/neon/zip1.h	66;"	d
vzip1_s16	simde/arm/neon/zip1.h	129;"	d
vzip1_s16	simde/arm/neon/zip1.h	130;"	d
vzip1_s32	simde/arm/neon/zip1.h	161;"	d
vzip1_s32	simde/arm/neon/zip1.h	162;"	d
vzip1_s8	simde/arm/neon/zip1.h	97;"	d
vzip1_s8	simde/arm/neon/zip1.h	98;"	d
vzip1_u16	simde/arm/neon/zip1.h	225;"	d
vzip1_u16	simde/arm/neon/zip1.h	226;"	d
vzip1_u32	simde/arm/neon/zip1.h	257;"	d
vzip1_u32	simde/arm/neon/zip1.h	258;"	d
vzip1_u8	simde/arm/neon/zip1.h	193;"	d
vzip1_u8	simde/arm/neon/zip1.h	194;"	d
vzip1q_f32	simde/arm/neon/zip1.h	293;"	d
vzip1q_f32	simde/arm/neon/zip1.h	294;"	d
vzip1q_f64	simde/arm/neon/zip1.h	329;"	d
vzip1q_f64	simde/arm/neon/zip1.h	330;"	d
vzip1q_s16	simde/arm/neon/zip1.h	401;"	d
vzip1q_s16	simde/arm/neon/zip1.h	402;"	d
vzip1q_s32	simde/arm/neon/zip1.h	437;"	d
vzip1q_s32	simde/arm/neon/zip1.h	438;"	d
vzip1q_s64	simde/arm/neon/zip1.h	473;"	d
vzip1q_s64	simde/arm/neon/zip1.h	474;"	d
vzip1q_s8	simde/arm/neon/zip1.h	365;"	d
vzip1q_s8	simde/arm/neon/zip1.h	366;"	d
vzip1q_u16	simde/arm/neon/zip1.h	546;"	d
vzip1q_u16	simde/arm/neon/zip1.h	547;"	d
vzip1q_u32	simde/arm/neon/zip1.h	582;"	d
vzip1q_u32	simde/arm/neon/zip1.h	583;"	d
vzip1q_u64	simde/arm/neon/zip1.h	618;"	d
vzip1q_u64	simde/arm/neon/zip1.h	619;"	d
vzip1q_u8	simde/arm/neon/zip1.h	510;"	d
vzip1q_u8	simde/arm/neon/zip1.h	511;"	d
vzip2_f32	simde/arm/neon/zip2.h	65;"	d
vzip2_f32	simde/arm/neon/zip2.h	66;"	d
vzip2_s16	simde/arm/neon/zip2.h	129;"	d
vzip2_s16	simde/arm/neon/zip2.h	130;"	d
vzip2_s32	simde/arm/neon/zip2.h	161;"	d
vzip2_s32	simde/arm/neon/zip2.h	162;"	d
vzip2_s8	simde/arm/neon/zip2.h	97;"	d
vzip2_s8	simde/arm/neon/zip2.h	98;"	d
vzip2_u16	simde/arm/neon/zip2.h	225;"	d
vzip2_u16	simde/arm/neon/zip2.h	226;"	d
vzip2_u32	simde/arm/neon/zip2.h	257;"	d
vzip2_u32	simde/arm/neon/zip2.h	258;"	d
vzip2_u8	simde/arm/neon/zip2.h	193;"	d
vzip2_u8	simde/arm/neon/zip2.h	194;"	d
vzip2q_f32	simde/arm/neon/zip2.h	293;"	d
vzip2q_f32	simde/arm/neon/zip2.h	294;"	d
vzip2q_f64	simde/arm/neon/zip2.h	329;"	d
vzip2q_f64	simde/arm/neon/zip2.h	330;"	d
vzip2q_s16	simde/arm/neon/zip2.h	401;"	d
vzip2q_s16	simde/arm/neon/zip2.h	402;"	d
vzip2q_s32	simde/arm/neon/zip2.h	437;"	d
vzip2q_s32	simde/arm/neon/zip2.h	438;"	d
vzip2q_s64	simde/arm/neon/zip2.h	473;"	d
vzip2q_s64	simde/arm/neon/zip2.h	474;"	d
vzip2q_s8	simde/arm/neon/zip2.h	365;"	d
vzip2q_s8	simde/arm/neon/zip2.h	366;"	d
vzip2q_u16	simde/arm/neon/zip2.h	546;"	d
vzip2q_u16	simde/arm/neon/zip2.h	547;"	d
vzip2q_u32	simde/arm/neon/zip2.h	582;"	d
vzip2q_u32	simde/arm/neon/zip2.h	583;"	d
vzip2q_u64	simde/arm/neon/zip2.h	618;"	d
vzip2q_u64	simde/arm/neon/zip2.h	619;"	d
vzip2q_u8	simde/arm/neon/zip2.h	510;"	d
vzip2q_u8	simde/arm/neon/zip2.h	511;"	d
vzip_f32	simde/arm/neon/zip.h	50;"	d
vzip_f32	simde/arm/neon/zip.h	51;"	d
vzip_s16	simde/arm/neon/zip.h	80;"	d
vzip_s16	simde/arm/neon/zip.h	81;"	d
vzip_s32	simde/arm/neon/zip.h	95;"	d
vzip_s32	simde/arm/neon/zip.h	96;"	d
vzip_s8	simde/arm/neon/zip.h	65;"	d
vzip_s8	simde/arm/neon/zip.h	66;"	d
vzip_u16	simde/arm/neon/zip.h	125;"	d
vzip_u16	simde/arm/neon/zip.h	126;"	d
vzip_u32	simde/arm/neon/zip.h	140;"	d
vzip_u32	simde/arm/neon/zip.h	141;"	d
vzip_u8	simde/arm/neon/zip.h	110;"	d
vzip_u8	simde/arm/neon/zip.h	111;"	d
vzipq_f32	simde/arm/neon/zip.h	155;"	d
vzipq_f32	simde/arm/neon/zip.h	156;"	d
vzipq_s16	simde/arm/neon/zip.h	185;"	d
vzipq_s16	simde/arm/neon/zip.h	186;"	d
vzipq_s32	simde/arm/neon/zip.h	200;"	d
vzipq_s32	simde/arm/neon/zip.h	201;"	d
vzipq_s8	simde/arm/neon/zip.h	170;"	d
vzipq_s8	simde/arm/neon/zip.h	171;"	d
vzipq_u16	simde/arm/neon/zip.h	230;"	d
vzipq_u16	simde/arm/neon/zip.h	231;"	d
vzipq_u32	simde/arm/neon/zip.h	245;"	d
vzipq_u32	simde/arm/neon/zip.h	246;"	d
vzipq_u8	simde/arm/neon/zip.h	215;"	d
vzipq_u8	simde/arm/neon/zip.h	216;"	d
w	subcommand/haplotypes_main.cpp	/^    size_t k = haplotypes_default_k(), w = haplotypes_default_w();$/;"	m	struct:HaplotypesConfig	file:
wabbit_map	vectorizer.hpp	/^    unordered_map<string, int> wabbit_map;$/;"	m	class:Vectorizer
wabbitize	vectorizer.hpp	/^    template<typename T> string wabbitize(string name, T v){$/;"	f	class:Vectorizer
wait_for_region	graph_synchronizer.hpp	/^    condition_variable wait_for_region;$/;"	m	class:vg::GraphSynchronizer
walk_backwards	sampler.cpp	/^bool NGSSimulator::walk_backwards(int64_t& offset, bool& is_reverse, pos_t& pos, int64_t distance,$/;"	f	class:vg::NGSSimulator
walk_backwards_along_alignment	sampler.cpp	/^bool NGSSimulator::walk_backwards_along_alignment(const Path& path, int64_t distance, pos_t& pos) {$/;"	f	class:vg::NGSSimulator
walk_fanout_path	mapper.cpp	/^vector<pos_t> BaseMapper::walk_fanout_path(string::const_iterator begin,$/;"	f	class:vg::BaseMapper
walk_haplotype_frequency	algorithms/walk.cpp	/^uint64_t walk_haplotype_frequency(const HandleGraph& graph,$/;"	f	namespace:vg::algorithms
walk_haplotype_names	algorithms/walk.cpp	/^std::vector<std::string> walk_haplotype_names(const HandleGraph& graph,$/;"	f	namespace:vg::algorithms
walk_listeners	algorithms/gfa_to_handle.hpp	/^    vector<std::function<void(const string& sample_name, int64_t haplotype, const string& contig_name, const pair<int64_t, int64_t>& subrange, const chars_t& visits, const tag_list_t& tags)>> walk_listeners;$/;"	m	class:vg::algorithms::GFAParser
walk_t	algorithms/prune.cpp	/^    walk_t(uint16_t l,$/;"	f	struct:vg::algorithms::walk_t
walk_t	algorithms/prune.cpp	/^struct walk_t {$/;"	s	namespace:vg::algorithms	file:
walk_t	algorithms/walk.hpp	/^    walk_t(const std::string& s,$/;"	f	struct:vg::algorithms::walk_t
walk_t	algorithms/walk.hpp	/^struct walk_t {$/;"	s	namespace:vg::algorithms
wang_hash	handle.hpp	/^struct wang_hash<handle_t> {$/;"	s	namespace:vg
wang_hash	handle.hpp	/^struct wang_hash<path_handle_t> {$/;"	s	namespace:vg
wang_hash	hash_map.hpp	/^struct wang_hash<T*> {$/;"	s	namespace:vg
wang_hash	hash_map.hpp	/^struct wang_hash<T, typename std::enable_if<std::is_integral<T>::value>::type> {$/;"	s	namespace:vg
wang_hash	hash_map.hpp	/^struct wang_hash<std::pair<A, B>> {$/;"	s	namespace:vg
wang_hash	nodeside.hpp	/^struct wang_hash<NodeSide> {$/;"	s	namespace:vg
wang_hash	nodetraversal.hpp	/^struct wang_hash<NodeTraversal> {$/;"	s	namespace:vg
wang_hash	snarl_distance_index.hpp	/^template<> struct wang_hash<handlegraph::net_handle_t> {$/;"	s	namespace:vg
wang_hash_64	wang_hash.hpp	/^inline size_t wang_hash_64(size_t key) {$/;"	f	namespace:vg
warn_on_ambiguous	constructor.hpp	/^    bool warn_on_ambiguous = true;$/;"	m	class:vg::Constructor
warn_on_lowercase	constructor.hpp	/^    bool warn_on_lowercase = true;$/;"	m	class:vg::Constructor
warn_on_missing_variants	haplotype_indexer.hpp	/^    bool warn_on_missing_variants = true;$/;"	m	class:vg::HaplotypeIndexer
warn_on_score_fail	haplotypes.cpp	/^bool warn_on_score_fail = false;$/;"	m	namespace:haplo	file:
warned_about_bad_distribution	minimizer_mapper.hpp	/^    atomic_flag warned_about_bad_distribution = ATOMIC_FLAG_INIT;$/;"	m	class:vg::MinimizerMapper
warned_about_rescue_size	minimizer_mapper.hpp	/^    atomic_flag warned_about_rescue_size = ATOMIC_FLAG_INIT;$/;"	m	class:vg::MinimizerMapper
warned_about_rewrites	vg.hpp	/^    bool warned_about_rewrites = false;$/;"	m	class:vg::VG
warned_about_subgraph_size	surjector.hpp	/^        mutable atomic_flag warned_about_subgraph_size = ATOMIC_FLAG_INIT;$/;"	m	class:vg::Surjector
warned_about_tail_size	minimizer_mapper.hpp	/^    mutable atomic_flag warned_about_tail_size = ATOMIC_FLAG_INIT;$/;"	m	class:vg::MinimizerMapper
was_correct	funnel.cpp	/^bool Funnel::was_correct(size_t prev_stage_index, const string& prev_stage_name, size_t prev_stage_item) const {$/;"	f	class:vg::Funnel
was_correct	funnel.cpp	/^bool Funnel::was_correct(size_t prev_stage_item) const {$/;"	f	class:vg::Funnel
was_provided_directly	index_registry.cpp	/^bool IndexFile::was_provided_directly() const {$/;"	f	class:vg::IndexFile
was_set	subcommand/options.hpp	/^    virtual bool was_set() const {$/;"	f	struct:vg::subcommand::ValueArgSpec
wasm_v128	simde/x86/sse.h	/^    SIMDE_ALIGN_TO_16 v128_t         wasm_v128;$/;"	m	union:__anon12
wasm_v128	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 v128_t         wasm_v128;$/;"	m	union:__anon10
wasm_v128	simde/x86/sse2.h	/^    SIMDE_ALIGN_TO_16 v128_t         wasm_v128;$/;"	m	union:__anon11
watchdog_timeout	subcommand/giraffe_main.cpp	/^    size_t watchdog_timeout = default_watchdog_timeout;$/;"	m	struct:GiraffeMainOptions	file:
watcher	watchdog.hpp	/^    thread watcher;$/;"	m	class:vg::Watchdog
watcher_loop	watchdog.cpp	/^void Watchdog::watcher_loop() {$/;"	f	class:vg::Watchdog
wavefronts	gbwt_extender.cpp	/^    std::array<std::unordered_map<WFAPoint::key_type, WFAPoint::value_type>, 3> wavefronts;$/;"	m	struct:vg::WFANode	file:
weibull_cdf	statistics.hpp	/^inline double weibull_cdf(double x, double scale, double shape, double location = 0.0) {$/;"	f	namespace:vg
weibull_log_likelihood	statistics.cpp	/^double weibull_log_likelihood(const vector<double>& x, double scale, double shape,$/;"	f	namespace:vg
weight	algorithms/min_cut_graph.hpp	/^            int weight;$/;"	m	struct:vg::algorithms::Edge
weight	algorithms/min_cut_graph.hpp	/^            int weight;$/;"	m	struct:vg::algorithms::Node
weight	cluster.hpp	/^    double weight;$/;"	m	class:vg::MEMChainModelVertex
weight	cluster.hpp	/^    int32_t weight;$/;"	m	class:vg::MEMClusterer::HitEdge
weight	mapper.hpp	/^    double weight;$/;"	m	class:vg::AlignmentChainModelVertex
wellford_mean_var	statistics.cpp	/^pair<double, double> wellford_mean_var(size_t count, double mean, double M2, bool sample_variance) {$/;"	f	namespace:vg
wellford_update	statistics.cpp	/^void wellford_update(size_t& count, double& mean, double& M2, double new_val) {$/;"	f	namespace:vg
wfa_alignment_to_alignment	minimizer_mapper_from_chains.cpp	/^void MinimizerMapper::wfa_alignment_to_alignment(const WFAAlignment& wfa_alignment, Alignment& alignment) const {$/;"	f	class:vg::MinimizerMapper
wfa_cycle_gbwt	unittest/gbwt_extender.cpp	/^gbwt::GBWT wfa_cycle_gbwt() {$/;"	f	namespace:vg::unittest::__anon4
wfa_cycle_graph	unittest/gbwt_extender.cpp	/^gbwtgraph::GBWTGraph wfa_cycle_graph(const gbwt::GBWT& index) {$/;"	f	namespace:vg::unittest::__anon4
wfa_general_gbwt	unittest/gbwt_extender.cpp	/^gbwt::GBWT wfa_general_gbwt() {$/;"	f	namespace:vg::unittest::__anon4
wfa_general_graph	unittest/gbwt_extender.cpp	/^gbwtgraph::GBWTGraph wfa_general_graph(const gbwt::GBWT& index) {$/;"	f	namespace:vg::unittest::__anon4
wfa_linear_gbwt	unittest/gbwt_extender.cpp	/^gbwt::GBWT wfa_linear_gbwt() {$/;"	f	namespace:vg::unittest::__anon4
wfa_linear_graph	unittest/gbwt_extender.cpp	/^gbwtgraph::GBWTGraph wfa_linear_graph(const gbwt::GBWT& index) {$/;"	f	namespace:vg::unittest::__anon4
wfa_non_diverging_multi_node_cycle_gbwt	unittest/gbwt_extender.cpp	/^gbwt::GBWT wfa_non_diverging_multi_node_cycle_gbwt() {$/;"	f	namespace:vg::unittest::__anon4
wfa_non_diverging_multi_node_cycle_graph	unittest/gbwt_extender.cpp	/^gbwtgraph::GBWTGraph wfa_non_diverging_multi_node_cycle_graph(const gbwt::GBWT& index) {$/;"	f	namespace:vg::unittest::__anon4
what	kmer.cpp	/^const char* SizeLimitExceededException::what() const throw() {$/;"	f	class:vg::SizeLimitExceededException
which_haplotype	phased_genome.hpp	/^        inline int which_haplotype() {$/;"	f	class:vg::PhasedGenome::iterator
whole_alignment_cutoff	variant_adder.hpp	/^    size_t whole_alignment_cutoff = 4096;$/;"	m	class:vg::VariantAdder
whole_graph_lock	graph_synchronizer.hpp	/^    mutex whole_graph_lock;$/;"	m	class:vg::GraphSynchronizer
widest_dijkstra	algorithms/k_widest_paths.cpp	/^pair<double, vector<handle_t>> widest_dijkstra(const HandleGraph* g, handle_t source, handle_t sink,$/;"	f	namespace:vg::algorithms
window_length	filter.hpp	/^        int window_length = 0;$/;"	m	class:vg::Filter
window_size	minimizer_mapper.hpp	/^        inline size_t window_size() const {$/;"	f	struct:vg::MinimizerMapper::Minimizer
window_size	vcf_buffer.hpp	/^    size_t window_size;$/;"	m	class:vg::WindowedVcfBuffer
window_to_start	stream_index.hpp	/^    map<window_t, int64_t> window_to_start;$/;"	m	class:vg::StreamIndexBase
with_cache_entry	indexed_vg.cpp	/^bool IndexedVG::with_cache_entry(int64_t group_vo, const function<void(const CacheEntry&)>& callback) const {$/;"	f	class:vg::IndexedVG
with_cursor	indexed_vg.cpp	/^void IndexedVG::with_cursor(function<void(cursor_t&)> callback) const {$/;"	f	class:vg::IndexedVG
with_dagified_local_graph	minimizer_mapper_from_chains.cpp	/^void MinimizerMapper::with_dagified_local_graph(const pos_t& left_anchor, const pos_t& right_anchor, size_t max_path_length, const HandleGraph& graph, const std::function<void(DeletableHandleGraph&, const std::function<std::pair<nid_t, bool>(const handle_t&)>&)>& callback) {$/;"	f	class:vg::MinimizerMapper
with_exception_handling	crash.cpp	/^void with_exception_handling(const std::function<void(void)>& body) {$/;"	f	namespace:vg
with_path_index	graph_synchronizer.cpp	/^void GraphSynchronizer::with_path_index(const string& path_name, const function<void(const PathIndex&)>& to_run) {$/;"	f	class:vg::GraphSynchronizer
with_vector	utility.hpp	/^    void with_vector(const std::function<void(const vector<Item>&)>& callback) const {$/;"	f	struct:vg::VectorView
with_vector	utility.hpp	/^    void with_vector(const std::function<void(vector<Item>&)>& callback) {$/;"	f	struct:vg::VectorView
without_read	minimizer_mapper.cpp	/^    inline read_alignment_index_t without_read() {$/;"	f	struct:vg::alignment_index_t
work_dir	index_registry.hpp	/^    string work_dir;$/;"	m	class:vg::IndexRegistry
worst_alignment_score	multipath_alignment.cpp	/^    int32_t worst_alignment_score(const multipath_alignment_t& multipath_aln) {$/;"	f	namespace:vg
wrap_text	utility.cpp	/^string wrap_text(const string& str, size_t width) {$/;"	f	namespace:vg
wrap_with_null_nodes	vg.cpp	/^void VG::wrap_with_null_nodes(void) {$/;"	f	class:vg::VG
write	io/json_stream_helper.hpp	/^inline int64_t JSONStreamHelper<T>::write(std::ostream& out, bool json_out,$/;"	f	class:vg::io::JSONStreamHelper
write	path.cpp	/^void Paths::write(ostream& out) {$/;"	f	class:vg::Paths
writeToStream	unittest/catch.hpp	/^        void writeToStream( std::ostream &os ) const {$/;"	f	struct:Catch::Parser
write_annotations	explainer.cpp	/^void DiagramExplainer::write_annotations(std::ostream& out, const annotation_t& annotations) const {$/;"	f	class:vg::DiagramExplainer
write_connected_components	explainer.cpp	/^void DiagramExplainer::write_connected_components() const {$/;"	f	class:vg::DiagramExplainer
write_edge	explainer.cpp	/^void DiagramExplainer::write_edge(std::ostream& out, const std::string& a_id, const std::string& b_id, const annotation_t& annotations) const {$/;"	f	class:vg::DiagramExplainer
write_edits	packer.cpp	/^void Packer::write_edits(ostream& out, size_t bin) const {$/;"	f	class:vg::Packer
write_edits	packer.cpp	/^void Packer::write_edits(vector<ofstream*>& out) const {$/;"	f	class:vg::Packer
write_fasta_sequence	utility.cpp	/^void write_fasta_sequence(const std::string& name, const std::string& sequence, ostream& os, size_t width) {$/;"	f	namespace:vg
write_gcsa_kmers	kmer.cpp	/^void write_gcsa_kmers(const HandleGraph& graph, int kmer_size, ostream& out, size_t& size_limit, id_t head_id, id_t tail_id) {$/;"	f	namespace:vg
write_gcsa_kmers_ascii	vg_set.cpp	/^void VGset::write_gcsa_kmers_ascii(ostream& out, int kmer_size,$/;"	f	class:vg::VGset
write_gcsa_kmers_binary	vg_set.cpp	/^vector<string> VGset::write_gcsa_kmers_binary(int kmer_size, size_t& size_limit,$/;"	f	class:vg::VGset
write_gcsa_kmers_binary	vg_set.cpp	/^void VGset::write_gcsa_kmers_binary(ostream& out, int kmer_size, size_t& size_limit,$/;"	f	class:vg::VGset
write_gcsa_kmers_to_tmpfile	kmer.cpp	/^string write_gcsa_kmers_to_tmpfile(const HandleGraph& graph, int kmer_size, size_t& size_limit, id_t head_id, id_t tail_id,$/;"	f	namespace:vg
write_gfa_translation	algorithms/gfa_to_handle.cpp	/^static void write_gfa_translation(const GFAIDMapInfo& id_map_info, const string& translation_filename) {$/;"	f	namespace:vg::algorithms
write_globals	explainer.cpp	/^void DiagramExplainer::write_globals(std::ostream& out, const annotation_t& annotations) const {$/;"	f	class:vg::DiagramExplainer
write_graph	transcriptome.cpp	/^void Transcriptome::write_graph(ostream * graph_ostream) const {$/;"	f	class:vg::Transcriptome
write_mapping	phase_unfolder.cpp	/^void PhaseUnfolder::write_mapping(const std::string& filename) const {$/;"	f	class:vg::PhaseUnfolder
write_node	explainer.cpp	/^void DiagramExplainer::write_node(std::ostream& out, const std::string& id, const annotation_t& annotations) const {$/;"	f	class:vg::DiagramExplainer
write_output	readfilter.hpp	/^    bool write_output = true;$/;"	m	class:vg::ReadFilter
write_supports	genotypekit.cpp	/^void SupportAugmentedGraph::write_supports(ostream& out_file) {$/;"	f	class:vg::SupportAugmentedGraph
write_transcript_info	transcriptome.cpp	/^void Transcriptome::write_transcript_info(ostream * tsv_ostream, const gbwt::GBWT & haplotype_index, const bool exclude_reference_transcripts) const {$/;"	f	class:vg::Transcriptome
write_transcript_sequences	transcriptome.cpp	/^void Transcriptome::write_transcript_sequences(ostream * fasta_ostream, const bool exclude_reference_transcripts) const {$/;"	f	class:vg::Transcriptome
write_translations	genotypekit.cpp	/^void AugmentedGraph::write_translations(ostream& out_file) {$/;"	f	class:vg::AugmentedGraph
write_tsv	readfilter.hpp	/^    bool write_tsv = false;$/;"	m	class:vg::ReadFilter
write_variants	graph_caller.cpp	/^void VCFOutputCaller::write_variants(ostream& out_stream, const SnarlManager* snarl_manager) {$/;"	f	class:vg::VCFOutputCaller
write_vcf_header	genotyper.cpp	/^void Genotyper::write_vcf_header(std::ostream& stream, const std::string& sample_name, const std::string& contig_name, size_t contig_size) {$/;"	f	class:vg::Genotyper
write_w_line	gfa.cpp	/^void write_w_line(const PathHandleGraph* graph, ostream& out, path_handle_t path_handle, unordered_map<tuple<string, int64_t, string>, size_t>& fake_subrange_end) {$/;"	f	namespace:vg
wrong_name	readfilter.hpp	/^    enum FilterName { read = 0, wrong_name, wrong_refpos, excluded_feature, min_score, min_sec_score, max_overhang,$/;"	e	enum:vg::Counts::FilterName
wrong_refpos	readfilter.hpp	/^    enum FilterName { read = 0, wrong_name, wrong_refpos, excluded_feature, min_score, min_sec_score, max_overhang,$/;"	e	enum:vg::Counts::FilterName
xdrops	aligner.hpp	/^        vector<QualAdjXdropAligner> xdrops;$/;"	m	class:vg::QualAdjAligner
xdrops	aligner.hpp	/^        vector<XdropAligner> xdrops;$/;"	m	class:vg::Aligner
xg_index_size	index_registry.cpp	/^size_t xg_index_size(const xg::XG& index) {$/;"	f	namespace:vg
xgidx	viz.hpp	/^    PathHandleGraph* xgidx = nullptr;$/;"	m	class:vg::Viz
xindex	mapper.hpp	/^    PathPositionHandleGraph* xindex = nullptr;$/;"	m	class:vg::BaseMapper
yens_k_widest_paths	algorithms/k_widest_paths.cpp	/^vector<pair<double, vector<handle_t>>> yens_k_widest_paths(const HandleGraph* g, handle_t source, handle_t sink,$/;"	f	namespace:vg::algorithms
zip_alignments	multipath_alignment_graph.cpp	/^    pair<path_t, int32_t> MultipathAlignmentGraph::zip_alignments(vector<pair<path_t, int32_t>>& alt_alns, bool from_left,$/;"	f	class:vg::MultipathAlignmentGraph
zstdutil	zstdutil.cpp	/^namespace zstdutil {$/;"	n	file:
zstdutil	zstdutil.hpp	/^namespace zstdutil {$/;"	n
~AlignmentChainModelVertex	mapper.hpp	/^    virtual ~AlignmentChainModelVertex() { }                     \/\/ Destructor$/;"	f	class:vg::AlignmentChainModelVertex
~AltTracebackStack	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::AltTracebackStack::~AltTracebackStack() {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack
~BABuilder	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::BABuilder::~BABuilder() {$/;"	f	class:vg::BandedGlobalAligner::BABuilder
~BAMatrix	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::BAMatrix::~BAMatrix() {$/;"	f	class:vg::BandedGlobalAligner::BAMatrix
~BandedGlobalAligner	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::~BandedGlobalAligner() {$/;"	f	class:vg::BandedGlobalAligner
~CachedPackedTraversalSupportFinder	traversal_support.cpp	/^CachedPackedTraversalSupportFinder::~CachedPackedTraversalSupportFinder() {$/;"	f	class:vg::CachedPackedTraversalSupportFinder
~Colors	colors.hpp	/^    ~Colors(void) { };$/;"	f	class:vg::Colors
~CompletedTranscriptPath	transcriptome.hpp	/^    ~CompletedTranscriptPath() {};$/;"	f	struct:vg::CompletedTranscriptPath
~DPScoreComparator	cluster.hpp	/^    ~DPScoreComparator() {}$/;"	f	struct:vg::MEMClusterer::DPScoreComparator
~Deconstructor	deconstructor.cpp	/^Deconstructor::~Deconstructor(){$/;"	f	class:vg::Deconstructor
~Deflection	banded_global_aligner.cpp	/^BandedGlobalAligner<IntType>::AltTracebackStack::Deflection::~Deflection() {$/;"	f	class:vg::BandedGlobalAligner::AltTracebackStack::Deflection
~DiagramExplainer	explainer.cpp	/^DiagramExplainer::~DiagramExplainer() {$/;"	f	class:vg::DiagramExplainer
~EditedTranscriptPath	transcriptome.hpp	/^    ~EditedTranscriptPath() {};$/;"	f	struct:vg::EditedTranscriptPath
~ExhaustiveTraversalFinder	traversal_finder.cpp	/^ExhaustiveTraversalFinder::~ExhaustiveTraversalFinder() {$/;"	f	class:vg::ExhaustiveTraversalFinder
~Explainer	explainer.cpp	/^Explainer::~Explainer() {$/;"	f	class:vg::Explainer
~Filter	filter.cpp	/^    Filter::~Filter(){$/;"	f	class:vg::Filter
~FlowCaller	graph_caller.cpp	/^FlowCaller::~FlowCaller() {$/;"	f	class:vg::FlowCaller
~FragmentLengthDistribution	mapper.cpp	/^FragmentLengthDistribution::~FragmentLengthDistribution() {$/;"	f	class:vg::FragmentLengthDistribution
~GAFOutputCaller	graph_caller.cpp	/^GAFOutputCaller::~GAFOutputCaller() {$/;"	f	class:vg::GAFOutputCaller
~GBWTTraversalFinder	traversal_finder.cpp	/^GBWTTraversalFinder::~GBWTTraversalFinder() {$/;"	f	class:vg::GBWTTraversalFinder
~GSSWAligner	aligner.cpp	/^GSSWAligner::~GSSWAligner(void) {$/;"	f	class:vg::GSSWAligner
~GraphCaller	graph_caller.cpp	/^GraphCaller::~GraphCaller() {$/;"	f	class:vg::GraphCaller
~HTSWriter	hts_alignment_emitter.cpp	/^HTSWriter::~HTSWriter() {$/;"	f	class:vg::HTSWriter
~Handler	utility.cpp	/^    ~Handler() {$/;"	f	struct:vg::temp_file::Handler
~Haplotype	phased_genome.cpp	/^    PhasedGenome::Haplotype::~Haplotype() {$/;"	f	class:vg::PhasedGenome::Haplotype
~HaplotypeNode	phased_genome.cpp	/^    PhasedGenome::HaplotypeNode::~HaplotypeNode() {$/;"	f	class:vg::PhasedGenome::HaplotypeNode
~IncrementalSubgraph	incremental_subgraph.cpp	/^IncrementalSubgraph::~IncrementalSubgraph() {$/;"	f	class:vg::IncrementalSubgraph
~IndexRegistry	index_registry.cpp	/^IndexRegistry::~IndexRegistry() {$/;"	f	class:vg::IndexRegistry
~JSONStreamHelper	io/json_stream_helper.hpp	/^inline JSONStreamHelper<T>::~JSONStreamHelper() {$/;"	f	class:vg::io::JSONStreamHelper
~LegacyCaller	graph_caller.cpp	/^LegacyCaller::~LegacyCaller() {$/;"	f	class:vg::LegacyCaller
~MCMCCaller	mcmc_caller.cpp	/^    MCMCCaller:: ~MCMCCaller(){$/;"	f	class:vg::MCMCCaller
~MEMChainModelVertex	cluster.hpp	/^    virtual ~MEMChainModelVertex() { }                     \/\/ Destructor$/;"	f	class:vg::MEMChainModelVertex
~MSAConverter	msa_converter.cpp	/^    MSAConverter::~MSAConverter() {$/;"	f	class:vg::MSAConverter
~Mapper	mapper.cpp	/^Mapper::~Mapper(void) {$/;"	f	class:vg::Mapper
~MultipathAlignmentEmitter	multipath_alignment_emitter.cpp	/^MultipathAlignmentEmitter::~MultipathAlignmentEmitter() {$/;"	f	class:vg::MultipathAlignmentEmitter
~MultipathAlignmentGraph	multipath_alignment_graph.cpp	/^    MultipathAlignmentGraph::~MultipathAlignmentGraph() {$/;"	f	class:vg::MultipathAlignmentGraph
~MultipathMapper	multipath_mapper.cpp	/^    MultipathMapper::~MultipathMapper() {$/;"	f	class:vg::MultipathMapper
~NestedCachedPackedTraversalSupportFinder	traversal_support.cpp	/^NestedCachedPackedTraversalSupportFinder::~NestedCachedPackedTraversalSupportFinder() {$/;"	f	class:vg::NestedCachedPackedTraversalSupportFinder
~NestedFlowCaller	graph_caller.cpp	/^NestedFlowCaller::~NestedFlowCaller() {$/;"	f	class:vg::NestedFlowCaller
~PackedTraversalSupportFinder	traversal_support.cpp	/^PackedTraversalSupportFinder::~PackedTraversalSupportFinder() {$/;"	f	class:vg::PackedTraversalSupportFinder
~Packer	packer.cpp	/^Packer::~Packer() {$/;"	f	class:vg::Packer
~PathChunker	chunker.cpp	/^PathChunker::~PathChunker() {$/;"	f	class:vg::PathChunker
~PathRestrictedTraversalFinder	traversal_finder.cpp	/^PathRestrictedTraversalFinder::~PathRestrictedTraversalFinder() {$/;"	f	class:vg::PathRestrictedTraversalFinder
~PathSubgraphOverlay	subgraph_overlay.cpp	/^PathSubgraphOverlay::~PathSubgraphOverlay() {$/;"	f	class:vg::PathSubgraphOverlay
~PhasedGenome	phased_genome.cpp	/^    PhasedGenome::~PhasedGenome() {$/;"	f	class:vg::PhasedGenome
~Pictographs	pictographs.hpp	/^    ~Pictographs(void) { };$/;"	f	class:vg::Pictographs
~PoissonSupportSnarlCaller	snarl_caller.cpp	/^PoissonSupportSnarlCaller::~PoissonSupportSnarlCaller() {$/;"	f	class:vg::PoissonSupportSnarlCaller
~ProblemDumpExplainer	explainer.cpp	/^ProblemDumpExplainer::~ProblemDumpExplainer() {$/;"	f	class:vg::ProblemDumpExplainer
~QualAdjAligner	aligner.cpp	/^QualAdjAligner::~QualAdjAligner() {$/;"	f	class:vg::QualAdjAligner
~QualAdjXdropAligner	qual_adj_xdrop_aligner.cpp	/^QualAdjXdropAligner::~QualAdjXdropAligner(void)$/;"	f	class:QualAdjXdropAligner
~RatioSupportSnarlCaller	snarl_caller.cpp	/^RatioSupportSnarlCaller::~RatioSupportSnarlCaller() {$/;"	f	class:vg::RatioSupportSnarlCaller
~ReadRestrictedTraversalFinder	traversal_finder.cpp	/^ReadRestrictedTraversalFinder::~ReadRestrictedTraversalFinder() {$/;"	f	class:vg::ReadRestrictedTraversalFinder
~SSWAligner	ssw_aligner.hpp	/^    ~SSWAligner(void) { }$/;"	f	class:vg::SSWAligner
~SimpleConsistencyCalculator	genotypekit.cpp	/^SimpleConsistencyCalculator::~SimpleConsistencyCalculator(){$/;"	f	class:vg::SimpleConsistencyCalculator
~SimpleTraversalSupportCalculator	genotypekit.cpp	/^SimpleTraversalSupportCalculator::~SimpleTraversalSupportCalculator(){$/;"	f	class:vg::SimpleTraversalSupportCalculator
~SmallBitset	small_bitset.hpp	/^        ~SmallBitset() {$/;"	f	class:vg::SmallBitset
~SnarlCaller	snarl_caller.cpp	/^SnarlCaller::~SnarlCaller() {$/;"	f	class:vg::SnarlCaller
~SparseUnionFind	sparse_union_find.cpp	/^    SparseUnionFind::~SparseUnionFind(){$/;"	f	class:vg::SparseUnionFind
~SubgraphOverlay	subgraph_overlay.cpp	/^SubgraphOverlay::~SubgraphOverlay() {$/;"	f	class:vg::SubgraphOverlay
~SupportBasedSnarlCaller	snarl_caller.cpp	/^SupportBasedSnarlCaller::~SupportBasedSnarlCaller() {$/;"	f	class:vg::SupportBasedSnarlCaller
~SupportRestrictedTraversalFinder	traversal_finder.cpp	/^SupportRestrictedTraversalFinder::~SupportRestrictedTraversalFinder() {}$/;"	f	class:vg::SupportRestrictedTraversalFinder
~TranscriptPath	transcriptome.hpp	/^    virtual ~TranscriptPath() {};$/;"	f	struct:vg::TranscriptPath
~TraversalSupportFinder	traversal_support.cpp	/^TraversalSupportFinder::~TraversalSupportFinder() {$/;"	f	class:vg::TraversalSupportFinder
~Tree	utility.hpp	/^    ~Tree() { delete root; }$/;"	f	struct:vg::Tree
~TreeNode	utility.hpp	/^    ~TreeNode() { for (auto c : children) { delete c; } }$/;"	f	struct:vg::TreeNode
~VCFGenotyper	graph_caller.cpp	/^VCFGenotyper::~VCFGenotyper() {$/;"	f	class:vg::VCFGenotyper
~VCFOutputCaller	graph_caller.cpp	/^VCFOutputCaller::~VCFOutputCaller() {$/;"	f	class:vg::VCFOutputCaller
~VCFTraversalFinder	traversal_finder.cpp	/^VCFTraversalFinder::~VCFTraversalFinder() {$/;"	f	class:vg::VCFTraversalFinder
~VG	vg.cpp	/^VG::~VG(void) {$/;"	f	class:vg::VG
~Vectorizer	vectorizer.cpp	/^Vectorizer::~Vectorizer(){$/;"	f	class:Vectorizer
~Viz	viz.hpp	/^    ~Viz(void) { close(); }$/;"	f	class:vg::Viz
~Watchdog	watchdog.cpp	/^Watchdog::~Watchdog() {$/;"	f	class:vg::Watchdog
~XdropAligner	xdrop_aligner.cpp	/^XdropAligner::~XdropAligner(void)$/;"	f	class:XdropAligner
~haplo_DP_column	haplotypes.cpp	/^haplo_DP_column::~haplo_DP_column() {$/;"	f	class:haplo::haplo_DP_column
~iterator	phased_genome.cpp	/^    PhasedGenome::iterator::~iterator() {$/;"	f	class:vg::PhasedGenome::iterator
~linear_haplo_structure	haplotypes.cpp	/^linear_haplo_structure::~linear_haplo_structure() {$/;"	f	class:haplo::linear_haplo_structure
~multipath_alignment_t	multipath_alignment.cpp	/^    multipath_alignment_t::~multipath_alignment_t() {$/;"	f	class:vg::multipath_alignment_t
